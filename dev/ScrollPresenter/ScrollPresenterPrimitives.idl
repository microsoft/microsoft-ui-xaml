namespace MU_XCP_NAMESPACE
{

#ifdef ApplicableRangeType
[MUX_PREVIEW]
[webhosthidden]
enum SnapPointApplicableRangeType
{
    Mandatory = 0,
    Optional = 1,
};
#endif

[MUX_PREVIEW]
[webhosthidden]
enum ScrollSnapPointsAlignment
{
    Near = 0,
    Center = 1,
    Far = 2,
};

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass SnapPointBase
// All composable classes must derrive from a Windows base class to pass WACK.
: Windows.UI.Xaml.DependencyObject
{
#ifdef ApplicableRangeType
    Double ApplicableRange { get; };
#endif
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ScrollSnapPointBase
    : SnapPointBase
{
    ScrollSnapPointsAlignment Alignment { get; };
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ScrollSnapPoint
    : ScrollSnapPointBase
{
    ScrollSnapPoint(
        Double snapPointValue,
        ScrollSnapPointsAlignment alignment);
#ifdef ApplicableRangeType
    ScrollSnapPoint(
        Double snapPointValue,
        Double applicableRange,
        ScrollSnapPointsAlignment alignment);
#endif

    Double Value { get; };
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass RepeatedScrollSnapPoint
    : ScrollSnapPointBase
{
    RepeatedScrollSnapPoint(
        Double offset,
        Double interval,
        Double start,
        Double end,
        ScrollSnapPointsAlignment alignment);
#ifdef ApplicableRangeType
    RepeatedScrollSnapPoint(
        Double offset,
        Double interval,
        Double start,
        Double end,
        Double applicableRange,
        ScrollSnapPointsAlignment alignment);
#endif

    Double Offset { get; };
    Double Interval { get; };
    Double Start { get; };
    Double End { get; };
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ZoomSnapPointBase
    : SnapPointBase
{
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ZoomSnapPoint
    : ZoomSnapPointBase
{
    ZoomSnapPoint(
        Double snapPointValue);
#ifdef ApplicableRangeType
    ZoomSnapPoint(
        Double snapPointValue,
        Double applicableRange);
#endif

    Double Value { get; };
}

[MUX_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass RepeatedZoomSnapPoint
    : ZoomSnapPointBase
{
    RepeatedZoomSnapPoint(
        Double offset,
        Double interval,
        Double start,
        Double end);
#ifdef ApplicableRangeType
    RepeatedZoomSnapPoint(
        Double offset,
        Double interval,
        Double start,
        Double end,
        Double applicableRange);
#endif

    Double Offset { get; };
    Double Interval { get; };
    Double Start { get; };
    Double End { get; };
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerScrollToRequestedEventArgs
{
    ScrollControllerScrollToRequestedEventArgs(Double offset, MU_XC_NAMESPACE.ScrollingScrollOptions options);

    Double Offset { get; };
    MU_XC_NAMESPACE.ScrollingScrollOptions Options { get; };
    Int32 CorrelationId { get; set; };
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerScrollByRequestedEventArgs
{
    ScrollControllerScrollByRequestedEventArgs(Double offsetDelta, MU_XC_NAMESPACE.ScrollingScrollOptions options);

    Double OffsetDelta { get; };
    MU_XC_NAMESPACE.ScrollingScrollOptions Options { get; };
    Int32 CorrelationId { get; set; };
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerAddScrollVelocityRequestedEventArgs
{
    ScrollControllerAddScrollVelocityRequestedEventArgs(Single offsetVelocity, Windows.Foundation.IReference<Single> inertiaDecayRate);

    Single OffsetVelocity { get; };
    Windows.Foundation.IReference<Single> InertiaDecayRate { get; };
    Int32 CorrelationId { get; set; };
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerInteractionRequestedEventArgs
{
    ScrollControllerInteractionRequestedEventArgs(Windows.UI.Input.PointerPoint pointerPoint);

    Windows.UI.Input.PointerPoint PointerPoint { get; };
    Boolean Handled { get; set; };
}

[MUX_PREVIEW]
[webhosthidden]
interface IScrollController
{
    Boolean AreScrollControllerInteractionsAllowed { get; };
    Boolean AreScrollerInteractionsAllowed { get; };
    Boolean IsInteracting { get; };
    Boolean IsInteractionElementRailEnabled { get; };
    Windows.UI.Xaml.UIElement InteractionElement { get; };
    Windows.UI.Xaml.Controls.Orientation InteractionElementScrollOrientation { get; };
    void SetExpressionAnimationSources(Windows.UI.Composition.CompositionPropertySet propertySet, String minOffsetPropertyName, String maxOffsetPropertyName, String offsetPropertyName, String multiplierPropertyName);
    void SetScrollMode(MU_XC_NAMESPACE.ScrollingScrollMode scrollMode);
    void SetValues(Double minOffset, Double maxOffset, Double offset, Double viewport);
    Windows.UI.Composition.CompositionAnimation GetScrollAnimation(Int32 correlationId, Windows.Foundation.Numerics.Vector2 currentPosition, Windows.UI.Composition.CompositionAnimation defaultAnimation);
    void NotifyScrollCompleted(Int32 correlationId);
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollToRequestedEventArgs> ScrollToRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerScrollByRequestedEventArgs> ScrollByRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs> AddScrollVelocityRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, Object> InteractionInfoChanged;
}

[MUX_PREVIEW]
[webhosthidden]
[contentproperty("Content")]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass ScrollPresenter :
    Windows.UI.Xaml.FrameworkElement,
    Windows.UI.Xaml.Controls.IScrollAnchorProvider
{
    ScrollPresenter();

    Windows.UI.Xaml.Media.Brush Background { get; set; };
    Windows.UI.Xaml.UIElement Content { get; set; };
    Windows.UI.Composition.CompositionPropertySet ExpressionAnimationSources { get; };
    Double HorizontalOffset { get; };
    Double VerticalOffset { get; };
    Single ZoomFactor { get; };
    Double ExtentWidth { get; };
    Double ExtentHeight { get; };
    Double ViewportWidth { get; };
    Double ViewportHeight { get; };
    Double ScrollableWidth { get; };
    Double ScrollableHeight { get; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultContentOrientation")]
    MU_XC_NAMESPACE.ScrollingContentOrientation ContentOrientation { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultHorizontalScrollChainMode")]
    MU_XC_NAMESPACE.ScrollingChainMode HorizontalScrollChainMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultVerticalScrollChainMode")]
    MU_XC_NAMESPACE.ScrollingChainMode VerticalScrollChainMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultHorizontalScrollRailMode")]
    MU_XC_NAMESPACE.ScrollingRailMode HorizontalScrollRailMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultVerticalScrollRailMode")]
    MU_XC_NAMESPACE.ScrollingRailMode VerticalScrollRailMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultHorizontalScrollMode")]
    MU_XC_NAMESPACE.ScrollingScrollMode HorizontalScrollMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultVerticalScrollMode")]
    MU_XC_NAMESPACE.ScrollingScrollMode VerticalScrollMode { get; set; };
#ifdef USE_SCROLLMODE_AUTO
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultComputedHorizontalScrollMode")]
    MU_XC_NAMESPACE.ScrollingScrollMode ComputedHorizontalScrollMode { get; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultComputedVerticalScrollMode")]
    MU_XC_NAMESPACE.ScrollingScrollMode ComputedVerticalScrollMode { get; };
#endif
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultZoomChainMode")]
    MU_XC_NAMESPACE.ScrollingChainMode ZoomChainMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultZoomMode")]
    MU_XC_NAMESPACE.ScrollingZoomMode ZoomMode { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultIgnoredInputKinds")]
    MU_XC_NAMESPACE.ScrollingInputKinds IgnoredInputKinds { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultMinZoomFactor")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateZoomFactoryBoundary")]
    Double MinZoomFactor { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultMaxZoomFactor")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateZoomFactoryBoundary")]
    Double MaxZoomFactor { get; set; };
    MU_XC_NAMESPACE.ScrollingInteractionState State { get; };
    IScrollController HorizontalScrollController { get; set; };
    IScrollController VerticalScrollController { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultAnchorRatio")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateAnchorRatio")]
    Double HorizontalAnchorRatio { get; set; };
    [MUX_DEFAULT_VALUE("ScrollPresenter::s_defaultAnchorRatio")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateAnchorRatio")]
    Double VerticalAnchorRatio { get; set; };
    Windows.Foundation.Collections.IVector<ScrollSnapPointBase> HorizontalSnapPoints { get; };
    Windows.Foundation.Collections.IVector<ScrollSnapPointBase> VerticalSnapPoints { get; };
    Windows.Foundation.Collections.IVector<ZoomSnapPointBase> ZoomSnapPoints { get; };
    [method_name("ScrollTo")]
    Int32 ScrollTo(
        Double horizontalOffset,
        Double verticalOffset);
    [method_name("ScrollToWithOptions")]
    Int32 ScrollTo(
        Double horizontalOffset,
        Double verticalOffset,
        MU_XC_NAMESPACE.ScrollingScrollOptions options);
    [method_name("ScrollBy")]
    Int32 ScrollBy(
        Double horizontalOffsetDelta,
        Double verticalOffsetDelta);
    [method_name("ScrollByWithOptions")]
    Int32 ScrollBy(
        Double horizontalOffsetDelta,
        Double verticalOffsetDelta,
        MU_XC_NAMESPACE.ScrollingScrollOptions options);
    Int32 AddScrollVelocity(
        Windows.Foundation.Numerics.Vector2 offsetsVelocity,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> inertiaDecayRate);
    [method_name("ZoomTo")]
    Int32 ZoomTo(
        Single zoomFactor,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);
    [method_name("ZoomToWithOptions")]
    Int32 ZoomTo(
        Single zoomFactor,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,
        MU_XC_NAMESPACE.ScrollingZoomOptions options);
    [method_name("ZoomBy")]
    Int32 ZoomBy(
        Single zoomFactorDelta,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint);
    [method_name("ZoomByWithOptions")]
    Int32 ZoomBy(
        Single zoomFactorDelta,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,
        MU_XC_NAMESPACE.ScrollingZoomOptions options);
    Int32 AddZoomVelocity(
        Single zoomFactorVelocity,
        Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> centerPoint,
        Windows.Foundation.IReference<Single> inertiaDecayRate);

    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> ExtentChanged;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> StateChanged;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, Object> ViewChanged;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingScrollAnimationStartingEventArgs> ScrollAnimationStarting;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingZoomAnimationStartingEventArgs> ZoomAnimationStarting;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingScrollCompletedEventArgs> ScrollCompleted;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingZoomCompletedEventArgs> ZoomCompleted;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingBringingIntoViewEventArgs> BringingIntoView;
    event Windows.Foundation.TypedEventHandler<ScrollPresenter, MU_XC_NAMESPACE.ScrollingAnchorRequestedEventArgs> AnchorRequested;

    static Windows.UI.Xaml.DependencyProperty BackgroundProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ContentProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ContentOrientationProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollChainModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollChainModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollRailModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollRailModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollModeProperty { get; };
#ifdef USE_SCROLLMODE_AUTO
    static Windows.UI.Xaml.DependencyProperty ComputedHorizontalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ComputedVerticalScrollModeProperty { get; };
#endif
    static Windows.UI.Xaml.DependencyProperty ZoomChainModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ZoomModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty IgnoredInputKindsProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinZoomFactorProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MaxZoomFactorProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; };
}

}
