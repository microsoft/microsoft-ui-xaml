// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "AnimatedIcon.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(AnimatedIcon)
}

#include "AnimatedIcon.g.cpp"

GlobalDependencyProperty AnimatedIconProperties::s_FallbackIconSourceProperty{ nullptr };
GlobalDependencyProperty AnimatedIconProperties::s_MirroredWhenRightToLeftProperty{ nullptr };
GlobalDependencyProperty AnimatedIconProperties::s_SourceProperty{ nullptr };
GlobalDependencyProperty AnimatedIconProperties::s_StateProperty{ nullptr };

AnimatedIconProperties::AnimatedIconProperties()
{
    EnsureProperties();
}

void AnimatedIconProperties::EnsureProperties()
{
    if (!s_FallbackIconSourceProperty)
    {
        s_FallbackIconSourceProperty =
            InitializeDependencyProperty(
                L"FallbackIconSource",
                winrt::name_of<winrt::IconSource>(),
                winrt::name_of<winrt::AnimatedIcon>(),
                false /* isAttached */,
                ValueHelper<winrt::IconSource>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnFallbackIconSourcePropertyChanged));
    }
    if (!s_MirroredWhenRightToLeftProperty)
    {
        s_MirroredWhenRightToLeftProperty =
            InitializeDependencyProperty(
                L"MirroredWhenRightToLeft",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::AnimatedIcon>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMirroredWhenRightToLeftPropertyChanged));
    }
    if (!s_SourceProperty)
    {
        s_SourceProperty =
            InitializeDependencyProperty(
                L"Source",
                winrt::name_of<winrt::IAnimatedVisualSource2>(),
                winrt::name_of<winrt::AnimatedIcon>(),
                false /* isAttached */,
                ValueHelper<winrt::IAnimatedVisualSource2>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSourcePropertyChanged));
    }
    if (!s_StateProperty)
    {
        s_StateProperty =
            InitializeDependencyProperty(
                L"State",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::AnimatedIcon>(),
                true /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                &AnimatedIcon::OnAnimatedIconStatePropertyChanged);
    }
}

void AnimatedIconProperties::ClearProperties()
{
    s_FallbackIconSourceProperty = nullptr;
    s_MirroredWhenRightToLeftProperty = nullptr;
    s_SourceProperty = nullptr;
    s_StateProperty = nullptr;
}

void AnimatedIconProperties::OnFallbackIconSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnimatedIcon>();
    winrt::get_self<AnimatedIcon>(owner)->OnFallbackIconSourcePropertyChanged(args);
}

void AnimatedIconProperties::OnMirroredWhenRightToLeftPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnimatedIcon>();
    winrt::get_self<AnimatedIcon>(owner)->OnMirroredWhenRightToLeftPropertyChanged(args);
}

void AnimatedIconProperties::OnSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnimatedIcon>();
    winrt::get_self<AnimatedIcon>(owner)->OnSourcePropertyChanged(args);
}

void AnimatedIconProperties::FallbackIconSource(winrt::IconSource const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnimatedIcon*>(this)->SetValue(s_FallbackIconSourceProperty, ValueHelper<winrt::IconSource>::BoxValueIfNecessary(value));
    }
}

winrt::IconSource AnimatedIconProperties::FallbackIconSource()
{
    return ValueHelper<winrt::IconSource>::CastOrUnbox(static_cast<AnimatedIcon*>(this)->GetValue(s_FallbackIconSourceProperty));
}

void AnimatedIconProperties::MirroredWhenRightToLeft(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnimatedIcon*>(this)->SetValue(s_MirroredWhenRightToLeftProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool AnimatedIconProperties::MirroredWhenRightToLeft()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<AnimatedIcon*>(this)->GetValue(s_MirroredWhenRightToLeftProperty));
}

void AnimatedIconProperties::Source(winrt::IAnimatedVisualSource2 const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnimatedIcon*>(this)->SetValue(s_SourceProperty, ValueHelper<winrt::IAnimatedVisualSource2>::BoxValueIfNecessary(value));
    }
}

winrt::IAnimatedVisualSource2 AnimatedIconProperties::Source()
{
    return ValueHelper<winrt::IAnimatedVisualSource2>::CastOrUnbox(static_cast<AnimatedIcon*>(this)->GetValue(s_SourceProperty));
}


void AnimatedIconProperties::SetState(winrt::DependencyObject const& target, winrt::hstring const& value)
{
    target.SetValue(s_StateProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring AnimatedIconProperties::GetState(winrt::DependencyObject const& target)
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(target.GetValue(s_StateProperty));
}
