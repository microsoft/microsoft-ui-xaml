// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItemPresenter.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(NavigationViewItemPresenter)
}

#include "NavigationViewItemPresenter.g.cpp"

GlobalDependencyProperty NavigationViewItemPresenterProperties::s_IconProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemPresenterProperties::s_TemplateSettingsProperty{ nullptr };

NavigationViewItemPresenterProperties::NavigationViewItemPresenterProperties()
{
    EnsureProperties();
}

void NavigationViewItemPresenterProperties::EnsureProperties()
{
    if (!s_IconProperty)
    {
        s_IconProperty =
            InitializeDependencyProperty(
                L"Icon",
                winrt::name_of<winrt::IconElement>(),
                winrt::name_of<winrt::NavigationViewItemPresenter>(),
                false /* isAttached */,
                ValueHelper<winrt::IconElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TemplateSettingsProperty)
    {
        s_TemplateSettingsProperty =
            InitializeDependencyProperty(
                L"TemplateSettings",
                winrt::name_of<winrt::NavigationViewItemPresenterTemplateSettings>(),
                winrt::name_of<winrt::NavigationViewItemPresenter>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewItemPresenterTemplateSettings>::BoxedDefaultValue(),
                nullptr);
    }
}

void NavigationViewItemPresenterProperties::ClearProperties()
{
    s_IconProperty = nullptr;
    s_TemplateSettingsProperty = nullptr;
}

void NavigationViewItemPresenterProperties::Icon(winrt::IconElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationViewItemPresenter*>(this)->SetValue(s_IconProperty, ValueHelper<winrt::IconElement>::BoxValueIfNecessary(value));
    }
}

winrt::IconElement NavigationViewItemPresenterProperties::Icon()
{
    return ValueHelper<winrt::IconElement>::CastOrUnbox(static_cast<NavigationViewItemPresenter*>(this)->GetValue(s_IconProperty));
}

void NavigationViewItemPresenterProperties::TemplateSettings(winrt::NavigationViewItemPresenterTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationViewItemPresenter*>(this)->SetValue(s_TemplateSettingsProperty, ValueHelper<winrt::NavigationViewItemPresenterTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewItemPresenterTemplateSettings NavigationViewItemPresenterProperties::TemplateSettings()
{
    return ValueHelper<winrt::NavigationViewItemPresenterTemplateSettings>::CastOrUnbox(static_cast<NavigationViewItemPresenter*>(this)->GetValue(s_TemplateSettingsProperty));
}
