// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "Expander.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(Expander)
}

#include "Expander.g.cpp"

GlobalDependencyProperty ExpanderProperties::s_ExpandDirectionProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_HeaderTemplateProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_HeaderTemplateSelectorProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_IsExpandedProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_TemplateSettingsProperty{ nullptr };

ExpanderProperties::ExpanderProperties()
    : m_collapsedEventSource{static_cast<Expander*>(this)}
    , m_expandingEventSource{static_cast<Expander*>(this)}
{
    EnsureProperties();
}

void ExpanderProperties::EnsureProperties()
{
    if (!s_ExpandDirectionProperty)
    {
        s_ExpandDirectionProperty =
            InitializeDependencyProperty(
                L"ExpandDirection",
                winrt::name_of<winrt::ExpandDirection>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::ExpandDirection>::BoxValueIfNecessary(winrt::ExpandDirection::Down),
                winrt::PropertyChangedCallback(&OnExpandDirectionPropertyChanged));
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_HeaderTemplateProperty)
    {
        s_HeaderTemplateProperty =
            InitializeDependencyProperty(
                L"HeaderTemplate",
                winrt::name_of<winrt::DataTemplate>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplate>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_HeaderTemplateSelectorProperty)
    {
        s_HeaderTemplateSelectorProperty =
            InitializeDependencyProperty(
                L"HeaderTemplateSelector",
                winrt::name_of<winrt::DataTemplateSelector>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplateSelector>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsExpandedProperty)
    {
        s_IsExpandedProperty =
            InitializeDependencyProperty(
                L"IsExpanded",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIsExpandedPropertyChanged));
    }
    if (!s_TemplateSettingsProperty)
    {
        s_TemplateSettingsProperty =
            InitializeDependencyProperty(
                L"TemplateSettings",
                winrt::name_of<winrt::ExpanderTemplateSettings>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::ExpanderTemplateSettings>::BoxedDefaultValue(),
                nullptr);
    }
}

void ExpanderProperties::ClearProperties()
{
    s_ExpandDirectionProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_HeaderTemplateProperty = nullptr;
    s_HeaderTemplateSelectorProperty = nullptr;
    s_IsExpandedProperty = nullptr;
    s_TemplateSettingsProperty = nullptr;
}

void ExpanderProperties::OnExpandDirectionPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::Expander>();
    winrt::get_self<Expander>(owner)->OnExpandDirectionPropertyChanged(args);
}

void ExpanderProperties::OnIsExpandedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::Expander>();
    winrt::get_self<Expander>(owner)->OnIsExpandedPropertyChanged(args);
}

void ExpanderProperties::ExpandDirection(winrt::ExpandDirection const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_ExpandDirectionProperty, ValueHelper<winrt::ExpandDirection>::BoxValueIfNecessary(value));
    }
}

winrt::ExpandDirection ExpanderProperties::ExpandDirection()
{
    return ValueHelper<winrt::ExpandDirection>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_ExpandDirectionProperty));
}

void ExpanderProperties::Header(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable ExpanderProperties::Header()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_HeaderProperty));
}

void ExpanderProperties::HeaderTemplate(winrt::DataTemplate const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_HeaderTemplateProperty, ValueHelper<winrt::DataTemplate>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplate ExpanderProperties::HeaderTemplate()
{
    return ValueHelper<winrt::DataTemplate>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_HeaderTemplateProperty));
}

void ExpanderProperties::HeaderTemplateSelector(winrt::DataTemplateSelector const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_HeaderTemplateSelectorProperty, ValueHelper<winrt::DataTemplateSelector>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplateSelector ExpanderProperties::HeaderTemplateSelector()
{
    return ValueHelper<winrt::DataTemplateSelector>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_HeaderTemplateSelectorProperty));
}

void ExpanderProperties::IsExpanded(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_IsExpandedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ExpanderProperties::IsExpanded()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_IsExpandedProperty));
}

void ExpanderProperties::TemplateSettings(winrt::ExpanderTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_TemplateSettingsProperty, ValueHelper<winrt::ExpanderTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::ExpanderTemplateSettings ExpanderProperties::TemplateSettings()
{
    return ValueHelper<winrt::ExpanderTemplateSettings>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_TemplateSettingsProperty));
}

winrt::event_token ExpanderProperties::Collapsed(winrt::TypedEventHandler<winrt::Expander, winrt::ExpanderCollapsedEventArgs> const& value)
{
    return m_collapsedEventSource.add(value);
}

void ExpanderProperties::Collapsed(winrt::event_token const& token)
{
    m_collapsedEventSource.remove(token);
}

winrt::event_token ExpanderProperties::Expanding(winrt::TypedEventHandler<winrt::Expander, winrt::ExpanderExpandingEventArgs> const& value)
{
    return m_expandingEventSource.add(value);
}

void ExpanderProperties::Expanding(winrt::event_token const& token)
{
    m_expandingEventSource.remove(token);
}
