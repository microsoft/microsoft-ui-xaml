// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "SymbolIconSource.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(SymbolIconSource)
}

#include "SymbolIconSource.g.cpp"

GlobalDependencyProperty SymbolIconSourceProperties::s_SymbolProperty{ nullptr };

SymbolIconSourceProperties::SymbolIconSourceProperties()
{
    EnsureProperties();
}

void SymbolIconSourceProperties::EnsureProperties()
{
    IconSource::EnsureProperties();
    if (!s_SymbolProperty)
    {
        s_SymbolProperty =
            InitializeDependencyProperty(
                L"Symbol",
                winrt::name_of<winrt::Symbol>(),
                winrt::name_of<winrt::SymbolIconSource>(),
                false /* isAttached */,
                ValueHelper<winrt::Symbol>::BoxValueIfNecessary(winrt::Symbol::Emoji),
                winrt::PropertyChangedCallback(&OnSymbolPropertyChanged));
    }
}

void SymbolIconSourceProperties::ClearProperties()
{
    s_SymbolProperty = nullptr;
    IconSource::ClearProperties();
}

void SymbolIconSourceProperties::OnSymbolPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::SymbolIconSource>();
    winrt::get_self<SymbolIconSource>(owner)->OnPropertyChanged(args);
}

void SymbolIconSourceProperties::Symbol(winrt::Symbol const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<SymbolIconSource*>(this)->SetValue(s_SymbolProperty, ValueHelper<winrt::Symbol>::BoxValueIfNecessary(value));
    }
}

winrt::Symbol SymbolIconSourceProperties::Symbol()
{
    return ValueHelper<winrt::Symbol>::CastOrUnbox(static_cast<SymbolIconSource*>(this)->GetValue(s_SymbolProperty));
}
