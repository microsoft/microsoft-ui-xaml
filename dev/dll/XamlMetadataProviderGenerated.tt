<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.InteropServices.WindowsRuntime" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cpp" #> 
<#@ include file="CommonHelpers.tt" #>
#include "pch.h"
#include "common.h"


#include "XamlMetadataProvider.h"
#include "XamlMetadataProviderGenerated.h"


#ifndef MUX_EXPERIMENTAL
#include "XamlControlsResources.h"
#else
#include "ExperimentalXamlControlsResources.h"
#endif

<#
    ClearIndent();
    string winmdPaths = Host.ResolveParameterValue(".", ".", "MetadataWinmdPaths");
    string referenceWinmds = Host.ResolveParameterValue(".", ".", "ReferenceWinmds");
    string typeHintWinmds = Host.ResolveParameterValue(".", ".", "TypeHintWinmds");

    // For debugging purposes
    // WriteLine(string.Format("winmdPath:{0}", winmdPaths));
    // WriteLine(string.Format("referenceWinmds:{0}", referenceWinmds));
    // WriteLine(string.Format("typeHintWinmds:{0}", typeHintWinmds));
    // System.Diagnostics.Debugger.Launch();

    WriteLine("//////////////////////////////////////////////////////////////");
    WriteLine("/// WARNING: Generated File: Please do not modify manually ///"); 
    WriteLine("//////////////////////////////////////////////////////////////");

    WriteLine("void XamlMetadataProviderGenerated::RegisterTypes()");
    StatementBlock(() =>
    {
        foreach (Type type in GetMetadataTypesFromList(winmdPaths, referenceWinmds, typeHintWinmds))
        {  
            if (GetCustomAttribute(type, "WebHostHiddenAttribute") == null && GetCustomAttribute(type, "ApiContractAttribute") == null)
            {
                throw new System.ArgumentException("WebHostHidden Tag missing on type: " + type);
            }

            RegisteredTypes.Add(GetInferedTypeName(type), type);
            RegisterXamlType(type, true /* exploreBaseAndProperties */ );
        }

        // The explicit casts to PCWSTR below ensures the compiler instantiate one template instead of multiple
        // templates for every string length. In other words, we want this template to be instantiated:
        // winrt::make<PrimitiveXamlType, PCWSTR>
        // Rather than this one:
        // winrt::make<PrimitiveXamlType,wchar_t const (& __ptr64)[N]> where N is the string length.
        // We also explicitly cast to std::function for similar reasons (avoid multiple template instantiations for
        // every lambda even if the signature is the same).

        WriteLine("// Register types encountered "); 
        foreach (var typeName in DiscoveredTypes.Keys.OrderBy(x=>x).Where(t =>
            !t.StartsWith("Nullable`1") // Ignore nullables
        ))
        {
            if (!RegisteredTypes.Keys.Contains(typeName))
            {
                var type = DiscoveredTypes[typeName];
                var winRtType = new WinRtType(type);

                if(winRtType.IsSystemType)
                {
                    WriteLine("XamlMetadataProvider::RegisterXamlType(");
                    WriteLine(string.Format("    L\"{0}\",", typeName));
                    WriteLine(string.Format("    []() {{ return winrt::make<PrimitiveXamlType>((PCWSTR)L\"{0}\"); }});", typeName));
                }
                else
                {
                    RegisterXamlType(type, false /* exploreBaseAndProperties */ );
                }
            }
        }
    });
    WriteLine("");
#>



