<#+
    // Takes care of extracting names that are suitable for our codegen from a Winmd type.
    public class WinRtType
    {
        public string WinRtFullName;
        public string MetadataFullName;
        public string CppMetadataFullName { get { return AsCppName(MetadataFullName); } }
        public string CppWinRtName;
        public string CppNamespace;
        public string CppAbiName;
        public string CppAbiInterfaceName;
        public Type WinmdType;
        public WinRtType BaseWinRtType;
        public WinRtType[] GenericWinRtTypes;
        public WinRtType[] ListWinRtTypes;
        public WinRtType[] MapWinRtTypes;

        public bool IsValueType { get { return WinmdType.IsValueType; } }
        public bool IsList { get { return ListWinRtTypes != null; } }
        public bool IsMap { get { return MapWinRtTypes != null; } }
        public bool IsCollection { get { return IsList || IsMap; } }
        public bool IsSystemType { get { return WinmdType.IsPrimitive || 
                                    WinRtFullName == "Nullable`1" ||
                                    WinRtFullName == "hstring" || 
                                    WinmdType.FullName.StartsWith("Windows.UI.Xaml"); } }

        public WinRtType(Type winmdType)
        {
            if (winmdType.FullName == "System.Runtime.InteropServices.WindowsRuntime.RuntimeClass")
            {
                winmdType = typeof(object);
            }
            var baseType = winmdType.GetTypeInfo().BaseType;


            WinmdType = winmdType;
            BaseWinRtType = (baseType == null) ? null : new WinRtType(baseType);

            var winRtNamespace = MapToWinRtNamespace(winmdType);
            CppNamespace = winRtNamespace != null ? winRtNamespace.Replace(".", "::") : null;

            var winRtTypeName = MapToWinRtName(winmdType);
            CppAbiName = MapToAbiName(winmdType);
            CppAbiInterfaceName = MapToAbiInterfaceName(winmdType);
            var cppFullTypeName = (CppNamespace != null ? (CppNamespace + "::" ) : "") + winRtTypeName;
            WinRtFullName = string.Join(".", winRtNamespace, winRtTypeName).TrimStart('.');
            MetadataFullName = GetMetadataFullName(WinRtFullName);
            CppWinRtName = winmdType.IsPrimitive ? GetPrimitiveTypeName(winRtTypeName) : string.Format("winrt::{0}", cppFullTypeName);

            ListWinRtTypes = GetCollectionTypes(winmdType, typeof(IList<>));
            MapWinRtTypes = GetCollectionTypes(winmdType, typeof(IDictionary<,>));

            GenericWinRtTypes = GetGenericWinRtTypes(winmdType);
            if (GenericWinRtTypes != null)
            {
                CppWinRtName += "<" + string.Join(", ", GenericWinRtTypes.Select(t => t.CppWinRtName)) + ">";
                MetadataFullName += "<" + string.Join(",", GenericWinRtTypes.Select(t => t.MetadataFullName)) + ">";
            }
        }

        private static string MapToWinRtNamespace(Type winmdType)
        {
            var winrtNamespace = winmdType.Namespace;

            switch (winrtNamespace)
            {
                case "System":
                    winrtNamespace = null;
                    break;
                case "System.Collections.Generic":
                    winrtNamespace = "Windows.Foundation.Collections";
                    break;
            }

            return winrtNamespace;
        }

        private static string MapToWinRtName(Type winmdType)
        {
            var name = winmdType.Name;

            switch (name)
            {
                case "Object":
                    name = "IInspectable";
                    break;
                case "String":
                    name = "hstring";
                    break;
                case "IDictionary`2":
                    name = "IMap";
                    break;
                case "IList`1":
                    name = "IVector";
                    break;
                case "IObservableVector`1":
                    name = "IObservableVector";
                    break;
            }

            return name;
        }

        private static string MapToAbiName(Type winmdType)
        {
            var name = winmdType.Name;

            switch (name)
            {
                case "Object":
                    name = "IInspectable";
                    break;
                case "String":
                    name = "HSTRING";
                    break;
                case "IDictionary`2":
                    name = "IMap";
                    break;
                case "IList`1":
                    name = "IVector";
                    break;
                case "IObservableVector`1":
                    name = "IObservableVector";
                    break;
            }

            return name;
        }

        private static string MapToAbiInterfaceName(Type winmdType)
        {
            var name = MapToAbiName(winmdType);

            var typeInfo = winmdType.GetTypeInfo();
            if(!(
                typeInfo.IsInterface ||
                typeInfo.IsValueType ||
                winmdType == typeof(object) ||
                winmdType == typeof(string)))
            {
                name = name.Insert(0, "I");
            }

            return name;
        }

        private static WinRtType[] GetGenericWinRtTypes(Type winmdType)
        {
            return
                winmdType.IsConstructedGenericType ?
                winmdType.GenericTypeArguments.Select(t => new WinRtType(t)).ToArray() :
                null;
        }

        private static string GetMetadataFullName(string winrtFullName)
        {
            var metadataFullName = winrtFullName;
            switch (metadataFullName)
            {
                case "IInspectable":
                    metadataFullName = "Object";
                    break;
                case "hstring":
                    metadataFullName = "String";
                    break;
                case "Windows.Foundation.Collections.IMap":
                    metadataFullName = "Windows.Foundation.Collections.IMap`2";
                    break;
                case "Windows.Foundation.Collections.IVector":
                    metadataFullName = "Windows.Foundation.Collections.IVector`1";
                    break;
                case "Windows.Foundation.Collections.IObservableVector":
                    metadataFullName = "Windows.Foundation.Collections.IObservableVector`1";
                    break;
            }

            return metadataFullName;
        }

        private static WinRtType[] GetCollectionTypes(Type winmdType, Type collectionType)
        {
            WinRtType[] types = null;

            if (winmdType.IsConstructedGenericType &&
               winmdType.GetGenericTypeDefinition() == collectionType)
            {
                types = GetGenericWinRtTypes(winmdType);
            }
            else
            {
                var winmdTypeInfo = winmdType.GetTypeInfo();

                foreach (
                    var implementedInterface in
                    winmdTypeInfo.ImplementedInterfaces.Except(
                        winmdTypeInfo.BaseType != null ? winmdTypeInfo.BaseType.GetTypeInfo().ImplementedInterfaces : new Type[] { }))
                {
                    types = GetCollectionTypes(implementedInterface, collectionType);
                    if (types != null) break;
                }
            }

            return types;
        }

        private static string AsCppName(string name)
        {
            return name.Replace(".", "_").Replace("`", "_").Replace("<", "_").Replace(">", "_").Replace(",", "_");
        }
    }
#>