<#@ include file="WinRtType.tt" #>
<#+
    private Dictionary<string,Type> DiscoveredTypes = new Dictionary<string, Type>();
    private Dictionary<string,Type> RegisteredTypes = new Dictionary<string, Type>();

    static List<Type> GetTypes(string assemblyPath, string referenceWinmds, string typeHintWinmds)
    {
        List<string> references = new List<string>(referenceWinmds.Replace("\\\\", "\\").Split(';'));

        AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += (sender, eventArgs) =>
        {
            Assembly assembly = null;
            string assemblyName = eventArgs.Name.Split(',')[0];

            foreach (var reference in references)
            {
                var referenceName = System.IO.Path.GetFileNameWithoutExtension(reference);
                if (referenceName == assemblyName)
                {
                    assembly = Assembly.ReflectionOnlyLoadFrom(reference);
                    break;
                }
            }

            return assembly ?? Assembly.ReflectionOnlyLoad(eventArgs.Name);
        };

        WindowsRuntimeMetadata.ReflectionOnlyNamespaceResolve += (sender, eventArgs) =>
        {
            foreach (var refer in references)
            {
                eventArgs.ResolvedAssemblies.Add(Assembly.ReflectionOnlyLoadFrom(refer));
            }

            return;
        };

        List<string> typeNamesToFilterTo = null;
        Assembly mainAssembly = LoadAssemblyFromPath(assemblyPath);
        
        if (!string.IsNullOrEmpty(typeHintWinmds))
        {
            typeNamesToFilterTo = new List<string>();
            
            foreach (string typeHintWinmdPath in typeHintWinmds.Replace("\\\\", "\\").Split(';'))
            {
                Assembly typeHintAssembly = LoadAssemblyFromPath(typeHintWinmdPath);
                
                foreach (Type typeHint in typeHintAssembly.GetExportedTypes())
                {
                    typeNamesToFilterTo.Add(typeHint.FullName);
                }
            }
            
            typeNamesToFilterTo = typeNamesToFilterTo.Distinct().ToList();
        }
        
        if (typeNamesToFilterTo != null)
        {
            return mainAssembly.GetExportedTypes().Where(type => typeNamesToFilterTo.Contains(type.FullName)).ToList();
        }
        else
        {
            return mainAssembly.GetExportedTypes().ToList();
        }
    }
    
    static Assembly LoadAssemblyFromPath(string assemblyPath)
    {
        string fullAssemblyPath = Path.GetFullPath(assemblyPath);
        Assembly assembly = null;
        foreach (var loadedAssembly in AppDomain.CurrentDomain.ReflectionOnlyGetAssemblies())
        {
            if (String.Equals(loadedAssembly.Location, fullAssemblyPath, StringComparison.OrdinalIgnoreCase))
            {
                assembly = loadedAssembly;
                break;
            }
        }

        if (assembly == null)
        {
            assembly = Assembly.ReflectionOnlyLoadFrom(fullAssemblyPath);
        }
        
        return assembly;
    }

    static List<Type> GetTypesFromList(string assemblyPathList, string referenceWinmds, string typeHintWinmds)
    {
        List<Type> ret = new List<Type>();
        foreach (var assemblyPath in assemblyPathList.Split(';'))
        {
            ret = ret.Concat(GetTypes(assemblyPath, referenceWinmds, typeHintWinmds)).ToList();
        }
        
        return ret;
    }

    // Returns the types that should be included in the metadata provider for MUXC.
    static IEnumerable<Type> GetMetadataTypesFromList(string assemblyPathList, string referenceWinmds, string typeHintWinmds)
    {
        var allTypes = GetTypesFromList(assemblyPathList, referenceWinmds, typeHintWinmds);
        return
            allTypes
            .Where(t =>
                !t.Name.EndsWith("AutomationPeer") &&
                !t.Name.EndsWith("EventArgs") &&
                !(typeof(MulticastDelegate).IsAssignableFrom(t)))
            .Distinct();
    }

    // Returns the types that should be included in the metadata provider for WUXC.
    static IEnumerable<Type> GetWUXCMetadataTypesFromList(string assemblyPathList, string referenceWinmds, string typeHintWinmds)
    {
        var allTypes = GetTypesFromList(assemblyPathList, referenceWinmds, typeHintWinmds);
        return
            allTypes
            .Where(t =>
                !t.Name.EndsWith("AutomationPeer") &&
                !t.Name.EndsWith("EventArgs") &&
                !(typeof(Attribute).IsAssignableFrom(t)) &&
                !(typeof(MulticastDelegate).IsAssignableFrom(t)) &&
                !IsMUXOnlyType(t))
            .Distinct();
    }

    // Returns the types that should be included for Windows codegen.
    // For now, we ignore preview types (RS4+ only) in WUXC.
    static IEnumerable<Type> GetWindowsTypesFromList(string assemblyPathList, string referenceWinmds, string typeHintWinmds)
    {
        var allTypes = GetTypesFromList(assemblyPathList, referenceWinmds, typeHintWinmds);
        return
            allTypes
            .Where(t =>
                !(typeof(Attribute).IsAssignableFrom(t)) &&
                !(typeof(MulticastDelegate).IsAssignableFrom(t)) &&
                !IsMUXOnlyType(t))
            .Distinct();
    }

    static List<PropertyInfo> GetStaticProperties(Type type)
    {
        return
            type.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static)
            .ToList();
    }

    static List<PropertyInfo> GetInstanceProperties(Type type)
    {
        return
            type.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)
            .ToList();
    }

    static bool HasDefaultPublicConstructor(Type type)
    {
        bool hasDefaultPublicConstructor = false;
        var ctors = type.GetConstructors();
        foreach (var ctor in ctors)
        {
            var parameters = ctor.GetParameters();
            if (ctor.IsPublic && parameters.Count() == 0)
            {
                hasDefaultPublicConstructor = true;
                break;
            }
        }

        return hasDefaultPublicConstructor;
    }
    
    static string GetContentPropertyName(Type type)
    {
        string contentPropertyName = string.Empty;
        foreach (var attr in type.CustomAttributes)
        {
            try
            {
                if (attr.ToString().Contains("Windows.UI.Xaml.Markup.ContentPropertyAttribute"))
                {
                    contentPropertyName = attr.ToString().Replace("[Windows.UI.Xaml.Markup.ContentPropertyAttribute(Name = \"", "");
                    contentPropertyName = contentPropertyName.Replace("\")]", "");
                }
            }
            catch (TypeLoadException)
            {
                // Within the context of this TextTemplate script, we're only able to load types
                // from Microsoft.UI.Xaml.winmd, and some attribute types don't come from there,
                // like Windows.Foundation.UniversalApiContract.  If we can't load a type, we'll
                // just ignore it.
            }
        }

        return contentPropertyName;
    }

    static string GetPrimitiveTypeName(string name)
    {
        name = name.ToLower();
        switch (name)
        {
            case "single":
                return "float";
            case "int32":
                return "int";
            case "boolean":
                return "bool";
            default:
                return name;
        }
    }

    static string GetValueTypeName(Type type)
    {
        switch (type.Name)
        {
            case "Vector2":
                return "float2";
            case "Vector3":
                return "float3";
            case "Vector4":
                return "float4";
            default:
                return type.Name;
        }
    }

    static bool IsDependencyObject(Type type)
    {
        for (Type currentType = type; currentType != null; currentType = currentType.BaseType)
        {
            if (currentType.Name.Contains("DependencyObject"))
            {
                return true;
            }
        }

        return false;
    }

    static bool IsDependencyProperty(PropertyInfo property)
    {
        return property.PropertyType.FullName == "Windows.UI.Xaml.DependencyProperty";
    }

    static bool HasAssociatedDependencyProperty(PropertyInfo instanceProperty, Type type)
    {
        foreach (PropertyInfo staticProperty in GetStaticProperties(type))
        {
            if (IsDependencyProperty(staticProperty) && staticProperty.Name == instanceProperty.Name + "Property")
            {
                return true;
            }
        }

        return false;
    }

    static bool HasDependencyProperties(Type type)
    {
        return 
            GetStaticProperties(type).Where(x => IsDependencyProperty(x)).Count() > 0 ||
            
            // CommandBarFlyoutCommandBar and CommandBarFlyoutCommandBarTemplateSettings
            // don't publicly expose any properties as DPs, but some of their properties
            // are internally implemented as DPs to allow TemplateBinding.
            type.Name == "CommandBarFlyoutCommandBar" ||
            type.Name == "CommandBarFlyoutCommandBarTemplateSettings";
    }
    
    static string GetInferedTypeName(Type type)
    {
        if (type.IsPrimitive)
        {
            return type.Name;
        }
        else if (type.FullName.StartsWith("System"))
        {
            if (type.FullName.EndsWith("Vector2"))
                return "Windows.Foundation.Numerics.Vector2";
            else if (type.FullName.EndsWith("Vector3"))
                return "Windows.Foundation.Numerics.Vector3";
            else
                return "Object";
        }
        else
        {
            return type.FullName;
        }
    }

    // Registers a XAML type we know about. In other words, a XAML type
    // that's not a system/primitive type.
    void RegisterXamlType(Type type, bool exploreBaseAndProperties)
    {
        // If this type is a nullable type, then we don't need to register it -
        // it's just a nullable version of a primitive.
        if (type.Name.Contains("Nullable"))
        {
            return;
        }

        var winRtType = new WinRtType(type);
        
        // ICommand is special cased to use the Native Windows.UI.Xaml.Input.ICommand
        // instead of the managed System.Windows.Input.ICommand.
        if (winRtType.MetadataFullName.Contains("System.Windows.Input.ICommand"))
        {
            winRtType.MetadataFullName = "Windows.UI.Xaml.Input.ICommand";
        }

        FunctionCallWithLineBreaks("XamlMetadataProvider::RegisterXamlType", () =>
        {
            WriteLine("/* Arg1 TypeName */ ");
            WriteLine(string.Format("L\"{0}\",", winRtType.MetadataFullName));

            WriteLine("/* Arg2 CreateXamlTypeCallback */ ");
            WriteXamlTypeCallback(type, exploreBaseAndProperties);
        });
    }

    void WriteActivatorFunc(Type type)
    {
        if (HasDefaultPublicConstructor(type))
        {
            Write("(std::function<winrt::IInspectable()>)[]()");
            Write("{ ");
            {
                if (type.IsSealed)
                {
                    Write(string.Format("return XamlMetadataProviderGenerated::ActivateInstance(L\"{0}\");", type.ToString()));
                }
                else
                {
                    Write(string.Format("return XamlMetadataProviderGenerated::ActivateInstanceWithFactory<winrt::I{0}Factory>(L\"{1}\");", type.Name, type.ToString()));
                }
            }
            WriteLine(" },");
        }
        else
        {
            WriteLine("nullptr,");
        }
    }

    void WriteXamlTypeCallback(Type type, bool exploreBaseAndProperties)
    {
        if (type.IsEnum)
        {
            WriteLine("[]()");
            StatementBlock(() =>
            {
                FunctionCallWithLineBreaks("auto xamlType = winrt::make<EnumXamlType>", () =>
                {
                    WriteLine("/* Arg 1 - TypeName */ ");
                    WriteLine(string.Format("(PCWSTR)L\"{0}\",", type.ToString()));

                    WriteLine("/* Arg 2 - CreateFromString func */ ");
                    WriteCreateFromStringFunc(type);
                });
                WriteLine("return xamlType;");
            });
        }
        else
        {
            WriteLine("[]()");
            StatementBlock(() =>
            {
                var winRtType = new WinRtType(type);

                // ICommand is special cased to use the Native Windows.UI.Xaml.Input.ICommand
                // instead of the managed System.Windows.Input.ICommand.
                if (winRtType.MetadataFullName.Contains("System.Windows.Input.ICommand"))
                {
                    winRtType.MetadataFullName = "Windows.UI.Xaml.Input.ICommand";
                }

                if(exploreBaseAndProperties)
                {
                    FunctionCallWithLineBreaks("auto xamlType = winrt::make_self<XamlType>", () =>
                    {
                        WriteLine("/* Arg 1 - TypeName */ ");
                        WriteLine(string.Format("(PCWSTR)L\"{0}\",", winRtType.MetadataFullName));

                        WriteLine("/* Arg 2 - BaseTypeName */ ");
                        if(winRtType.BaseWinRtType != null)
                        {
                            if (!DiscoveredTypes.Keys.Contains(winRtType.BaseWinRtType.MetadataFullName))
                            {
                                DiscoveredTypes.Add(winRtType.BaseWinRtType.MetadataFullName, type.BaseType);
                            }
                            WriteLine(string.Format("(PCWSTR)L\"{0}\",", winRtType.BaseWinRtType.MetadataFullName));
                        }
                        else
                        {
                            WriteLine("(PCWSTR)L\"\",");
                        }

                        WriteLine("/* Arg 3 - Activator func */ ");
                        WriteActivatorFunc(type);

                        WriteLine("/* Arg 4 - Populate properties func */ ");
                        WritePopulatePropertiesFunc(type);
                    });
                }
                else
                {
                    string baseTypeName;
                    if(winRtType.IsValueType)
                    {
                        baseTypeName =
                        winRtType.BaseWinRtType != null ?
                        winRtType.BaseWinRtType.MetadataFullName :
                        "Object";
                    }
                    else
                    {
                        baseTypeName = "Object";
                    }
                    // Not exploring properties, base type is 'Object' 
                    WriteLine(string.Format("auto xamlType = winrt::make_self<XamlType>((PCWSTR)L\"{0}\", (PCWSTR)L\"{1}\" /* BaseTypeName */ , nullptr /* Activator Func */, nullptr /* PopulatePropertiesFunc */ );", winRtType.MetadataFullName, baseTypeName));
                }

                if(winRtType.IsList)
                {
                    WriteLine("xamlType->SetCollectionAddFunc((std::function<void(winrt::IInspectable const&, winrt::IInspectable const&)>)[](winrt::IInspectable const& collection, winrt::IInspectable const& value)");
                    WriteLine("{");
                    WriteLine(string.Format("    collection.as<{0}>().Append(unbox_value<{1}>(value));", winRtType.CppWinRtName, winRtType.ListWinRtTypes[0].CppWinRtName));
                    WriteLine("});\r\n");
                }
                else if(winRtType.IsMap)
                {
                    WriteLine("xamlType->SetAddToMapFunc((std::function<void(winrt::IInspectable const&, winrt::IInspectable const&, winrt::IInspectable const&)>)[](winrt::IInspectable const& map, winrt::IInspectable const& key, winrt::IInspectable const& value)");
                    WriteLine("{");
                    WriteLine(string.Format("    map.as<{0}>().Insert(unbox_value<{1}>(key), unbox_value<{2}>(value));", winRtType.CppWinRtName, winRtType.MapWinRtTypes[0].CppWinRtName, winRtType.MapWinRtTypes[1].CppWinRtName));
                    WriteLine("});\r\n");
                }

                WriteLine("return static_cast<winrt::IXamlType>(*xamlType);");
            });
        }
    }

    void WritePopulatePropertiesFunc(Type type)
    {
        var staticProperties = GetStaticProperties(type);
        var instanceProperties = GetInstanceProperties(type);

        if (!type.IsInterface && (staticProperties.Count > 0 || instanceProperties.Count > 0))
        {
            var contentPropertyName = GetContentPropertyName(type);
            List<string> dependencyProperties = new List<string>();

            WriteLine("(std::function<void(XamlTypeBase&)>)[](XamlTypeBase& xamlType)");
            StatementBlock(() =>
            {
                WriteAddStaticProperties(type, staticProperties, contentPropertyName, dependencyProperties);
                WriteAddInstanceProperties(type, instanceProperties, dependencyProperties);
            });
        }
        else
        {
            WriteLine("nullptr");
        }
    }

    void WriteAddInstanceProperties(Type type, List<PropertyInfo> instanceProperties, List<string> dependencyProperties)
    {
        foreach (var property in instanceProperties)
        {
            // we already handled dependency properties, so ignore them
            string propertyTypeName = GetInferedTypeName(property.PropertyType);
            if (!dependencyProperties.Contains(property.Name))
            {
                var propertyType = new WinRtType(property.PropertyType);

                if (!DiscoveredTypes.Keys.Contains(propertyType.MetadataFullName))
                {
                    DiscoveredTypes.Add(propertyType.MetadataFullName, propertyType.WinmdType);
                }

                WriteLine("xamlType.AddMember(");
                WriteLine(string.Format("    L\"{0}\", /* propertyName */", property.Name));
                WriteLine(string.Format("    L\"{0}\", /* propertyType */", propertyType.MetadataFullName));
                WriteGetterFunc(type, property);
                WriteSetterFunc(type, property);

                bool isContentProperty = GetContentPropertyName(type) == property.Name;
                Write(isContentProperty ? "    true," : "    false,");
                WriteLine(" /* isContent */");
                WriteLine("    false, /* isDependencyProperty */");
                WriteLine("    false /* isAttachable */);");
            }
        }
    }

    void WriteAddStaticProperties(Type type, List<PropertyInfo> staticProperties, string contentPropertyName, List<string> dependencyProperties)
    {
        if(staticProperties.Count > 0)
        {
            // Initialize the properties:       

            int staticsCount = 1;
            var statics = new List<Type>();
            var customAttributes = type.CustomAttributes; 
            foreach (var customAttributeData in customAttributes)
            {
                if (customAttributeData.AttributeType.Name == "StaticAttribute")
                {
                    var constructorArguments = customAttributeData.ConstructorArguments;
                    foreach (var conArg in constructorArguments)
                    {
                        var staticType = conArg.Value as Type;
                        if (staticType != null)
                        {
                            statics.Add(staticType);
                        }
                    }
                }
            }

            // Sort statics by name to make sure output is stable
            statics.Sort((x,y) => x.Name.CompareTo(y.Name));

            foreach (var staticType in statics)
            {
                string staticsCountString = "";
                if (staticsCount > 1)
                {
                    staticsCountString = staticsCount.ToString();
                }
                WriteLine(string.Format("winrt::{0} statics{1} = XamlMetadataProviderGenerated::GetFactory<winrt::{2}>(L\"{3}\");", staticType.Name, staticsCountString, staticType.Name, type.ToString()));

                var declaredProperties = (staticType as TypeInfo).DeclaredProperties;
                StatementBlock(() =>
                {
                    foreach (var property in declaredProperties)
                    {
                        if (IsDependencyProperty(property))
                        {
                            string propName = property.Name.Replace("Property", "");
                            dependencyProperties.Add(propName);

                            Type propertyType = null;
                            bool isContentProperty = false;
                            var instanceProperty = type.GetProperty(propName);
                            if (instanceProperty != null)
                            {
                                propertyType = instanceProperty.PropertyType;
                                isContentProperty = instanceProperty.Name == contentPropertyName;
                            }
                            else
                            {
                                // If we don't find an instance property, fallback to 
                                // a get<foo> method. This could be instance or static (as in the case of attached properties)
                                var getterMethod = type.GetMethod("Get" + propName, BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Instance);
                                if(getterMethod != null)
                                {
                                    propertyType = getterMethod.ReturnType;
                                }
                            }

                            string propertyTypeName = propertyType != null ? (new WinRtType(propertyType)).MetadataFullName : "Object";
                            if (!DiscoveredTypes.Keys.Contains(propertyTypeName))
                            {
                                DiscoveredTypes.Add(propertyTypeName, propertyType);
                            }

                            FunctionCall("xamlType.AddDPMember", () =>
                            {
                                Write(string.Format("L\"{0}\", ", propName));
                                Write(string.Format("L\"{0}\", ", propertyTypeName));
                                Write(string.Format("statics{0}.{1}(), ", staticsCountString, property.Name));
                                Write(isContentProperty ? "true" : "false");
                                Write(" /* isContent */");
                            });
                            WriteLine(";");
                        }
                        else
                        {
                            WriteLine(string.Format("// Ignoring static non-dependency property {0}()", property.Name));
                        }
                    }
                });

                WriteLine("\r\n");
                

                staticsCount++; 
            }
        }
    }

    void WriteGetterFunc(Type type, PropertyInfo property)
    {
        if (property.CanRead)
        {
            WriteLine(string.Format("    [](winrt::IInspectable instance) {{ return {0}; }},", GetSnippet_GetValue(type, property)));
        }
    }

    string GetSnippet_GetValue(Type type, PropertyInfo property)
    {
        if (property.PropertyType.IsPrimitive)
        {
            return string.Format("box_value(instance.as<winrt::{0}>().{1}())", type.Name, property.Name);
        }
        else if (property.PropertyType.IsEnum)
        {
            return string.Format("box_value<int>((int)instance.as<winrt::{0}>().{1}())", type.Name, property.Name);
        }
        else if (property.PropertyType.IsValueType)
        {
            if (property.PropertyType.Name == "Nullable`1")
            {
                // Already boxed
                return string.Format("instance.as<winrt::{0}>().{1}()", type.Name, property.Name);
            }

            return string.Format("box_value(instance.as<winrt::{0}>().{1}())", type.Name, property.Name);
        }
        else if (property.PropertyType.Name == "String")
        {
            return string.Format("box_value(instance.as<winrt::{0}>().{1}())", type.Name, property.Name);
        }

        return string.Format("instance.as<winrt::{0}>().{1}()", type.Name, property.Name);
    }

    void WriteSetterFunc(Type type, PropertyInfo property)
    {
        if (property.CanWrite)
        {
            WriteLine(string.Format("    [](winrt::IInspectable instance, winrt::IInspectable value) {{ {0}; }},", GetSnippet_SetValue(type, property)));
        }
        else
        {
            WriteLine("    nullptr, /* setter */");
        }
    }

    string GetSnippet_SetValue(Type type, PropertyInfo property)
    {
        if (property.PropertyType.IsPrimitive)
        {
            return string.Format("instance.as<winrt::{0}>().{1}(unbox_value<{2}>(value))", type.Name, property.Name, GetPrimitiveTypeName(property.PropertyType.Name));
        }
        else if (property.PropertyType.IsEnum)
        {
            return string.Format("instance.as<winrt::{0}>().{1}(unbox_value<winrt::{2}>(value))", type.Name, property.Name, property.PropertyType.Name);
        }
        else if (property.PropertyType.IsValueType)
        {
            if (property.PropertyType.Name == "Nullable`1")
            {
                // Need to .as<IReference<T>> when it's nullable
                var inner = property.PropertyType.GetGenericArguments()[0];
                if (inner.IsPrimitive)
                {
                    return string.Format("instance.as<winrt::{0}>().{1}(value.as<winrt::IReference<{2}>>())", type.Name, property.Name, GetPrimitiveTypeName(inner.Name));
                }
                else
                {
                    return string.Format("instance.as<winrt::{0}>().{1}(value.as<winrt::IReference<winrt::{2}>>())", type.Name, property.Name, GetValueTypeName(inner));
                }
            }
            
            return string.Format("instance.as<winrt::{0}>().{1}(unbox_value<winrt::{2}>(value))", type.Name, property.Name, GetValueTypeName(property.PropertyType));
        }
        else if (property.PropertyType.Name == "String")
        {
            return string.Format("instance.as<winrt::{0}>().{1}(unbox_value<winrt::hstring>(value))", type.Name, property.Name);
        }
        else if (property.PropertyType.Name == "Object")
        {
            return string.Format("instance.as<winrt::{0}>().{1}(value)", type.Name, property.Name);
        }

        var propertyType = new WinRtType(property.PropertyType);

        return string.Format("instance.as<winrt::{0}>().{1}(value.as<{2}>())", type.Name, property.Name, propertyType.CppWinRtName);
    }

    void WriteCreateFromStringFunc(Type type)
    {
        System.Diagnostics.Debug.Assert(type.IsEnum);
        WriteLine("(std::function<winrt::IInspectable(hstring)>)[](hstring fromString)");
        StatementBlock(() =>
        {
            foreach (MemberInfo val in type.GetMembers(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static))
            {
                string enumValueName = val.Name;
                WriteLine(string.Format("if (fromString == L\"{0}\") return box_value(winrt::{1}::{0});", enumValueName, type.Name));
            }
            WriteLine("throw winrt::hresult_invalid_argument();");
        });
    }

    void StatementBlock(Action action)
    {
        WriteLine("{");
        PushIndent("    ");
        action();
        PopIndent();
        Write("}");
    }

    void FunctionCall(string functionName, Action body)
    {
        Write(string.Format("{0}(", functionName));
        body();
        Write(")");
    }

    void FunctionCallWithLineBreaks(string functionName, Action body)
    {
        WriteLine(string.Format("{0}(", functionName));
        PushIndent("    ");
        body();
        PopIndent();
        WriteLine(");");
        WriteLine("");
    } 



    // Windows helpers

    string MakeWindowsNamespace(string fullName)
    {
        if(fullName == null) return null;

        fullName = fullName.Replace("Microsoft", "Windows");

        if (fullName == "System.Numerics.Vector2")
        {
            // In C#, Windows.Foundation.Numerics.Vector2 is implemented as System.Numerics.Vector2, but
            // it's not a C#-only type like the other System types, so we want code gen to know about
            // the Windows.Foundation.Numerics version of it.
            fullName = "Windows.Foundation.Numerics.Vector2";
        }
        else if (fullName == "System.Numerics.Vector4")
        {
            // The same is true of Vector4.
            fullName = "Windows.Foundation.Numerics.Vector4";
        }
        else if (fullName == "System.Uri")
        {
            fullName = "Windows.Foundation.Uri";
        }
        else if (fullName.StartsWith("System"))
        {
            fullName = fullName.Substring(fullName.LastIndexOf(".") + 1);
        }
        fullName = fullName.Replace("Windows.UI.Private.Controls", "Windows.UI.Xaml.Controls");
        fullName = fullName.Replace("Windows.UI.Private.Media", "Windows.UI.Xaml.Media");
        return fullName;
    }

    string MakeWindowsTypeFullName(Type type)
    {
        if (type.IsGenericType) // Custom handling for some generic types we understand
        {
            string genericName = type.Name.Split('`')[0];
            if (genericName == "IList") genericName = "Windows.Foundation.Collections.IVector";
            else if (genericName == "IObservableVector") genericName = "Windows.Foundation.Collections.IObservableVector";
            else if (genericName == "IReadOnlyList") genericName = "Windows.Foundation.Collections.IVectorView";
            else if (genericName == "IDictionary") genericName = "Windows.Foundation.Collections.IMap";
            else if (genericName == "IAsyncOperation") genericName = "Windows.Foundation.IAsyncOperation";

            return string.Format("{0}<{1}>", genericName, string.Join(", ", type.GetGenericArguments().Select(x => MakeWindowsTypeFullName(x))));
        }

        string fullName = type.FullName;

        return MakeWindowsNamespace(fullName);
    }

    Type GetFactoryType(Type type)
    {
        Type factoryType = GetCustomAttributeFirstTypeParam(type, "ComposableAttribute", hasVersion: true);
        if (factoryType == null)
        {
            factoryType = GetCustomAttributeFirstTypeParam(type, "ActivatableAttribute", hasVersion: true);
        }
        return factoryType;
    }

    bool HasComposableAttribute(Type type)
    {
        return GetCustomAttribute(type, "ComposableAttribute") != null;
    }

    System.Reflection.CustomAttributeData GetCustomAttribute(Type type, string attributeTypeName)
    {
        return GetCustomAttributes(type, attributeTypeName).FirstOrDefault();
    }

    IEnumerable<System.Reflection.CustomAttributeData> GetCustomAttributes(Type type, string attributeTypeName)
    {
        foreach (var attribute in type.CustomAttributes)
        {
            if (attribute.AttributeType.Name == attributeTypeName)
            {
                yield return attribute;
            }
        }
    }

    Type GetCustomAttributeFirstTypeParam(Type type, string attributeTypeName, bool hasVersion)
    {
        // We want to ensure that we always return a consistent value, so we'll ensure
        // that we return the attribute corresponding to the earliest version.
        uint earliestVersion = uint.MaxValue;
        Type earliestVersionType = null;
        
        foreach (var attribute in GetCustomAttributes(type, attributeTypeName))
        {
            if (attribute != null)
            {
                var typeArg = attribute.ConstructorArguments.Where((arg) => arg.ArgumentType.Name == "Type").FirstOrDefault();
                    
                if (hasVersion)
                {
                    var versionArg = attribute.ConstructorArguments.Where((arg) => arg.ArgumentType.Name == "UInt32").FirstOrDefault();
                    
                    if (versionArg != null &&
                        versionArg.Value != null &&
                        typeArg != null &&
                        typeArg.Value != null)
                    {
                        uint version = (uint)versionArg.Value;
                        
                        if (version < earliestVersion)
                        {
                            earliestVersion = version;
                            earliestVersionType = (Type)typeArg.Value;
                        }
                    }
                }
                else
                {
                    return (Type)typeArg.Value;
                }
            }
        }

        return earliestVersionType;
    }

    static string GetContractString(Type type)
    {
        int version = GetContractVersion(type);

        if (IsTypePublic(type) && version > 0)
        {
            return "[Platform(typeof(Windows.Foundation.UniversalApiContract), "+ version + ")]";
        }
        else
        {
            return "[Platform(typeof(Windows.Foundation.UniversalApiContract), "+ version + ")][VelocityFeature(\"Feature_WUXCPreviewTypes\")]";
        }
    }

    static int GetContractVersion(Type type)
    {
        var muxContractAttribute = CustomAttributeData
            .GetCustomAttributes(type)
            .Where(c => c.AttributeType.Name == "MUXContractPropertyAttribute")
            .SingleOrDefault();

        if (muxContractAttribute != null)
        {
            return (int?)(muxContractAttribute.NamedArguments[0].TypedValue.Value) ?? 0;
        }
        
        var contractVersionAttribute = CustomAttributeData
            .GetCustomAttributes(type)
            .Where(c => c.AttributeType.Name == "ContractVersionAttribute" && ((Type)c.ConstructorArguments[0].Value).Name == "UniversalApiContract")
            .SingleOrDefault();

        if (contractVersionAttribute != null)
        {
            // For some reason, ContractVersionAttribute stores the contract version as the high word in the unsigned 32-bit integer
            // in which its value is stored, rather than the low word.  We'll bitshift it by 16 to extract the actual value we want.
            return (int)(((uint?)(contractVersionAttribute.ConstructorArguments[1].Value) ?? 0) >> 16);
        }
        
        return 0;
    }

    static bool HasFeatureAttribute(Type type)
    {
        return CustomAttributeData
            .GetCustomAttributes(type)
            .Where(c => c.AttributeType.Name == "FeatureAttribute")
            .SingleOrDefault() != null;
    }

    static bool IsTypePublic(Type type)
    {
        return GetContractVersion(type) > 0 && !HasFeatureAttribute(type);
    }

    static bool IsMUXOnlyType(Type t)
    {
        return t.Name.Contains("IconSource");
    }
#>