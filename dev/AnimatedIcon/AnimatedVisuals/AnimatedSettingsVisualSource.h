#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedSettingsVisualSource.json
//       
//       Input file:
//           AnimatedSettingsVisualSource.json (28705 bytes created 23:37-07:00 Oct 5 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "common.h"
#include "AnimatedVisuals\AnimatedSettingsVisualSource.g.h"

// Name:        Controls_04_Settings
// Frame rate:  60 fps
// Frame count: 120
// Duration:    2000.0 mS
// ______________________________________________________________________________________________
// |           Marker           |           Constant           | Frame |   mS   |   Progress    |
// |____________________________|______________________________|_______|________|_______________|
// | NormalToPointerOver_Start  | M_NormalToPointerOver_Start  |     0 |    0.0 | 0.0F          |
// | NormalToPointerOver_End    | M_NormalToPointerOver_End    |     9 |  150.0 | 0.0754166692F |
// | NormalToPressed_Start      | M_NormalToPressed_Start      |    10 |  166.7 | 0.0837500021F |
// | NormalToPressed_End        | M_NormalToPressed_End        |    19 |  316.7 | 0.158749998F  |
// | PointerOverToNormal_Start  | M_PointerOverToNormal_Start  |    20 |  333.3 | 0.167083338F  |
// | PointerOverToNormal_End    | M_PointerOverToNormal_End    |    29 |  483.3 | 0.242083326F  |
// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |    30 |  500.0 | 0.250416666F  |
// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    39 |  650.0 | 0.325416654F  |
// | PressedToNormal_Start      | M_PressedToNormal_Start      |    40 |  666.7 | 0.33375001F   |
// | PressedToNormal_End        | M_PressedToNormal_End        |    79 | 1316.7 | 0.658749998F  |
// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    80 | 1333.3 | 0.667083323F  |
// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |   119 | 1983.3 | 0.992083311F  |
// ----------------------------------------------------------------------------------------------
// _______________________________________________________
// | Theme property |  Accessor  | Type  | Default value |
// |________________|____________|_______|_______________|
// | Foreground     | Foreground | Color |   #FF131718   |
// -------------------------------------------------------
class AnimatedSettingsVisualSource
    : public winrt::implementation::AnimatedSettingsVisualSourceT<AnimatedSettingsVisualSource>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x13, 0x17, 0x18 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 2.000 seconds.
    static constexpr int64_t c_durationTicks{ 20000000L };

    // Marker: NormalToPointerOver_Start.
    static constexpr float M_NormalToPointerOver_Start{ 0.0F };

    // Marker: NormalToPointerOver_End.
    static constexpr float M_NormalToPointerOver_End{ 0.0754166692F };

    // Marker: NormalToPressed_Start.
    static constexpr float M_NormalToPressed_Start{ 0.0837500021F };

    // Marker: NormalToPressed_End.
    static constexpr float M_NormalToPressed_End{ 0.158749998F };

    // Marker: PointerOverToNormal_Start.
    static constexpr float M_PointerOverToNormal_Start{ 0.167083338F };

    // Marker: PointerOverToNormal_End.
    static constexpr float M_PointerOverToNormal_End{ 0.242083326F };

    // Marker: PointerOverToPressed_Start.
    static constexpr float M_PointerOverToPressed_Start{ 0.250416666F };

    // Marker: PointerOverToPressed_End.
    static constexpr float M_PointerOverToPressed_End{ 0.325416654F };

    // Marker: PressedToNormal_Start.
    static constexpr float M_PressedToNormal_Start{ 0.33375001F };

    // Marker: PressedToNormal_End.
    static constexpr float M_PressedToNormal_End{ 0.658749998F };

    // Marker: PressedToPointerOver_Start.
    static constexpr float M_PressedToPointerOver_Start{ 0.667083323F };

    // Marker: PressedToPointerOver_End.
    static constexpr float M_PressedToPointerOver_End{ 0.992083311F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x13, 0x17, 0x18 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    // Gets the number of frames in the animation.
    double FrameCount();

    // Gets the framerate of the animation.
    double Framerate();

    // Gets the duration of the animation.
    winrt::Windows::Foundation::TimeSpan Duration();

    // Converts a zero-based frame number to the corresponding progress value denoting the
    // start of the frame.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
