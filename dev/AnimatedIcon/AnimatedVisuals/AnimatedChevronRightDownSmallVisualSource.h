#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedChevronRightDownSmallVisualSource.json
//       
//       Input file:
//           AnimatedChevronRightDownSmallVisualSource.json (27906 bytes created 23:37-07:00 Oct 5 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "common.h"
#include "AnimatedVisuals\AnimatedChevronRightDownSmallVisualSource.g.h"


// Name:        Controls_08_SideChevron_TreeViewExpand
// Frame rate:  60 fps
// Frame count: 220
// Duration:    3666.7 mS
// ________________________________________________________________________________________________________________
// |               Marker                |               Constant                | Frame |   mS   |   Progress    |
// |_____________________________________|_______________________________________|_______|________|_______________|
// | NormalOnToNormalOff_Start           | M_NormalOnToNormalOff_Start           |     0 |    0.0 | 0.0F          |
// | NormalOnToNormalOff_End             | M_NormalOnToNormalOff_End             |     9 |  150.0 | 0.0411363654F |
// | NormalOnToPointerOverOn_Start       | M_NormalOnToPointerOverOn_Start       |    10 |  166.7 | 0.0456818193F |
// | NormalOnToPointerOverOn_End         | M_NormalOnToPointerOverOn_End         |    19 |  316.7 | 0.0865909085F |
// | NormalOnToPressedOn_Start           | M_NormalOnToPressedOn_Start           |    20 |  333.3 | 0.0911363661F |
// | NormalOnToPressedOn_End             | M_NormalOnToPressedOn_End             |    29 |  483.3 | 0.132045448F  |
// | NormalOffToNormalOn_Start           | M_NormalOffToNormalOn_Start           |    30 |  500.0 | 0.136590913F  |
// | NormalOffToNormalOn_End             | M_NormalOffToNormalOn_End             |    59 |  983.3 | 0.268409103F  |
// | NormalOffToPointerOverOff_Start     | M_NormalOffToPointerOverOff_Start     |    60 | 1000.0 | 0.272954553F  |
// | NormalOffToPointerOverOff_End       | M_NormalOffToPointerOverOff_End       |    69 | 1150.0 | 0.313863635F  |
// | NormalOffToPressedOff_Start         | M_NormalOffToPressedOff_Start         |    70 | 1166.7 | 0.318409085F  |
// | NormalOffToPressedOff_End           | M_NormalOffToPressedOff_End           |    79 | 1316.7 | 0.359318167F  |
// | PointerOverOnToPointerOverOff_Start | M_PointerOverOnToPointerOverOff_Start |    80 | 1333.3 | 0.363863647F  |
// | PointerOverOnToPointerOverOff_End   | M_PointerOverOnToPointerOverOff_End   |    89 | 1483.3 | 0.404772729F  |
// | PointerOverOnToNormalOn_Start       | M_PointerOverOnToNormalOn_Start       |    90 | 1500.0 | 0.409318179F  |
// | PointerOverOnToNormalOn_End         | M_PointerOverOnToNormalOn_End         |    99 | 1650.0 | 0.450227261F  |
// | PointerOverOnToPressedOn_Start      | M_PointerOverOnToPressedOn_Start      |   100 | 1666.7 | 0.454772741F  |
// | PointerOverOnToPressedOn_End        | M_PointerOverOnToPressedOn_End        |   109 | 1816.7 | 0.495681822F  |
// | PointerOverOffToPointerOverOn_Start | M_PointerOverOffToPointerOverOn_Start |   110 | 1833.3 | 0.500227273F  |
// | PointerOverOffToPointerOverOn_End   | M_PointerOverOffToPointerOverOn_End   |   119 | 1983.3 | 0.541136384F  |
// | PointerOverOffToNormalOff_Start     | M_PointerOverOffToNormalOff_Start     |   120 | 2000.0 | 0.545681834F  |
// | PointerOverOffToNormalOff_End       | M_PointerOverOffToNormalOff_End       |   129 | 2150.0 | 0.586590886F  |
// | PointerOverOffToPressedOff_Start    | M_PointerOverOffToPressedOff_Start    |   130 | 2166.7 | 0.591136336F  |
// | PointerOverOffToPressedOff_End      | M_PointerOverOffToPressedOff_End      |   139 | 2316.7 | 0.632045448F  |
// | PressedOnToPressedOff_Start         | M_PressedOnToPressedOff_Start         |   140 | 2333.3 | 0.636590898F  |
// | PressedOnToPressedOff_End           | M_PressedOnToPressedOff_End           |   149 | 2483.3 | 0.67750001F   |
// | PressedOnToPointerOverOff_Start     | M_PressedOnToPointerOverOff_Start     |   150 | 2500.0 | 0.68204546F   |
// | PressedOnToPointerOverOff_End       | M_PressedOnToPointerOverOff_End       |   159 | 2650.0 | 0.722954571F  |
// | PressedOnToNormalOff_Start          | M_PressedOnToNormalOff_Start          |   160 | 2666.7 | 0.727500021F  |
// | PressedOnToNormalOff_End            | M_PressedOnToNormalOff_End            |   169 | 2816.7 | 0.768409073F  |
// | PressedOffToPressedOn_Start         | M_PressedOffToPressedOn_Start         |   170 | 2833.3 | 0.772954524F  |
// | PressedOffToPressedOn_End           | M_PressedOffToPressedOn_End           |   179 | 2983.3 | 0.813863635F  |
// | PressedOffToPointerOverOn_Start     | M_PressedOffToPointerOverOn_Start     |   180 | 3000.0 | 0.818409085F  |
// | PressedOffToPointerOverOn_End       | M_PressedOffToPointerOverOn_End       |   199 | 3316.7 | 0.904772699F  |
// | PressedOffToNormalOn_Start          | M_PressedOffToNormalOn_Start          |   200 | 3333.3 | 0.909318209F  |
// | PressedOffToNormalOn_End            | M_PressedOffToNormalOn_End            |   219 | 3650.0 | 0.995681822F  |
// ----------------------------------------------------------------------------------------------------------------
// _______________________________________________________
// | Theme property |  Accessor  | Type  | Default value |
// |________________|____________|_______|_______________|
// | Foreground     | Foreground | Color |   #FF060808   |
// -------------------------------------------------------
class AnimatedChevronRightDownSmallVisualSource
    : public winrt::implementation::AnimatedChevronRightDownSmallVisualSourceT<AnimatedChevronRightDownSmallVisualSource>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x06, 0x08, 0x08 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 3.667 seconds.
    static constexpr int64_t c_durationTicks{ 36666666L };

    // Marker: NormalOnToNormalOff_Start.
    static constexpr float M_NormalOnToNormalOff_Start{ 0.0F };

    // Marker: NormalOnToNormalOff_End.
    static constexpr float M_NormalOnToNormalOff_End{ 0.0411363654F };

    // Marker: NormalOnToPointerOverOn_Start.
    static constexpr float M_NormalOnToPointerOverOn_Start{ 0.0456818193F };

    // Marker: NormalOnToPointerOverOn_End.
    static constexpr float M_NormalOnToPointerOverOn_End{ 0.0865909085F };

    // Marker: NormalOnToPressedOn_Start.
    static constexpr float M_NormalOnToPressedOn_Start{ 0.0911363661F };

    // Marker: NormalOnToPressedOn_End.
    static constexpr float M_NormalOnToPressedOn_End{ 0.132045448F };

    // Marker: NormalOffToNormalOn_Start.
    static constexpr float M_NormalOffToNormalOn_Start{ 0.136590913F };

    // Marker: NormalOffToNormalOn_End.
    static constexpr float M_NormalOffToNormalOn_End{ 0.268409103F };

    // Marker: NormalOffToPointerOverOff_Start.
    static constexpr float M_NormalOffToPointerOverOff_Start{ 0.272954553F };

    // Marker: NormalOffToPointerOverOff_End.
    static constexpr float M_NormalOffToPointerOverOff_End{ 0.313863635F };

    // Marker: NormalOffToPressedOff_Start.
    static constexpr float M_NormalOffToPressedOff_Start{ 0.318409085F };

    // Marker: NormalOffToPressedOff_End.
    static constexpr float M_NormalOffToPressedOff_End{ 0.359318167F };

    // Marker: PointerOverOnToPointerOverOff_Start.
    static constexpr float M_PointerOverOnToPointerOverOff_Start{ 0.363863647F };

    // Marker: PointerOverOnToPointerOverOff_End.
    static constexpr float M_PointerOverOnToPointerOverOff_End{ 0.404772729F };

    // Marker: PointerOverOnToNormalOn_Start.
    static constexpr float M_PointerOverOnToNormalOn_Start{ 0.409318179F };

    // Marker: PointerOverOnToNormalOn_End.
    static constexpr float M_PointerOverOnToNormalOn_End{ 0.450227261F };

    // Marker: PointerOverOnToPressedOn_Start.
    static constexpr float M_PointerOverOnToPressedOn_Start{ 0.454772741F };

    // Marker: PointerOverOnToPressedOn_End.
    static constexpr float M_PointerOverOnToPressedOn_End{ 0.495681822F };

    // Marker: PointerOverOffToPointerOverOn_Start.
    static constexpr float M_PointerOverOffToPointerOverOn_Start{ 0.500227273F };

    // Marker: PointerOverOffToPointerOverOn_End.
    static constexpr float M_PointerOverOffToPointerOverOn_End{ 0.541136384F };

    // Marker: PointerOverOffToNormalOff_Start.
    static constexpr float M_PointerOverOffToNormalOff_Start{ 0.545681834F };

    // Marker: PointerOverOffToNormalOff_End.
    static constexpr float M_PointerOverOffToNormalOff_End{ 0.586590886F };

    // Marker: PointerOverOffToPressedOff_Start.
    static constexpr float M_PointerOverOffToPressedOff_Start{ 0.591136336F };

    // Marker: PointerOverOffToPressedOff_End.
    static constexpr float M_PointerOverOffToPressedOff_End{ 0.632045448F };

    // Marker: PressedOnToPressedOff_Start.
    static constexpr float M_PressedOnToPressedOff_Start{ 0.636590898F };

    // Marker: PressedOnToPressedOff_End.
    static constexpr float M_PressedOnToPressedOff_End{ 0.67750001F };

    // Marker: PressedOnToPointerOverOff_Start.
    static constexpr float M_PressedOnToPointerOverOff_Start{ 0.68204546F };

    // Marker: PressedOnToPointerOverOff_End.
    static constexpr float M_PressedOnToPointerOverOff_End{ 0.722954571F };

    // Marker: PressedOnToNormalOff_Start.
    static constexpr float M_PressedOnToNormalOff_Start{ 0.727500021F };

    // Marker: PressedOnToNormalOff_End.
    static constexpr float M_PressedOnToNormalOff_End{ 0.768409073F };

    // Marker: PressedOffToPressedOn_Start.
    static constexpr float M_PressedOffToPressedOn_Start{ 0.772954524F };

    // Marker: PressedOffToPressedOn_End.
    static constexpr float M_PressedOffToPressedOn_End{ 0.813863635F };

    // Marker: PressedOffToPointerOverOn_Start.
    static constexpr float M_PressedOffToPointerOverOn_Start{ 0.818409085F };

    // Marker: PressedOffToPointerOverOn_End.
    static constexpr float M_PressedOffToPointerOverOn_End{ 0.904772699F };

    // Marker: PressedOffToNormalOn_Start.
    static constexpr float M_PressedOffToNormalOn_Start{ 0.909318209F };

    // Marker: PressedOffToNormalOn_End.
    static constexpr float M_PressedOffToNormalOn_End{ 0.995681822F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x06, 0x08, 0x08 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    // Gets the number of frames in the animation.
    double FrameCount();

    // Gets the framerate of the animation.
    double Framerate();

    // Gets the duration of the animation.
    winrt::Windows::Foundation::TimeSpan Duration();

    // Converts a zero-based frame number to the corresponding progress value denoting the
    // start of the frame.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
