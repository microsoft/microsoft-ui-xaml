//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.2+gebbbdfc697
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedGlobalNavigationButtonVisualSource.json
//       
//       Input file:
//           AnimatedGlobalNavigationButtonVisualSource.json (37639 bytes created 9:25-07:00 Jun 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   291 |
// |--------------------------+-------|
// | Expression animators     |    23 |
// | KeyFrame animators       |    22 |
// | Reference parameters     |    23 |
// | Expression operations    |     4 |
// |--------------------------+-------|
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     7 |
// | ShapeVisuals             |     6 |
// |--------------------------+-------|
// | ContainerShapes          |    12 |
// | CompositionSpriteShapes  |    54 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals\AnimatedGlobalNavigationButtonVisualSource.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(AnimatedGlobalNavigationButtonVisualSource)
}
#include "AnimatedVisuals\AnimatedGlobalNavigationButtonVisualSource.g.cpp"

class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::ABI::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};
class AnimatedGlobalNavigationButtonVisualSource_AnimatedVisual : public winrt::implements<AnimatedGlobalNavigationButtonVisualSource_AnimatedVisual,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 13333333L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionPathGeometry _pathGeometry_00{ nullptr };
    CompositionPathGeometry _pathGeometry_01{ nullptr };
    CompositionPathGeometry _pathGeometry_02{ nullptr };
    CompositionPathGeometry _pathGeometry_03{ nullptr };
    CompositionPathGeometry _pathGeometry_04{ nullptr };
    CompositionPathGeometry _pathGeometry_05{ nullptr };
    CompositionPathGeometry _pathGeometry_06{ nullptr };
    CompositionPathGeometry _pathGeometry_07{ nullptr };
    CompositionPathGeometry _pathGeometry_08{ nullptr };
    CompositionPathGeometry _pathGeometry_09{ nullptr };
    CompositionPathGeometry _pathGeometry_10{ nullptr };
    CompositionPathGeometry _pathGeometry_11{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_3{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector2KeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix, CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        // Frame 60.
        const auto result = CreateBooleanKeyFrameAnimation(0.75F, true);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        // Frame 40.
        const auto result = CreateBooleanKeyFrameAnimation(0.5F, true);
        // Frame 60.
        result.InsertKeyFrame(0.75F, false);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        // Frame 30.
        const auto result = CreateBooleanKeyFrameAnimation(0.375F, true);
        // Frame 40.
        result.InsertKeyFrame(0.5F, false);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        // Frame 20.
        const auto result = CreateBooleanKeyFrameAnimation(0.25F, true);
        // Frame 30.
        result.InsertKeyFrame(0.375F, false);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        // Frame 10.
        const auto result = CreateBooleanKeyFrameAnimation(0.125F, true);
        // Frame 20.
        result.InsertKeyFrame(0.25F, false);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        // Frame 10.
        const auto result = CreateBooleanKeyFrameAnimation(0.125F, false);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_00()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.5F, 0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 7.63500023F, 0.5F }, { 7.75299978F, 0.451000005F }, { 7.85200024F, 0.351999998F } });
        sink->AddBezier({ { 7.95100021F, 0.252999991F }, { 8.0F, 0.135000005F }, { 8.0F, 0.0F } });
        sink->AddBezier({ { 8.0F, -0.135000005F }, { 7.95100021F, -0.252999991F }, { 7.85200024F, -0.351999998F } });
        sink->AddBezier({ { 7.75299978F, -0.451000005F }, { 7.63500023F, -0.5F }, { 7.5F, -0.5F } });
        sink->AddLine({ 7.5F, 0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_01()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.5F, -0.486999989F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 7.5F, 0.513000011F });
        sink->AddBezier({ { 7.63500023F, 0.513000011F }, { 7.75299978F, 0.463F }, { 7.85200024F, 0.363999993F } });
        sink->AddBezier({ { 7.95100021F, 0.264999986F }, { 8.0F, 0.148000002F }, { 8.0F, 0.0130000003F } });
        sink->AddBezier({ { 8.0F, -0.122000001F }, { 7.95100021F, -0.239999995F }, { 7.85200024F, -0.338999987F } });
        sink->AddBezier({ { 7.75299978F, -0.437999994F }, { 7.63500023F, -0.486999989F }, { 7.5F, -0.486999989F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_02()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.5F, -0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 7.5F, 0.5F });
        sink->AddBezier({ { 7.63500023F, 0.5F }, { 7.75299978F, 0.451000005F }, { 7.85200024F, 0.351999998F } });
        sink->AddBezier({ { 7.95100021F, 0.252999991F }, { 8.0F, 0.135000005F }, { 8.0F, 0.0F } });
        sink->AddBezier({ { 8.0F, -0.135000005F }, { 7.95100021F, -0.252999991F }, { 7.85200024F, -0.351999998F } });
        sink->AddBezier({ { 7.75299978F, -0.451000005F }, { 7.63500023F, -0.5F }, { 7.5F, -0.5F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_03()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -7.5F, 0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -7.5F, -0.5F });
        sink->AddBezier({ { -7.63500023F, -0.5F }, { -7.75299978F, -0.451000005F }, { -7.85200024F, -0.351999998F } });
        sink->AddBezier({ { -7.95100021F, -0.252999991F }, { -8.0F, -0.135000005F }, { -8.0F, 0.0F } });
        sink->AddBezier({ { -8.0F, 0.135000005F }, { -7.95100021F, 0.252999991F }, { -7.85200024F, 0.351999998F } });
        sink->AddBezier({ { -7.75299978F, 0.451000005F }, { -7.63500023F, 0.5F }, { -7.5F, 0.5F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_04()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -7.5F, -0.486999989F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -7.63500023F, -0.486999989F }, { -7.75299978F, -0.437999994F }, { -7.85200024F, -0.338999987F } });
        sink->AddBezier({ { -7.95100021F, -0.239999995F }, { -8.0F, -0.122000001F }, { -8.0F, 0.0130000003F } });
        sink->AddBezier({ { -8.0F, 0.148000002F }, { -7.95100021F, 0.264999986F }, { -7.85200024F, 0.363999993F } });
        sink->AddBezier({ { -7.75299978F, 0.463F }, { -7.63500023F, 0.513000011F }, { -7.5F, 0.513000011F } });
        sink->AddLine({ -7.5F, -0.486999989F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_05()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -7.5F, -0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -7.63500023F, -0.5F }, { -7.75299978F, -0.451000005F }, { -7.85200024F, -0.351999998F } });
        sink->AddBezier({ { -7.95100021F, -0.252999991F }, { -8.0F, -0.135000005F }, { -8.0F, 0.0F } });
        sink->AddBezier({ { -8.0F, 0.135000005F }, { -7.95100021F, 0.252999991F }, { -7.85200024F, 0.351999998F } });
        sink->AddBezier({ { -7.75299978F, 0.451000005F }, { -7.63500023F, 0.5F }, { -7.5F, 0.5F } });
        sink->AddLine({ -7.5F, -0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_06()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -7.60599995F, 0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 7.70100021F, 0.5F });
        sink->AddLine({ 7.70100021F, -0.5F });
        sink->AddLine({ -7.60599995F, -0.5F });
        sink->AddLine({ -7.60599995F, 0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_07()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.70100021F, -0.486999989F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -7.60599995F, -0.486999989F });
        sink->AddLine({ -7.60599995F, 0.513000011F });
        sink->AddLine({ 7.70100021F, 0.513000011F });
        sink->AddLine({ 7.70100021F, -0.486999989F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_08()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.70100021F, -0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -7.60500002F, -0.5F });
        sink->AddLine({ -7.60500002F, 0.5F });
        sink->AddLine({ 7.70100021F, 0.5F });
        sink->AddLine({ 7.70100021F, -0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_09()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -7.5999999F, 0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 7.6960001F, 0.5F });
        sink->AddLine({ 7.6960001F, -0.5F });
        sink->AddLine({ -7.5999999F, -0.5F });
        sink->AddLine({ -7.5999999F, 0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_10()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.6960001F, -0.486999989F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -7.5999999F, -0.486999989F });
        sink->AddLine({ -7.5999999F, 0.513000011F });
        sink->AddLine({ 7.6960001F, 0.513000011F });
        sink->AddLine({ 7.6960001F, -0.486999989F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    winrt::com_ptr<CanvasGeometry> Geometry_11()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 7.6960001F, -0.5F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ -7.59899998F, -0.5F });
        sink->AddLine({ -7.59899998F, 0.5F });
        sink->AddLine({ 7.6960001F, 0.5F });
        sink->AddLine({ 7.6960001F, -0.5F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_00()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_00());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_01());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_02());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), RootProgress());
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_01()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ -7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_03());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_04());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_05());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_02()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 0.0480000004F, -5.0F });
        result.Offset({ 23.9559994F, 29.0F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_06());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_07());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_08());
        StartProgressBoundAnimation(result, L"Scale.X", ScaleXScalarAnimation_1p433_to_2p749_0(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", ScaleYScalarAnimation_2p75_to_2p75_0(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_03()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_09());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_10());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_11());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_04()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ -7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_12());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_13());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_14());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_3(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_05()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 0.0480000004F, -5.0F });
        result.Offset({ 23.9559994F, 29.0F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_15());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_16());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_17());
        StartProgressBoundAnimation(result, L"Scale.X", ScaleXScalarAnimation_1p433_to_2p749_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", ScaleYScalarAnimation_2p75_to_2p75_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_06()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_18());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_19());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_20());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_4(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_07()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ -7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_21());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_22());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_23());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_08()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 0.0480000004F, -5.0F });
        result.Offset({ 23.9559994F, 29.0F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_24());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_25());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_26());
        StartProgressBoundAnimation(result, L"Scale.X", ScaleXScalarAnimation_2p749_to_1p433_0(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", ScaleYScalarAnimation_2p75_to_2p75_2(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_09()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_36());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_37());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_38());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_6(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_10()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ -7.5F, -5.0F });
        result.Scale({ 2.75F, 2.75F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_39());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_40());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_41());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_7(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    CompositionContainerShape ContainerShape_11()
    {
        const auto result = _c.CreateContainerShape();
        result.CenterPoint({ 0.0480000004F, -5.0F });
        result.Offset({ 23.9559994F, 29.0F });
        const auto shapes = result.Shapes();
        // ShapeGroup: Group 3 Offset:<0, -10>
        shapes.Append(SpriteShape_42());
        // ShapeGroup: Group 2 Offset:<0, -4.85>
        shapes.Append(SpriteShape_43());
        // ShapeGroup: Group 1
        shapes.Append(SpriteShape_44());
        StartProgressBoundAnimation(result, L"Scale.X", ScaleXScalarAnimation_2p749_to_1p433_1(), _rootProgress);
        StartProgressBoundAnimation(result, L"Scale.Y", ScaleYScalarAnimation_2p75_to_2p75_3(), _rootProgress);
        return result;
    }

    CompositionPathGeometry PathGeometry_00()
    {
        return _pathGeometry_00 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
    }

    CompositionPathGeometry PathGeometry_01()
    {
        return _pathGeometry_01 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
    }

    CompositionPathGeometry PathGeometry_02()
    {
        return _pathGeometry_02 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
    }

    CompositionPathGeometry PathGeometry_03()
    {
        return _pathGeometry_03 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
    }

    CompositionPathGeometry PathGeometry_04()
    {
        return _pathGeometry_04 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
    }

    CompositionPathGeometry PathGeometry_05()
    {
        return _pathGeometry_05 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
    }

    CompositionPathGeometry PathGeometry_06()
    {
        return _pathGeometry_06 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
    }

    CompositionPathGeometry PathGeometry_07()
    {
        return _pathGeometry_07 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
    }

    CompositionPathGeometry PathGeometry_08()
    {
        return _pathGeometry_08 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08())));
    }

    CompositionPathGeometry PathGeometry_09()
    {
        return _pathGeometry_09 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09())));
    }

    CompositionPathGeometry PathGeometry_10()
    {
        return _pathGeometry_10 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10())));
    }

    CompositionPathGeometry PathGeometry_11()
    {
        return _pathGeometry_11 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_00()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(PathGeometry_00(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, ThemeColor_Foreground());
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_01()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(PathGeometry_01(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_02()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_02());
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_03()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(PathGeometry_03(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_04()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(PathGeometry_04(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_05()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_05());
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_06()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(PathGeometry_06(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_07()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(PathGeometry_07(), { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_08()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry_08());
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_09()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_00, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_10()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_01, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_11()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_02);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_12()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_03, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_13()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_04, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_14()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_05);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_15()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_06, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_16()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_07, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_17()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_08);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_18()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_00, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_19()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_01, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_20()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_02);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_21()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_03, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_22()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_04, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_23()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_05);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_24()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_06, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_25()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_07, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_26()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_08);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_27()
    {
        // Offset:<24.383, 10.25>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_00, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_28()
    {
        // Offset:<24.383, 24.4125>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_01, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_29()
    {
        // Offset:<24.383, 37.75>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_02, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_30()
    {
        // Offset:<23.629, 10.25>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_03, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_31()
    {
        // Offset:<23.629, 24.4125>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_04, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_32()
    {
        // Offset:<23.629, 37.75>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_05, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_33()
    {
        // Offset:<23.872047, 10.25>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(PathGeometry_09(), { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_34()
    {
        // Offset:<23.872047, 24.4125>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(PathGeometry_10(), { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_35()
    {
        // Offset:<23.872047, 37.75>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(PathGeometry_11(), { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_36()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_00, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_37()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_01, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_38()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_02);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_39()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_03, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_40()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_04, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_41()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_05);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_42()
    {
        // Offset:<0, -10>
        const auto result = CreateSpriteShape(_pathGeometry_06, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -10.0F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_43()
    {
        // Offset:<0, -4.85>
        const auto result = CreateSpriteShape(_pathGeometry_07, { 1.0F, 0.0F, 0.0F, 1.0F, 0.0F, -4.8499999F }, _themeColor_Foreground);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Path 1
    CompositionSpriteShape SpriteShape_44()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry_08);
        result.FillBrush(_themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_45()
    {
        // Offset:<24.383, 10.25>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_00, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_46()
    {
        // Offset:<24.383, 24.4125>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_01, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_47()
    {
        // Offset:<24.383, 37.75>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_02, { 2.75F, 0.0F, 0.0F, 2.75F, 24.3829994F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_48()
    {
        // Offset:<23.629, 10.25>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_03, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_49()
    {
        // Offset:<23.629, 24.4125>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_04, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_50()
    {
        // Offset:<23.629, 37.75>, Scale:<2.75, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_05, { 2.75F, 0.0F, 0.0F, 2.75F, 23.6289997F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_51()
    {
        // Offset:<23.872047, 10.25>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_09, { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 10.25F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_52()
    {
        // Offset:<23.872047, 24.4125>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_10, { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 24.4125004F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 1
    CompositionSpriteShape SpriteShape_53()
    {
        // Offset:<23.872047, 37.75>, Rotation:-0.009138340298435101 degrees,
        // Scale:<2.749, 2.75>
        const auto result = CreateSpriteShape(_pathGeometry_11, { 2.74900007F, 0.0F, 0.0F, 2.75F, 23.8720474F, 37.75F }, _themeColor_Foreground);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 02 - Hamburger - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.850000024F, 0.0F }, { 0.75F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_2()
    {
        return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_3()
    {
        return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.0F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleXScalarAnimation_1p433_to_2p749_0()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.43256998F, _stepThenHoldEasingFunction);
        // Frame 60.
        result.InsertKeyFrame(0.75F, 1.43256998F, _holdThenStepEasingFunction);
        // Frame 68.
        result.InsertKeyFrame(0.850000024F, 2.88000011F, _cubicBezierEasingFunction_0);
        // Frame 79.
        result.InsertKeyFrame(0.987500012F, 2.74850011F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleXScalarAnimation_1p433_to_2p749_1()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.43256998F, _stepThenHoldEasingFunction);
        // Frame 40.
        result.InsertKeyFrame(0.5F, 1.43256998F, _holdThenStepEasingFunction);
        // Frame 48.
        result.InsertKeyFrame(0.600000024F, 2.88000011F, _cubicBezierEasingFunction_0);
        // Frame 59.
        result.InsertKeyFrame(0.737500012F, 2.74850011F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleXScalarAnimation_2p749_to_1p433_0()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.74900007F, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.375F, 2.74900007F, _holdThenStepEasingFunction);
        // Frame 39.
        result.InsertKeyFrame(0.487500012F, 1.43256998F, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleXScalarAnimation_2p749_to_1p433_1()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.74900007F, _stepThenHoldEasingFunction);
        // Frame 10.
        result.InsertKeyFrame(0.125F, 2.74900007F, _holdThenStepEasingFunction);
        // Frame 19.
        result.InsertKeyFrame(0.237499997F, 1.43256998F, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleYScalarAnimation_2p75_to_2p75_0()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.75F, _stepThenHoldEasingFunction);
        // Frame 60.
        result.InsertKeyFrame(0.75F, 2.75F, _holdThenStepEasingFunction);
        // Frame 68.
        result.InsertKeyFrame(0.850000024F, 2.73294997F, _cubicBezierEasingFunction_0);
        // Frame 79.
        result.InsertKeyFrame(0.987500012F, 2.75F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleYScalarAnimation_2p75_to_2p75_1()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.75F, _stepThenHoldEasingFunction);
        // Frame 40.
        result.InsertKeyFrame(0.5F, 2.75F, _holdThenStepEasingFunction);
        // Frame 48.
        result.InsertKeyFrame(0.600000024F, 2.73294997F, _cubicBezierEasingFunction_0);
        // Frame 59.
        result.InsertKeyFrame(0.737500012F, 2.75F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleYScalarAnimation_2p75_to_2p75_2()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.75F, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.375F, 2.75F, _holdThenStepEasingFunction);
        // Frame 39.
        result.InsertKeyFrame(0.487500012F, 2.75F, CubicBezierEasingFunction_3());
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Scale
    ScalarKeyFrameAnimation ScaleYScalarAnimation_2p75_to_2p75_3()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 2.75F, _stepThenHoldEasingFunction);
        // Frame 10.
        result.InsertKeyFrame(0.125F, 2.75F, _holdThenStepEasingFunction);
        // Frame 19.
        result.InsertKeyFrame(0.237499997F, 2.75F, _cubicBezierEasingFunction_3);
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_00());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_01());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_02());
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_03());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_04());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_05());
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_06());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_07());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_08());
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 03 - PointerOverToNormal
    // Layer aggregator
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_27());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_28());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_29());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_30());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_31());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_32());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_33());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_34());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_35());
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // Layer aggregator
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_09());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_10());
        // Layer: Right Caps 2
        shapes.Append(ContainerShape_11());
        return result;
    }

    // PreComp layer: Controls - 02 - Hamburger - 01 - NormalToPointerOver
    // Layer aggregator
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        const auto shapes = result.Shapes();
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_45());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_46());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_47());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_48());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_49());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_50());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_51());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_52());
        // Layer: Right Caps 2
        shapes.Append(SpriteShape_53());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_0()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 27.5079994F, 29.0F }, StepThenHoldEasingFunction());
        // Frame 60.
        result.InsertKeyFrame(0.75F, { 27.5079994F, 29.0F }, HoldThenStepEasingFunction());
        // Frame 68.
        result.InsertKeyFrame(0.850000024F, { 38.5040016F, 29.0F }, CubicBezierEasingFunction_0());
        // Frame 79.
        result.InsertKeyFrame(0.987500012F, { 37.5079994F, 29.0F }, CubicBezierEasingFunction_1());
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 06 - PressedToPointerOver
    // - Transforms for Controls - 02 - Hamburger - 06 - PressedToPointerOver Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_1()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 20.5079994F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 60.
        result.InsertKeyFrame(0.75F, { 20.5079994F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 68.
        result.InsertKeyFrame(0.850000024F, { 9.50800037F, 29.0F }, _cubicBezierEasingFunction_0);
        // Frame 79.
        result.InsertKeyFrame(0.987500012F, { 10.5039997F, 29.0F }, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_2()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 27.5079994F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 40.
        result.InsertKeyFrame(0.5F, { 27.5079994F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 48.
        result.InsertKeyFrame(0.600000024F, { 38.5040016F, 29.0F }, _cubicBezierEasingFunction_0);
        // Frame 59.
        result.InsertKeyFrame(0.737500012F, { 37.5079994F, 29.0F }, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 05 - PressedToNormal
    // - Transforms for Controls - 02 - Hamburger - 05 - PressedToNormal Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_3()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 20.5079994F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 40.
        result.InsertKeyFrame(0.5F, { 20.5079994F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 48.
        result.InsertKeyFrame(0.600000024F, { 9.50800037F, 29.0F }, _cubicBezierEasingFunction_0);
        // Frame 59.
        result.InsertKeyFrame(0.737500012F, { 10.5039997F, 29.0F }, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_4()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 37.5079994F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.375F, { 37.5079994F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 39.
        result.InsertKeyFrame(0.487500012F, { 27.5079994F, 29.0F }, CubicBezierEasingFunction_2());
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 04 - PointerOverToPressed
    // - Transforms for Controls - 02 - Hamburger - 04 - PointerOverToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_5()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 10.5039997F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.375F, { 10.5039997F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 39.
        result.InsertKeyFrame(0.487500012F, { 20.5079994F, 29.0F }, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_6()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 37.5079994F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 10.
        result.InsertKeyFrame(0.125F, { 37.5079994F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 19.
        result.InsertKeyFrame(0.237499997F, { 27.5079994F, 29.0F }, _cubicBezierEasingFunction_2);
        return result;
    }

    // - - PreComp layer: Controls - 02 - Hamburger - 02 - NormalToPressed
    // - Transforms for Controls - 02 - Hamburger - 02 - NormalToPressed Scale(1,1,0)
    // Layer: Right Caps 2
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation_7()
    {
        // Frame 0.
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 10.5039997F, 29.0F }, _stepThenHoldEasingFunction);
        // Frame 10.
        result.InsertKeyFrame(0.125F, { 10.5039997F, 29.0F }, _holdThenStepEasingFunction);
        // Frame 19.
        result.InsertKeyFrame(0.237499997F, { 20.5079994F, 29.0F }, _cubicBezierEasingFunction_2);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    AnimatedGlobalNavigationButtonVisualSource_AnimatedVisual(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 AnimatedGlobalNavigationButtonVisualSource::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet AnimatedGlobalNavigationButtonVisualSource::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color AnimatedGlobalNavigationButtonVisualSource::Foreground()
{
    return _themeForeground;
}

void AnimatedGlobalNavigationButtonVisualSource::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedGlobalNavigationButtonVisualSource::TryCreateAnimatedVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedGlobalNavigationButtonVisualSource::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (AnimatedGlobalNavigationButtonVisualSource_AnimatedVisual::IsRuntimeCompatible())
    {
        return winrt::make<AnimatedGlobalNavigationButtonVisualSource_AnimatedVisual>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

double AnimatedGlobalNavigationButtonVisualSource::FrameCount()
{
    return 80.0;
}

double AnimatedGlobalNavigationButtonVisualSource::Framerate()
{
    return 60.0;
}

TimeSpan AnimatedGlobalNavigationButtonVisualSource::Duration()
{
    return TimeSpan{ 13333333L };
}

double AnimatedGlobalNavigationButtonVisualSource::FrameToProgress(double frameNumber)
{
    return frameNumber / 80.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> AnimatedGlobalNavigationButtonVisualSource::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalToPointerOver_Start", 0.0 },
            { L"NormalToPointerOver_End", 0.113125 },
            { L"NormalToPressed_Start", 0.125625 },
            { L"NormalToPressed_End", 0.238125 },
            { L"PointerOverToNormal_Start", 0.250625 },
            { L"PointerOverToNormal_End", 0.363125 },
            { L"PointerOverToPressed_Start", 0.375625 },
            { L"PointerOverToPressed_End", 0.488125 },
            { L"PressedToNormal_Start", 0.500625 },
            { L"PressedToNormal_End", 0.738125 },
            { L"PressedToPointerOver_Start", 0.750625 },
            { L"PressedToPointerOver_End", 0.988125 },
        }
    ).GetView();
}

void AnimatedGlobalNavigationButtonVisualSource::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void AnimatedGlobalNavigationButtonVisualSource::SetScalarProperty(hstring const&, double)
{
}
