//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.2+gebbbdfc697
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedSettingsVisualSource.json
//       
//       Input file:
//           AnimatedSettingsVisualSource.json (28705 bytes created 9:26-07:00 Jun 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    97 |
// |--------------------------+-------|
// | Expression animators     |    11 |
// | KeyFrame animators       |    10 |
// | Reference parameters     |    11 |
// | Expression operations    |     4 |
// |--------------------------+-------|
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     7 |
// | ShapeVisuals             |     6 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     6 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals\AnimatedSettingsVisualSource.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(AnimatedSettingsVisualSource)
}
#include "AnimatedVisuals\AnimatedSettingsVisualSource.g.cpp"

class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    ::ABI::Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};
class AnimatedSettingsVisualSource_AnimatedVisual : public winrt::implements<AnimatedSettingsVisualSource_AnimatedVisual,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 20000000L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    CompositionColorBrush _themeColor_Foreground{ nullptr };
    CompositionPathGeometry _pathGeometry{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    InsetClip _insetClip_0{ nullptr };
    StepEasingFunction _holdThenStepEasingFunction{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
    {
        const auto result = _c.CreateBooleanKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue);
        return result;
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix, CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
    {
        // Frame 80.
        const auto result = CreateBooleanKeyFrameAnimation(0.666666687F, true);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
    {
        // Frame 40.
        const auto result = CreateBooleanKeyFrameAnimation(0.333333343F, true);
        // Frame 80.
        result.InsertKeyFrame(0.666666687F, false);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
    {
        // Frame 30.
        const auto result = CreateBooleanKeyFrameAnimation(0.25F, true);
        // Frame 40.
        result.InsertKeyFrame(0.333333343F, false);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 03 - PointerOverToNormal
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
    {
        // Frame 20.
        const auto result = CreateBooleanKeyFrameAnimation(0.166666672F, true);
        // Frame 30.
        result.InsertKeyFrame(0.25F, false);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_4()
    {
        // Frame 10.
        const auto result = CreateBooleanKeyFrameAnimation(0.0833333358F, true);
        // Frame 20.
        result.InsertKeyFrame(0.166666672F, false);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 01 - NormalToPointerOver
    BooleanKeyFrameAnimation IsVisibleBooleanAnimation_5()
    {
        // Frame 10.
        const auto result = CreateBooleanKeyFrameAnimation(0.0833333358F, false);
        return result;
    }

    // - Path 4+Path 3+Path 2+Path 1.PathGeometry
    winrt::com_ptr<CanvasGeometry> Geometry_0()
    {
        winrt::com_ptr<ID2D1Geometry> geometries[4]
        {
            Geometry_1().get()->Geometry(),
            Geometry_2().get()->Geometry(),
            Geometry_3().get()->Geometry(),
            Geometry_4().get()->Geometry(),
        };
        winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
        winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
            D2D1_FILL_MODE_WINDING,
            (ID2D1Geometry**)(&geometries),
            4,
            group.put()));
        auto result = winrt::make_self<CanvasGeometry>(group);
        return result;
    }

    // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
    winrt::com_ptr<CanvasGeometry> Geometry_1()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 48.8800011F, 30.9810009F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 49.1990013F, 29.9960003F }, { 49.7229996F, 29.0919991F }, { 50.4160004F, 28.3250008F } });
        sink->AddBezier({ { 50.5330009F, 28.1949997F }, { 50.7169991F, 28.1490002F }, { 50.8810005F, 28.2080002F } });
        sink->AddLine({ 52.5359993F, 28.7989998F });
        sink->AddBezier({ { 52.9850006F, 28.9589996F }, { 53.4790001F, 28.7259998F }, { 53.6389999F, 28.2770004F } });
        sink->AddBezier({ { 53.6549988F, 28.2329998F }, { 53.6669998F, 28.1879997F }, { 53.6749992F, 28.1420002F } });
        sink->AddLine({ 53.9900017F, 26.4109993F });
        sink->AddBezier({ { 54.0209999F, 26.2390003F }, { 54.1539993F, 26.1019993F }, { 54.3250008F, 26.066F } });
        sink->AddBezier({ { 54.8260002F, 25.9589996F }, { 55.3390007F, 25.9060001F }, { 55.8590012F, 25.9060001F } });
        sink->AddBezier({ { 56.3790016F, 25.9060001F }, { 56.8919983F, 25.9599991F }, { 57.3919983F, 26.066F } });
        sink->AddBezier({ { 57.5629997F, 26.1019993F }, { 57.6949997F, 26.2390003F }, { 57.7260017F, 26.4109993F } });
        sink->AddLine({ 58.0419998F, 28.1420002F });
        sink->AddBezier({ { 58.1279984F, 28.6110001F }, { 58.5769997F, 28.9209995F }, { 59.0460014F, 28.8360004F } });
        sink->AddBezier({ { 59.0919991F, 28.8279991F }, { 59.137001F, 28.8150005F }, { 59.1809998F, 28.7989998F } });
        sink->AddLine({ 60.8359985F, 28.2080002F });
        sink->AddBezier({ { 61.0F, 28.1490002F }, { 61.1850014F, 28.1949997F }, { 61.3019981F, 28.3250008F } });
        sink->AddBezier({ { 61.9949989F, 29.0919991F }, { 62.519001F, 29.9960003F }, { 62.8380013F, 30.9810009F } });
        sink->AddBezier({ { 62.8919983F, 31.1469994F }, { 62.8390007F, 31.3299999F }, { 62.7060013F, 31.4430008F } });
        sink->AddLine({ 61.3650017F, 32.5810013F });
        sink->AddBezier({ { 61.0019989F, 32.8889999F }, { 60.9580002F, 33.4350014F }, { 61.2659988F, 33.7980003F } });
        sink->AddBezier({ { 61.2960014F, 33.8339996F }, { 61.3289986F, 33.8670006F }, { 61.3650017F, 33.8969994F } });
        sink->AddLine({ 62.7060013F, 35.0359993F });
        sink->AddBezier({ { 62.8390007F, 35.1489983F }, { 62.8919983F, 35.3310013F }, { 62.8380013F, 35.4970016F } });
        sink->AddBezier({ { 62.519001F, 36.4819984F }, { 61.9949989F, 37.387001F }, { 61.3019981F, 38.1539993F } });
        sink->AddBezier({ { 61.1850014F, 38.2840004F }, { 61.0F, 38.3300018F }, { 60.8359985F, 38.2709999F } });
        sink->AddLine({ 59.1809998F, 37.6790009F });
        sink->AddBezier({ { 58.7319984F, 37.519001F }, { 58.2389984F, 37.7519989F }, { 58.0789986F, 38.2010002F } });
        sink->AddBezier({ { 58.0629997F, 38.2449989F }, { 58.0499992F, 38.2910004F }, { 58.0419998F, 38.3370018F } });
        sink->AddLine({ 57.7260017F, 40.0680008F });
        sink->AddBezier({ { 57.6949997F, 40.2400017F }, { 57.5629997F, 40.3759995F }, { 57.3919983F, 40.4119987F } });
        sink->AddBezier({ { 56.8919983F, 40.5180016F }, { 56.3790016F, 40.5730019F }, { 55.8590012F, 40.5730019F } });
        sink->AddBezier({ { 55.3390007F, 40.5730019F }, { 54.8260002F, 40.519001F }, { 54.3250008F, 40.4119987F } });
        sink->AddBezier({ { 54.1539993F, 40.3759995F }, { 54.0209999F, 40.2389984F }, { 53.9900017F, 40.0670013F } });
        sink->AddLine({ 53.6749992F, 38.3370018F });
        sink->AddBezier({ { 53.5900002F, 37.868F }, { 53.1409988F, 37.5569992F }, { 52.6720009F, 37.6430016F } });
        sink->AddBezier({ { 52.6259995F, 37.651001F }, { 52.5800018F, 37.6629982F }, { 52.5359993F, 37.6790009F } });
        sink->AddLine({ 50.8810005F, 38.2709999F });
        sink->AddBezier({ { 50.7169991F, 38.3300018F }, { 50.5330009F, 38.2840004F }, { 50.4160004F, 38.1539993F } });
        sink->AddBezier({ { 49.7229996F, 37.387001F }, { 49.1990013F, 36.4819984F }, { 48.8800011F, 35.4970016F } });
        sink->AddBezier({ { 48.8260002F, 35.3310013F }, { 48.8779984F, 35.1489983F }, { 49.0110016F, 35.0359993F } });
        sink->AddLine({ 50.3520012F, 33.8969994F });
        sink->AddBezier({ { 50.7150002F, 33.5890007F }, { 50.7599983F, 33.0439987F }, { 50.4519997F, 32.6809998F } });
        sink->AddBezier({ { 50.4220009F, 32.6450005F }, { 50.3880005F, 32.6110001F }, { 50.3520012F, 32.5810013F } });
        sink->AddLine({ 49.0110016F, 31.4430008F });
        sink->AddBezier({ { 48.8779984F, 31.3299999F }, { 48.8260002F, 31.1469994F }, { 48.8800011F, 30.9810009F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
    winrt::com_ptr<CanvasGeometry> Geometry_2()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 49.7949982F, 30.9759998F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 50.9109993F, 31.9239998F });
        sink->AddBezier({ { 50.9819984F, 31.9850006F }, { 51.0480003F, 32.0509987F }, { 51.1090012F, 32.1220016F } });
        sink->AddBezier({ { 51.7260017F, 32.8479996F }, { 51.637001F, 33.9370003F }, { 50.9109993F, 34.5540009F } });
        sink->AddLine({ 49.7949982F, 35.5019989F });
        sink->AddBezier({ { 50.0470009F, 36.1769981F }, { 50.4099998F, 36.8040009F }, { 50.8689995F, 37.3590012F } });
        sink->AddLine({ 52.2459984F, 36.8670006F });
        sink->AddBezier({ { 52.3339996F, 36.8349991F }, { 52.4249992F, 36.8110008F }, { 52.5169983F, 36.7939987F } });
        sink->AddBezier({ { 53.4550018F, 36.6230011F }, { 54.3530006F, 37.2439995F }, { 54.5239983F, 38.1819992F } });
        sink->AddLine({ 54.7859993F, 39.6209984F });
        sink->AddBezier({ { 55.1380005F, 39.6800003F }, { 55.4970016F, 39.7099991F }, { 55.8590012F, 39.7099991F } });
        sink->AddBezier({ { 56.2210007F, 39.7099991F }, { 56.5789986F, 39.6800003F }, { 56.9309998F, 39.6209984F } });
        sink->AddLine({ 57.1940002F, 38.1819992F });
        sink->AddBezier({ { 57.2109985F, 38.0900002F }, { 57.2340012F, 37.9990005F }, { 57.2659988F, 37.9109993F } });
        sink->AddBezier({ { 57.5870018F, 37.0139999F }, { 58.5740013F, 36.5460014F }, { 59.4720001F, 36.8670006F } });
        sink->AddLine({ 60.848999F, 37.3590012F });
        sink->AddBezier({ { 61.3069992F, 36.8040009F }, { 61.6710014F, 36.1769981F }, { 61.9230003F, 35.5019989F } });
        sink->AddLine({ 60.8069992F, 34.5540009F });
        sink->AddBezier({ { 60.7360001F, 34.493F }, { 60.6689987F, 34.4269981F }, { 60.6080017F, 34.355999F } });
        sink->AddBezier({ { 59.9910011F, 33.6300011F }, { 60.0810013F, 32.5410004F }, { 60.8069992F, 31.9239998F } });
        sink->AddLine({ 61.9230003F, 30.9759998F });
        sink->AddBezier({ { 61.6710014F, 30.3010006F }, { 61.3069992F, 29.6739998F }, { 60.848999F, 29.1189995F } });
        sink->AddLine({ 59.4720001F, 29.6119995F });
        sink->AddBezier({ { 59.3839989F, 29.6439991F }, { 59.2929993F, 29.6669998F }, { 59.2010002F, 29.684F } });
        sink->AddBezier({ { 58.2639999F, 29.8549995F }, { 57.3650017F, 29.2339993F }, { 57.1940002F, 28.2970009F } });
        sink->AddLine({ 56.9309998F, 26.8570004F });
        sink->AddBezier({ { 56.5789986F, 26.7980003F }, { 56.2210007F, 26.7679996F }, { 55.8590012F, 26.7679996F } });
        sink->AddBezier({ { 55.4970016F, 26.7679996F }, { 55.1380005F, 26.7980003F }, { 54.7859993F, 26.8570004F } });
        sink->AddLine({ 54.5239983F, 28.2959995F });
        sink->AddBezier({ { 54.507F, 28.3880005F }, { 54.4830017F, 28.4799995F }, { 54.4510002F, 28.5680008F } });
        sink->AddBezier({ { 54.1300011F, 29.4650002F }, { 53.1430016F, 29.9330006F }, { 52.2459984F, 29.6119995F } });
        sink->AddLine({ 50.8689995F, 29.1189995F });
        sink->AddBezier({ { 50.4099998F, 29.6739998F }, { 50.0470009F, 30.3010006F }, { 49.7949982F, 30.9759998F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
    winrt::com_ptr<CanvasGeometry> Geometry_3()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 53.7019997F, 33.2389984F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 53.7019997F, 32.0480003F }, { 54.6679993F, 31.0820007F }, { 55.8590012F, 31.0820007F } });
        sink->AddBezier({ { 57.0499992F, 31.0820007F }, { 58.0159988F, 32.0480003F }, { 58.0159988F, 33.2389984F } });
        sink->AddBezier({ { 58.0159988F, 34.4300003F }, { 57.0499992F, 35.3959999F }, { 55.8590012F, 35.3959999F } });
        sink->AddBezier({ { 54.6679993F, 35.3959999F }, { 53.7019997F, 34.4300003F }, { 53.7019997F, 33.2389984F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
    winrt::com_ptr<CanvasGeometry> Geometry_4()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 54.5649986F, 33.2389984F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 54.5649986F, 33.9539986F }, { 55.144001F, 34.5330009F }, { 55.8590012F, 34.5330009F } });
        sink->AddBezier({ { 56.5740013F, 34.5330009F }, { 57.1529999F, 33.9539986F }, { 57.1529999F, 33.2389984F } });
        sink->AddBezier({ { 57.1529999F, 32.5239983F }, { 56.5740013F, 31.9449997F }, { 55.8590012F, 31.9449997F } });
        sink->AddBezier({ { 55.144001F, 31.9449997F }, { 54.5649986F, 32.5239983F }, { 54.5649986F, 33.2389984F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _themeColor_Foreground = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // Path 4+Path 3+Path 2+Path 1.PathGeometry
    CompositionPathGeometry PathGeometry()
    {
        return _pathGeometry = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
    }

    // - PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
    // Transforms for Controls - 04 - Settings - 06 - PressedToPointerOver Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_0()
    {
        const auto result = _c.CreateSpriteShape(PathGeometry());
        result.CenterPoint({ 55.8590012F, 33.2389984F });
        result.Offset({ -31.8590012F, -9.23899841F });
        result.Scale({ 3.0F, 3.0F });
        result.FillBrush(ThemeColor_Foreground());
        StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360_0(), RootProgress());
        return result;
    }

    // - PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
    // Transforms for Controls - 04 - Settings - 05 - PressedToNormal Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_1()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry);
        result.CenterPoint({ 55.8590012F, 33.2389984F });
        result.Offset({ -31.8590012F, -9.23899841F });
        result.Scale({ 3.0F, 3.0F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
    // Transforms for Controls - 04 - Settings - 04 - PointerOverToPressed Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_2()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry);
        result.CenterPoint({ 55.8590012F, 33.2389984F });
        result.Offset({ -31.8590012F, -9.23899841F });
        result.Scale({ 3.0F, 3.0F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_m20_0(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 04 - Settings - 03 - PointerOverToNormal
    // Transforms for Controls - 04 - Settings - 03 - PointerOverToNormal Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_3()
    {
        // Offset:<-143.577, -75.716995>, Scale:<3, 3>
        const auto result = CreateSpriteShape(_pathGeometry, { 3.0F, 0.0F, 0.0F, 3.0F, -143.576996F, -75.7169952F }, _themeColor_Foreground);
        return result;
    }

    // - PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
    // Transforms for Controls - 04 - Settings - 02 - NormalToPressed Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_4()
    {
        const auto result = _c.CreateSpriteShape(_pathGeometry);
        result.CenterPoint({ 55.8590012F, 33.2389984F });
        result.Offset({ -31.8590012F, -9.23899841F });
        result.Scale({ 3.0F, 3.0F });
        result.FillBrush(_themeColor_Foreground);
        StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_m20_1(), _rootProgress);
        return result;
    }

    // - PreComp layer: Controls - 04 - Settings - 01 - NormalToPointerOver
    // Transforms for Controls - 04 - Settings - 01 - NormalToPointerOver Scale(1,1,0)
    // Path 4+Path 3+Path 2+Path 1
    CompositionSpriteShape SpriteShape_5()
    {
        // Offset:<-143.577, -75.716995>, Scale:<3, 3>
        const auto result = CreateSpriteShape(_pathGeometry, { 3.0F, 0.0F, 0.0F, 3.0F, -143.576996F, -75.7169952F }, _themeColor_Foreground);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
    ContainerVisual ContainerVisual_0()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(InsetClip_0());
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 06 - PressedToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
    ContainerVisual ContainerVisual_1()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 05 - PressedToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_1());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
    ContainerVisual ContainerVisual_2()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 04 - PointerOverToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_2());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_2(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 03 - PointerOverToNormal
    ContainerVisual ContainerVisual_3()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 03 - PointerOverToNormal Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_3());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_3(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
    ContainerVisual ContainerVisual_4()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.IsVisible(false);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 02 - NormalToPressed Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_4());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_4(), _rootProgress);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 01 - NormalToPointerOver
    ContainerVisual ContainerVisual_5()
    {
        const auto result = _c.CreateContainerVisual();
        result.Clip(_insetClip_0);
        result.Size({ 48.0F, 48.0F });
        // Scale:<1, 1>
        result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
        // Transforms for Controls - 04 - Settings - 01 - NormalToPointerOver Scale(1,1,0)
        result.Children().InsertAtTop(ShapeVisual_5());
        StartProgressBoundAnimation(result, L"IsVisible", IsVisibleBooleanAnimation_5(), _rootProgress);
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        const auto children = result.Children();
        // PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
        children.InsertAtTop(ContainerVisual_0());
        // PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
        children.InsertAtTop(ContainerVisual_1());
        // PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
        children.InsertAtTop(ContainerVisual_2());
        // PreComp layer: Controls - 04 - Settings - 03 - PointerOverToNormal
        children.InsertAtTop(ContainerVisual_3());
        // PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
        children.InsertAtTop(ContainerVisual_4());
        // PreComp layer: Controls - 04 - Settings - 01 - NormalToPointerOver
        children.InsertAtTop(ContainerVisual_5());
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 1.0F, 1.0F });
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_1()
    {
        return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.0F, 0.0F }, { 0.0F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    InsetClip InsetClip_0()
    {
        const auto result = _insetClip_0 = _c.CreateInsetClip();
        return result;
    }

    // - - PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
    // - Transforms for Controls - 04 - Settings - 06 - PressedToPointerOver Scale(1,1,0)
    // ShapeGroup: Group 1
    // Rotation
    ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360_0()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
        // Frame 70.
        result.InsertKeyFrame(0.583333313F, 0.0F, HoldThenStepEasingFunction());
        // Frame 80.
        result.InsertKeyFrame(0.666666687F, -20.0F, CubicBezierEasingFunction_0());
        // Frame 119.
        result.InsertKeyFrame(0.991666675F, 360.0F, CubicBezierEasingFunction_1());
        return result;
    }

    // - - PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
    // - Transforms for Controls - 04 - Settings - 05 - PressedToNormal Scale(1,1,0)
    // ShapeGroup: Group 1
    // Rotation
    ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360_1()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.25F, 0.0F, _holdThenStepEasingFunction);
        // Frame 40.
        result.InsertKeyFrame(0.333333343F, -20.0F, _cubicBezierEasingFunction_0);
        // Frame 79.
        result.InsertKeyFrame(0.658333361F, 360.0F, _cubicBezierEasingFunction_1);
        return result;
    }

    // - - PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
    // - Transforms for Controls - 04 - Settings - 04 - PointerOverToPressed Scale(1,1,0)
    // ShapeGroup: Group 1
    // Rotation
    ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_m20_0()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        // Frame 30.
        result.InsertKeyFrame(0.25F, 0.0F, _holdThenStepEasingFunction);
        // Frame 39.
        result.InsertKeyFrame(0.324999988F, -20.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // - - PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
    // - Transforms for Controls - 04 - Settings - 02 - NormalToPressed Scale(1,1,0)
    // ShapeGroup: Group 1
    // Rotation
    ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_m20_1()
    {
        // Frame 0.
        const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
        // Frame 10.
        result.InsertKeyFrame(0.0833333358F, 0.0F, _holdThenStepEasingFunction);
        // Frame 19.
        result.InsertKeyFrame(0.158333331F, -20.0F, _cubicBezierEasingFunction_0);
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 06 - PressedToPointerOver
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_0());
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 05 - PressedToNormal
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_1()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_1());
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 04 - PointerOverToPressed
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_2()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_2());
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 03 - PointerOverToNormal
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_3()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Scale:3,3, Offset:<-31.859001, -9.238998>
        result.Shapes().Append(SpriteShape_3());
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 02 - NormalToPressed
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_4()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // ShapeGroup: Group 1
        result.Shapes().Append(SpriteShape_4());
        return result;
    }

    // PreComp layer: Controls - 04 - Settings - 01 - NormalToPointerOver
    // Shape tree root for layer: Layer 2
    ShapeVisual ShapeVisual_5()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 48.0F, 48.0F });
        // Scale:3,3, Offset:<-31.859001, -9.238998>
        result.Shapes().Append(SpriteShape_5());
        return result;
    }

    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    AnimatedSettingsVisualSource_AnimatedVisual(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 48.0F, 48.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 AnimatedSettingsVisualSource::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet AnimatedSettingsVisualSource::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color AnimatedSettingsVisualSource::Foreground()
{
    return _themeForeground;
}

void AnimatedSettingsVisualSource::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedSettingsVisualSource::TryCreateAnimatedVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics = nullptr;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AnimatedSettingsVisualSource::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (AnimatedSettingsVisualSource_AnimatedVisual::IsRuntimeCompatible())
    {
        return winrt::make<AnimatedSettingsVisualSource_AnimatedVisual>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

double AnimatedSettingsVisualSource::FrameCount()
{
    return 120.0;
}

double AnimatedSettingsVisualSource::Framerate()
{
    return 60.0;
}

TimeSpan AnimatedSettingsVisualSource::Duration()
{
    return TimeSpan{ 20000000L };
}

double AnimatedSettingsVisualSource::FrameToProgress(double frameNumber)
{
    return frameNumber / 120.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> AnimatedSettingsVisualSource::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalToPointerOver_Start", 0.0 },
            { L"NormalToPointerOver_End", 0.0754166666666667 },
            { L"NormalToPressed_Start", 0.08375 },
            { L"NormalToPressed_End", 0.15875 },
            { L"PointerOverToNormal_Start", 0.167083333333333 },
            { L"PointerOverToNormal_End", 0.242083333333333 },
            { L"PointerOverToPressed_Start", 0.250416666666667 },
            { L"PointerOverToPressed_End", 0.325416666666667 },
            { L"PressedToNormal_Start", 0.33375 },
            { L"PressedToNormal_End", 0.65875 },
            { L"PressedToPointerOver_Start", 0.667083333333333 },
            { L"PressedToPointerOver_End", 0.992083333333333 },
        }
    ).GetView();
}

void AnimatedSettingsVisualSource::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void AnimatedSettingsVisualSource::SetScalarProperty(hstring const&, double)
{
}
