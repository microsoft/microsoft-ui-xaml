name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
  minimumExpectedTestsExecutedCount: 35  # Sanity check for minimum expected tests to be reported
  Packaging.EnableSBOMSigning: true
jobs:
- job: Build
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  condition:
    eq(variables['useBuildOutputFromBuildId'],'')
  pool: 
    ${{ if eq(variables['System.CollectionUri'], 'https://dev.azure.com/ms/') }}:
      name: WinDevPoolOSS-L
    ${{ if ne(variables['System.CollectionUri'], 'https://dev.azure.com/ms/') }}:
      name: WinDevPool-L
    demands: ImageOverride -equals WinDevVS16-9
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      Debug_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Debug'
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_Arm:
        buildPlatform: 'arm'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'arm64'
        buildConfiguration: 'Release'

  variables:
    appxPackageDir : $(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages
    buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
    publishDir : $(Build.ArtifactStagingDirectory)
    artifactsDir: $(Build.SourcesDirectory)\Artifacts
    sbomdir: $(Build.ArtifactStagingDirectory)\sbom\$(buildConfiguration)\$(buildPlatform)
  steps:

  # Download and extract nuget package with non-stubbed MicrosoftTelemetry.h header
  - task: DownloadPackage@1
    displayName: 'Download Microsoft.Telemetry.Inbox.Native'
    inputs:
      feed: '/3415933f-ac0d-4766-8c0a-3f4c247c25f5'                         # 0
      view: 'ef61a1c1-003b-4a27-bde5-beec8301021b'                          # Release
      definition: '2fe60c09-c66f-4275-ae2d-f015c7170c72'                    # Microsoft.Telemetry.Inbox.Native
      version: '10.0.18362.1-190318-1202.19h1-release.amd64fre'             # latest version
      downloadPath: '$(System.DefaultWorkingDirectory)'                     # download and extract to repo root

  # Replace the stubbed MicrosoftTelemetry.h with the real one
  # Delete the existing stubbed MicrosoftTelemetry.h first, to ensure that if it is no longer at the expected path that the task, and build, fails
  - script: |
     del $(System.DefaultWorkingDirectory)\dev\telemetry\MicrosoftTelemetry.h
     move /Y $(System.DefaultWorkingDirectory)\build\native\inc\MicrosoftTelemetry.h $(System.DefaultWorkingDirectory)\dev\telemetry\
    failOnStderr: true
    displayName: 'Replace existing stubbed MicrosoftTelemetry.h header with the real version from the nuget package'

  - template: AzurePipelinesTemplates\MUX-BuildDevProject-Steps.yml
    parameters:
      signOutput: true

  - script: |
     mkdir $(sbomdir)
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generate SBOM manifest'
    inputs:
      BuildDropPath: $(sbomdir)

  - template: AzurePipelinesTemplates\MUX-PublishProjectOutput-Steps.yml

# Create Nuget Package
- template: AzurePipelinesTemplates\MUX-CreateNugetPackage-Job.yml
  parameters:
    jobName: CreateNugetPackage
    dependsOn: Build
    signOutput: true
    useReleaseTag: '$(MUXFinalRelease)'
    prereleaseVersionTag: prerelease

- template: AzurePipelinesTemplates\MUX-PushCBSVpack-Job.yml
  parameters:
    dependsOn: Build

- template: AzurePipelinesTemplates\MUX-ComplianceChecks-Job.yml
  parameters:
    dependsOn: CreateVPack

# Build solution that depends on nuget package
- template: AzurePipelinesTemplates\MUX-NugetReleaseTest-Job.yml
  parameters:
    buildJobName: 'BuildNugetPkgTests'
    buildArtifactName: 'NugetPkgTestsDrop'
    runTestJobName: 'RunNugetPkgTestsInHelix'
    helixType: 'test/nuget'
    dependsOn: CreateNugetPackage
    useFrameworkPkg: false

# Framework package tests
- template: AzurePipelinesTemplates\MUX-NugetReleaseTest-Job.yml
  parameters:
    buildJobName: 'BuildFrameworkPkgTests'
    buildArtifactName: 'FrameworkPkgTestsDrop'
    runTestJobName: 'RunFrameworkPkgTestsInHelix'
    helixType: 'test/frpkg'
    dependsOn: CreateNugetPackage
    useFrameworkPkg: true

- template: AzurePipelinesTemplates\MUX-ProcessTestResults-Job.yml
  parameters:
    dependsOn:
    - RunNugetPkgTestsInHelix
    - RunFrameworkPkgTestsInHelix
    rerunPassesRequiredToAvoidFailure: 5
    minimumExpectedTestsExecutedCount: $(minimumExpectedTestsExecutedCount)

# NuGet package WACK tests
- template: AzurePipelinesTemplates\MUX-WACKTests-Job.yml
  parameters:
    name: 'NugetPkgWACKTests'
    dependsOn: BuildNugetPkgTests
    artifactName: 'NugetPkgTestsDrop'

# Framework package WACK tests
- template: AzurePipelinesTemplates\MUX-WACKTests-Job.yml
  parameters:
    name: 'FrameworkPkgWACKTests'
    dependsOn: BuildFrameworkPkgTests
    artifactName: 'FrameworkPkgTestsDrop'