parameters:
  name: 'RunTestsInHelix'
  dependsOn: ''
  condition: ''
  testSuite: DevTestSuite
  helixType: test/devtest
  # If a Pipeline runs this template more than once, this parameter should be unique per build flavor to differentiate the
  # the different test runs:
  artifactName: 'drop'
  maxParallel: 4
  rerunPassesRequiredToAvoidFailure: 5
  taefQuery: ''
  # if 'useBuildOutputFromBuildId' is set, we will default to using a build from this pipeline:
  useBuildOutputFromPipeline: $(System.DefinitionId)
  matrix: 
    Debug_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'debug'
      # %3b is the escape code for ';' which is used as the delimiter
      openHelixTargetQueues: 'windows.10.amd64.clientrs2.open.xaml%3bwindows.10.amd64.clientrs5.open.xaml'
      closedHelixTargetQueues: 'windows.10.amd64.clientrs2.xaml%3bwindows.10.amd64.clientrs5.xaml'
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'release'
      openHelixTargetQueues: 'windows.10.amd64.client19h1.open.xaml%3bwindows.10.amd64.clientrs3.open.xaml'
      closedHelixTargetQueues: 'windows.10.amd64.client19h1.xaml%3bwindows.10.amd64.clientrs3.xaml'
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'release'
      openHelixTargetQueues: 'windows.10.amd64.clientrs4.open.xaml'
      closedHelixTargetQueues: 'windows.10.amd64.clientrs4.xaml'

jobs:
- job: ${{ parameters.name }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: ${{ parameters.maxParallel }}
    matrix: ${{ parameters.matrix }}
  variables:
    artifactsDir: $(Build.SourcesDirectory)\Artifacts
    helixCommonArgs: '/binaryLogger:$(Build.SourcesDirectory)/${{parameters.name}}.$(buildPlatform).$(buildConfiguration).binlog /p:HelixBuild=$(Build.BuildId).$(buildPlatform).$(buildConfiguration) /p:Platform=$(buildPlatform) /p:Configuration=$(buildConfiguration) /p:HelixType=${{parameters.helixType}} /p:TestSuite=${{parameters.testSuite}} /p:ProjFilesPath=$(Build.ArtifactStagingDirectory) /p:rerunPassesRequiredToAvoidFailure=${{parameters.rerunPassesRequiredToAvoidFailure}}'

      
  steps:
  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'
      
  - template: MUX-InstallNuget-Steps.yml

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),eq(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),ne(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      buildType: specific
      buildVersionToDownload: specific
      project: $(System.TeamProjectId)
      pipeline: ${{ parameters.useBuildOutputFromPipeline }}
      buildId: $(useBuildOutputFromBuildId)
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: powershell@2
    displayName: 'PrepareHelixPayload.ps1'
    inputs:
      targetType: filePath
      filePath: build\Helix\PrepareHelixPayload.ps1
      arguments: -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)' -ArtifactName '${{ parameters.artifactName }}'
      
  - task: CmdLine@1
    displayName: 'Display Helix payload contents'
    inputs:
      filename: 'dir'
      arguments: '/s $(Build.SourcesDirectory)\HelixPayload'

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControls.Test.dll'
      outputProjFileName: 'RunTestsInHelix-InteractionTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControlsTestApp.appx'
      outputProjFileName: 'RunTestsInHelix-ApiTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'IXMPTestApp.appx'
      outputProjFileName: 'RunTestsInHelix-IXMPTestAppTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),eq('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControls.ReleaseTest.dll'
      outputProjFileName: 'RunTestsInHelix-NugetTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - task: PublishBuildArtifacts@1
    displayName: 'Publish generated .proj files'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: ${{ parameters.artifactName }}
      
  - task: DotNetCoreCLI@2
    displayName: 'Run tests in Helix (open queues)'
    condition: and(succeeded(),eq(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      command: custom
      projects: build\Helix\RunTestsInHelix.proj
      custom: msbuild
      arguments: '$(helixCommonArgs) /p:IsExternal=true /p:Creator=WinUI /p:HelixTargetQueues=$(openHelixTargetQueues)'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests in Helix (closed queues)'
    condition: and(succeeded(),ne(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      command: custom
      projects: build\Helix\RunTestsInHelix.proj
      custom: msbuild
      arguments: '$(helixCommonArgs) /p:HelixTargetQueues=$(closedHelixTargetQueues)'
