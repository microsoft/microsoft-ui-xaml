parameters:
  name: 'RunTestsInHelix'
  dependsOn: ''
  condition: ''
  testSuite: DevTestSuite
  helixType: test/devtest
  # If a Pipeline runs this template more than once, this parameter should be unique per build flavor to differentiate the
  # the different test runs:
  artifactName: 'drop'
  maxParallel: 4
  rerunPassesRequiredToAvoidFailure: 5
  taefQuery: ''
  # if 'useBuildOutputFromBuildId' is set, we will default to using a build from this pipeline:
  useBuildOutputFromPipeline: $(System.DefinitionId)
  matrix: 
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'release'
      # openHelixTargetQueues: 'windows.10.amd64.clientrs5.open.xaml'
      # closedHelixTargetQueues: 'windows.10.amd64.clientrs5.xaml'
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'release'
      # openHelixTargetQueues: 'windows.10.amd64.client.open.reunion'
      # closedHelixTargetQueues: 'windows.10.amd64.client20h2.xaml'

jobs:
- job: ${{ parameters.name }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: ${{ parameters.maxParallel }}
    matrix: ${{ parameters.matrix }}
  variables:
    artifactsDir: $(Build.SourcesDirectory)\Artifacts
    helixCommonArgs: '/binaryLogger:$(Build.SourcesDirectory)/${{parameters.name}}.$(buildPlatform).$(buildConfiguration).binlog /p:HelixBuild=$(Build.BuildId).$(buildPlatform).$(buildConfiguration) /p:Platform=$(buildPlatform) /p:Configuration=$(buildConfiguration) /p:HelixType=${{parameters.helixType}}$(buildPlatform)$(buildConfiguration) /p:TestSuite=${{parameters.testSuite}} /p:ProjFilesPath=$(Build.ArtifactStagingDirectory) /p:rerunPassesRequiredToAvoidFailure=${{parameters.rerunPassesRequiredToAvoidFailure}}'
    # testpayloadArtifactName: TestPayload-${{ parameters.testSuite}}

      
  steps:
  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'
      
  - template: MUX-InstallNuget-Steps.yml

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),eq(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),ne(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      buildType: specific
      buildVersionToDownload: specific
      project: $(System.TeamProjectId)
      pipeline: ${{ parameters.useBuildOutputFromPipeline }}
      buildId: $(useBuildOutputFromBuildId)
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: powershell@2
    displayName: 'PrepareHelixPayload.ps1'
    inputs:
      targetType: filePath
      filePath: build\Helix\PrepareHelixPayload.ps1
      arguments: -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)' -ArtifactName '${{ parameters.artifactName }}'
      
  - task: CmdLine@1
    displayName: 'Display Helix payload contents'
    inputs:
      filename: 'dir'
      arguments: '/s $(Build.SourcesDirectory)\HelixPayload'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: TestPayload'
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\HelixPayload
      artifactName: TestPayload-${{ parameters.testSuite}}


  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControls.Test.dll'
      outputProjFileName: 'RunTestsInHelix-InteractionTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControlsTestApp.msix'
      outputProjFileName: 'RunTestsInHelix-ApiTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),ne('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'IXMPTestApp.msix'
      outputProjFileName: 'RunTestsInHelix-IXMPTestAppTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - template: MUX-CreateHelixProjFile-Steps.yml
    parameters:
      condition: and(succeeded(),eq('${{ parameters.testSuite }}','NugetTestSuite'))
      testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
      testFilePattern: 'MUXControls.ReleaseTest.dll'
      outputProjFileName: 'RunTestsInHelix-NugetTests.proj'
      taefQuery: ${{ parameters.taefQuery }}

  - task: CopyFiles@2
    displayName: 'Copy helix work item proj files'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\helixworkitems'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\$(buildPlatform)$(buildConfiguration)\'
      Contents: '*.proj'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish generated .proj files'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: TestWorkItems-${{ parameters.testSuite}}
      
  # - task: DotNetCoreCLI@2
  #   displayName: 'Run tests in Helix (open queues)'
  #   condition: and(succeeded(),eq(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #   inputs:
  #     command: custom
  #     projects: build\Helix\RunTestsInHelix.proj
  #     custom: msbuild
  #     arguments: '$(helixCommonArgs) /p:IsExternal=true /p:Creator=WinUI /p:HelixTargetQueues=$(openHelixTargetQueues)'

  # - task: DotNetCoreCLI@2
  #   displayName: 'Run tests in Helix (closed queues)'
  #   condition: and(succeeded(),ne(variables['System.CollectionUri'],'https://dev.azure.com/ms/'))
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #     HelixAccessToken: $(HelixApiAccessToken)
  #   inputs:
  #     command: custom
  #     projects: build\Helix\RunTestsInHelix.proj
  #     custom: msbuild
  #     arguments: '$(helixCommonArgs) /p:HelixTargetQueues=$(closedHelixTargetQueues)'


- job: RunTestsOnPipeline
  dependsOn: ${{ parameters.name }}
  condition: not(failed())
  pool:
    name: WinDevPoolOSS-Test
    demands: ImageOverride -equals Win10-22H2

  timeoutInMinutes: 30
  # strategy:
  #   parallel: 10

  variables:
    winuiHelixVersion: 0.5.7
    helixScriptPath: $(Build.SourcesDirectory)\build\Helix\packages\Microsoft.Internal.WinUI.Helix.$(winuiHelixVersion)\scripts\pipeline
    testOS: Win10-22H2
    workItemsProjNameFilter: '*proj'
    buildPlatform: x86
    buildConfiguration: release
    buildFlavor: $(buildConfiguration)$(buildPlatform)
    workItemsProjDir: $(Build.SourcesDirectory)\TestWorkItems-${{ parameters.testSuite}}\$(buildFlavor)
    testPayloadDir: $(Build.SourcesDirectory)\TestPayload-${{ parameters.testSuite}}\$(buildConfiguration)\$(buildPlatform)
    uploadRoot: c:\uploadroot
    uploadRootInner: $(uploadRoot)\$(testOS)\$(buildFlavor)
    testOutputArtifactName: TestOutput
    testRunTitlePrefix: ${{ parameters.testSuite }}$(testOS)$(buildFlavor)
    testRunTitle: '$(testRunTitlePrefix)$(System.JobPositionInPhase)'
  steps:
  - task: PowerShell@2
    displayName: 'Display OS version info'
    inputs:
      targetType: 'inline'
      script: |
        Get-Item -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion'

  - template: MUX-InstallNuget-Steps.yml

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  - task: DownloadBuildArtifacts@0 
    inputs: 
      # buildType: specific
      # buildVersionToDownload: specific
      # project: $(System.TeamProjectId)
      # pipeline: $(_useBuildOutputFromPipeline)
      # buildId: $(useBuildOutputFromBuildId)
      artifactName: TestWorkItems-${{ parameters.testSuite}}
      downloadPath: $(Build.SourcesDirectory)
      # itemPattern: '**/$(buildFlavor)/**'

  - task: DownloadBuildArtifacts@0 
    inputs: 
      # buildType: specific
      # buildVersionToDownload: specific
      # project: $(System.TeamProjectId)
      # pipeline: $(_useBuildOutputFromPipeline)
      # buildId: $(useBuildOutputFromBuildId)
      artifactName: TestPayload-${{ parameters.testSuite}}
      downloadPath: $(Build.SourcesDirectory)
      # itemPattern: '**/$(buildConfiguration)/$(buildPlatform)**'

  # - task: powershell@2
  #   displayName: 'UpdateUnreliableTests.ps1'
  #   condition: succeededOrFailed()
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #     HelixAccessToken: $(HelixApiAccessToken)
  #   inputs:
  #     targetType: filePath
  #     filePath: $(helixScriptPath)\UpdateUnreliableTests.ps1
  #     arguments: -RerunPassesRequiredToAvoidFailure '${{ parameters.rerunPassesRequiredToAvoidFailure }}'

# -JobPositionInPhase $(System.JobPositionInPhase) -TotalJobsInPhase $(System.TotalJobsInPhase)
  - task: powershell@2
    displayName: Run Tests
    timeoutInMinutes: 60
    inputs:
      targetType: filePath
      filePath: $(helixScriptPath)\RunTestPassSliceOnBuildAgent.ps1
      arguments: -WorkItemProjFileNameFilter $(workItemsProjNameFilter) -WorkItemProjDir $(workItemsProjDir) -TestPayloadDir $(testPayloadDir) -UploadRoot $(uploadRootInner) -JobPositionInPhase 1 -TotalJobsInPhase 20 -RerunPassesRequiredToAvoidFailure ${{ parameters.rerunPassesRequiredToAvoidFailure }}
      errorActionPreference: stop
      workingDirectory: $(helixScriptPath)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish TestOutput artifact'
    condition: always()
    inputs:
      PathtoPublish: $(uploadRoot)
      artifactName: $(testOutputArtifactName)

  # - task: PublishTestResults@2
  #   condition: always()
  #   inputs:
  #     testResultsFormat: xUnit
  #     testResultsFiles: testResults-*.xml
  #     searchFolder: $(Build.SourcesDirectory)\build\PipelineScripts
  #     mergeTestResults: true
  #     failTaskOnFailedTests: true 
  #     testRunTitle: '$(testRunTitle)'
  #     buildPlatform: $(buildPlatform)
  #     buildConfiguration: $(buildConfiguration)

  # - task: powershell@2
  #   displayName: 'UpdateUnreliableTests.ps1'
  #   condition: always()
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #   inputs:
  #     targetType: filePath
  #     filePath: $(helixScriptPath)\UpdateUnreliableTests-Pipeline.ps1
  #     arguments: -RerunPassesRequiredToAvoidFailure ${{ parameters.rerunPassesRequiredToAvoidFailure }} -TestRunTitle $(testRunTitle) -SubResultsDirPath $(uploadRootInner)