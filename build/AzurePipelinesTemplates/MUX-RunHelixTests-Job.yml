parameters:
  dependsOn: ''
  condition: succeeded()
  testSuite: devtest 
  # If a Pipeline runs this template more than once, this parameter should be unique per build flavor to differentiate the
  # the different test runs:
  artifactName: 'drop'
  maxParallel: 10
  rerunPassesRequiredToAvoidFailure: 5
  taefQuery: ''
  # if 'useBuildOutputFromBuildId' is set, we will default to using a build from this pipeline:
  
  matrix: 
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'release'
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'release'

jobs:
- job: CreateTestPayload_${{ parameters.testSuite }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  pool: 
    ${{ if eq(variables['System.CollectionUri'], 'https://dev.azure.com/ms/') }}:
      name: WinDevPoolOSS-S
    ${{ if ne(variables['System.CollectionUri'], 'https://dev.azure.com/ms/') }}:
      name: WinDevPool-S
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix: ${{ parameters.matrix }}
  variables:
    artifactsDir: $(Build.SourcesDirectory)\Artifacts
    useBuildOutputFromPipeline: $(System.DefinitionId)
    useBuildOutputFromBuildId: ''

  steps:
  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'
      
  - template: MUX-InstallNuget-Steps.yml

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),eq(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: DownloadBuildArtifacts@0 
    condition:
      and(succeeded(),ne(variables['useBuildOutputFromBuildId'],''))
    inputs: 
      buildType: specific
      buildVersionToDownload: specific
      project: $(System.TeamProjectId)
      pipeline: $(useBuildOutputFromPipeline)
      buildId: $(useBuildOutputFromBuildId)
      artifactName: ${{ parameters.artifactName }} 
      downloadPath: '$(artifactsDir)'

  - task: powershell@2
    displayName: 'PrepareHelixPayload.ps1'
    inputs:
      targetType: filePath
      filePath: build\Helix\PrepareHelixPayload.ps1
      arguments: -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)' -ArtifactName '${{ parameters.artifactName }}'
      
  - task: CmdLine@1
    displayName: 'Display Helix payload contents'
    inputs:
      filename: 'dir'
      arguments: '/s $(Build.SourcesDirectory)\HelixPayload'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: TestPayload-${{ parameters.testSuite}}'
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\HelixPayload
      artifactName: TestPayload-${{ parameters.testSuite}}


  - ${{ if eq(parameters.testSuite, 'devtest') }}:
    - template: MUX-CreateHelixProjFile-Steps.yml
      parameters:
        testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
        testFilePattern: 'MUXControls.Test.dll'
        outputProjFileName: 'RunTestsInHelix-InteractionTests.proj'
        taefQuery: ${{ parameters.taefQuery }}
    - template: MUX-CreateHelixProjFile-Steps.yml
      parameters:
        testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
        testFilePattern: 'MUXControlsTestApp.msix'
        outputProjFileName: 'RunTestsInHelix-ApiTests.proj'
        taefQuery: ${{ parameters.taefQuery }}
    - template: MUX-CreateHelixProjFile-Steps.yml
      parameters:
        testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
        testFilePattern: 'IXMPTestApp.msix'
        outputProjFileName: 'RunTestsInHelix-IXMPTestAppTests.proj'
        taefQuery: ${{ parameters.taefQuery }}

  - ${{ if in(parameters.testSuite, 'nupkg', 'fwpkg') }}:
    - template: MUX-CreateHelixProjFile-Steps.yml
      parameters:
        testBinaryDirectoryPath: '$(Build.SourcesDirectory)\HelixPayload\$(buildConfiguration)\$(buildPlatform)'
        testFilePattern: 'MUXControls.ReleaseTest.dll'
        outputProjFileName: 'RunTestsInHelix-NugetTests.proj'
        taefQuery: ${{ parameters.taefQuery }}

  - task: CopyFiles@2
    displayName: 'Copy helix work item proj files'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\helixworkitems'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\$(buildPlatform)$(buildConfiguration)\'
      Contents: '*.proj'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish generated .proj files'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: TestWorkItems-${{ parameters.testSuite}}

- template: MUX-RunTestsOnPipeline-Job.yml
  parameters:
    runTestJobName: RunTestsRS5x86_${{ parameters.testSuite }}
    dependsOn: CreateTestPayload_${{ parameters.testSuite }}
    parallel: ${{ parameters.maxParallel }}
    testSuite: ${{ parameters.testSuite }}
    testOS: Win10-RS5
    buildPlatform: x86
    buildConfiguration: release

- template: MUX-RunTestsOnPipeline-Job.yml
  parameters:
    runTestJobName: RunTests22H2x64_${{ parameters.testSuite }}
    dependsOn: CreateTestPayload_${{ parameters.testSuite }}
    parallel: ${{ parameters.maxParallel }}
    testSuite: ${{ parameters.testSuite }}
    testOS: Win10-22H2
    buildPlatform: x64
    buildConfiguration: release