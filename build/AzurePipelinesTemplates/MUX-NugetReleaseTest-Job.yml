parameters:
  buildJobName: 'BuildNugetPkgTests'
  buildArtifactName: 'NugetPkgTestsDrop'
  runTestJobName: 'RunNugetPkgTestsInHelix'
  dependsOn: ''
  runTests: 'true'
  helixType: 'test/nuget'
  test_matrix: ''
  useFrameworkPkg: false
  taefQuery: ''
  matrix:
    Debug_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'Debug'
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'Release'
    Debug_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'Debug'
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'Release'
    Release_arm:
      buildPlatform: 'arm'
      buildConfiguration: 'Release'

jobs:
- job: ${{ parameters.buildJobName }}
  dependsOn:
    - ${{if parameters.dependsOn }}:
      - ${{ parameters.dependsOn }}

  pool:
    vmImage: 'windows-2019'
  strategy:
    maxParallel: 10
    matrix: ${{ parameters.matrix }}

  variables:
    solutionDir: test\MUXControlsReleaseTest
    solutionPath: test\MUXControlsReleaseTest\MUXControlsReleaseTest.sln
    artifactDownloadPath: $(Build.SourcesDirectory)\Artifacts
    buildOutputDir: $(Build.SourcesDirectory)\BuildOutput
    useFrameworkPkg: ${{ parameters.useFrameworkPkg }}
    localPackagesPath: $(Build.SourcesDirectory)\localpackages


  steps:
  # When using the nupkg from artifacts we need to make a new nuget.config that points the MUXReleaseTest
  # projects at the just-built nupkg. The MUXRelease projects use a specific nuget version so we need
  # to update nuget.config to include the drop location as well as update the version in the csproj and
  # packages.config for the projects.
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: drop
      downloadPath: $(artifactDownloadPath)
      itemPattern: '**\*.nupkg'

  # Copy nupkg to localpackages and update proj file to point to it
  - powershell: |
      $pathToNupkg = "$($env:artifactDownloadPath)\drop"
      if($env:useFrameworkPkg -eq "true")
      {
        $pathToNupkg = "$($env:artifactDownloadPath)\drop\FrameworkPackage"
      }
      Write-Host "pathToNupkg: $pathToNupkg"

      $candidateNupkgs = Get-ChildItem $pathToNupkg\Microsoft.UI.Xaml.*.nupkg
      $nupkgFile = $candidateNupkgs[0].FullName;

      Copy-Item $nupkgFile $env:localPackagesPath

      $newVersion = $candidateNupkgs[0].Name.Replace("Microsoft.UI.Xaml.", "").Replace(".nupkg", "")
      Write-Host "New version: $newVersion"
      .\test\MUXControlsReleaseTest\updateUsedNugetPackageVersion.ps1 $newVersion
    displayName: Update proj files to use candidate nupkg.

  - template: MUX-BuildProject-Steps.yml
    parameters:
      solutionPath: test\MUXControlsReleaseTest\RuntimeComponentThatUsesMUX\RuntimeComponentThatUsesMUX.sln
      artifactName: ${{ parameters.buildArtifactName }}

  - template: MUX-BuildProject-Steps.yml
    parameters:
      solutionPath: $(solutionPath)
      artifactName: ${{ parameters.buildArtifactName }}

  - template: MUX-PublishProjectOutput-Steps.yml
    parameters:
      artifactName: ${{ parameters.buildArtifactName }}

- ${{if eq(parameters.runTests, 'true')}}:
  - template: MUX-RunHelixTests-Job.yml
    parameters:
      name: ${{ parameters.runTestJobName }}
      dependsOn: ${{ parameters.buildJobName }}
      testSuite: 'NugetTestSuite'
      helixType: ${{ parameters.helixType }}
      artifactName: ${{ parameters.buildArtifactName }}
      ${{if eq(parameters.useFrameworkPkg, 'true')}}:
        taefQuery: "(not (@NugetPkgTestsOnly = 'true'))"
      rerunPassesRequiredToAvoidFailure: 5
      ${{if ne(parameters.test_matrix, '') }}:
        matrix: ${{ parameters.test_matrix }}