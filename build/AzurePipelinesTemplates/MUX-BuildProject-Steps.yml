parameters:
  solutionPath: ''
  nugetConfigPath: 'nuget.config'
  buildOutputDir: '$(Build.SourcesDirectory)\BuildOutput'
  appxPackageDir: '$(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages'
  artifactName: 'drop'

steps:
  - template: MUX-PopulateBuildDateAndRevision-Steps.yml

  - script: |
      echo parameters.solutionPath = '${{ parameters.solutionPath }}'
      echo parameters.nugetConfigPath = '${{ parameters.nugetConfigPath }}'
      echo parameters.appxPackageDir = '${{ parameters.appxPackageDir }}'
      echo parameters.buildOutputDir = '${{ parameters.buildOutputDir }}'
    displayName: 'BuildProject: Display parameters'

  - template: MUX-InstallWindowsSDK-Steps.yml

  - template: MUX-InstallNuget-Steps.yml

  # The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
  - script: |
      "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
      set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
      del %TEMP%\vsinstalldir.txt
      call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
      echo VCToolsInstallDir = %VCToolsInstallDir%
      echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%
    displayName: 'Retrieve VC tools directory'

  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'

  - task: powershell@2
    displayName: 'Restore PGO database'
    condition: eq(variables['PGOBuildMode'], 'Optimize')
    inputs:
      targetType: filePath
      workingDirectory: $(Build.SourcesDirectory)\tools\MUXPGODatabase
      filePath: $(Build.SourcesDirectory)\tools\MUXPGODatabase\restore-pgodb.ps1

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore ${{ parameters.solutionPath }}'
    inputs:
      restoreSolution: ${{ parameters.solutionPath }}
      feedsToUse: config
      nugetConfigPath: ${{ parameters.nugetConfigPath }}

  - task: VSBuild@1
    displayName: 'Build solution ${{ parameters.solutionPath }}'
    inputs:
      solution: ${{ parameters.solutionPath }}
      vsVersion: 16.0
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      # Workaround for an MSBuild logging nullref - remove when https://github.com/microsoft/azure-pipelines-tasks/issues/14904 is fixed.
      enableDefaultLogger: false
      msbuildArgs: '/restore /p:UseInsiderSDK=$(UseInsiderSDK) /p:AppxPackageDir="${{ parameters.appxPackageDir }}" /p:AppxBundle=Never /p:AppxSymbolPackageEnabled=false /binaryLogger:$(Build.SourcesDirectory)/${{ parameters.solutionPath }}.$(buildPlatform).$(buildConfiguration).binlog /p:MUXVersionBuild=$(builddate_yymm) /p:MUXVersionRevision=$(builddate_dd)$(buildrevision) /p:VCToolsInstallDir="$(VCToolsInstallDir)\" /p:PGOBuildMode=$(PGOBuildMode)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish ${{ parameters.solutionPath }} binlog'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)/${{ parameters.solutionPath }}.$(buildPlatform).$(buildConfiguration).binlog
      artifactName: ${{ parameters.artifactName }}

  - task: powershell@2
    displayName: 'Source Index PDBs'
    inputs:
      targetType: filePath
      filePath: build\SourceIndexing\IndexPdbs.ps1
      arguments: -SearchDir '${{ parameters.buildOutputDir }}\$(buildConfiguration)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
      errorActionPreference: silentlyContinue
