From 83f03fafc8385d116de89726d3cd5941db706d57 Mon Sep 17 00:00:00 2001
From: Kristen Schau <krschau@users.noreply.github.com>
Date: Tue, 8 Feb 2022 16:42:05 -0800
Subject: [PATCH] temp

---
 .../InteractionTests/WebView2Tests.cs         | 21 ++++++++
 dev/WebView2/TestUI/WebView2BasicPage.xaml    |  1 +
 dev/WebView2/TestUI/WebView2BasicPage.xaml.cs | 49 +++++++++++++++++++
 dev/WebView2/WebView2.cpp                     |  9 ++++
 dev/WebView2/WebView2.h                       |  2 +
 dev/WebView2/WebView2AutomationPeer.cpp       |  6 +++
 dev/WebView2/WebView2AutomationPeer.h         |  1 +
 7 files changed, 89 insertions(+)

diff --git a/dev/WebView2/InteractionTests/WebView2Tests.cs b/dev/WebView2/InteractionTests/WebView2Tests.cs
index 6bac98ab..19cb44ab 100644
--- a/dev/WebView2/InteractionTests/WebView2Tests.cs
+++ b/dev/WebView2/InteractionTests/WebView2Tests.cs
@@ -2083,19 +2083,24 @@ namespace Windows.UI.Xaml.Tests.MUXControls.InteractionTests
         {
             using (var setup = new WebView2TestSetupHelper(new[] { "WebView2 Tests", "navigateToBasicWebView2" }))
             {
+                Log.Comment("*** Choose Test");
                 // Remove the existing webview that was already added to the xaml tree
                 ChooseTest("CreateWebView2OffTreeTest", false /* waitForLoadCompleted */);
 
                 // Create a new webview, and call EnsureCoreWebView2Async() on it without adding it to the tree.
                 // Then, add it to the tree so we can see it, and navigate
+                Log.Comment("*** CompleteTestAndWaitForResult");
                 CompleteTestAndWaitForResult("CreateWebView2OffTreeTest");
+                Log.Comment("*** WaitForLoadCompleted");
                 WaitForLoadCompleted();
 
                 // Clear the cache so we can find the new webview
+                Log.Comment("*** Clear");
                 ElementCache.Clear();
                 var webview = FindElement.ById("MyWebView2");
 
                 // Click in the webview, to ensure we can interact with it, and its HWNDs are parented correctly
+                Log.Comment("*** Bounds");
                 Rectangle bounds = webview.BoundingRectangle;
                 Log.Comment("Bounds = X:{0}, Y:{1}, Width:{2}, Height:{3}", bounds.X, bounds.Y, bounds.Width, bounds.Height);
                 // TODO_WebView2Input - Task 30555367 - Stack Overflow in WebView2 pointer tests when (MUXC) test infra calls WV2.GetClickablePoint()
@@ -2149,6 +2154,22 @@ namespace Windows.UI.Xaml.Tests.MUXControls.InteractionTests
             }
         }
 
+        [TestMethod]
+        [TestProperty("TestSuite", "D")]
+        public void HiddenThenVisibleTest()
+        {
+            using (var setup = new WebView2TestSetupHelper(new[] { "WebView2 Tests", "navigateToBasicWebView2" }))
+            {
+                ChooseTest("HiddenThenVisibleTest");
+                CompleteTestAndWaitForResult("HiddenThenVisibleTest");
+
+                // Clear the cache so we can find the new webview
+                ElementCache.Clear();
+                var webview = FindElement.ById("MyWebView2");
+                Verify.IsTrue(webview.IsOffscreen == false);
+            }
+        }
+
         private static void BeginSubTest(string testName, string testDescription)
         {
             Log.Comment(Environment.NewLine + testName + ": " + testDescription);
diff --git a/dev/WebView2/TestUI/WebView2BasicPage.xaml b/dev/WebView2/TestUI/WebView2BasicPage.xaml
index 7f4519f0..28a43dd5 100644
--- a/dev/WebView2/TestUI/WebView2BasicPage.xaml
+++ b/dev/WebView2/TestUI/WebView2BasicPage.xaml
@@ -43,6 +43,7 @@
                             <ComboBoxItem AutomationProperties.Name="Focus_MouseActivateTest">Focus_MouseActivateTest</ComboBoxItem>
                             <ComboBoxItem AutomationProperties.Name="Focus_ReverseTabTest">Focus_ReverseTabTest</ComboBoxItem>
                             <ComboBoxItem AutomationProperties.Name="GoBackAndForwardTest">GoBackAndForwardTest</ComboBoxItem>
+                            <ComboBoxItem AutomationProperties.Name="HiddenThenVisibleTest">HiddenThenVisibleTest</ComboBoxItem>
                             <ComboBoxItem AutomationProperties.Name="HostNameToFolderMappingTest">HostNameToFolderMappingTest</ComboBoxItem>
                             <ComboBoxItem AutomationProperties.Name="HtmlDropdownTest">HtmlDropdownTest</ComboBoxItem>
                             <ComboBoxItem AutomationProperties.Name="MouseCaptureTest">MouseCaptureTest</ComboBoxItem>
diff --git a/dev/WebView2/TestUI/WebView2BasicPage.xaml.cs b/dev/WebView2/TestUI/WebView2BasicPage.xaml.cs
index e774e6ae..4f23a683 100644
--- a/dev/WebView2/TestUI/WebView2BasicPage.xaml.cs
+++ b/dev/WebView2/TestUI/WebView2BasicPage.xaml.cs
@@ -197,6 +197,7 @@ namespace MUXControlsTestApp
             NonAsciiUriTest,
             CreateWebView2OffTreeTest,
             HtmlDropdownTest,
+            HiddenThenVisibleTest,
         };
 
         // Map of TestList entry to its webpage (index in TestPageNames[])
@@ -260,6 +261,7 @@ namespace MUXControlsTestApp
             { TestList.NonAsciiUriTest, 7 },
             { TestList.CreateWebView2OffTreeTest, 1 },
             { TestList.HtmlDropdownTest, 5 },
+            { TestList.HiddenThenVisibleTest, 0 },
         };
 
         readonly string[] TestPageNames =
@@ -697,6 +699,38 @@ namespace MUXControlsTestApp
                         parentBorder.BorderBrush = new SolidColorBrush(Colors.Pink);
                     }
                     break;
+                case TestList.HiddenThenVisibleTest:
+                    {
+                        // Remove existing WebView, we're going to replace it with a hidden one
+                        RemoveWebViewEventHandlers(MyWebView2);
+                        Border parentBorder = MyWebView2.Parent as Border;
+                        parentBorder.Child = null;
+
+                        StackPanel parentStackPanel = parentBorder.Parent as StackPanel;
+                        //int childNum = parerentStackPanel.Children.IndexOf(parentBorder);
+                        parentStackPanel.Children.Remove(parentBorder);
+
+                        Border newBorder = new Border() {
+                            BorderBrush = new SolidColorBrush(Colors.Red),
+                            BorderThickness = new Thickness(10)
+                        };
+
+                        Uri uri = WebView2Common.GetTestPageUri("SimplePage.html");
+                        var newWebView2 = new WebView2() {
+                            Name = "MyWebView2",
+                            Margin = new Thickness(8, 8, 8, 8),
+                            // Set the source before we put the webview in the tree
+                            Source = uri,
+                            Height = 500,
+                            Width= 500,
+                            Visibility = Visibility.Collapsed
+                        };
+                        AutomationProperties.SetName(newWebView2, "MyWebView2");
+                        newBorder.Child = newWebView2;
+                        parentStackPanel.Children.Add(newBorder);
+                        AddWebViewEventHandlers(newWebView2);
+                    }
+                    break;
                 default:
                     WebView2Common.LoadWebPage(MyWebView2, TestPageNames[TestInfoDictionary[test]]);
                     break;
@@ -1807,6 +1841,21 @@ namespace MUXControlsTestApp
                                     selectedTest, selctedOption));;
                         }
                         break;
+                    case TestList.HiddenThenVisibleTest:
+                        {
+                            MyWebView2.Visibility = Visibility.Visible;
+                            MyWebView2.Width = 600;
+                            MyWebView2.Height = 600;
+
+                            Brush backgroundBrush = MyWebView2.Background;
+                            MyWebView2.Background = new SolidColorBrush(Colors.Green);
+                            MyWebView2.Background = backgroundBrush;
+
+                            logger.Verify(MyWebView2.IsHitTestVisible == true,
+                                 string.Format("Test {0}: Failed, Expected MyWebView2.IsHitTestVisible to be true, was {1}",
+                                    selectedTest, MyWebView2.IsHitTestVisible));
+                        }
+                        break;
 
                     default:
                         break;
diff --git a/dev/WebView2/WebView2.cpp b/dev/WebView2/WebView2.cpp
index 2d97376b..64ab0f2a 100644
--- a/dev/WebView2/WebView2.cpp
+++ b/dev/WebView2/WebView2.cpp
@@ -1787,6 +1787,15 @@ void WebView2::CheckAndUpdateWebViewPosition()
         (m_webViewScaledSize.Y) });
 }
 
+winrt::Rect WebView2::GetBoundingRectangle()
+{
+    winrt::Rect rectangle { m_webViewScaledPosition.X,
+                            m_webViewScaledPosition.Y,
+                            m_webViewScaledSize.X,
+                            m_webViewScaledSize.Y };
+    return rectangle;
+}
+
 void WebView2::SetCoreWebViewAndVisualSize(const float width, const float height)
 {
 #ifdef WINUI3
diff --git a/dev/WebView2/WebView2.h b/dev/WebView2/WebView2.h
index dfa4a69d..e0c0fc69 100644
--- a/dev/WebView2/WebView2.h
+++ b/dev/WebView2/WebView2.h
@@ -99,6 +99,8 @@ public:
 
     winrt::CoreWebView2 CoreWebView2();     // Getter for CoreWebView2 property (read-only)
 
+    winrt::Rect GetBoundingRectangle();
+
 private:
     bool ShouldNavigate(const winrt::Uri& uri);
     winrt::IAsyncAction OnSourceChanged(winrt::Uri providedUri);
diff --git a/dev/WebView2/WebView2AutomationPeer.cpp b/dev/WebView2/WebView2AutomationPeer.cpp
index fe53510c..8e81b06f 100644
--- a/dev/WebView2/WebView2AutomationPeer.cpp
+++ b/dev/WebView2/WebView2AutomationPeer.cpp
@@ -36,6 +36,12 @@ winrt::AutomationControlType WebView2AutomationPeer::GetAutomationControlTypeCor
     return winrt::AutomationControlType::Pane;
 }
 
+winrt::Rect WebView2AutomationPeer::GetBoundingRectangleCore()
+{
+    winrt::Rect boundingRect = GetImpl()->GetBoundingRectangle();
+    return boundingRect;
+}
+
 #if WINUI3
 HRESULT WebView2AutomationPeer::GetRawElementProviderSimple(_Outptr_opt_ IRawElementProviderSimple** value)
 {
diff --git a/dev/WebView2/WebView2AutomationPeer.h b/dev/WebView2/WebView2AutomationPeer.h
index 93383b30..51aa2e5b 100644
--- a/dev/WebView2/WebView2AutomationPeer.h
+++ b/dev/WebView2/WebView2AutomationPeer.h
@@ -20,6 +20,7 @@ public:
     // IAutomationPeerOverrides
     winrt::hstring GetClassNameCore();
     winrt::AutomationControlType GetAutomationControlTypeCore();
+    winrt::Rect GetBoundingRectangleCore();
 
     winrt::IInspectable GetFocusedElementCore();
     winrt::IInspectable NavigateCore(winrt::AutomationNavigationDirection direction);
-- 
2.31.1.windows.1

