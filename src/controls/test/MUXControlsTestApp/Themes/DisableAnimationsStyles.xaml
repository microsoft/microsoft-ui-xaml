<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:Microsoft.UI.Xaml.Controls"
    xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives">

    <!-- Disable item slide-in transitions. -->
    <Style TargetType="ListView" x:Key="ListViewCommon">
        <Setter Property="ItemContainerTransitions">
            <Setter.Value>
                <TransitionCollection />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListView" BasedOn="{StaticResource ListViewCommon}"/>

    <!-- There is no good way to disable ScrollViewer's indicator transitions so just make a ScrollViewer style that doesn't have VSM -->
    <Style TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border x:Name="Root" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter x:Name="ScrollContentPresenter"
                                Grid.RowSpan="2"
                                Grid.ColumnSpan="2"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Margin="{TemplateBinding Padding}" />
                            <Grid Grid.RowSpan="2"
                                Grid.ColumnSpan="2" />
                            <Grid
                                Grid.Column="1"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                Padding="{ThemeResource ScrollViewerScrollBarMargin}">
                                <ScrollBar x:Name="VerticalScrollBar"
                                    IsTabStop="False"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    Orientation="Vertical"
                                    Value="{TemplateBinding VerticalOffset}"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    HorizontalAlignment="Right"
                                    IndicatorMode="MouseIndicator"/>
                            </Grid>
                            <Grid
                                Grid.Row="1"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                Padding="{ThemeResource ScrollViewerScrollBarMargin}">
                                <ScrollBar x:Name="HorizontalScrollBar"
                                    IsTabStop="False"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    Orientation="Horizontal"
                                    Value="{TemplateBinding HorizontalOffset}"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    IndicatorMode="MouseIndicator"/>
                            </Grid>
                            <Border x:Name="ScrollBarSeparator"
                                Grid.Row="1"
                                Grid.Column="1"
                                Opacity="0"
                                Background="{ThemeResource ScrollViewerScrollBarSeparatorBackground}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This is the same as the style in CommandBarFlyout.xaml, except its animations have been removed.
         Any changes to the style in the above file should also be made here. -->
    <Style TargetType="primitives:CommandBarFlyoutCommandBar">
        <Setter Property="Background" Value="{ThemeResource CommandBarFlyoutBackground}" />
        <Setter Property="Foreground" Value="{ThemeResource CommandBarFlyoutForeground}" />
        <Setter Property="BorderBrush" Value="{ThemeResource CommandBarFlyoutBorderBrush}" />
        <Setter Property="BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="ClosedDisplayMode" Value="Compact" />
        <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
        <Setter Property="DefaultLabelPosition" Value="Collapsed" />
        <Setter Property="MaxWidth" Value="440" />
        <Setter Property="IsDynamicOverflowEnabled" Value="True" />
        <Setter Property="CommandBarOverflowPresenterStyle" Value="{StaticResource CommandBarFlyoutCommandBarOverflowPresenterStyle}" />
        <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
        <Setter Property="primitives:CommandBarFlyoutCommandBarAutomationProperties.ControlType" Value="Menu" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="primitives:CommandBarFlyoutCommandBar">
                    <Grid x:Name="LayoutRoot" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid.Resources>
                            <Visibility x:Key="AppBarButtonHasFlyoutChevronVisibility">Collapsed</Visibility>
                            <Style TargetType="AppBarButton" BasedOn="{StaticResource CommandBarFlyoutAppBarButtonStyle}" />
                            <Style TargetType="AppBarToggleButton" BasedOn="{StaticResource CommandBarFlyoutAppBarToggleButtonStyle}" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <VisualState.Setters>
                                        <Setter Target="EllipsisIcon.Foreground" Value="{ThemeResource CommandBarEllipsisIconForegroundDisabled}" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DisplayModeStates">
                                <VisualState x:Name="CompactClosed" />
                                <VisualState x:Name="CompactOpenUp" />
                                <VisualState x:Name="CompactOpenDown" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Collapsed" />
                                <VisualState x:Name="ExpandedUp">
                                    <VisualState.Setters>
                                        <Setter Target="MoreButtonTransform.X" Value="0" />
                                        <Setter Target="ContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                                        <Setter Target="OverflowContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                                        <Setter Target="OverflowContentRootClipTransform.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationEndPosition}" />
                                        <!-- We're using PrimaryItemsRoot as the anchor for the overflow popup, so when we're showing that
                                             popup, we'll align PrimaryItemsRoot against the side that we're opening against to ensure that
                                             the popup is placed in the expected location. -->
                                        <Setter Target="PrimaryItemsRoot.VerticalAlignment" Value="Bottom" />
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState x:Name="ExpandedDown">
                                    <VisualState.Setters>
                                        <Setter Target="MoreButtonTransform.X" Value="0" />
                                        <Setter Target="ContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                                        <Setter Target="OverflowContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                                        <Setter Target="OverflowContentRootClipTransform.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationEndPosition}" />
                                        <Setter Target="PrimaryItemsRoot.VerticalAlignment" Value="Top" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="AvailableCommandsStates">
                                <VisualState x:Name="BothCommands" />
                                <VisualState x:Name="PrimaryCommandsOnly">
                                    <VisualState.Setters>
                                        <Setter Target="OverflowContentRoot.Visibility" Value="Collapsed" />
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState x:Name="SecondaryCommandsOnly">
                                    <VisualState.Setters>
                                        <!-- We'll use PrimaryItemsRoot as the anchor for the overflow popup, so to be able to do that
                                             we can't set it to be collapsed.  Instead, we'll just hide it and make it not hit-testable. -->
                                        <Setter Target="PrimaryItemsRoot.Opacity" Value="0" />
                                        <Setter Target="PrimaryItemsRoot.IsHitTestVisible" Value="False" />
                                        <Setter Target="PrimaryItemsRoot.Height" Value="0" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup>
                                <VisualState x:Name="Default" />
                                <VisualState x:Name="ExpandedUpWithPrimaryCommands">
                                    <VisualState.Setters>
                                        <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderUpThemeThickness}" />
                                        <Setter Target="LayoutRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                                        <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                                        <Setter Target="OuterOverflowContentRootV2.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                                        <Setter Target="SecondaryItemsControl.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState x:Name="ExpandedDownWithPrimaryCommands">
                                    <VisualState.Setters>
                                        <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderDownThemeThickness}" />
                                        <Setter Target="LayoutRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                                        <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                                        <Setter Target="OuterOverflowContentRootV2.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                                        <Setter Target="SecondaryItemsControl.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState x:Name="ExpandedUpWithoutPrimaryCommands">
                                    <VisualState.Setters>
                                        <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
                                        <Setter Target="LayoutRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="OuterOverflowContentRootV2.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="SecondaryItemsControl.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState x:Name="ExpandedDownWithoutPrimaryCommands">
                                    <VisualState.Setters>
                                        <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
                                        <Setter Target="LayoutRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="OuterOverflowContentRootV2.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Setter Target="SecondaryItemsControl.CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup>
                                <VisualState x:Name="NoOuterOverflowContentRootShadow" />
                                <VisualState x:Name="OuterOverflowContentRootShadow">
                                    <VisualState.Setters>
                                        <Setter Target="OuterOverflowContentRootV2.Shadow" Value="{StaticResource CommandBarFlyoutOverflowShadow}" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="PrimaryLabelStates">
                                <VisualState x:Name="HasPrimaryLabels" />
                                <VisualState x:Name="NoPrimaryLabels">
                                    <VisualState.Setters>
                                        <Setter Target="PrimaryItemsControl.MinHeight" Value="0" />
                                        <Setter Target="PrimaryItemsControl.Height" Value="40" />
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OuterContentRoot" VerticalAlignment="Top" Margin="{TemplateBinding Padding}" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.CurrentWidth}" Height="{TemplateBinding Height}" XYFocusKeyboardNavigation="Enabled">
                            <Grid x:Name="ContentRoot" Background="{TemplateBinding Background}">
                                <Grid.Clip>
                                    <RectangleGeometry x:Name="ContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ContentClipRect}">
                                        <RectangleGeometry.Transform>
                                            <!-- If you have a value set by a binding and then animate that value,
                                                 the animation will clear the binding.  Because of that, we need to have
                                                 two translate transforms - one that we bind to a property,
                                                 and another that we can animate. -->
                                            <TransformGroup>
                                                <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionDelta}" />
                                                <TranslateTransform x:Name="ContentRootClipTransform" />
                                            </TransformGroup>
                                        </RectangleGeometry.Transform>
                                    </RectangleGeometry>
                                </Grid.Clip>
                                <Grid x:Name="PrimaryItemsSystemBackdropRoot" />
                                <Grid x:Name="PrimaryItemsRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" MinWidth="3" />
                                    </Grid.ColumnDefinitions>
                                    <ItemsControl x:Name="PrimaryItemsControl" MinHeight="52" Margin="3,3,0,3" Grid.Column="0" IsTabStop="False" HorizontalAlignment="Left">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                    <Button x:Name="MoreButton" Foreground="{TemplateBinding Foreground}" Style="{StaticResource CommandBarFlyoutEllipsisButtonStyle}" Grid.Column="1" Control.IsTemplateKeyTipTarget="True" IsAccessKeyScope="True" IsTabStop="False" CornerRadius="{TemplateBinding CornerRadius}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.EffectiveOverflowButtonVisibility}" AllowFocusOnInteraction="False">
                                        <Button.RenderTransform>
                                            <TranslateTransform x:Name="MoreButtonTransform" />
                                        </Button.RenderTransform>
                                        <FontIcon x:Name="EllipsisIcon" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="16" Glyph="&#xE712;" />
                                    </Button>
                                </Grid>
                                <Popup x:Name="OverflowPopup" ShouldConstrainToRootBounds="False">
                                    <!-- The name OuterOverflowContentRoot is treated specially by the system and causes a shadow placed on this
                                         an element with this name to fade in. We don't want this for this style, so we need a different template part name -->
                                    <!-- The Translation and Render transform are mutually exclusive properties. We need
                                         The translation property on contract 14+ for the drop shadow to work.  We need
                                         The TranslationTransform is needed before-->
                                    <Grid x:Name="OuterOverflowContentRootV2" RequestedTheme="{TemplateBinding ActualTheme}" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}" Translation="0,0,32">
                                        <Grid x:Name="OverflowPopupSystemBackdropRoot" />
                                        <Grid x:Name="OverflowContentRoot" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Grid.Clip>
                                                <RectangleGeometry x:Name="OverflowContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.OverflowContentClipRect}">
                                                    <RectangleGeometry.Transform>
                                                        <!-- If you have a value set by a binding and then animate that value,
                                                             the animation will clear the binding.  Because of that, we need to have
                                                             two translate transforms - one that we bind to a property,
                                                             and another that we can animate. -->
                                                        <TransformGroup>
                                                            <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionDelta}" />
                                                            <TranslateTransform x:Name="OverflowContentRootClipTransform" />
                                                        </TransformGroup>
                                                    </RectangleGeometry.Transform>
                                                </RectangleGeometry>
                                            </Grid.Clip>
                                            <CommandBarOverflowPresenter Grid.Row="1" x:Name="SecondaryItemsControl" Style="{TemplateBinding CommandBarOverflowPresenterStyle}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{ThemeResource CommandBarFlyoutBorderThemeThickness}" IsTabStop="False">
                                                <!-- 19h1 has a bug in focus manager that causes a crash when an implicitly styled element
                                                     has focus and its parent popup closes.  To work around this, on 19h1 we will explicitly
                                                     Style the overflow elements. -->
                                            </CommandBarOverflowPresenter>
                                        </Grid>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
