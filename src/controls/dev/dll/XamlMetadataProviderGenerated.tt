<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.InteropServices.WindowsRuntime" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cpp" #> 
<#@ include file="CommonHelpers.tt" #>
//////////////////////////////////////////////////////////////
/// WARNING: Generated File: Please do not modify manually ///
//////////////////////////////////////////////////////////////

#include "pch.h"
#include "common.h"

#ifndef MUX_EXPERIMENTAL
#include "XamlControlsResources.h"
#else
#include "ExperimentalXamlControlsResources.h"
#endif

namespace {

template <typename Factory>
winrt::IInspectable ActivateInstanceWithFactory(_In_ PCWSTR typeName)
{
    auto factory = GetFactory<Factory>(typeName);
    winrt::IInspectable inner;
    return factory.as<Factory>().CreateInstance(nullptr, inner);
}

template <typename Factory>
Factory GetFactory(_In_ PCWSTR typeName)
{
    winrt::IActivationFactory _activationFactory{ nullptr };
    winrt::hstring activatableClassId{ typeName };

    if (FAILED(WINRT_GetActivationFactory(winrt::get_abi(activatableClassId), winrt::put_abi(_activationFactory))))
    {
        return nullptr;
    }
    else
    {
        return _activationFactory.as<Factory>();
    }
}

winrt::IInspectable ActivateInstance(_In_ PCWSTR typeName)
{
    winrt::IActivationFactory _activationFactory{ nullptr };
    winrt::hstring activatableClassId{ typeName };
    winrt::check_hresult(WINRT_GetActivationFactory(winrt::get_abi(activatableClassId), winrt::put_abi(_activationFactory)));

    return _activationFactory.ActivateInstance<winrt::IInspectable>();
}

struct Entry
{
    hstring typeName;
    std::function<winrt::IXamlType()> createXamlTypeCallback;
    winrt::IXamlType xamlType;
};

<#
    string winmdPaths = Host.ResolveParameterValue(".", ".", "MetadataWinmdPaths");
    string referenceWinmds = Host.ResolveParameterValue(".", ".", "ReferenceWinmds");
    string propertiesHeadersDirectory = Host.ResolveParameterValue(".", ".", "PropertiesHeadersDirectory");
    var knownNamespacePrefixes = new HashSet<string>();

    // For debugging purposes
    // WriteLine(string.Format("winmdPath:{0}", winmdPaths));
    // WriteLine(string.Format("referenceWinmds:{0}", referenceWinmds));
    // System.Diagnostics.Debugger.Launch();

    ClearIndent();

    WriteLine("Entry c_typeEntries[] =");
    StatementBlock(() =>
    {
        foreach (Type type in GetMetadataTypesFromList(winmdPaths, referenceWinmds))
        {  
            if (type.Name.StartsWith("Microsoft.UI.Xaml") && GetCustomAttribute(type, "WebHostHiddenAttribute") == null && GetCustomAttribute(type, "ApiContractAttribute") == null)
            {
                throw new System.ArgumentException("WebHostHidden Tag missing on type: " + type);
            }

            RegisteredTypes.Add(GetInferedTypeName(type), type);
            RegisterXamlType(type, true /* exploreBaseAndProperties */ );
        }
        
        if (!DiscoveredTypes.Keys.Contains("ValueType"))
        {
            DiscoveredTypes.Add("ValueType", typeof(System.ValueType));
        }

        // The explicit casts to PCWSTR below ensures the compiler instantiate one template instead of multiple
        // templates for every string length. In other words, we want this template to be instantiated:
        // winrt::make<PrimitiveXamlType, PCWSTR>
        // Rather than this one:
        // winrt::make<PrimitiveXamlType,wchar_t const (& __ptr64)[N]> where N is the string length.
        // We also explicitly cast to std::function for similar reasons (avoid multiple template instantiations for
        // every lambda even if the signature is the same).

        WriteLine("// Register types encountered "); 
        foreach (var typeName in DiscoveredTypes.Keys.OrderBy(x=>x).Where(t =>
            !t.StartsWith("Nullable`1") // Ignore nullables
        ))
        {
            if (!RegisteredTypes.Keys.Contains(typeName))
            {
                var type = DiscoveredTypes[typeName];
                var winRtType = new WinRtType(type);

                if(winRtType.IsSystemType)
                {
                    StatementBlock(() =>
                    {
                        WriteLine("/* Arg1 TypeName */ ");
                        WriteLine(string.Format("L\"{0}\",", typeName));

                        WriteLine("/* Arg2 CreateXamlTypeCallback */ ");
                        WriteLine(string.Format("[]() {{ return winrt::make<PrimitiveXamlType>((PCWSTR)L\"{0}\"); }}", typeName));
                    });
                    WriteLine(",");
                }
                else
                {
                    RegisterXamlType(type, false /* exploreBaseAndProperties */ );
                }

                // Record known namespace prefixes to a max depth of three
                if (winRtType.WinRtNamespace != null)
                {
                    var splitNamespace = winRtType.WinRtNamespace.Split('.');
                    if (splitNamespace.Length <= 3)
                    {
                        knownNamespacePrefixes.Add(winRtType.WinRtNamespace);
                    }
                    else
                    {
                        knownNamespacePrefixes.Add(String.Join(".",splitNamespace.Take(3)));
                    }
                    
                }
            }
        }
    });
    WriteLine(";");

    WriteLine("");
    WriteLine("hstring c_knownNamespacePrefixes[] =");
    StatementBlock(() =>
    {
        foreach (var knownNamespacePrefix in knownNamespacePrefixes.OrderBy(ns => ns))
        {
            WriteLine(string.Format("L\"{0}.\",", knownNamespacePrefix));
        }
    });
    WriteLine(";");
#>
}
<#
    List<Type> typesToClearDependencyProperties = new List<Type>();
    
    foreach (Type type in RegisteredTypes.Values)
    {  
        if (HasDependencyProperties(type))
        {
            typesToClearDependencyProperties.Add(type);
        }
    }
        
    foreach (var typeName in DiscoveredTypes.Keys.Where(t =>
        !t.StartsWith("Nullable`1") // Ignore nullables
    ))
    {
        if (!RegisteredTypes.Keys.Contains(typeName))
        {
            Type type = DiscoveredTypes[typeName];
            if (HasDependencyProperties(type))
            {
                typesToClearDependencyProperties.Add(type);
            }
        }
    }
    
    var orderedTypesWithPropertiesHeader =
        typesToClearDependencyProperties
            .Where(x => File.Exists(Path.Combine(propertiesHeadersDirectory, x.Name + ".properties.h")))
            .OrderBy(x => x.Name);
    
    WriteLine("");
    
    foreach (Type type in orderedTypesWithPropertiesHeader)
    {  
        WriteLine("#include \"" + type.Name + ".properties.h\"");
    }
    
    // A couple non-generated files define their own ClearProperties methods that we'll need to manually include.
    WriteLine("#include \"AutoSuggestBoxHelper.h\"");
    WriteLine("#include \"ComboBoxHelper.h\"");
    WriteLine("#include \"RecyclePool.h\"");
    WriteLine("#include \"RevealBrush.h\"");
#>

namespace {

<#
    WriteLine("void ClearTypeProperties()");
    StatementBlock(() =>
    {
        foreach (Type type in orderedTypesWithPropertiesHeader)
        {  
            WriteLine(type.Name + "Properties::ClearProperties();");
        }
        
        // A couple non-generated files define their own ClearProperties methods that we'll need to manually call.
        WriteLine("AutoSuggestBoxHelper::ClearProperties();");
        WriteLine("ComboBoxHelper::ClearProperties();");
        WriteLine("RecyclePool::ClearProperties();");
        WriteLine("RevealBrush::ClearProperties();");
    });
    WriteLine("");
#>

}
