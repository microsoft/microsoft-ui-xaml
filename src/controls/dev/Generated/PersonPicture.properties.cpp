// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "PersonPicture.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(PersonPicture)
}

#include "PersonPicture.g.cpp"

GlobalDependencyProperty PersonPictureProperties::s_BadgeGlyphProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_BadgeImageSourceProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_BadgeNumberProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_BadgeTextProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_ContactProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_DisplayNameProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_InitialsProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_IsGroupProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_PreferSmallImageProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_ProfilePictureProperty{ nullptr };
GlobalDependencyProperty PersonPictureProperties::s_TemplateSettingsProperty{ nullptr };

PersonPictureProperties::PersonPictureProperties()
{
    EnsureProperties();
}

void PersonPictureProperties::EnsureProperties()
{
    if (!s_BadgeGlyphProperty)
    {
        s_BadgeGlyphProperty =
            InitializeDependencyProperty(
                L"BadgeGlyph",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBadgeGlyphPropertyChanged));
    }
    if (!s_BadgeImageSourceProperty)
    {
        s_BadgeImageSourceProperty =
            InitializeDependencyProperty(
                L"BadgeImageSource",
                winrt::name_of<winrt::ImageSource>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::ImageSource>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBadgeImageSourcePropertyChanged));
    }
    if (!s_BadgeNumberProperty)
    {
        s_BadgeNumberProperty =
            InitializeDependencyProperty(
                L"BadgeNumber",
                winrt::name_of<int>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<int>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBadgeNumberPropertyChanged));
    }
    if (!s_BadgeTextProperty)
    {
        s_BadgeTextProperty =
            InitializeDependencyProperty(
                L"BadgeText",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBadgeTextPropertyChanged));
    }
    if (!s_ContactProperty)
    {
        s_ContactProperty =
            InitializeDependencyProperty(
                L"Contact",
                winrt::name_of<winrt::Contact>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::Contact>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnContactPropertyChanged));
    }
    if (!s_DisplayNameProperty)
    {
        s_DisplayNameProperty =
            InitializeDependencyProperty(
                L"DisplayName",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnDisplayNamePropertyChanged));
    }
    if (!s_InitialsProperty)
    {
        s_InitialsProperty =
            InitializeDependencyProperty(
                L"Initials",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnInitialsPropertyChanged));
    }
    if (!s_IsGroupProperty)
    {
        s_IsGroupProperty =
            InitializeDependencyProperty(
                L"IsGroup",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIsGroupPropertyChanged));
    }
    if (!s_PreferSmallImageProperty)
    {
        s_PreferSmallImageProperty =
            InitializeDependencyProperty(
                L"PreferSmallImage",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPreferSmallImagePropertyChanged));
    }
    if (!s_ProfilePictureProperty)
    {
        s_ProfilePictureProperty =
            InitializeDependencyProperty(
                L"ProfilePicture",
                winrt::name_of<winrt::ImageSource>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::ImageSource>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnProfilePicturePropertyChanged));
    }
    if (!s_TemplateSettingsProperty)
    {
        s_TemplateSettingsProperty =
            InitializeDependencyProperty(
                L"TemplateSettings",
                winrt::name_of<winrt::PersonPictureTemplateSettings>(),
                winrt::name_of<winrt::PersonPicture>(),
                false /* isAttached */,
                ValueHelper<winrt::PersonPictureTemplateSettings>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTemplateSettingsPropertyChanged));
    }
}

void PersonPictureProperties::ClearProperties()
{
    s_BadgeGlyphProperty = nullptr;
    s_BadgeImageSourceProperty = nullptr;
    s_BadgeNumberProperty = nullptr;
    s_BadgeTextProperty = nullptr;
    s_ContactProperty = nullptr;
    s_DisplayNameProperty = nullptr;
    s_InitialsProperty = nullptr;
    s_IsGroupProperty = nullptr;
    s_PreferSmallImageProperty = nullptr;
    s_ProfilePictureProperty = nullptr;
    s_TemplateSettingsProperty = nullptr;
}

void PersonPictureProperties::OnBadgeGlyphPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnBadgeImageSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnBadgeNumberPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnBadgeTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnContactPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnDisplayNamePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnInitialsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnIsGroupPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnPreferSmallImagePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnProfilePicturePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::OnTemplateSettingsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::PersonPicture>();
    winrt::get_self<PersonPicture>(owner)->OnPropertyChanged(args);
}

void PersonPictureProperties::BadgeGlyph(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_BadgeGlyphProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring PersonPictureProperties::BadgeGlyph()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_BadgeGlyphProperty));
}

void PersonPictureProperties::BadgeImageSource(winrt::ImageSource const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_BadgeImageSourceProperty, ValueHelper<winrt::ImageSource>::BoxValueIfNecessary(value));
    }
}

winrt::ImageSource PersonPictureProperties::BadgeImageSource()
{
    return ValueHelper<winrt::ImageSource>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_BadgeImageSourceProperty));
}

void PersonPictureProperties::BadgeNumber(int value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_BadgeNumberProperty, ValueHelper<int>::BoxValueIfNecessary(value));
    }
}

int PersonPictureProperties::BadgeNumber()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_BadgeNumberProperty));
}

void PersonPictureProperties::BadgeText(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_BadgeTextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring PersonPictureProperties::BadgeText()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_BadgeTextProperty));
}

void PersonPictureProperties::Contact(winrt::Contact const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_ContactProperty, ValueHelper<winrt::Contact>::BoxValueIfNecessary(value));
    }
}

winrt::Contact PersonPictureProperties::Contact()
{
    return ValueHelper<winrt::Contact>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_ContactProperty));
}

void PersonPictureProperties::DisplayName(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_DisplayNameProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring PersonPictureProperties::DisplayName()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_DisplayNameProperty));
}

void PersonPictureProperties::Initials(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_InitialsProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring PersonPictureProperties::Initials()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_InitialsProperty));
}

void PersonPictureProperties::IsGroup(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_IsGroupProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool PersonPictureProperties::IsGroup()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_IsGroupProperty));
}

void PersonPictureProperties::PreferSmallImage(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_PreferSmallImageProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool PersonPictureProperties::PreferSmallImage()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_PreferSmallImageProperty));
}

void PersonPictureProperties::ProfilePicture(winrt::ImageSource const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_ProfilePictureProperty, ValueHelper<winrt::ImageSource>::BoxValueIfNecessary(value));
    }
}

winrt::ImageSource PersonPictureProperties::ProfilePicture()
{
    return ValueHelper<winrt::ImageSource>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_ProfilePictureProperty));
}

void PersonPictureProperties::TemplateSettings(winrt::PersonPictureTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<PersonPicture*>(this)->SetValue(s_TemplateSettingsProperty, ValueHelper<winrt::PersonPictureTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::PersonPictureTemplateSettings PersonPictureProperties::TemplateSettings()
{
    return ValueHelper<winrt::PersonPictureTemplateSettings>::CastOrUnbox(static_cast<PersonPicture*>(this)->GetValue(s_TemplateSettingsProperty));
}
