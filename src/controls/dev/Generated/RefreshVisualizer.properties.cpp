// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "RefreshVisualizer.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(RefreshVisualizer)
}

#include "RefreshVisualizer.g.cpp"

GlobalDependencyProperty RefreshVisualizerProperties::s_ContentProperty{ nullptr };
GlobalDependencyProperty RefreshVisualizerProperties::s_InfoProviderProperty{ nullptr };
GlobalDependencyProperty RefreshVisualizerProperties::s_OrientationProperty{ nullptr };
GlobalDependencyProperty RefreshVisualizerProperties::s_StateProperty{ nullptr };

RefreshVisualizerProperties::RefreshVisualizerProperties()
    : m_refreshRequestedEventSource{static_cast<RefreshVisualizer*>(this)}
    , m_refreshStateChangedEventSource{static_cast<RefreshVisualizer*>(this)}
{
    EnsureProperties();
}

void RefreshVisualizerProperties::EnsureProperties()
{
    if (!s_ContentProperty)
    {
        s_ContentProperty =
            InitializeDependencyProperty(
                L"Content",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::RefreshVisualizer>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnContentPropertyChanged));
    }
    if (!s_InfoProviderProperty)
    {
        s_InfoProviderProperty =
            InitializeDependencyProperty(
                L"InfoProvider",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::RefreshVisualizer>(),
                true /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnInfoProviderPropertyChanged));
    }
    if (!s_OrientationProperty)
    {
        s_OrientationProperty =
            InitializeDependencyProperty(
                L"Orientation",
                winrt::name_of<winrt::RefreshVisualizerOrientation>(),
                winrt::name_of<winrt::RefreshVisualizer>(),
                false /* isAttached */,
                ValueHelper<winrt::RefreshVisualizerOrientation>::BoxValueIfNecessary(winrt::RefreshVisualizerOrientation::Auto),
                winrt::PropertyChangedCallback(&OnOrientationPropertyChanged));
    }
    if (!s_StateProperty)
    {
        s_StateProperty =
            InitializeDependencyProperty(
                L"State",
                winrt::name_of<winrt::RefreshVisualizerState>(),
                winrt::name_of<winrt::RefreshVisualizer>(),
                false /* isAttached */,
                ValueHelper<winrt::RefreshVisualizerState>::BoxValueIfNecessary(winrt::RefreshVisualizerState::Idle),
                winrt::PropertyChangedCallback(&OnStatePropertyChanged));
    }
}

void RefreshVisualizerProperties::ClearProperties()
{
    s_ContentProperty = nullptr;
    s_InfoProviderProperty = nullptr;
    s_OrientationProperty = nullptr;
    s_StateProperty = nullptr;
}

void RefreshVisualizerProperties::OnContentPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RefreshVisualizer>();
    winrt::get_self<RefreshVisualizer>(owner)->OnPropertyChanged(args);
}

void RefreshVisualizerProperties::OnInfoProviderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RefreshVisualizer>();
    winrt::get_self<RefreshVisualizer>(owner)->OnPropertyChanged(args);
}

void RefreshVisualizerProperties::OnOrientationPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RefreshVisualizer>();
    winrt::get_self<RefreshVisualizer>(owner)->OnPropertyChanged(args);
}

void RefreshVisualizerProperties::OnStatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RefreshVisualizer>();
    winrt::get_self<RefreshVisualizer>(owner)->OnPropertyChanged(args);
}

void RefreshVisualizerProperties::Content(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RefreshVisualizer*>(this)->SetValue(s_ContentProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement RefreshVisualizerProperties::Content()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<RefreshVisualizer*>(this)->GetValue(s_ContentProperty));
}


void RefreshVisualizerProperties::Orientation(winrt::RefreshVisualizerOrientation const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RefreshVisualizer*>(this)->SetValue(s_OrientationProperty, ValueHelper<winrt::RefreshVisualizerOrientation>::BoxValueIfNecessary(value));
    }
}

winrt::RefreshVisualizerOrientation RefreshVisualizerProperties::Orientation()
{
    return ValueHelper<winrt::RefreshVisualizerOrientation>::CastOrUnbox(static_cast<RefreshVisualizer*>(this)->GetValue(s_OrientationProperty));
}

void RefreshVisualizerProperties::State(winrt::RefreshVisualizerState const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RefreshVisualizer*>(this)->SetValue(s_StateProperty, ValueHelper<winrt::RefreshVisualizerState>::BoxValueIfNecessary(value));
    }
}

winrt::RefreshVisualizerState RefreshVisualizerProperties::State()
{
    return ValueHelper<winrt::RefreshVisualizerState>::CastOrUnbox(static_cast<RefreshVisualizer*>(this)->GetValue(s_StateProperty));
}

winrt::event_token RefreshVisualizerProperties::RefreshRequested(winrt::TypedEventHandler<winrt::RefreshVisualizer, winrt::RefreshRequestedEventArgs> const& value)
{
    return m_refreshRequestedEventSource.add(value);
}

void RefreshVisualizerProperties::RefreshRequested(winrt::event_token const& token)
{
    m_refreshRequestedEventSource.remove(token);
}

winrt::event_token RefreshVisualizerProperties::RefreshStateChanged(winrt::TypedEventHandler<winrt::RefreshVisualizer, winrt::RefreshStateChangedEventArgs> const& value)
{
    return m_refreshStateChangedEventSource.add(value);
}

void RefreshVisualizerProperties::RefreshStateChanged(winrt::event_token const& token)
{
    m_refreshStateChangedEventSource.remove(token);
}
