// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "TeachingTipTemplateSettings.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(TeachingTipTemplateSettings)
}

#include "TeachingTipTemplateSettings.g.cpp"

GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_IconElementProperty{ nullptr };
GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_TopLeftHighlightMarginProperty{ nullptr };
GlobalDependencyProperty TeachingTipTemplateSettingsProperties::s_TopRightHighlightMarginProperty{ nullptr };

TeachingTipTemplateSettingsProperties::TeachingTipTemplateSettingsProperties()
{
    EnsureProperties();
}

void TeachingTipTemplateSettingsProperties::EnsureProperties()
{
    if (!s_IconElementProperty)
    {
        s_IconElementProperty =
            InitializeDependencyProperty(
                L"IconElement",
                winrt::name_of<winrt::IconElement>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::IconElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TopLeftHighlightMarginProperty)
    {
        s_TopLeftHighlightMarginProperty =
            InitializeDependencyProperty(
                L"TopLeftHighlightMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TopRightHighlightMarginProperty)
    {
        s_TopRightHighlightMarginProperty =
            InitializeDependencyProperty(
                L"TopRightHighlightMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TeachingTipTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
}

void TeachingTipTemplateSettingsProperties::ClearProperties()
{
    s_IconElementProperty = nullptr;
    s_TopLeftHighlightMarginProperty = nullptr;
    s_TopRightHighlightMarginProperty = nullptr;
}

void TeachingTipTemplateSettingsProperties::IconElement(winrt::IconElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_IconElementProperty, ValueHelper<winrt::IconElement>::BoxValueIfNecessary(value));
    }
}

winrt::IconElement TeachingTipTemplateSettingsProperties::IconElement()
{
    return ValueHelper<winrt::IconElement>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_IconElementProperty));
}

void TeachingTipTemplateSettingsProperties::TopLeftHighlightMargin(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_TopLeftHighlightMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness TeachingTipTemplateSettingsProperties::TopLeftHighlightMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_TopLeftHighlightMarginProperty));
}

void TeachingTipTemplateSettingsProperties::TopRightHighlightMargin(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TeachingTipTemplateSettings*>(this)->SetValue(s_TopRightHighlightMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness TeachingTipTemplateSettingsProperties::TopRightHighlightMargin()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TeachingTipTemplateSettings*>(this)->GetValue(s_TopRightHighlightMarginProperty));
}
