// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "RadialGradientBrush.h"

namespace winrt::Microsoft::UI::Xaml::Media
{
    CppWinRTActivatableClassWithDPFactory(RadialGradientBrush)
}

#include "RadialGradientBrush.g.cpp"

GlobalDependencyProperty RadialGradientBrushProperties::s_CenterProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_GradientOriginProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_InterpolationSpaceProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_MappingModeProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_RadiusXProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_RadiusYProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_SpreadMethodProperty{ nullptr };

RadialGradientBrushProperties::RadialGradientBrushProperties()
{
    EnsureProperties();
}

void RadialGradientBrushProperties::EnsureProperties()
{
    if (!s_CenterProperty)
    {
        s_CenterProperty =
            InitializeDependencyProperty(
                L"Center",
                winrt::name_of<winrt::Point>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::Point>::BoxValueIfNecessary(winrt::Point(0.5,0.5)),
                winrt::PropertyChangedCallback(&OnCenterPropertyChanged));
    }
    if (!s_GradientOriginProperty)
    {
        s_GradientOriginProperty =
            InitializeDependencyProperty(
                L"GradientOrigin",
                winrt::name_of<winrt::Point>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::Point>::BoxValueIfNecessary(winrt::Point(0.5,0.5)),
                winrt::PropertyChangedCallback(&OnGradientOriginPropertyChanged));
    }
    if (!s_InterpolationSpaceProperty)
    {
        s_InterpolationSpaceProperty =
            InitializeDependencyProperty(
                L"InterpolationSpace",
                winrt::name_of<winrt::CompositionColorSpace>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::CompositionColorSpace>::BoxValueIfNecessary(winrt::Microsoft::UI::Composition::CompositionColorSpace::Auto),
                winrt::PropertyChangedCallback(&OnInterpolationSpacePropertyChanged));
    }
    if (!s_MappingModeProperty)
    {
        s_MappingModeProperty =
            InitializeDependencyProperty(
                L"MappingMode",
                winrt::name_of<winrt::BrushMappingMode>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::BrushMappingMode>::BoxValueIfNecessary(winrt::BrushMappingMode::RelativeToBoundingBox),
                winrt::PropertyChangedCallback(&OnMappingModePropertyChanged));
    }
    if (!s_RadiusXProperty)
    {
        s_RadiusXProperty =
            InitializeDependencyProperty(
                L"RadiusX",
                winrt::name_of<double>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0.5),
                winrt::PropertyChangedCallback(&OnRadiusXPropertyChanged));
    }
    if (!s_RadiusYProperty)
    {
        s_RadiusYProperty =
            InitializeDependencyProperty(
                L"RadiusY",
                winrt::name_of<double>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0.5),
                winrt::PropertyChangedCallback(&OnRadiusYPropertyChanged));
    }
    if (!s_SpreadMethodProperty)
    {
        s_SpreadMethodProperty =
            InitializeDependencyProperty(
                L"SpreadMethod",
                winrt::name_of<winrt::GradientSpreadMethod>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::GradientSpreadMethod>::BoxValueIfNecessary(winrt::GradientSpreadMethod::Pad),
                winrt::PropertyChangedCallback(&OnSpreadMethodPropertyChanged));
    }
}

void RadialGradientBrushProperties::ClearProperties()
{
    s_CenterProperty = nullptr;
    s_GradientOriginProperty = nullptr;
    s_InterpolationSpaceProperty = nullptr;
    s_MappingModeProperty = nullptr;
    s_RadiusXProperty = nullptr;
    s_RadiusYProperty = nullptr;
    s_SpreadMethodProperty = nullptr;
}

void RadialGradientBrushProperties::OnCenterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnCenterPropertyChanged(args);
}

void RadialGradientBrushProperties::OnGradientOriginPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnGradientOriginPropertyChanged(args);
}

void RadialGradientBrushProperties::OnInterpolationSpacePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnInterpolationSpacePropertyChanged(args);
}

void RadialGradientBrushProperties::OnMappingModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnMappingModePropertyChanged(args);
}

void RadialGradientBrushProperties::OnRadiusXPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnRadiusXPropertyChanged(args);
}

void RadialGradientBrushProperties::OnRadiusYPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnRadiusYPropertyChanged(args);
}

void RadialGradientBrushProperties::OnSpreadMethodPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnSpreadMethodPropertyChanged(args);
}

void RadialGradientBrushProperties::Center(winrt::Point const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_CenterProperty, ValueHelper<winrt::Point>::BoxValueIfNecessary(value));
    }
}

winrt::Point RadialGradientBrushProperties::Center()
{
    return ValueHelper<winrt::Point>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_CenterProperty));
}

void RadialGradientBrushProperties::GradientOrigin(winrt::Point const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_GradientOriginProperty, ValueHelper<winrt::Point>::BoxValueIfNecessary(value));
    }
}

winrt::Point RadialGradientBrushProperties::GradientOrigin()
{
    return ValueHelper<winrt::Point>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_GradientOriginProperty));
}

void RadialGradientBrushProperties::InterpolationSpace(winrt::CompositionColorSpace const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_InterpolationSpaceProperty, ValueHelper<winrt::CompositionColorSpace>::BoxValueIfNecessary(value));
    }
}

winrt::CompositionColorSpace RadialGradientBrushProperties::InterpolationSpace()
{
    return ValueHelper<winrt::CompositionColorSpace>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_InterpolationSpaceProperty));
}

void RadialGradientBrushProperties::MappingMode(winrt::BrushMappingMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_MappingModeProperty, ValueHelper<winrt::BrushMappingMode>::BoxValueIfNecessary(value));
    }
}

winrt::BrushMappingMode RadialGradientBrushProperties::MappingMode()
{
    return ValueHelper<winrt::BrushMappingMode>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_MappingModeProperty));
}

void RadialGradientBrushProperties::RadiusX(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_RadiusXProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double RadialGradientBrushProperties::RadiusX()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_RadiusXProperty));
}

void RadialGradientBrushProperties::RadiusY(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_RadiusYProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double RadialGradientBrushProperties::RadiusY()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_RadiusYProperty));
}

void RadialGradientBrushProperties::SpreadMethod(winrt::GradientSpreadMethod const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<RadialGradientBrush*>(this)->SetValue(s_SpreadMethodProperty, ValueHelper<winrt::GradientSpreadMethod>::BoxValueIfNecessary(value));
    }
}

winrt::GradientSpreadMethod RadialGradientBrushProperties::SpreadMethod()
{
    return ValueHelper<winrt::GradientSpreadMethod>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_SpreadMethodProperty));
}
