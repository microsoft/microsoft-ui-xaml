// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "LinedFlowLayout.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(LinedFlowLayout)
}

#include "LinedFlowLayout.g.cpp"

GlobalDependencyProperty LinedFlowLayoutProperties::s_ActualLineHeightProperty{ nullptr };
GlobalDependencyProperty LinedFlowLayoutProperties::s_ItemsJustificationProperty{ nullptr };
GlobalDependencyProperty LinedFlowLayoutProperties::s_ItemsStretchProperty{ nullptr };
GlobalDependencyProperty LinedFlowLayoutProperties::s_LineHeightProperty{ nullptr };
GlobalDependencyProperty LinedFlowLayoutProperties::s_LineSpacingProperty{ nullptr };
GlobalDependencyProperty LinedFlowLayoutProperties::s_MinItemSpacingProperty{ nullptr };

LinedFlowLayoutProperties::LinedFlowLayoutProperties()
    : m_itemsInfoRequestedEventSource{static_cast<LinedFlowLayout*>(this)}
    , m_itemsUnlockedEventSource{static_cast<LinedFlowLayout*>(this)}
{
    EnsureProperties();
}

void LinedFlowLayoutProperties::EnsureProperties()
{
    if (!s_ActualLineHeightProperty)
    {
        s_ActualLineHeightProperty =
            InitializeDependencyProperty(
                L"ActualLineHeight",
                winrt::name_of<double>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(LinedFlowLayout::s_defaultActualLineHeight),
                winrt::PropertyChangedCallback(&OnActualLineHeightPropertyChanged));
    }
    if (!s_ItemsJustificationProperty)
    {
        s_ItemsJustificationProperty =
            InitializeDependencyProperty(
                L"ItemsJustification",
                winrt::name_of<winrt::LinedFlowLayoutItemsJustification>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<winrt::LinedFlowLayoutItemsJustification>::BoxValueIfNecessary(LinedFlowLayout::s_defaultItemsJustification),
                winrt::PropertyChangedCallback(&OnItemsJustificationPropertyChanged));
    }
    if (!s_ItemsStretchProperty)
    {
        s_ItemsStretchProperty =
            InitializeDependencyProperty(
                L"ItemsStretch",
                winrt::name_of<winrt::LinedFlowLayoutItemsStretch>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<winrt::LinedFlowLayoutItemsStretch>::BoxValueIfNecessary(LinedFlowLayout::s_defaultItemsStretch),
                winrt::PropertyChangedCallback(&OnItemsStretchPropertyChanged));
    }
    if (!s_LineHeightProperty)
    {
        s_LineHeightProperty =
            InitializeDependencyProperty(
                L"LineHeight",
                winrt::name_of<double>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(LinedFlowLayout::s_defaultLineHeight),
                winrt::PropertyChangedCallback(&OnLineHeightPropertyChanged));
    }
    if (!s_LineSpacingProperty)
    {
        s_LineSpacingProperty =
            InitializeDependencyProperty(
                L"LineSpacing",
                winrt::name_of<double>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(LinedFlowLayout::s_defaultLineSpacing),
                winrt::PropertyChangedCallback(&OnLineSpacingPropertyChanged));
    }
    if (!s_MinItemSpacingProperty)
    {
        s_MinItemSpacingProperty =
            InitializeDependencyProperty(
                L"MinItemSpacing",
                winrt::name_of<double>(),
                winrt::name_of<winrt::LinedFlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(LinedFlowLayout::s_defaultMinItemSpacing),
                winrt::PropertyChangedCallback(&OnMinItemSpacingPropertyChanged));
    }
}

void LinedFlowLayoutProperties::ClearProperties()
{
    s_ActualLineHeightProperty = nullptr;
    s_ItemsJustificationProperty = nullptr;
    s_ItemsStretchProperty = nullptr;
    s_LineHeightProperty = nullptr;
    s_LineSpacingProperty = nullptr;
    s_MinItemSpacingProperty = nullptr;
}

void LinedFlowLayoutProperties::OnActualLineHeightPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::OnItemsJustificationPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::OnItemsStretchPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::OnLineHeightPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::OnLineSpacingPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::OnMinItemSpacingPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LinedFlowLayout>();
    winrt::get_self<LinedFlowLayout>(owner)->OnPropertyChanged(args);
}

void LinedFlowLayoutProperties::ActualLineHeight(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_ActualLineHeightProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double LinedFlowLayoutProperties::ActualLineHeight()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_ActualLineHeightProperty));
}

void LinedFlowLayoutProperties::ItemsJustification(winrt::LinedFlowLayoutItemsJustification const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_ItemsJustificationProperty, ValueHelper<winrt::LinedFlowLayoutItemsJustification>::BoxValueIfNecessary(value));
    }
}

winrt::LinedFlowLayoutItemsJustification LinedFlowLayoutProperties::ItemsJustification()
{
    return ValueHelper<winrt::LinedFlowLayoutItemsJustification>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_ItemsJustificationProperty));
}

void LinedFlowLayoutProperties::ItemsStretch(winrt::LinedFlowLayoutItemsStretch const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_ItemsStretchProperty, ValueHelper<winrt::LinedFlowLayoutItemsStretch>::BoxValueIfNecessary(value));
    }
}

winrt::LinedFlowLayoutItemsStretch LinedFlowLayoutProperties::ItemsStretch()
{
    return ValueHelper<winrt::LinedFlowLayoutItemsStretch>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_ItemsStretchProperty));
}

void LinedFlowLayoutProperties::LineHeight(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_LineHeightProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double LinedFlowLayoutProperties::LineHeight()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_LineHeightProperty));
}

void LinedFlowLayoutProperties::LineSpacing(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_LineSpacingProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double LinedFlowLayoutProperties::LineSpacing()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_LineSpacingProperty));
}

void LinedFlowLayoutProperties::MinItemSpacing(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LinedFlowLayout*>(this)->SetValue(s_MinItemSpacingProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double LinedFlowLayoutProperties::MinItemSpacing()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<LinedFlowLayout*>(this)->GetValue(s_MinItemSpacingProperty));
}

winrt::event_token LinedFlowLayoutProperties::ItemsInfoRequested(winrt::TypedEventHandler<winrt::LinedFlowLayout, winrt::LinedFlowLayoutItemsInfoRequestedEventArgs> const& value)
{
    return m_itemsInfoRequestedEventSource.add(value);
}

void LinedFlowLayoutProperties::ItemsInfoRequested(winrt::event_token const& token)
{
    m_itemsInfoRequestedEventSource.remove(token);
}

winrt::event_token LinedFlowLayoutProperties::ItemsUnlocked(winrt::TypedEventHandler<winrt::LinedFlowLayout, winrt::IInspectable> const& value)
{
    return m_itemsUnlockedEventSource.add(value);
}

void LinedFlowLayoutProperties::ItemsUnlocked(winrt::event_token const& token)
{
    m_itemsUnlockedEventSource.remove(token);
}
