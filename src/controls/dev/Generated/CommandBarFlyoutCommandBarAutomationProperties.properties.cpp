// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "CommandBarFlyoutCommandBarAutomationProperties.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(CommandBarFlyoutCommandBarAutomationProperties)
}

#include "CommandBarFlyoutCommandBarAutomationProperties.g.cpp"

GlobalDependencyProperty CommandBarFlyoutCommandBarAutomationPropertiesProperties::s_ControlTypeProperty{ nullptr };

CommandBarFlyoutCommandBarAutomationPropertiesProperties::CommandBarFlyoutCommandBarAutomationPropertiesProperties()
{
    EnsureProperties();
}

void CommandBarFlyoutCommandBarAutomationPropertiesProperties::EnsureProperties()
{
    if (!s_ControlTypeProperty)
    {
        s_ControlTypeProperty =
            InitializeDependencyProperty(
                L"ControlType",
                winrt::name_of<winrt::AutomationControlType>(),
                winrt::name_of<winrt::CommandBarFlyoutCommandBarAutomationProperties>(),
                true /* isAttached */,
                ValueHelper<winrt::AutomationControlType>::BoxValueIfNecessary(winrt::AutomationControlType::Custom),
                &CommandBarFlyoutCommandBarAutomationProperties::OnControlTypePropertyChanged);
    }
}

void CommandBarFlyoutCommandBarAutomationPropertiesProperties::ClearProperties()
{
    s_ControlTypeProperty = nullptr;
}


void CommandBarFlyoutCommandBarAutomationPropertiesProperties::SetControlType(winrt::UIElement const& target, winrt::AutomationControlType const& value)
{
    target.SetValue(s_ControlTypeProperty, ValueHelper<winrt::AutomationControlType>::BoxValueIfNecessary(value));
}

winrt::AutomationControlType CommandBarFlyoutCommandBarAutomationPropertiesProperties::GetControlType(winrt::UIElement const& target)
{
    return ValueHelper<winrt::AutomationControlType>::CastOrUnbox(target.GetValue(s_ControlTypeProperty));
}
