// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "CommandBarFlyoutCommandBar.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(CommandBarFlyoutCommandBar)
}

#include "CommandBarFlyoutCommandBar.g.cpp"

GlobalDependencyProperty CommandBarFlyoutCommandBarProperties::s_FlyoutTemplateSettingsProperty{ nullptr };
GlobalDependencyProperty CommandBarFlyoutCommandBarProperties::s_SystemBackdropProperty{ nullptr };

CommandBarFlyoutCommandBarProperties::CommandBarFlyoutCommandBarProperties()
{
    EnsureProperties();
}

void CommandBarFlyoutCommandBarProperties::EnsureProperties()
{
    if (!s_FlyoutTemplateSettingsProperty)
    {
        s_FlyoutTemplateSettingsProperty =
            InitializeDependencyProperty(
                L"FlyoutTemplateSettings",
                winrt::name_of<winrt::CommandBarFlyoutCommandBarTemplateSettings>(),
                winrt::name_of<winrt::CommandBarFlyoutCommandBar>(),
                false /* isAttached */,
                ValueHelper<winrt::CommandBarFlyoutCommandBarTemplateSettings>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SystemBackdropProperty)
    {
        s_SystemBackdropProperty =
            InitializeDependencyProperty(
                L"SystemBackdrop",
                winrt::name_of<winrt::SystemBackdrop>(),
                winrt::name_of<winrt::CommandBarFlyoutCommandBar>(),
                false /* isAttached */,
                ValueHelper<winrt::SystemBackdrop>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSystemBackdropPropertyChanged));
    }
}

void CommandBarFlyoutCommandBarProperties::ClearProperties()
{
    s_FlyoutTemplateSettingsProperty = nullptr;
    s_SystemBackdropProperty = nullptr;
}

void CommandBarFlyoutCommandBarProperties::OnSystemBackdropPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::CommandBarFlyoutCommandBar>();
    winrt::get_self<CommandBarFlyoutCommandBar>(owner)->OnPropertyChanged(args);
}

void CommandBarFlyoutCommandBarProperties::FlyoutTemplateSettings(winrt::CommandBarFlyoutCommandBarTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<CommandBarFlyoutCommandBar*>(this)->SetValue(s_FlyoutTemplateSettingsProperty, ValueHelper<winrt::CommandBarFlyoutCommandBarTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::CommandBarFlyoutCommandBarTemplateSettings CommandBarFlyoutCommandBarProperties::FlyoutTemplateSettings()
{
    return ValueHelper<winrt::CommandBarFlyoutCommandBarTemplateSettings>::CastOrUnbox(static_cast<CommandBarFlyoutCommandBar*>(this)->GetValue(s_FlyoutTemplateSettingsProperty));
}

void CommandBarFlyoutCommandBarProperties::SystemBackdrop(winrt::SystemBackdrop const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<CommandBarFlyoutCommandBar*>(this)->SetValue(s_SystemBackdropProperty, ValueHelper<winrt::SystemBackdrop>::BoxValueIfNecessary(value));
    }
}

winrt::SystemBackdrop CommandBarFlyoutCommandBarProperties::SystemBackdrop()
{
    return ValueHelper<winrt::SystemBackdrop>::CastOrUnbox(static_cast<CommandBarFlyoutCommandBar*>(this)->GetValue(s_SystemBackdropProperty));
}
