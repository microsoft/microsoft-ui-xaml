// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "MapElementsLayer.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(MapElementsLayer)
}

#include "MapElementsLayer.g.cpp"

GlobalDependencyProperty MapElementsLayerProperties::s_MapElementsProperty{ nullptr };

MapElementsLayerProperties::MapElementsLayerProperties()
    : m_mapElementClickEventSource{static_cast<MapElementsLayer*>(this)}
{
    EnsureProperties();
}

void MapElementsLayerProperties::EnsureProperties()
{
    if (!s_MapElementsProperty)
    {
        s_MapElementsProperty =
            InitializeDependencyProperty(
                L"MapElements",
                winrt::name_of<winrt::IVector<winrt::MapElement>>(),
                winrt::name_of<winrt::MapElementsLayer>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::MapElement>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMapElementsPropertyChanged));
    }
}

void MapElementsLayerProperties::ClearProperties()
{
    s_MapElementsProperty = nullptr;
}

void MapElementsLayerProperties::OnMapElementsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapElementsLayer>();
    winrt::get_self<MapElementsLayer>(owner)->OnPropertyChanged(args);
}

void MapElementsLayerProperties::MapElements(winrt::IVector<winrt::MapElement> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapElementsLayer*>(this)->SetValue(s_MapElementsProperty, ValueHelper<winrt::IVector<winrt::MapElement>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::MapElement> MapElementsLayerProperties::MapElements()
{
    return ValueHelper<winrt::IVector<winrt::MapElement>>::CastOrUnbox(static_cast<MapElementsLayer*>(this)->GetValue(s_MapElementsProperty));
}

winrt::event_token MapElementsLayerProperties::MapElementClick(winrt::TypedEventHandler<winrt::MapElementsLayer, winrt::MapElementClickEventArgs> const& value)
{
    return m_mapElementClickEventSource.add(value);
}

void MapElementsLayerProperties::MapElementClick(winrt::event_token const& token)
{
    m_mapElementClickEventSource.remove(token);
}
