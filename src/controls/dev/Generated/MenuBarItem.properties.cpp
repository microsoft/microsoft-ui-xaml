// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "MenuBarItem.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(MenuBarItem)
}

#include "MenuBarItem.g.cpp"

GlobalDependencyProperty MenuBarItemProperties::s_ItemsProperty{ nullptr };
GlobalDependencyProperty MenuBarItemProperties::s_TitleProperty{ nullptr };

MenuBarItemProperties::MenuBarItemProperties()
{
    EnsureProperties();
}

void MenuBarItemProperties::EnsureProperties()
{
    if (!s_ItemsProperty)
    {
        s_ItemsProperty =
            InitializeDependencyProperty(
                L"Items",
                winrt::name_of<winrt::IVector<winrt::MenuFlyoutItemBase>>(),
                winrt::name_of<winrt::MenuBarItem>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::MenuFlyoutItemBase>>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TitleProperty)
    {
        s_TitleProperty =
            InitializeDependencyProperty(
                L"Title",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::MenuBarItem>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                nullptr);
    }
}

void MenuBarItemProperties::ClearProperties()
{
    s_ItemsProperty = nullptr;
    s_TitleProperty = nullptr;
}

void MenuBarItemProperties::Items(winrt::IVector<winrt::MenuFlyoutItemBase> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MenuBarItem*>(this)->SetValue(s_ItemsProperty, ValueHelper<winrt::IVector<winrt::MenuFlyoutItemBase>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::MenuFlyoutItemBase> MenuBarItemProperties::Items()
{
    return ValueHelper<winrt::IVector<winrt::MenuFlyoutItemBase>>::CastOrUnbox(static_cast<MenuBarItem*>(this)->GetValue(s_ItemsProperty));
}

void MenuBarItemProperties::Title(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MenuBarItem*>(this)->SetValue(s_TitleProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring MenuBarItemProperties::Title()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<MenuBarItem*>(this)->GetValue(s_TitleProperty));
}
