// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InfoBarPanel.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(InfoBarPanel)
}

#include "InfoBarPanel.g.cpp"

GlobalDependencyProperty InfoBarPanelProperties::s_HorizontalOrientationMarginProperty{ nullptr };
GlobalDependencyProperty InfoBarPanelProperties::s_HorizontalOrientationPaddingProperty{ nullptr };
GlobalDependencyProperty InfoBarPanelProperties::s_VerticalOrientationMarginProperty{ nullptr };
GlobalDependencyProperty InfoBarPanelProperties::s_VerticalOrientationPaddingProperty{ nullptr };

InfoBarPanelProperties::InfoBarPanelProperties()
{
    EnsureProperties();
}

void InfoBarPanelProperties::EnsureProperties()
{
    if (!s_HorizontalOrientationMarginProperty)
    {
        s_HorizontalOrientationMarginProperty =
            InitializeDependencyProperty(
                L"HorizontalOrientationMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                true /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_HorizontalOrientationPaddingProperty)
    {
        s_HorizontalOrientationPaddingProperty =
            InitializeDependencyProperty(
                L"HorizontalOrientationPadding",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_VerticalOrientationMarginProperty)
    {
        s_VerticalOrientationMarginProperty =
            InitializeDependencyProperty(
                L"VerticalOrientationMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                true /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_VerticalOrientationPaddingProperty)
    {
        s_VerticalOrientationPaddingProperty =
            InitializeDependencyProperty(
                L"VerticalOrientationPadding",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
}

void InfoBarPanelProperties::ClearProperties()
{
    s_HorizontalOrientationMarginProperty = nullptr;
    s_HorizontalOrientationPaddingProperty = nullptr;
    s_VerticalOrientationMarginProperty = nullptr;
    s_VerticalOrientationPaddingProperty = nullptr;
}


void InfoBarPanelProperties::SetHorizontalOrientationMargin(winrt::DependencyObject const& target, winrt::Thickness const& value)
{
    target.SetValue(s_HorizontalOrientationMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness InfoBarPanelProperties::GetHorizontalOrientationMargin(winrt::DependencyObject const& target)
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(target.GetValue(s_HorizontalOrientationMarginProperty));
}

void InfoBarPanelProperties::HorizontalOrientationPadding(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InfoBarPanel*>(this)->SetValue(s_HorizontalOrientationPaddingProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness InfoBarPanelProperties::HorizontalOrientationPadding()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<InfoBarPanel*>(this)->GetValue(s_HorizontalOrientationPaddingProperty));
}


void InfoBarPanelProperties::SetVerticalOrientationMargin(winrt::DependencyObject const& target, winrt::Thickness const& value)
{
    target.SetValue(s_VerticalOrientationMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness InfoBarPanelProperties::GetVerticalOrientationMargin(winrt::DependencyObject const& target)
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(target.GetValue(s_VerticalOrientationMarginProperty));
}

void InfoBarPanelProperties::VerticalOrientationPadding(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InfoBarPanel*>(this)->SetValue(s_VerticalOrientationPaddingProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness InfoBarPanelProperties::VerticalOrientationPadding()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<InfoBarPanel*>(this)->GetValue(s_VerticalOrientationPaddingProperty));
}
