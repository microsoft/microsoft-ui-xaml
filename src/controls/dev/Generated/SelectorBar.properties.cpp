// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "SelectorBar.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(SelectorBar)
}

#include "SelectorBar.g.cpp"

GlobalDependencyProperty SelectorBarProperties::s_ItemsProperty{ nullptr };
GlobalDependencyProperty SelectorBarProperties::s_SelectedItemProperty{ nullptr };

SelectorBarProperties::SelectorBarProperties()
    : m_selectionChangedEventSource{static_cast<SelectorBar*>(this)}
{
    EnsureProperties();
}

void SelectorBarProperties::EnsureProperties()
{
    if (!s_ItemsProperty)
    {
        s_ItemsProperty =
            InitializeDependencyProperty(
                L"Items",
                winrt::name_of<winrt::IVector<winrt::SelectorBarItem>>(),
                winrt::name_of<winrt::SelectorBar>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::SelectorBarItem>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnItemsPropertyChanged));
    }
    if (!s_SelectedItemProperty)
    {
        s_SelectedItemProperty =
            InitializeDependencyProperty(
                L"SelectedItem",
                winrt::name_of<winrt::SelectorBarItem>(),
                winrt::name_of<winrt::SelectorBar>(),
                false /* isAttached */,
                ValueHelper<winrt::SelectorBarItem>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSelectedItemPropertyChanged));
    }
}

void SelectorBarProperties::ClearProperties()
{
    s_ItemsProperty = nullptr;
    s_SelectedItemProperty = nullptr;
}

void SelectorBarProperties::OnItemsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::SelectorBar>();
    winrt::get_self<SelectorBar>(owner)->OnPropertyChanged(args);
}

void SelectorBarProperties::OnSelectedItemPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::SelectorBar>();
    winrt::get_self<SelectorBar>(owner)->OnPropertyChanged(args);
}

void SelectorBarProperties::Items(winrt::IVector<winrt::SelectorBarItem> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<SelectorBar*>(this)->SetValue(s_ItemsProperty, ValueHelper<winrt::IVector<winrt::SelectorBarItem>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::SelectorBarItem> SelectorBarProperties::Items()
{
    return ValueHelper<winrt::IVector<winrt::SelectorBarItem>>::CastOrUnbox(static_cast<SelectorBar*>(this)->GetValue(s_ItemsProperty));
}

void SelectorBarProperties::SelectedItem(winrt::SelectorBarItem const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<SelectorBar*>(this)->SetValue(s_SelectedItemProperty, ValueHelper<winrt::SelectorBarItem>::BoxValueIfNecessary(value));
    }
}

winrt::SelectorBarItem SelectorBarProperties::SelectedItem()
{
    return ValueHelper<winrt::SelectorBarItem>::CastOrUnbox(static_cast<SelectorBar*>(this)->GetValue(s_SelectedItemProperty));
}

winrt::event_token SelectorBarProperties::SelectionChanged(winrt::TypedEventHandler<winrt::SelectorBar, winrt::SelectorBarSelectionChangedEventArgs> const& value)
{
    return m_selectionChangedEventSource.add(value);
}

void SelectorBarProperties::SelectionChanged(winrt::event_token const& token)
{
    m_selectionChangedEventSource.remove(token);
}
