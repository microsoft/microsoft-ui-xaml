// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "SelectorBarItem.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(SelectorBarItem)
}

#include "SelectorBarItem.g.cpp"

GlobalDependencyProperty SelectorBarItemProperties::s_IconProperty{ nullptr };
GlobalDependencyProperty SelectorBarItemProperties::s_TextProperty{ nullptr };

SelectorBarItemProperties::SelectorBarItemProperties()
{
    EnsureProperties();
}

void SelectorBarItemProperties::EnsureProperties()
{
    ItemContainer::EnsureProperties();
    if (!s_IconProperty)
    {
        s_IconProperty =
            InitializeDependencyProperty(
                L"Icon",
                winrt::name_of<winrt::IconElement>(),
                winrt::name_of<winrt::SelectorBarItem>(),
                false /* isAttached */,
                ValueHelper<winrt::IconElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIconPropertyChanged));
    }
    if (!s_TextProperty)
    {
        s_TextProperty =
            InitializeDependencyProperty(
                L"Text",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::SelectorBarItem>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTextPropertyChanged));
    }
}

void SelectorBarItemProperties::ClearProperties()
{
    s_IconProperty = nullptr;
    s_TextProperty = nullptr;
    ItemContainer::ClearProperties();
}

void SelectorBarItemProperties::OnIconPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::SelectorBarItem>();
    winrt::get_self<SelectorBarItem>(owner)->OnPropertyChanged(args);
}

void SelectorBarItemProperties::OnTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::SelectorBarItem>();
    winrt::get_self<SelectorBarItem>(owner)->OnPropertyChanged(args);
}

void SelectorBarItemProperties::Icon(winrt::IconElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<SelectorBarItem*>(this)->SetValue(s_IconProperty, ValueHelper<winrt::IconElement>::BoxValueIfNecessary(value));
    }
}

winrt::IconElement SelectorBarItemProperties::Icon()
{
    return ValueHelper<winrt::IconElement>::CastOrUnbox(static_cast<SelectorBarItem*>(this)->GetValue(s_IconProperty));
}

void SelectorBarItemProperties::Text(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<SelectorBarItem*>(this)->SetValue(s_TextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring SelectorBarItemProperties::Text()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<SelectorBarItem*>(this)->GetValue(s_TextProperty));
}
