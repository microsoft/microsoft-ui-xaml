// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "MapControl.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(MapControl)
}

#include "MapControl.g.cpp"

GlobalDependencyProperty MapControlProperties::s_CenterProperty{ nullptr };
GlobalDependencyProperty MapControlProperties::s_InteractiveControlsVisibleProperty{ nullptr };
GlobalDependencyProperty MapControlProperties::s_LayersProperty{ nullptr };
GlobalDependencyProperty MapControlProperties::s_MapServiceTokenProperty{ nullptr };
GlobalDependencyProperty MapControlProperties::s_ZoomLevelProperty{ nullptr };

MapControlProperties::MapControlProperties()
    : m_mapElementClickEventSource{static_cast<MapControl*>(this)}
    , m_mapServiceErrorOccurredEventSource{static_cast<MapControl*>(this)}
{
    EnsureProperties();
}

void MapControlProperties::EnsureProperties()
{
    if (!s_CenterProperty)
    {
        s_CenterProperty =
            InitializeDependencyProperty(
                L"Center",
                winrt::name_of<winrt::Geopoint>(),
                winrt::name_of<winrt::MapControl>(),
                false /* isAttached */,
                ValueHelper<winrt::Geopoint>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnCenterPropertyChanged));
    }
    if (!s_InteractiveControlsVisibleProperty)
    {
        s_InteractiveControlsVisibleProperty =
            InitializeDependencyProperty(
                L"InteractiveControlsVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::MapControl>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnInteractiveControlsVisiblePropertyChanged));
    }
    if (!s_LayersProperty)
    {
        s_LayersProperty =
            InitializeDependencyProperty(
                L"Layers",
                winrt::name_of<winrt::IVector<winrt::MapLayer>>(),
                winrt::name_of<winrt::MapControl>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::MapLayer>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLayersPropertyChanged));
    }
    if (!s_MapServiceTokenProperty)
    {
        s_MapServiceTokenProperty =
            InitializeDependencyProperty(
                L"MapServiceToken",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::MapControl>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMapServiceTokenPropertyChanged));
    }
    if (!s_ZoomLevelProperty)
    {
        s_ZoomLevelProperty =
            InitializeDependencyProperty(
                L"ZoomLevel",
                winrt::name_of<double>(),
                winrt::name_of<winrt::MapControl>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnZoomLevelPropertyChanged));
    }
}

void MapControlProperties::ClearProperties()
{
    s_CenterProperty = nullptr;
    s_InteractiveControlsVisibleProperty = nullptr;
    s_LayersProperty = nullptr;
    s_MapServiceTokenProperty = nullptr;
    s_ZoomLevelProperty = nullptr;
}

void MapControlProperties::OnCenterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapControl>();
    winrt::get_self<MapControl>(owner)->OnPropertyChanged(args);
}

void MapControlProperties::OnInteractiveControlsVisiblePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapControl>();
    winrt::get_self<MapControl>(owner)->OnPropertyChanged(args);
}

void MapControlProperties::OnLayersPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapControl>();
    winrt::get_self<MapControl>(owner)->OnPropertyChanged(args);
}

void MapControlProperties::OnMapServiceTokenPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapControl>();
    winrt::get_self<MapControl>(owner)->OnPropertyChanged(args);
}

void MapControlProperties::OnZoomLevelPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::MapControl>();
    winrt::get_self<MapControl>(owner)->OnPropertyChanged(args);
}

void MapControlProperties::Center(winrt::Geopoint const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapControl*>(this)->SetValue(s_CenterProperty, ValueHelper<winrt::Geopoint>::BoxValueIfNecessary(value));
    }
}

winrt::Geopoint MapControlProperties::Center()
{
    return ValueHelper<winrt::Geopoint>::CastOrUnbox(static_cast<MapControl*>(this)->GetValue(s_CenterProperty));
}

void MapControlProperties::InteractiveControlsVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapControl*>(this)->SetValue(s_InteractiveControlsVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool MapControlProperties::InteractiveControlsVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<MapControl*>(this)->GetValue(s_InteractiveControlsVisibleProperty));
}

void MapControlProperties::Layers(winrt::IVector<winrt::MapLayer> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapControl*>(this)->SetValue(s_LayersProperty, ValueHelper<winrt::IVector<winrt::MapLayer>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::MapLayer> MapControlProperties::Layers()
{
    return ValueHelper<winrt::IVector<winrt::MapLayer>>::CastOrUnbox(static_cast<MapControl*>(this)->GetValue(s_LayersProperty));
}

void MapControlProperties::MapServiceToken(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapControl*>(this)->SetValue(s_MapServiceTokenProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring MapControlProperties::MapServiceToken()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<MapControl*>(this)->GetValue(s_MapServiceTokenProperty));
}

void MapControlProperties::ZoomLevel(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<MapControl*>(this)->SetValue(s_ZoomLevelProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double MapControlProperties::ZoomLevel()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<MapControl*>(this)->GetValue(s_ZoomLevelProperty));
}

winrt::event_token MapControlProperties::MapElementClick(winrt::TypedEventHandler<winrt::MapControl, winrt::MapElementClickEventArgs> const& value)
{
    return m_mapElementClickEventSource.add(value);
}

void MapControlProperties::MapElementClick(winrt::event_token const& token)
{
    m_mapElementClickEventSource.remove(token);
}

winrt::event_token MapControlProperties::MapServiceErrorOccurred(winrt::TypedEventHandler<winrt::MapControl, winrt::MapControlMapServiceErrorOccurredEventArgs> const& value)
{
    return m_mapServiceErrorOccurredEventSource.add(value);
}

void MapControlProperties::MapServiceErrorOccurred(winrt::event_token const& token)
{
    m_mapServiceErrorOccurredEventSource.remove(token);
}
