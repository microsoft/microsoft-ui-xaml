// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "TreeViewItemTemplateSettings.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(TreeViewItemTemplateSettings)
}

#include "TreeViewItemTemplateSettings.g.cpp"

GlobalDependencyProperty TreeViewItemTemplateSettingsProperties::s_CollapsedGlyphVisibilityProperty{ nullptr };
GlobalDependencyProperty TreeViewItemTemplateSettingsProperties::s_DragItemsCountProperty{ nullptr };
GlobalDependencyProperty TreeViewItemTemplateSettingsProperties::s_ExpandedGlyphVisibilityProperty{ nullptr };
GlobalDependencyProperty TreeViewItemTemplateSettingsProperties::s_IndentationProperty{ nullptr };

TreeViewItemTemplateSettingsProperties::TreeViewItemTemplateSettingsProperties()
{
    EnsureProperties();
}

void TreeViewItemTemplateSettingsProperties::EnsureProperties()
{
    if (!s_CollapsedGlyphVisibilityProperty)
    {
        s_CollapsedGlyphVisibilityProperty =
            InitializeDependencyProperty(
                L"CollapsedGlyphVisibility",
                winrt::name_of<winrt::Visibility>(),
                winrt::name_of<winrt::TreeViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Visibility>::BoxValueIfNecessary(winrt::Visibility::Collapsed),
                nullptr);
    }
    if (!s_DragItemsCountProperty)
    {
        s_DragItemsCountProperty =
            InitializeDependencyProperty(
                L"DragItemsCount",
                winrt::name_of<int>(),
                winrt::name_of<winrt::TreeViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<int>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ExpandedGlyphVisibilityProperty)
    {
        s_ExpandedGlyphVisibilityProperty =
            InitializeDependencyProperty(
                L"ExpandedGlyphVisibility",
                winrt::name_of<winrt::Visibility>(),
                winrt::name_of<winrt::TreeViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Visibility>::BoxValueIfNecessary(winrt::Visibility::Collapsed),
                nullptr);
    }
    if (!s_IndentationProperty)
    {
        s_IndentationProperty =
            InitializeDependencyProperty(
                L"Indentation",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::TreeViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
}

void TreeViewItemTemplateSettingsProperties::ClearProperties()
{
    s_CollapsedGlyphVisibilityProperty = nullptr;
    s_DragItemsCountProperty = nullptr;
    s_ExpandedGlyphVisibilityProperty = nullptr;
    s_IndentationProperty = nullptr;
}

void TreeViewItemTemplateSettingsProperties::CollapsedGlyphVisibility(winrt::Visibility const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeViewItemTemplateSettings*>(this)->SetValue(s_CollapsedGlyphVisibilityProperty, ValueHelper<winrt::Visibility>::BoxValueIfNecessary(value));
    }
}

winrt::Visibility TreeViewItemTemplateSettingsProperties::CollapsedGlyphVisibility()
{
    return ValueHelper<winrt::Visibility>::CastOrUnbox(static_cast<TreeViewItemTemplateSettings*>(this)->GetValue(s_CollapsedGlyphVisibilityProperty));
}

void TreeViewItemTemplateSettingsProperties::DragItemsCount(int value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeViewItemTemplateSettings*>(this)->SetValue(s_DragItemsCountProperty, ValueHelper<int>::BoxValueIfNecessary(value));
    }
}

int TreeViewItemTemplateSettingsProperties::DragItemsCount()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<TreeViewItemTemplateSettings*>(this)->GetValue(s_DragItemsCountProperty));
}

void TreeViewItemTemplateSettingsProperties::ExpandedGlyphVisibility(winrt::Visibility const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeViewItemTemplateSettings*>(this)->SetValue(s_ExpandedGlyphVisibilityProperty, ValueHelper<winrt::Visibility>::BoxValueIfNecessary(value));
    }
}

winrt::Visibility TreeViewItemTemplateSettingsProperties::ExpandedGlyphVisibility()
{
    return ValueHelper<winrt::Visibility>::CastOrUnbox(static_cast<TreeViewItemTemplateSettings*>(this)->GetValue(s_ExpandedGlyphVisibilityProperty));
}

void TreeViewItemTemplateSettingsProperties::Indentation(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeViewItemTemplateSettings*>(this)->SetValue(s_IndentationProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness TreeViewItemTemplateSettingsProperties::Indentation()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<TreeViewItemTemplateSettings*>(this)->GetValue(s_IndentationProperty));
}
