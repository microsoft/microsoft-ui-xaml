// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "TreeView.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(TreeView)
}

#include "TreeView.g.cpp"

GlobalDependencyProperty TreeViewProperties::s_CanDragItemsProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_CanReorderItemsProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemContainerStyleProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemContainerStyleSelectorProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemContainerTransitionsProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemsSourceProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemTemplateProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_ItemTemplateSelectorProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_SelectedItemProperty{ nullptr };
GlobalDependencyProperty TreeViewProperties::s_SelectionModeProperty{ nullptr };

TreeViewProperties::TreeViewProperties()
    : m_collapsedEventSource{static_cast<TreeView*>(this)}
    , m_dragItemsCompletedEventSource{static_cast<TreeView*>(this)}
    , m_dragItemsStartingEventSource{static_cast<TreeView*>(this)}
    , m_expandingEventSource{static_cast<TreeView*>(this)}
    , m_itemInvokedEventSource{static_cast<TreeView*>(this)}
    , m_selectionChangedEventSource{static_cast<TreeView*>(this)}
{
    EnsureProperties();
}

void TreeViewProperties::EnsureProperties()
{
    if (!s_CanDragItemsProperty)
    {
        s_CanDragItemsProperty =
            InitializeDependencyProperty(
                L"CanDragItems",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                nullptr);
    }
    if (!s_CanReorderItemsProperty)
    {
        s_CanReorderItemsProperty =
            InitializeDependencyProperty(
                L"CanReorderItems",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                nullptr);
    }
    if (!s_ItemContainerStyleProperty)
    {
        s_ItemContainerStyleProperty =
            InitializeDependencyProperty(
                L"ItemContainerStyle",
                winrt::name_of<winrt::Style>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::Style>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ItemContainerStyleSelectorProperty)
    {
        s_ItemContainerStyleSelectorProperty =
            InitializeDependencyProperty(
                L"ItemContainerStyleSelector",
                winrt::name_of<winrt::StyleSelector>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::StyleSelector>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ItemContainerTransitionsProperty)
    {
        s_ItemContainerTransitionsProperty =
            InitializeDependencyProperty(
                L"ItemContainerTransitions",
                winrt::name_of<winrt::TransitionCollection>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::TransitionCollection>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ItemsSourceProperty)
    {
        s_ItemsSourceProperty =
            InitializeDependencyProperty(
                L"ItemsSource",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnItemsSourcePropertyChanged));
    }
    if (!s_ItemTemplateProperty)
    {
        s_ItemTemplateProperty =
            InitializeDependencyProperty(
                L"ItemTemplate",
                winrt::name_of<winrt::DataTemplate>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplate>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ItemTemplateSelectorProperty)
    {
        s_ItemTemplateSelectorProperty =
            InitializeDependencyProperty(
                L"ItemTemplateSelector",
                winrt::name_of<winrt::DataTemplateSelector>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplateSelector>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectedItemProperty)
    {
        s_SelectedItemProperty =
            InitializeDependencyProperty(
                L"SelectedItem",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSelectedItemPropertyChanged));
    }
    if (!s_SelectionModeProperty)
    {
        s_SelectionModeProperty =
            InitializeDependencyProperty(
                L"SelectionMode",
                winrt::name_of<winrt::TreeViewSelectionMode>(),
                winrt::name_of<winrt::TreeView>(),
                false /* isAttached */,
                ValueHelper<winrt::TreeViewSelectionMode>::BoxValueIfNecessary(winrt::TreeViewSelectionMode::Single),
                winrt::PropertyChangedCallback(&OnSelectionModePropertyChanged));
    }
}

void TreeViewProperties::ClearProperties()
{
    s_CanDragItemsProperty = nullptr;
    s_CanReorderItemsProperty = nullptr;
    s_ItemContainerStyleProperty = nullptr;
    s_ItemContainerStyleSelectorProperty = nullptr;
    s_ItemContainerTransitionsProperty = nullptr;
    s_ItemsSourceProperty = nullptr;
    s_ItemTemplateProperty = nullptr;
    s_ItemTemplateSelectorProperty = nullptr;
    s_SelectedItemProperty = nullptr;
    s_SelectionModeProperty = nullptr;
}

void TreeViewProperties::OnItemsSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::TreeView>();
    winrt::get_self<TreeView>(owner)->OnPropertyChanged(args);
}

void TreeViewProperties::OnSelectedItemPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::TreeView>();
    winrt::get_self<TreeView>(owner)->OnPropertyChanged(args);
}

void TreeViewProperties::OnSelectionModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::TreeView>();
    winrt::get_self<TreeView>(owner)->OnPropertyChanged(args);
}

void TreeViewProperties::CanDragItems(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_CanDragItemsProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool TreeViewProperties::CanDragItems()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_CanDragItemsProperty));
}

void TreeViewProperties::CanReorderItems(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_CanReorderItemsProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool TreeViewProperties::CanReorderItems()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_CanReorderItemsProperty));
}

void TreeViewProperties::ItemContainerStyle(winrt::Style const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemContainerStyleProperty, ValueHelper<winrt::Style>::BoxValueIfNecessary(value));
    }
}

winrt::Style TreeViewProperties::ItemContainerStyle()
{
    return ValueHelper<winrt::Style>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemContainerStyleProperty));
}

void TreeViewProperties::ItemContainerStyleSelector(winrt::StyleSelector const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemContainerStyleSelectorProperty, ValueHelper<winrt::StyleSelector>::BoxValueIfNecessary(value));
    }
}

winrt::StyleSelector TreeViewProperties::ItemContainerStyleSelector()
{
    return ValueHelper<winrt::StyleSelector>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemContainerStyleSelectorProperty));
}

void TreeViewProperties::ItemContainerTransitions(winrt::TransitionCollection const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemContainerTransitionsProperty, ValueHelper<winrt::TransitionCollection>::BoxValueIfNecessary(value));
    }
}

winrt::TransitionCollection TreeViewProperties::ItemContainerTransitions()
{
    return ValueHelper<winrt::TransitionCollection>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemContainerTransitionsProperty));
}

void TreeViewProperties::ItemsSource(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemsSourceProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable TreeViewProperties::ItemsSource()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemsSourceProperty));
}

void TreeViewProperties::ItemTemplate(winrt::DataTemplate const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemTemplateProperty, ValueHelper<winrt::DataTemplate>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplate TreeViewProperties::ItemTemplate()
{
    return ValueHelper<winrt::DataTemplate>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemTemplateProperty));
}

void TreeViewProperties::ItemTemplateSelector(winrt::DataTemplateSelector const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_ItemTemplateSelectorProperty, ValueHelper<winrt::DataTemplateSelector>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplateSelector TreeViewProperties::ItemTemplateSelector()
{
    return ValueHelper<winrt::DataTemplateSelector>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_ItemTemplateSelectorProperty));
}

void TreeViewProperties::SelectedItem(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_SelectedItemProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable TreeViewProperties::SelectedItem()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_SelectedItemProperty));
}

void TreeViewProperties::SelectionMode(winrt::TreeViewSelectionMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<TreeView*>(this)->SetValue(s_SelectionModeProperty, ValueHelper<winrt::TreeViewSelectionMode>::BoxValueIfNecessary(value));
    }
}

winrt::TreeViewSelectionMode TreeViewProperties::SelectionMode()
{
    return ValueHelper<winrt::TreeViewSelectionMode>::CastOrUnbox(static_cast<TreeView*>(this)->GetValue(s_SelectionModeProperty));
}

winrt::event_token TreeViewProperties::Collapsed(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewCollapsedEventArgs> const& value)
{
    return m_collapsedEventSource.add(value);
}

void TreeViewProperties::Collapsed(winrt::event_token const& token)
{
    m_collapsedEventSource.remove(token);
}

winrt::event_token TreeViewProperties::DragItemsCompleted(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsCompletedEventArgs> const& value)
{
    return m_dragItemsCompletedEventSource.add(value);
}

void TreeViewProperties::DragItemsCompleted(winrt::event_token const& token)
{
    m_dragItemsCompletedEventSource.remove(token);
}

winrt::event_token TreeViewProperties::DragItemsStarting(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsStartingEventArgs> const& value)
{
    return m_dragItemsStartingEventSource.add(value);
}

void TreeViewProperties::DragItemsStarting(winrt::event_token const& token)
{
    m_dragItemsStartingEventSource.remove(token);
}

winrt::event_token TreeViewProperties::Expanding(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewExpandingEventArgs> const& value)
{
    return m_expandingEventSource.add(value);
}

void TreeViewProperties::Expanding(winrt::event_token const& token)
{
    m_expandingEventSource.remove(token);
}

winrt::event_token TreeViewProperties::ItemInvoked(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewItemInvokedEventArgs> const& value)
{
    return m_itemInvokedEventSource.add(value);
}

void TreeViewProperties::ItemInvoked(winrt::event_token const& token)
{
    m_itemInvokedEventSource.remove(token);
}

winrt::event_token TreeViewProperties::SelectionChanged(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewSelectionChangedEventArgs> const& value)
{
    return m_selectionChangedEventSource.add(value);
}

void TreeViewProperties::SelectionChanged(winrt::event_token const& token)
{
    m_selectionChangedEventSource.remove(token);
}
