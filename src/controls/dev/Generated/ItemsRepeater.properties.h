// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#pragma once

class ItemsRepeaterProperties
{
public:
    ItemsRepeaterProperties();

    void Background(winrt::Brush const& value);
    winrt::Brush Background();

    void HorizontalCacheLength(double value);
    double HorizontalCacheLength();

    void ItemsSource(winrt::IInspectable const& value);
    winrt::IInspectable ItemsSource();

    void ItemTemplate(winrt::IInspectable const& value);
    winrt::IInspectable ItemTemplate();

    void ItemTransitionProvider(winrt::ItemCollectionTransitionProvider const& value);
    winrt::ItemCollectionTransitionProvider ItemTransitionProvider();

    void Layout(winrt::Layout const& value);
    winrt::Layout Layout();

    void VerticalCacheLength(double value);
    double VerticalCacheLength();

    static winrt::DependencyProperty BackgroundProperty() { return s_BackgroundProperty; }
    static winrt::DependencyProperty HorizontalCacheLengthProperty() { return s_HorizontalCacheLengthProperty; }
    static winrt::DependencyProperty ItemsSourceProperty() { return s_ItemsSourceProperty; }
    static winrt::DependencyProperty ItemTemplateProperty() { return s_ItemTemplateProperty; }
    static winrt::DependencyProperty ItemTransitionProviderProperty() { return s_ItemTransitionProviderProperty; }
    static winrt::DependencyProperty LayoutProperty() { return s_LayoutProperty; }
    static winrt::DependencyProperty VerticalCacheLengthProperty() { return s_VerticalCacheLengthProperty; }

    static GlobalDependencyProperty s_BackgroundProperty;
    static GlobalDependencyProperty s_HorizontalCacheLengthProperty;
    static GlobalDependencyProperty s_ItemsSourceProperty;
    static GlobalDependencyProperty s_ItemTemplateProperty;
    static GlobalDependencyProperty s_ItemTransitionProviderProperty;
    static GlobalDependencyProperty s_LayoutProperty;
    static GlobalDependencyProperty s_VerticalCacheLengthProperty;

    winrt::event_token ElementClearing(winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementClearingEventArgs> const& value);
    void ElementClearing(winrt::event_token const& token);
    winrt::event_token ElementIndexChanged(winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementIndexChangedEventArgs> const& value);
    void ElementIndexChanged(winrt::event_token const& token);
    winrt::event_token ElementPrepared(winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementPreparedEventArgs> const& value);
    void ElementPrepared(winrt::event_token const& token);

    event_source<winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementClearingEventArgs>> m_elementClearingEventSource;
    event_source<winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementIndexChangedEventArgs>> m_elementIndexChangedEventSource;
    event_source<winrt::TypedEventHandler<winrt::ItemsRepeater, winrt::ItemsRepeaterElementPreparedEventArgs>> m_elementPreparedEventSource;

    static void EnsureProperties();
    static void ClearProperties();

    static void OnHorizontalCacheLengthPropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnItemsSourcePropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnItemTemplatePropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnItemTransitionProviderPropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnLayoutPropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnVerticalCacheLengthPropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);
};
