// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "LayoutPanel.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(LayoutPanel)
}

#include "LayoutPanel.g.cpp"

GlobalDependencyProperty LayoutPanelProperties::s_BorderBrushProperty{ nullptr };
GlobalDependencyProperty LayoutPanelProperties::s_BorderThicknessProperty{ nullptr };
GlobalDependencyProperty LayoutPanelProperties::s_CornerRadiusProperty{ nullptr };
GlobalDependencyProperty LayoutPanelProperties::s_LayoutProperty{ nullptr };
GlobalDependencyProperty LayoutPanelProperties::s_PaddingProperty{ nullptr };

LayoutPanelProperties::LayoutPanelProperties()
{
    EnsureProperties();
}

void LayoutPanelProperties::EnsureProperties()
{
    if (!s_BorderBrushProperty)
    {
        s_BorderBrushProperty =
            InitializeDependencyProperty(
                L"BorderBrush",
                winrt::name_of<winrt::Brush>(),
                winrt::name_of<winrt::LayoutPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Brush>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBorderBrushPropertyChanged));
    }
    if (!s_BorderThicknessProperty)
    {
        s_BorderThicknessProperty =
            InitializeDependencyProperty(
                L"BorderThickness",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::LayoutPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBorderThicknessPropertyChanged));
    }
    if (!s_CornerRadiusProperty)
    {
        s_CornerRadiusProperty =
            InitializeDependencyProperty(
                L"CornerRadius",
                winrt::name_of<winrt::CornerRadius>(),
                winrt::name_of<winrt::LayoutPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::CornerRadius>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnCornerRadiusPropertyChanged));
    }
    if (!s_LayoutProperty)
    {
        s_LayoutProperty =
            InitializeDependencyProperty(
                L"Layout",
                winrt::name_of<winrt::Layout>(),
                winrt::name_of<winrt::LayoutPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Layout>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLayoutPropertyChanged));
    }
    if (!s_PaddingProperty)
    {
        s_PaddingProperty =
            InitializeDependencyProperty(
                L"Padding",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::LayoutPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPaddingPropertyChanged));
    }
}

void LayoutPanelProperties::ClearProperties()
{
    s_BorderBrushProperty = nullptr;
    s_BorderThicknessProperty = nullptr;
    s_CornerRadiusProperty = nullptr;
    s_LayoutProperty = nullptr;
    s_PaddingProperty = nullptr;
}

void LayoutPanelProperties::OnBorderBrushPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LayoutPanel>();
    winrt::get_self<LayoutPanel>(owner)->OnPropertyChanged(args);
}

void LayoutPanelProperties::OnBorderThicknessPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LayoutPanel>();
    winrt::get_self<LayoutPanel>(owner)->OnPropertyChanged(args);
}

void LayoutPanelProperties::OnCornerRadiusPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LayoutPanel>();
    winrt::get_self<LayoutPanel>(owner)->OnPropertyChanged(args);
}

void LayoutPanelProperties::OnLayoutPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LayoutPanel>();
    winrt::get_self<LayoutPanel>(owner)->OnPropertyChanged(args);
}

void LayoutPanelProperties::OnPaddingPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::LayoutPanel>();
    winrt::get_self<LayoutPanel>(owner)->OnPropertyChanged(args);
}

void LayoutPanelProperties::BorderBrush(winrt::Brush const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LayoutPanel*>(this)->SetValue(s_BorderBrushProperty, ValueHelper<winrt::Brush>::BoxValueIfNecessary(value));
    }
}

winrt::Brush LayoutPanelProperties::BorderBrush()
{
    return ValueHelper<winrt::Brush>::CastOrUnbox(static_cast<LayoutPanel*>(this)->GetValue(s_BorderBrushProperty));
}

void LayoutPanelProperties::BorderThickness(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LayoutPanel*>(this)->SetValue(s_BorderThicknessProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness LayoutPanelProperties::BorderThickness()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<LayoutPanel*>(this)->GetValue(s_BorderThicknessProperty));
}

void LayoutPanelProperties::CornerRadius(winrt::CornerRadius const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LayoutPanel*>(this)->SetValue(s_CornerRadiusProperty, ValueHelper<winrt::CornerRadius>::BoxValueIfNecessary(value));
    }
}

winrt::CornerRadius LayoutPanelProperties::CornerRadius()
{
    return ValueHelper<winrt::CornerRadius>::CastOrUnbox(static_cast<LayoutPanel*>(this)->GetValue(s_CornerRadiusProperty));
}

void LayoutPanelProperties::Layout(winrt::Layout const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LayoutPanel*>(this)->SetValue(s_LayoutProperty, ValueHelper<winrt::Layout>::BoxValueIfNecessary(value));
    }
}

winrt::Layout LayoutPanelProperties::Layout()
{
    return ValueHelper<winrt::Layout>::CastOrUnbox(static_cast<LayoutPanel*>(this)->GetValue(s_LayoutProperty));
}

void LayoutPanelProperties::Padding(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<LayoutPanel*>(this)->SetValue(s_PaddingProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness LayoutPanelProperties::Padding()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<LayoutPanel*>(this)->GetValue(s_PaddingProperty));
}
