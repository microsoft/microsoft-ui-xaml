// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationView.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(NavigationView)
}

#include "NavigationView.g.cpp"

GlobalDependencyProperty NavigationViewProperties::s_AlwaysShowHeaderProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_AutoSuggestBoxProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_CompactModeThresholdWidthProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_CompactPaneLengthProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_ContentOverlayProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_DisplayModeProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_ExpandedModeThresholdWidthProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_FooterMenuItemsProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_FooterMenuItemsSourceProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_HeaderTemplateProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsBackButtonVisibleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsBackEnabledProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsPaneOpenProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsPaneToggleButtonVisibleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsPaneVisibleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsSettingsVisibleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_IsTitleBarAutoPaddingEnabledProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemContainerStyleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemContainerStyleSelectorProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemsProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemsSourceProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemTemplateProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_MenuItemTemplateSelectorProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_OpenPaneLengthProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_OverflowLabelModeProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneCustomContentProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneDisplayModeProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneFooterProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneHeaderProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneTitleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_PaneToggleButtonStyleProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_SelectedItemProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_SelectionFollowsFocusProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_SettingsItemProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_ShoulderNavigationEnabledProperty{ nullptr };
GlobalDependencyProperty NavigationViewProperties::s_TemplateSettingsProperty{ nullptr };

NavigationViewProperties::NavigationViewProperties()
    : m_backRequestedEventSource{static_cast<NavigationView*>(this)}
    , m_collapsedEventSource{static_cast<NavigationView*>(this)}
    , m_displayModeChangedEventSource{static_cast<NavigationView*>(this)}
    , m_expandingEventSource{static_cast<NavigationView*>(this)}
    , m_itemInvokedEventSource{static_cast<NavigationView*>(this)}
    , m_paneClosedEventSource{static_cast<NavigationView*>(this)}
    , m_paneClosingEventSource{static_cast<NavigationView*>(this)}
    , m_paneOpenedEventSource{static_cast<NavigationView*>(this)}
    , m_paneOpeningEventSource{static_cast<NavigationView*>(this)}
    , m_selectionChangedEventSource{static_cast<NavigationView*>(this)}
{
    EnsureProperties();
}

void NavigationViewProperties::EnsureProperties()
{
    if (!s_AlwaysShowHeaderProperty)
    {
        s_AlwaysShowHeaderProperty =
            InitializeDependencyProperty(
                L"AlwaysShowHeader",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnAlwaysShowHeaderPropertyChanged));
    }
    if (!s_AutoSuggestBoxProperty)
    {
        s_AutoSuggestBoxProperty =
            InitializeDependencyProperty(
                L"AutoSuggestBox",
                winrt::name_of<winrt::AutoSuggestBox>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::AutoSuggestBox>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnAutoSuggestBoxPropertyChanged));
    }
    if (!s_CompactModeThresholdWidthProperty)
    {
        s_CompactModeThresholdWidthProperty =
            InitializeDependencyProperty(
                L"CompactModeThresholdWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(641.0),
                winrt::PropertyChangedCallback(&OnCompactModeThresholdWidthPropertyChanged));
    }
    if (!s_CompactPaneLengthProperty)
    {
        s_CompactPaneLengthProperty =
            InitializeDependencyProperty(
                L"CompactPaneLength",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(48.0),
                winrt::PropertyChangedCallback(&OnCompactPaneLengthPropertyChanged));
    }
    if (!s_ContentOverlayProperty)
    {
        s_ContentOverlayProperty =
            InitializeDependencyProperty(
                L"ContentOverlay",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_DisplayModeProperty)
    {
        s_DisplayModeProperty =
            InitializeDependencyProperty(
                L"DisplayMode",
                winrt::name_of<winrt::NavigationViewDisplayMode>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewDisplayMode>::BoxValueIfNecessary(winrt::NavigationViewDisplayMode::Minimal),
                winrt::PropertyChangedCallback(&OnDisplayModePropertyChanged));
    }
    if (!s_ExpandedModeThresholdWidthProperty)
    {
        s_ExpandedModeThresholdWidthProperty =
            InitializeDependencyProperty(
                L"ExpandedModeThresholdWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1008.0),
                winrt::PropertyChangedCallback(&OnExpandedModeThresholdWidthPropertyChanged));
    }
    if (!s_FooterMenuItemsProperty)
    {
        s_FooterMenuItemsProperty =
            InitializeDependencyProperty(
                L"FooterMenuItems",
                winrt::name_of<winrt::IVector<winrt::IInspectable>>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnFooterMenuItemsPropertyChanged));
    }
    if (!s_FooterMenuItemsSourceProperty)
    {
        s_FooterMenuItemsSourceProperty =
            InitializeDependencyProperty(
                L"FooterMenuItemsSource",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnFooterMenuItemsSourcePropertyChanged));
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnHeaderPropertyChanged));
    }
    if (!s_HeaderTemplateProperty)
    {
        s_HeaderTemplateProperty =
            InitializeDependencyProperty(
                L"HeaderTemplate",
                winrt::name_of<winrt::DataTemplate>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplate>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnHeaderTemplatePropertyChanged));
    }
    if (!s_IsBackButtonVisibleProperty)
    {
        s_IsBackButtonVisibleProperty =
            InitializeDependencyProperty(
                L"IsBackButtonVisible",
                winrt::name_of<winrt::NavigationViewBackButtonVisible>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewBackButtonVisible>::BoxValueIfNecessary(winrt::NavigationViewBackButtonVisible::Auto),
                winrt::PropertyChangedCallback(&OnIsBackButtonVisiblePropertyChanged));
    }
    if (!s_IsBackEnabledProperty)
    {
        s_IsBackEnabledProperty =
            InitializeDependencyProperty(
                L"IsBackEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIsBackEnabledPropertyChanged));
    }
    if (!s_IsPaneOpenProperty)
    {
        s_IsPaneOpenProperty =
            InitializeDependencyProperty(
                L"IsPaneOpen",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsPaneOpenPropertyChanged));
    }
    if (!s_IsPaneToggleButtonVisibleProperty)
    {
        s_IsPaneToggleButtonVisibleProperty =
            InitializeDependencyProperty(
                L"IsPaneToggleButtonVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsPaneToggleButtonVisiblePropertyChanged));
    }
    if (!s_IsPaneVisibleProperty)
    {
        s_IsPaneVisibleProperty =
            InitializeDependencyProperty(
                L"IsPaneVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsPaneVisiblePropertyChanged));
    }
    if (!s_IsSettingsVisibleProperty)
    {
        s_IsSettingsVisibleProperty =
            InitializeDependencyProperty(
                L"IsSettingsVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsSettingsVisiblePropertyChanged));
    }
    if (!s_IsTitleBarAutoPaddingEnabledProperty)
    {
        s_IsTitleBarAutoPaddingEnabledProperty =
            InitializeDependencyProperty(
                L"IsTitleBarAutoPaddingEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsTitleBarAutoPaddingEnabledPropertyChanged));
    }
    if (!s_MenuItemContainerStyleProperty)
    {
        s_MenuItemContainerStyleProperty =
            InitializeDependencyProperty(
                L"MenuItemContainerStyle",
                winrt::name_of<winrt::Style>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::Style>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemContainerStylePropertyChanged));
    }
    if (!s_MenuItemContainerStyleSelectorProperty)
    {
        s_MenuItemContainerStyleSelectorProperty =
            InitializeDependencyProperty(
                L"MenuItemContainerStyleSelector",
                winrt::name_of<winrt::StyleSelector>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::StyleSelector>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemContainerStyleSelectorPropertyChanged));
    }
    if (!s_MenuItemsProperty)
    {
        s_MenuItemsProperty =
            InitializeDependencyProperty(
                L"MenuItems",
                winrt::name_of<winrt::IVector<winrt::IInspectable>>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemsPropertyChanged));
    }
    if (!s_MenuItemsSourceProperty)
    {
        s_MenuItemsSourceProperty =
            InitializeDependencyProperty(
                L"MenuItemsSource",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemsSourcePropertyChanged));
    }
    if (!s_MenuItemTemplateProperty)
    {
        s_MenuItemTemplateProperty =
            InitializeDependencyProperty(
                L"MenuItemTemplate",
                winrt::name_of<winrt::DataTemplate>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplate>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemTemplatePropertyChanged));
    }
    if (!s_MenuItemTemplateSelectorProperty)
    {
        s_MenuItemTemplateSelectorProperty =
            InitializeDependencyProperty(
                L"MenuItemTemplateSelector",
                winrt::name_of<winrt::DataTemplateSelector>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplateSelector>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnMenuItemTemplateSelectorPropertyChanged));
    }
    if (!s_OpenPaneLengthProperty)
    {
        s_OpenPaneLengthProperty =
            InitializeDependencyProperty(
                L"OpenPaneLength",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(320.0),
                winrt::PropertyChangedCallback(&OnOpenPaneLengthPropertyChanged));
    }
    if (!s_OverflowLabelModeProperty)
    {
        s_OverflowLabelModeProperty =
            InitializeDependencyProperty(
                L"OverflowLabelMode",
                winrt::name_of<winrt::NavigationViewOverflowLabelMode>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewOverflowLabelMode>::BoxValueIfNecessary(winrt::NavigationViewOverflowLabelMode::MoreLabel),
                winrt::PropertyChangedCallback(&OnOverflowLabelModePropertyChanged));
    }
    if (!s_PaneCustomContentProperty)
    {
        s_PaneCustomContentProperty =
            InitializeDependencyProperty(
                L"PaneCustomContent",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_PaneDisplayModeProperty)
    {
        s_PaneDisplayModeProperty =
            InitializeDependencyProperty(
                L"PaneDisplayMode",
                winrt::name_of<winrt::NavigationViewPaneDisplayMode>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewPaneDisplayMode>::BoxValueIfNecessary(winrt::NavigationViewPaneDisplayMode::Auto),
                winrt::PropertyChangedCallback(&OnPaneDisplayModePropertyChanged));
    }
    if (!s_PaneFooterProperty)
    {
        s_PaneFooterProperty =
            InitializeDependencyProperty(
                L"PaneFooter",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPaneFooterPropertyChanged));
    }
    if (!s_PaneHeaderProperty)
    {
        s_PaneHeaderProperty =
            InitializeDependencyProperty(
                L"PaneHeader",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_PaneTitleProperty)
    {
        s_PaneTitleProperty =
            InitializeDependencyProperty(
                L"PaneTitle",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPaneTitlePropertyChanged));
    }
    if (!s_PaneToggleButtonStyleProperty)
    {
        s_PaneToggleButtonStyleProperty =
            InitializeDependencyProperty(
                L"PaneToggleButtonStyle",
                winrt::name_of<winrt::Style>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::Style>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPaneToggleButtonStylePropertyChanged));
    }
    if (!s_SelectedItemProperty)
    {
        s_SelectedItemProperty =
            InitializeDependencyProperty(
                L"SelectedItem",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSelectedItemPropertyChanged));
    }
    if (!s_SelectionFollowsFocusProperty)
    {
        s_SelectionFollowsFocusProperty =
            InitializeDependencyProperty(
                L"SelectionFollowsFocus",
                winrt::name_of<winrt::NavigationViewSelectionFollowsFocus>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewSelectionFollowsFocus>::BoxValueIfNecessary(winrt::NavigationViewSelectionFollowsFocus::Disabled),
                winrt::PropertyChangedCallback(&OnSelectionFollowsFocusPropertyChanged));
    }
    if (!s_SettingsItemProperty)
    {
        s_SettingsItemProperty =
            InitializeDependencyProperty(
                L"SettingsItem",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSettingsItemPropertyChanged));
    }
    if (!s_ShoulderNavigationEnabledProperty)
    {
        s_ShoulderNavigationEnabledProperty =
            InitializeDependencyProperty(
                L"ShoulderNavigationEnabled",
                winrt::name_of<winrt::NavigationViewShoulderNavigationEnabled>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewShoulderNavigationEnabled>::BoxValueIfNecessary(winrt::NavigationViewShoulderNavigationEnabled::Never),
                winrt::PropertyChangedCallback(&OnShoulderNavigationEnabledPropertyChanged));
    }
    if (!s_TemplateSettingsProperty)
    {
        s_TemplateSettingsProperty =
            InitializeDependencyProperty(
                L"TemplateSettings",
                winrt::name_of<winrt::NavigationViewTemplateSettings>(),
                winrt::name_of<winrt::NavigationView>(),
                false /* isAttached */,
                ValueHelper<winrt::NavigationViewTemplateSettings>::BoxedDefaultValue(),
                nullptr);
    }
}

void NavigationViewProperties::ClearProperties()
{
    s_AlwaysShowHeaderProperty = nullptr;
    s_AutoSuggestBoxProperty = nullptr;
    s_CompactModeThresholdWidthProperty = nullptr;
    s_CompactPaneLengthProperty = nullptr;
    s_ContentOverlayProperty = nullptr;
    s_DisplayModeProperty = nullptr;
    s_ExpandedModeThresholdWidthProperty = nullptr;
    s_FooterMenuItemsProperty = nullptr;
    s_FooterMenuItemsSourceProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_HeaderTemplateProperty = nullptr;
    s_IsBackButtonVisibleProperty = nullptr;
    s_IsBackEnabledProperty = nullptr;
    s_IsPaneOpenProperty = nullptr;
    s_IsPaneToggleButtonVisibleProperty = nullptr;
    s_IsPaneVisibleProperty = nullptr;
    s_IsSettingsVisibleProperty = nullptr;
    s_IsTitleBarAutoPaddingEnabledProperty = nullptr;
    s_MenuItemContainerStyleProperty = nullptr;
    s_MenuItemContainerStyleSelectorProperty = nullptr;
    s_MenuItemsProperty = nullptr;
    s_MenuItemsSourceProperty = nullptr;
    s_MenuItemTemplateProperty = nullptr;
    s_MenuItemTemplateSelectorProperty = nullptr;
    s_OpenPaneLengthProperty = nullptr;
    s_OverflowLabelModeProperty = nullptr;
    s_PaneCustomContentProperty = nullptr;
    s_PaneDisplayModeProperty = nullptr;
    s_PaneFooterProperty = nullptr;
    s_PaneHeaderProperty = nullptr;
    s_PaneTitleProperty = nullptr;
    s_PaneToggleButtonStyleProperty = nullptr;
    s_SelectedItemProperty = nullptr;
    s_SelectionFollowsFocusProperty = nullptr;
    s_SettingsItemProperty = nullptr;
    s_ShoulderNavigationEnabledProperty = nullptr;
    s_TemplateSettingsProperty = nullptr;
}

void NavigationViewProperties::OnAlwaysShowHeaderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnAutoSuggestBoxPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnCompactModeThresholdWidthPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NavigationView>(owner)->CoerceToGreaterThanZero(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnCompactPaneLengthPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NavigationView>(owner)->CoerceToGreaterThanZero(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnDisplayModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnExpandedModeThresholdWidthPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NavigationView>(owner)->CoerceToGreaterThanZero(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnFooterMenuItemsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnFooterMenuItemsSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnHeaderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnHeaderTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsBackButtonVisiblePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsBackEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsPaneOpenPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsPaneToggleButtonVisiblePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsPaneVisiblePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsSettingsVisiblePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnIsTitleBarAutoPaddingEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemContainerStylePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemContainerStyleSelectorPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemsSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnMenuItemTemplateSelectorPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnOpenPaneLengthPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NavigationView>(owner)->CoerceToGreaterThanZero(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnOverflowLabelModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnPaneDisplayModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnPaneFooterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnPaneTitlePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnPaneToggleButtonStylePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnSelectedItemPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnSelectionFollowsFocusPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnSettingsItemPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::OnShoulderNavigationEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationView>();
    winrt::get_self<NavigationView>(owner)->OnPropertyChanged(args);
}

void NavigationViewProperties::AlwaysShowHeader(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_AlwaysShowHeaderProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::AlwaysShowHeader()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_AlwaysShowHeaderProperty));
}

void NavigationViewProperties::AutoSuggestBox(winrt::AutoSuggestBox const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_AutoSuggestBoxProperty, ValueHelper<winrt::AutoSuggestBox>::BoxValueIfNecessary(value));
    }
}

winrt::AutoSuggestBox NavigationViewProperties::AutoSuggestBox()
{
    return ValueHelper<winrt::AutoSuggestBox>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_AutoSuggestBoxProperty));
}

void NavigationViewProperties::CompactModeThresholdWidth(double value)
{
    [[gsl::suppress(con)]]
    {
    double coercedValue = value;
    static_cast<NavigationView*>(this)->CoerceToGreaterThanZero(coercedValue);
    static_cast<NavigationView*>(this)->SetValue(s_CompactModeThresholdWidthProperty, ValueHelper<double>::BoxValueIfNecessary(coercedValue));
    }
}

double NavigationViewProperties::CompactModeThresholdWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_CompactModeThresholdWidthProperty));
}

void NavigationViewProperties::CompactPaneLength(double value)
{
    [[gsl::suppress(con)]]
    {
    double coercedValue = value;
    static_cast<NavigationView*>(this)->CoerceToGreaterThanZero(coercedValue);
    static_cast<NavigationView*>(this)->SetValue(s_CompactPaneLengthProperty, ValueHelper<double>::BoxValueIfNecessary(coercedValue));
    }
}

double NavigationViewProperties::CompactPaneLength()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_CompactPaneLengthProperty));
}

void NavigationViewProperties::ContentOverlay(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_ContentOverlayProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement NavigationViewProperties::ContentOverlay()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_ContentOverlayProperty));
}

void NavigationViewProperties::DisplayMode(winrt::NavigationViewDisplayMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_DisplayModeProperty, ValueHelper<winrt::NavigationViewDisplayMode>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewDisplayMode NavigationViewProperties::DisplayMode()
{
    return ValueHelper<winrt::NavigationViewDisplayMode>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_DisplayModeProperty));
}

void NavigationViewProperties::ExpandedModeThresholdWidth(double value)
{
    [[gsl::suppress(con)]]
    {
    double coercedValue = value;
    static_cast<NavigationView*>(this)->CoerceToGreaterThanZero(coercedValue);
    static_cast<NavigationView*>(this)->SetValue(s_ExpandedModeThresholdWidthProperty, ValueHelper<double>::BoxValueIfNecessary(coercedValue));
    }
}

double NavigationViewProperties::ExpandedModeThresholdWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_ExpandedModeThresholdWidthProperty));
}

void NavigationViewProperties::FooterMenuItems(winrt::IVector<winrt::IInspectable> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_FooterMenuItemsProperty, ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::IInspectable> NavigationViewProperties::FooterMenuItems()
{
    return ValueHelper<winrt::IVector<winrt::IInspectable>>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_FooterMenuItemsProperty));
}

void NavigationViewProperties::FooterMenuItemsSource(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_FooterMenuItemsSourceProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NavigationViewProperties::FooterMenuItemsSource()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_FooterMenuItemsSourceProperty));
}

void NavigationViewProperties::Header(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NavigationViewProperties::Header()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_HeaderProperty));
}

void NavigationViewProperties::HeaderTemplate(winrt::DataTemplate const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_HeaderTemplateProperty, ValueHelper<winrt::DataTemplate>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplate NavigationViewProperties::HeaderTemplate()
{
    return ValueHelper<winrt::DataTemplate>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_HeaderTemplateProperty));
}

void NavigationViewProperties::IsBackButtonVisible(winrt::NavigationViewBackButtonVisible const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsBackButtonVisibleProperty, ValueHelper<winrt::NavigationViewBackButtonVisible>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewBackButtonVisible NavigationViewProperties::IsBackButtonVisible()
{
    return ValueHelper<winrt::NavigationViewBackButtonVisible>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsBackButtonVisibleProperty));
}

void NavigationViewProperties::IsBackEnabled(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsBackEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsBackEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsBackEnabledProperty));
}

void NavigationViewProperties::IsPaneOpen(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsPaneOpenProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsPaneOpen()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsPaneOpenProperty));
}

void NavigationViewProperties::IsPaneToggleButtonVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsPaneToggleButtonVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsPaneToggleButtonVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsPaneToggleButtonVisibleProperty));
}

void NavigationViewProperties::IsPaneVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsPaneVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsPaneVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsPaneVisibleProperty));
}

void NavigationViewProperties::IsSettingsVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsSettingsVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsSettingsVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsSettingsVisibleProperty));
}

void NavigationViewProperties::IsTitleBarAutoPaddingEnabled(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_IsTitleBarAutoPaddingEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewProperties::IsTitleBarAutoPaddingEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_IsTitleBarAutoPaddingEnabledProperty));
}

void NavigationViewProperties::MenuItemContainerStyle(winrt::Style const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemContainerStyleProperty, ValueHelper<winrt::Style>::BoxValueIfNecessary(value));
    }
}

winrt::Style NavigationViewProperties::MenuItemContainerStyle()
{
    return ValueHelper<winrt::Style>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemContainerStyleProperty));
}

void NavigationViewProperties::MenuItemContainerStyleSelector(winrt::StyleSelector const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemContainerStyleSelectorProperty, ValueHelper<winrt::StyleSelector>::BoxValueIfNecessary(value));
    }
}

winrt::StyleSelector NavigationViewProperties::MenuItemContainerStyleSelector()
{
    return ValueHelper<winrt::StyleSelector>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemContainerStyleSelectorProperty));
}

void NavigationViewProperties::MenuItems(winrt::IVector<winrt::IInspectable> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemsProperty, ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::IInspectable> NavigationViewProperties::MenuItems()
{
    return ValueHelper<winrt::IVector<winrt::IInspectable>>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemsProperty));
}

void NavigationViewProperties::MenuItemsSource(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemsSourceProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NavigationViewProperties::MenuItemsSource()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemsSourceProperty));
}

void NavigationViewProperties::MenuItemTemplate(winrt::DataTemplate const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemTemplateProperty, ValueHelper<winrt::DataTemplate>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplate NavigationViewProperties::MenuItemTemplate()
{
    return ValueHelper<winrt::DataTemplate>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemTemplateProperty));
}

void NavigationViewProperties::MenuItemTemplateSelector(winrt::DataTemplateSelector const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_MenuItemTemplateSelectorProperty, ValueHelper<winrt::DataTemplateSelector>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplateSelector NavigationViewProperties::MenuItemTemplateSelector()
{
    return ValueHelper<winrt::DataTemplateSelector>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_MenuItemTemplateSelectorProperty));
}

void NavigationViewProperties::OpenPaneLength(double value)
{
    [[gsl::suppress(con)]]
    {
    double coercedValue = value;
    static_cast<NavigationView*>(this)->CoerceToGreaterThanZero(coercedValue);
    static_cast<NavigationView*>(this)->SetValue(s_OpenPaneLengthProperty, ValueHelper<double>::BoxValueIfNecessary(coercedValue));
    }
}

double NavigationViewProperties::OpenPaneLength()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_OpenPaneLengthProperty));
}

void NavigationViewProperties::OverflowLabelMode(winrt::NavigationViewOverflowLabelMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_OverflowLabelModeProperty, ValueHelper<winrt::NavigationViewOverflowLabelMode>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewOverflowLabelMode NavigationViewProperties::OverflowLabelMode()
{
    return ValueHelper<winrt::NavigationViewOverflowLabelMode>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_OverflowLabelModeProperty));
}

void NavigationViewProperties::PaneCustomContent(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneCustomContentProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement NavigationViewProperties::PaneCustomContent()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneCustomContentProperty));
}

void NavigationViewProperties::PaneDisplayMode(winrt::NavigationViewPaneDisplayMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneDisplayModeProperty, ValueHelper<winrt::NavigationViewPaneDisplayMode>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewPaneDisplayMode NavigationViewProperties::PaneDisplayMode()
{
    return ValueHelper<winrt::NavigationViewPaneDisplayMode>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneDisplayModeProperty));
}

void NavigationViewProperties::PaneFooter(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneFooterProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement NavigationViewProperties::PaneFooter()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneFooterProperty));
}

void NavigationViewProperties::PaneHeader(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneHeaderProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement NavigationViewProperties::PaneHeader()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneHeaderProperty));
}

void NavigationViewProperties::PaneTitle(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneTitleProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring NavigationViewProperties::PaneTitle()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneTitleProperty));
}

void NavigationViewProperties::PaneToggleButtonStyle(winrt::Style const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_PaneToggleButtonStyleProperty, ValueHelper<winrt::Style>::BoxValueIfNecessary(value));
    }
}

winrt::Style NavigationViewProperties::PaneToggleButtonStyle()
{
    return ValueHelper<winrt::Style>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_PaneToggleButtonStyleProperty));
}

void NavigationViewProperties::SelectedItem(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_SelectedItemProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NavigationViewProperties::SelectedItem()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_SelectedItemProperty));
}

void NavigationViewProperties::SelectionFollowsFocus(winrt::NavigationViewSelectionFollowsFocus const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_SelectionFollowsFocusProperty, ValueHelper<winrt::NavigationViewSelectionFollowsFocus>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewSelectionFollowsFocus NavigationViewProperties::SelectionFollowsFocus()
{
    return ValueHelper<winrt::NavigationViewSelectionFollowsFocus>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_SelectionFollowsFocusProperty));
}

void NavigationViewProperties::SettingsItem(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_SettingsItemProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NavigationViewProperties::SettingsItem()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_SettingsItemProperty));
}

void NavigationViewProperties::ShoulderNavigationEnabled(winrt::NavigationViewShoulderNavigationEnabled const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_ShoulderNavigationEnabledProperty, ValueHelper<winrt::NavigationViewShoulderNavigationEnabled>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewShoulderNavigationEnabled NavigationViewProperties::ShoulderNavigationEnabled()
{
    return ValueHelper<winrt::NavigationViewShoulderNavigationEnabled>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_ShoulderNavigationEnabledProperty));
}

void NavigationViewProperties::TemplateSettings(winrt::NavigationViewTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationView*>(this)->SetValue(s_TemplateSettingsProperty, ValueHelper<winrt::NavigationViewTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::NavigationViewTemplateSettings NavigationViewProperties::TemplateSettings()
{
    return ValueHelper<winrt::NavigationViewTemplateSettings>::CastOrUnbox(static_cast<NavigationView*>(this)->GetValue(s_TemplateSettingsProperty));
}

winrt::event_token NavigationViewProperties::BackRequested(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewBackRequestedEventArgs> const& value)
{
    return m_backRequestedEventSource.add(value);
}

void NavigationViewProperties::BackRequested(winrt::event_token const& token)
{
    m_backRequestedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::Collapsed(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewItemCollapsedEventArgs> const& value)
{
    return m_collapsedEventSource.add(value);
}

void NavigationViewProperties::Collapsed(winrt::event_token const& token)
{
    m_collapsedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::DisplayModeChanged(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewDisplayModeChangedEventArgs> const& value)
{
    return m_displayModeChangedEventSource.add(value);
}

void NavigationViewProperties::DisplayModeChanged(winrt::event_token const& token)
{
    m_displayModeChangedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::Expanding(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewItemExpandingEventArgs> const& value)
{
    return m_expandingEventSource.add(value);
}

void NavigationViewProperties::Expanding(winrt::event_token const& token)
{
    m_expandingEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::ItemInvoked(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewItemInvokedEventArgs> const& value)
{
    return m_itemInvokedEventSource.add(value);
}

void NavigationViewProperties::ItemInvoked(winrt::event_token const& token)
{
    m_itemInvokedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::PaneClosed(winrt::TypedEventHandler<winrt::NavigationView, winrt::IInspectable> const& value)
{
    return m_paneClosedEventSource.add(value);
}

void NavigationViewProperties::PaneClosed(winrt::event_token const& token)
{
    m_paneClosedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::PaneClosing(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewPaneClosingEventArgs> const& value)
{
    return m_paneClosingEventSource.add(value);
}

void NavigationViewProperties::PaneClosing(winrt::event_token const& token)
{
    m_paneClosingEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::PaneOpened(winrt::TypedEventHandler<winrt::NavigationView, winrt::IInspectable> const& value)
{
    return m_paneOpenedEventSource.add(value);
}

void NavigationViewProperties::PaneOpened(winrt::event_token const& token)
{
    m_paneOpenedEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::PaneOpening(winrt::TypedEventHandler<winrt::NavigationView, winrt::IInspectable> const& value)
{
    return m_paneOpeningEventSource.add(value);
}

void NavigationViewProperties::PaneOpening(winrt::event_token const& token)
{
    m_paneOpeningEventSource.remove(token);
}

winrt::event_token NavigationViewProperties::SelectionChanged(winrt::TypedEventHandler<winrt::NavigationView, winrt::NavigationViewSelectionChangedEventArgs> const& value)
{
    return m_selectionChangedEventSource.add(value);
}

void NavigationViewProperties::SelectionChanged(winrt::event_token const& token)
{
    m_selectionChangedEventSource.remove(token);
}
