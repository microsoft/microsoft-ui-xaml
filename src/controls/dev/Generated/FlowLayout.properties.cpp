// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "FlowLayout.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(FlowLayout)
}

#include "FlowLayout.g.cpp"

GlobalDependencyProperty FlowLayoutProperties::s_LineAlignmentProperty{ nullptr };
GlobalDependencyProperty FlowLayoutProperties::s_MinColumnSpacingProperty{ nullptr };
GlobalDependencyProperty FlowLayoutProperties::s_MinRowSpacingProperty{ nullptr };
GlobalDependencyProperty FlowLayoutProperties::s_OrientationProperty{ nullptr };

FlowLayoutProperties::FlowLayoutProperties()
{
    EnsureProperties();
}

void FlowLayoutProperties::EnsureProperties()
{
    if (!s_LineAlignmentProperty)
    {
        s_LineAlignmentProperty =
            InitializeDependencyProperty(
                L"LineAlignment",
                winrt::name_of<winrt::FlowLayoutLineAlignment>(),
                winrt::name_of<winrt::FlowLayout>(),
                false /* isAttached */,
                ValueHelper<winrt::FlowLayoutLineAlignment>::BoxValueIfNecessary(winrt::FlowLayoutLineAlignment::Start),
                winrt::PropertyChangedCallback(&OnLineAlignmentPropertyChanged));
    }
    if (!s_MinColumnSpacingProperty)
    {
        s_MinColumnSpacingProperty =
            InitializeDependencyProperty(
                L"MinColumnSpacing",
                winrt::name_of<double>(),
                winrt::name_of<winrt::FlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0.0),
                winrt::PropertyChangedCallback(&OnMinColumnSpacingPropertyChanged));
    }
    if (!s_MinRowSpacingProperty)
    {
        s_MinRowSpacingProperty =
            InitializeDependencyProperty(
                L"MinRowSpacing",
                winrt::name_of<double>(),
                winrt::name_of<winrt::FlowLayout>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0.0),
                winrt::PropertyChangedCallback(&OnMinRowSpacingPropertyChanged));
    }
    if (!s_OrientationProperty)
    {
        s_OrientationProperty =
            InitializeDependencyProperty(
                L"Orientation",
                winrt::name_of<winrt::Orientation>(),
                winrt::name_of<winrt::FlowLayout>(),
                false /* isAttached */,
                ValueHelper<winrt::Orientation>::BoxValueIfNecessary(winrt::Orientation::Horizontal),
                winrt::PropertyChangedCallback(&OnOrientationPropertyChanged));
    }
}

void FlowLayoutProperties::ClearProperties()
{
    s_LineAlignmentProperty = nullptr;
    s_MinColumnSpacingProperty = nullptr;
    s_MinRowSpacingProperty = nullptr;
    s_OrientationProperty = nullptr;
}

void FlowLayoutProperties::OnLineAlignmentPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::FlowLayout>();
    winrt::get_self<FlowLayout>(owner)->OnPropertyChanged(args);
}

void FlowLayoutProperties::OnMinColumnSpacingPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::FlowLayout>();
    winrt::get_self<FlowLayout>(owner)->OnPropertyChanged(args);
}

void FlowLayoutProperties::OnMinRowSpacingPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::FlowLayout>();
    winrt::get_self<FlowLayout>(owner)->OnPropertyChanged(args);
}

void FlowLayoutProperties::OnOrientationPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::FlowLayout>();
    winrt::get_self<FlowLayout>(owner)->OnPropertyChanged(args);
}

void FlowLayoutProperties::LineAlignment(winrt::FlowLayoutLineAlignment const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<FlowLayout*>(this)->SetValue(s_LineAlignmentProperty, ValueHelper<winrt::FlowLayoutLineAlignment>::BoxValueIfNecessary(value));
    }
}

winrt::FlowLayoutLineAlignment FlowLayoutProperties::LineAlignment()
{
    return ValueHelper<winrt::FlowLayoutLineAlignment>::CastOrUnbox(static_cast<FlowLayout*>(this)->GetValue(s_LineAlignmentProperty));
}

void FlowLayoutProperties::MinColumnSpacing(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<FlowLayout*>(this)->SetValue(s_MinColumnSpacingProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double FlowLayoutProperties::MinColumnSpacing()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<FlowLayout*>(this)->GetValue(s_MinColumnSpacingProperty));
}

void FlowLayoutProperties::MinRowSpacing(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<FlowLayout*>(this)->SetValue(s_MinRowSpacingProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double FlowLayoutProperties::MinRowSpacing()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<FlowLayout*>(this)->GetValue(s_MinRowSpacingProperty));
}

void FlowLayoutProperties::Orientation(winrt::Orientation const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<FlowLayout*>(this)->SetValue(s_OrientationProperty, ValueHelper<winrt::Orientation>::BoxValueIfNecessary(value));
    }
}

winrt::Orientation FlowLayoutProperties::Orientation()
{
    return ValueHelper<winrt::Orientation>::CastOrUnbox(static_cast<FlowLayout*>(this)->GetValue(s_OrientationProperty));
}
