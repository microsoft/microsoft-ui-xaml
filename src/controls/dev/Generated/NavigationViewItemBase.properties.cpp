// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItemBase.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(NavigationViewItemBase)
}

#include "NavigationViewItemBase.g.cpp"

GlobalDependencyProperty NavigationViewItemBaseProperties::s_IsSelectedProperty{ nullptr };

NavigationViewItemBaseProperties::NavigationViewItemBaseProperties()
{
    EnsureProperties();
}

void NavigationViewItemBaseProperties::EnsureProperties()
{
    if (!s_IsSelectedProperty)
    {
        s_IsSelectedProperty =
            InitializeDependencyProperty(
                L"IsSelected",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationViewItemBase>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIsSelectedPropertyChanged));
    }
}

void NavigationViewItemBaseProperties::ClearProperties()
{
    s_IsSelectedProperty = nullptr;
}

void NavigationViewItemBaseProperties::OnIsSelectedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationViewItemBase>();
    winrt::get_self<NavigationViewItemBase>(owner)->OnPropertyChanged(args);
}

void NavigationViewItemBaseProperties::IsSelected(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NavigationViewItemBase*>(this)->SetValue(s_IsSelectedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NavigationViewItemBaseProperties::IsSelected()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationViewItemBase*>(this)->GetValue(s_IsSelectedProperty));
}
