// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ProgressBar.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(ProgressBar)
}

#include "ProgressBar.g.cpp"

GlobalDependencyProperty ProgressBarProperties::s_IsIndeterminateProperty{ nullptr };
GlobalDependencyProperty ProgressBarProperties::s_ShowErrorProperty{ nullptr };
GlobalDependencyProperty ProgressBarProperties::s_ShowPausedProperty{ nullptr };
GlobalDependencyProperty ProgressBarProperties::s_TemplateSettingsProperty{ nullptr };

ProgressBarProperties::ProgressBarProperties()
{
    EnsureProperties();
}

void ProgressBarProperties::EnsureProperties()
{
    if (!s_IsIndeterminateProperty)
    {
        s_IsIndeterminateProperty =
            InitializeDependencyProperty(
                L"IsIndeterminate",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ProgressBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIsIndeterminatePropertyChanged));
    }
    if (!s_ShowErrorProperty)
    {
        s_ShowErrorProperty =
            InitializeDependencyProperty(
                L"ShowError",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ProgressBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnShowErrorPropertyChanged));
    }
    if (!s_ShowPausedProperty)
    {
        s_ShowPausedProperty =
            InitializeDependencyProperty(
                L"ShowPaused",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ProgressBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnShowPausedPropertyChanged));
    }
    if (!s_TemplateSettingsProperty)
    {
        s_TemplateSettingsProperty =
            InitializeDependencyProperty(
                L"TemplateSettings",
                winrt::name_of<winrt::ProgressBarTemplateSettings>(),
                winrt::name_of<winrt::ProgressBar>(),
                false /* isAttached */,
                ValueHelper<winrt::ProgressBarTemplateSettings>::BoxedDefaultValue(),
                nullptr);
    }
}

void ProgressBarProperties::ClearProperties()
{
    s_IsIndeterminateProperty = nullptr;
    s_ShowErrorProperty = nullptr;
    s_ShowPausedProperty = nullptr;
    s_TemplateSettingsProperty = nullptr;
}

void ProgressBarProperties::OnIsIndeterminatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ProgressBar>();
    winrt::get_self<ProgressBar>(owner)->OnIsIndeterminatePropertyChanged(args);
}

void ProgressBarProperties::OnShowErrorPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ProgressBar>();
    winrt::get_self<ProgressBar>(owner)->OnShowErrorPropertyChanged(args);
}

void ProgressBarProperties::OnShowPausedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ProgressBar>();
    winrt::get_self<ProgressBar>(owner)->OnShowPausedPropertyChanged(args);
}

void ProgressBarProperties::IsIndeterminate(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ProgressBar*>(this)->SetValue(s_IsIndeterminateProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ProgressBarProperties::IsIndeterminate()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ProgressBar*>(this)->GetValue(s_IsIndeterminateProperty));
}

void ProgressBarProperties::ShowError(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ProgressBar*>(this)->SetValue(s_ShowErrorProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ProgressBarProperties::ShowError()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ProgressBar*>(this)->GetValue(s_ShowErrorProperty));
}

void ProgressBarProperties::ShowPaused(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ProgressBar*>(this)->SetValue(s_ShowPausedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ProgressBarProperties::ShowPaused()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ProgressBar*>(this)->GetValue(s_ShowPausedProperty));
}

void ProgressBarProperties::TemplateSettings(winrt::ProgressBarTemplateSettings const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ProgressBar*>(this)->SetValue(s_TemplateSettingsProperty, ValueHelper<winrt::ProgressBarTemplateSettings>::BoxValueIfNecessary(value));
    }
}

winrt::ProgressBarTemplateSettings ProgressBarProperties::TemplateSettings()
{
    return ValueHelper<winrt::ProgressBarTemplateSettings>::CastOrUnbox(static_cast<ProgressBar*>(this)->GetValue(s_TemplateSettingsProperty));
}
