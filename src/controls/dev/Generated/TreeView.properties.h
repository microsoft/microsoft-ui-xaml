// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#pragma once

class TreeViewProperties
{
public:
    TreeViewProperties();

    void CanDragItems(bool value);
    bool CanDragItems();

    void CanReorderItems(bool value);
    bool CanReorderItems();

    void ItemContainerStyle(winrt::Style const& value);
    winrt::Style ItemContainerStyle();

    void ItemContainerStyleSelector(winrt::StyleSelector const& value);
    winrt::StyleSelector ItemContainerStyleSelector();

    void ItemContainerTransitions(winrt::TransitionCollection const& value);
    winrt::TransitionCollection ItemContainerTransitions();

    void ItemsSource(winrt::IInspectable const& value);
    winrt::IInspectable ItemsSource();

    void ItemTemplate(winrt::DataTemplate const& value);
    winrt::DataTemplate ItemTemplate();

    void ItemTemplateSelector(winrt::DataTemplateSelector const& value);
    winrt::DataTemplateSelector ItemTemplateSelector();

    void SelectedItem(winrt::IInspectable const& value);
    winrt::IInspectable SelectedItem();

    void SelectionMode(winrt::TreeViewSelectionMode const& value);
    winrt::TreeViewSelectionMode SelectionMode();

    static winrt::DependencyProperty CanDragItemsProperty() { return s_CanDragItemsProperty; }
    static winrt::DependencyProperty CanReorderItemsProperty() { return s_CanReorderItemsProperty; }
    static winrt::DependencyProperty ItemContainerStyleProperty() { return s_ItemContainerStyleProperty; }
    static winrt::DependencyProperty ItemContainerStyleSelectorProperty() { return s_ItemContainerStyleSelectorProperty; }
    static winrt::DependencyProperty ItemContainerTransitionsProperty() { return s_ItemContainerTransitionsProperty; }
    static winrt::DependencyProperty ItemsSourceProperty() { return s_ItemsSourceProperty; }
    static winrt::DependencyProperty ItemTemplateProperty() { return s_ItemTemplateProperty; }
    static winrt::DependencyProperty ItemTemplateSelectorProperty() { return s_ItemTemplateSelectorProperty; }
    static winrt::DependencyProperty SelectedItemProperty() { return s_SelectedItemProperty; }
    static winrt::DependencyProperty SelectionModeProperty() { return s_SelectionModeProperty; }

    static GlobalDependencyProperty s_CanDragItemsProperty;
    static GlobalDependencyProperty s_CanReorderItemsProperty;
    static GlobalDependencyProperty s_ItemContainerStyleProperty;
    static GlobalDependencyProperty s_ItemContainerStyleSelectorProperty;
    static GlobalDependencyProperty s_ItemContainerTransitionsProperty;
    static GlobalDependencyProperty s_ItemsSourceProperty;
    static GlobalDependencyProperty s_ItemTemplateProperty;
    static GlobalDependencyProperty s_ItemTemplateSelectorProperty;
    static GlobalDependencyProperty s_SelectedItemProperty;
    static GlobalDependencyProperty s_SelectionModeProperty;

    winrt::event_token Collapsed(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewCollapsedEventArgs> const& value);
    void Collapsed(winrt::event_token const& token);
    winrt::event_token DragItemsCompleted(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsCompletedEventArgs> const& value);
    void DragItemsCompleted(winrt::event_token const& token);
    winrt::event_token DragItemsStarting(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsStartingEventArgs> const& value);
    void DragItemsStarting(winrt::event_token const& token);
    winrt::event_token Expanding(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewExpandingEventArgs> const& value);
    void Expanding(winrt::event_token const& token);
    winrt::event_token ItemInvoked(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewItemInvokedEventArgs> const& value);
    void ItemInvoked(winrt::event_token const& token);
    winrt::event_token SelectionChanged(winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewSelectionChangedEventArgs> const& value);
    void SelectionChanged(winrt::event_token const& token);

    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewCollapsedEventArgs>> m_collapsedEventSource;
    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsCompletedEventArgs>> m_dragItemsCompletedEventSource;
    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewDragItemsStartingEventArgs>> m_dragItemsStartingEventSource;
    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewExpandingEventArgs>> m_expandingEventSource;
    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewItemInvokedEventArgs>> m_itemInvokedEventSource;
    event_source<winrt::TypedEventHandler<winrt::TreeView, winrt::TreeViewSelectionChangedEventArgs>> m_selectionChangedEventSource;

    static void EnsureProperties();
    static void ClearProperties();

    static void OnItemsSourcePropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnSelectedItemPropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);

    static void OnSelectionModePropertyChanged(
        winrt::DependencyObject const& sender,
        winrt::DependencyPropertyChangedEventArgs const& args);
};
