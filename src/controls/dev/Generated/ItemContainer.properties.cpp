// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ItemContainer.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(ItemContainer)
}

#include "ItemContainer.g.cpp"

GlobalDependencyProperty ItemContainerProperties::s_CanUserInvokeProperty{ nullptr };
GlobalDependencyProperty ItemContainerProperties::s_CanUserSelectProperty{ nullptr };
GlobalDependencyProperty ItemContainerProperties::s_ChildProperty{ nullptr };
GlobalDependencyProperty ItemContainerProperties::s_IsSelectedProperty{ nullptr };
GlobalDependencyProperty ItemContainerProperties::s_MultiSelectModeProperty{ nullptr };

ItemContainerProperties::ItemContainerProperties()
    : m_itemInvokedEventSource{static_cast<ItemContainer*>(this)}
{
    EnsureProperties();
}

void ItemContainerProperties::EnsureProperties()
{
#ifdef MUX_PRERELEASE
    if (!s_CanUserInvokeProperty)
    {
        s_CanUserInvokeProperty =
            InitializeDependencyProperty(
                L"CanUserInvoke",
                winrt::name_of<winrt::ItemContainerUserInvokeMode>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<winrt::ItemContainerUserInvokeMode>::BoxValueIfNecessary(winrt::ItemContainerUserInvokeMode::Auto),
                winrt::PropertyChangedCallback(&OnCanUserInvokePropertyChanged));
    }
#endif
#ifdef MUX_PRERELEASE
    if (!s_CanUserSelectProperty)
    {
        s_CanUserSelectProperty =
            InitializeDependencyProperty(
                L"CanUserSelect",
                winrt::name_of<winrt::ItemContainerUserSelectMode>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<winrt::ItemContainerUserSelectMode>::BoxValueIfNecessary(winrt::ItemContainerUserSelectMode::Auto),
                winrt::PropertyChangedCallback(&OnCanUserSelectPropertyChanged));
    }
#endif
    if (!s_ChildProperty)
    {
        s_ChildProperty =
            InitializeDependencyProperty(
                L"Child",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnChildPropertyChanged));
    }
    if (!s_IsSelectedProperty)
    {
        s_IsSelectedProperty =
            InitializeDependencyProperty(
                L"IsSelected",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsSelectedPropertyChanged));
    }
#ifdef MUX_PRERELEASE
    if (!s_MultiSelectModeProperty)
    {
        s_MultiSelectModeProperty =
            InitializeDependencyProperty(
                L"MultiSelectMode",
                winrt::name_of<winrt::ItemContainerMultiSelectMode>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<winrt::ItemContainerMultiSelectMode>::BoxValueIfNecessary(winrt::ItemContainerMultiSelectMode::Auto),
                winrt::PropertyChangedCallback(&OnMultiSelectModePropertyChanged));
    }
#endif
}

void ItemContainerProperties::ClearProperties()
{
    s_CanUserInvokeProperty = nullptr;
    s_CanUserSelectProperty = nullptr;
    s_ChildProperty = nullptr;
    s_IsSelectedProperty = nullptr;
    s_MultiSelectModeProperty = nullptr;
}

void ItemContainerProperties::OnCanUserInvokePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnPropertyChanged(args);
}

void ItemContainerProperties::OnCanUserSelectPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnPropertyChanged(args);
}

void ItemContainerProperties::OnChildPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnPropertyChanged(args);
}

void ItemContainerProperties::OnIsSelectedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnPropertyChanged(args);
}

void ItemContainerProperties::OnMultiSelectModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnPropertyChanged(args);
}

void ItemContainerProperties::CanUserInvoke(winrt::ItemContainerUserInvokeMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemContainer*>(this)->SetValue(s_CanUserInvokeProperty, ValueHelper<winrt::ItemContainerUserInvokeMode>::BoxValueIfNecessary(value));
    }
}

winrt::ItemContainerUserInvokeMode ItemContainerProperties::CanUserInvoke()
{
    return ValueHelper<winrt::ItemContainerUserInvokeMode>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_CanUserInvokeProperty));
}

void ItemContainerProperties::CanUserSelect(winrt::ItemContainerUserSelectMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemContainer*>(this)->SetValue(s_CanUserSelectProperty, ValueHelper<winrt::ItemContainerUserSelectMode>::BoxValueIfNecessary(value));
    }
}

winrt::ItemContainerUserSelectMode ItemContainerProperties::CanUserSelect()
{
    return ValueHelper<winrt::ItemContainerUserSelectMode>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_CanUserSelectProperty));
}

void ItemContainerProperties::Child(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemContainer*>(this)->SetValue(s_ChildProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement ItemContainerProperties::Child()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_ChildProperty));
}

void ItemContainerProperties::IsSelected(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemContainer*>(this)->SetValue(s_IsSelectedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ItemContainerProperties::IsSelected()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_IsSelectedProperty));
}

void ItemContainerProperties::MultiSelectMode(winrt::ItemContainerMultiSelectMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemContainer*>(this)->SetValue(s_MultiSelectModeProperty, ValueHelper<winrt::ItemContainerMultiSelectMode>::BoxValueIfNecessary(value));
    }
}

winrt::ItemContainerMultiSelectMode ItemContainerProperties::MultiSelectMode()
{
    return ValueHelper<winrt::ItemContainerMultiSelectMode>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_MultiSelectModeProperty));
}

winrt::event_token ItemContainerProperties::ItemInvoked(winrt::TypedEventHandler<winrt::ItemContainer, winrt::ItemContainerInvokedEventArgs> const& value)
{
    return m_itemInvokedEventSource.add(value);
}

void ItemContainerProperties::ItemInvoked(winrt::event_token const& token)
{
    m_itemInvokedEventSource.remove(token);
}
