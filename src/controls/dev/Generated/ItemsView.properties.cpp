// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ItemsView.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(ItemsView)
}

#include "ItemsView.g.cpp"

GlobalDependencyProperty ItemsViewProperties::s_CurrentItemIndexProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_IsItemInvokedEnabledProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_ItemsSourceProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_ItemTemplateProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_ItemTransitionProviderProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_LayoutProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_ScrollViewProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_SelectedItemProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_SelectionModeProperty{ nullptr };
GlobalDependencyProperty ItemsViewProperties::s_VerticalScrollControllerProperty{ nullptr };

ItemsViewProperties::ItemsViewProperties()
    : m_itemInvokedEventSource{static_cast<ItemsView*>(this)}
    , m_selectionChangedEventSource{static_cast<ItemsView*>(this)}
{
    EnsureProperties();
}

void ItemsViewProperties::EnsureProperties()
{
    if (!s_CurrentItemIndexProperty)
    {
        s_CurrentItemIndexProperty =
            InitializeDependencyProperty(
                L"CurrentItemIndex",
                winrt::name_of<int>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(-1),
                winrt::PropertyChangedCallback(&OnCurrentItemIndexPropertyChanged));
    }
    if (!s_IsItemInvokedEnabledProperty)
    {
        s_IsItemInvokedEnabledProperty =
            InitializeDependencyProperty(
                L"IsItemInvokedEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsItemInvokedEnabledPropertyChanged));
    }
    if (!s_ItemsSourceProperty)
    {
        s_ItemsSourceProperty =
            InitializeDependencyProperty(
                L"ItemsSource",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnItemsSourcePropertyChanged));
    }
    if (!s_ItemTemplateProperty)
    {
        s_ItemTemplateProperty =
            InitializeDependencyProperty(
                L"ItemTemplate",
                winrt::name_of<winrt::IElementFactory>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::IElementFactory>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnItemTemplatePropertyChanged));
    }
    if (!s_ItemTransitionProviderProperty)
    {
        s_ItemTransitionProviderProperty =
            InitializeDependencyProperty(
                L"ItemTransitionProvider",
                winrt::name_of<winrt::ItemCollectionTransitionProvider>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::ItemCollectionTransitionProvider>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnItemTransitionProviderPropertyChanged));
    }
    if (!s_LayoutProperty)
    {
        s_LayoutProperty =
            InitializeDependencyProperty(
                L"Layout",
                winrt::name_of<winrt::Layout>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::Layout>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLayoutPropertyChanged));
    }
    if (!s_ScrollViewProperty)
    {
        s_ScrollViewProperty =
            InitializeDependencyProperty(
                L"ScrollView",
                winrt::name_of<winrt::ScrollView>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollView>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnScrollViewPropertyChanged));
    }
    if (!s_SelectedItemProperty)
    {
        s_SelectedItemProperty =
            InitializeDependencyProperty(
                L"SelectedItem",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSelectedItemPropertyChanged));
    }
    if (!s_SelectionModeProperty)
    {
        s_SelectionModeProperty =
            InitializeDependencyProperty(
                L"SelectionMode",
                winrt::name_of<winrt::ItemsViewSelectionMode>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::ItemsViewSelectionMode>::BoxValueIfNecessary(ItemsView::s_defaultSelectionMode),
                winrt::PropertyChangedCallback(&OnSelectionModePropertyChanged));
    }
    if (!s_VerticalScrollControllerProperty)
    {
        s_VerticalScrollControllerProperty =
            InitializeDependencyProperty(
                L"VerticalScrollController",
                winrt::name_of<winrt::IScrollController>(),
                winrt::name_of<winrt::ItemsView>(),
                false /* isAttached */,
                ValueHelper<winrt::IScrollController>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnVerticalScrollControllerPropertyChanged));
    }
}

void ItemsViewProperties::ClearProperties()
{
    s_CurrentItemIndexProperty = nullptr;
    s_IsItemInvokedEnabledProperty = nullptr;
    s_ItemsSourceProperty = nullptr;
    s_ItemTemplateProperty = nullptr;
    s_ItemTransitionProviderProperty = nullptr;
    s_LayoutProperty = nullptr;
    s_ScrollViewProperty = nullptr;
    s_SelectedItemProperty = nullptr;
    s_SelectionModeProperty = nullptr;
    s_VerticalScrollControllerProperty = nullptr;
}

void ItemsViewProperties::OnCurrentItemIndexPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnIsItemInvokedEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnItemsSourcePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnItemTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnItemTransitionProviderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnLayoutPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnScrollViewPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnSelectedItemPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnSelectionModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::OnVerticalScrollControllerPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemsView>();
    winrt::get_self<ItemsView>(owner)->OnPropertyChanged(args);
}

void ItemsViewProperties::CurrentItemIndex(int value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_CurrentItemIndexProperty, ValueHelper<int>::BoxValueIfNecessary(value));
    }
}

int ItemsViewProperties::CurrentItemIndex()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_CurrentItemIndexProperty));
}

void ItemsViewProperties::IsItemInvokedEnabled(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_IsItemInvokedEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ItemsViewProperties::IsItemInvokedEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_IsItemInvokedEnabledProperty));
}

void ItemsViewProperties::ItemsSource(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_ItemsSourceProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable ItemsViewProperties::ItemsSource()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_ItemsSourceProperty));
}

void ItemsViewProperties::ItemTemplate(winrt::IElementFactory const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_ItemTemplateProperty, ValueHelper<winrt::IElementFactory>::BoxValueIfNecessary(value));
    }
}

winrt::IElementFactory ItemsViewProperties::ItemTemplate()
{
    return ValueHelper<winrt::IElementFactory>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_ItemTemplateProperty));
}

void ItemsViewProperties::ItemTransitionProvider(winrt::ItemCollectionTransitionProvider const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_ItemTransitionProviderProperty, ValueHelper<winrt::ItemCollectionTransitionProvider>::BoxValueIfNecessary(value));
    }
}

winrt::ItemCollectionTransitionProvider ItemsViewProperties::ItemTransitionProvider()
{
    return ValueHelper<winrt::ItemCollectionTransitionProvider>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_ItemTransitionProviderProperty));
}

void ItemsViewProperties::Layout(winrt::Layout const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_LayoutProperty, ValueHelper<winrt::Layout>::BoxValueIfNecessary(value));
    }
}

winrt::Layout ItemsViewProperties::Layout()
{
    return ValueHelper<winrt::Layout>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_LayoutProperty));
}

void ItemsViewProperties::ScrollView(winrt::ScrollView const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_ScrollViewProperty, ValueHelper<winrt::ScrollView>::BoxValueIfNecessary(value));
    }
}

winrt::ScrollView ItemsViewProperties::ScrollView()
{
    return ValueHelper<winrt::ScrollView>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_ScrollViewProperty));
}

void ItemsViewProperties::SelectedItem(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_SelectedItemProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable ItemsViewProperties::SelectedItem()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_SelectedItemProperty));
}

void ItemsViewProperties::SelectionMode(winrt::ItemsViewSelectionMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_SelectionModeProperty, ValueHelper<winrt::ItemsViewSelectionMode>::BoxValueIfNecessary(value));
    }
}

winrt::ItemsViewSelectionMode ItemsViewProperties::SelectionMode()
{
    return ValueHelper<winrt::ItemsViewSelectionMode>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_SelectionModeProperty));
}

void ItemsViewProperties::VerticalScrollController(winrt::IScrollController const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ItemsView*>(this)->SetValue(s_VerticalScrollControllerProperty, ValueHelper<winrt::IScrollController>::BoxValueIfNecessary(value));
    }
}

winrt::IScrollController ItemsViewProperties::VerticalScrollController()
{
    return ValueHelper<winrt::IScrollController>::CastOrUnbox(static_cast<ItemsView*>(this)->GetValue(s_VerticalScrollControllerProperty));
}

winrt::event_token ItemsViewProperties::ItemInvoked(winrt::TypedEventHandler<winrt::ItemsView, winrt::ItemsViewItemInvokedEventArgs> const& value)
{
    return m_itemInvokedEventSource.add(value);
}

void ItemsViewProperties::ItemInvoked(winrt::event_token const& token)
{
    m_itemInvokedEventSource.remove(token);
}

winrt::event_token ItemsViewProperties::SelectionChanged(winrt::TypedEventHandler<winrt::ItemsView, winrt::ItemsViewSelectionChangedEventArgs> const& value)
{
    return m_selectionChangedEventSource.add(value);
}

void ItemsViewProperties::SelectionChanged(winrt::event_token const& token)
{
    m_selectionChangedEventSource.remove(token);
}
