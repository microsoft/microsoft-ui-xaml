// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NumberBox.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(NumberBox)
}

#include "NumberBox.g.cpp"

GlobalDependencyProperty NumberBoxProperties::s_AcceptsExpressionProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_DescriptionProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HeaderTemplateProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_InputScopeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_IsWrapEnabledProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_LargeChangeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MaximumProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinimumProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_NumberFormatterProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_PlaceholderTextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_PreventKeyboardDisplayOnProgrammaticFocusProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SelectionFlyoutProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SelectionHighlightColorProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SmallChangeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SpinButtonPlacementModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_TextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_TextAlignmentProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_TextReadingOrderProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_ValidationModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_ValueProperty{ nullptr };

NumberBoxProperties::NumberBoxProperties()
    : m_valueChangedEventSource{static_cast<NumberBox*>(this)}
{
    EnsureProperties();
}

void NumberBoxProperties::EnsureProperties()
{
    if (!s_AcceptsExpressionProperty)
    {
        s_AcceptsExpressionProperty =
            InitializeDependencyProperty(
                L"AcceptsExpression",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                nullptr);
    }
    if (!s_DescriptionProperty)
    {
        s_DescriptionProperty =
            InitializeDependencyProperty(
                L"Description",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnHeaderPropertyChanged));
    }
    if (!s_HeaderTemplateProperty)
    {
        s_HeaderTemplateProperty =
            InitializeDependencyProperty(
                L"HeaderTemplate",
                winrt::name_of<winrt::DataTemplate>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::DataTemplate>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnHeaderTemplatePropertyChanged));
    }
    if (!s_InputScopeProperty)
    {
        s_InputScopeProperty =
            InitializeDependencyProperty(
                L"InputScope",
                winrt::name_of<winrt::InputScope>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::InputScope>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsWrapEnabledProperty)
    {
        s_IsWrapEnabledProperty =
            InitializeDependencyProperty(
                L"IsWrapEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsWrapEnabledPropertyChanged));
    }
    if (!s_LargeChangeProperty)
    {
        s_LargeChangeProperty =
            InitializeDependencyProperty(
                L"LargeChange",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(10),
                nullptr);
    }
    if (!s_MaximumProperty)
    {
        s_MaximumProperty =
            InitializeDependencyProperty(
                L"Maximum",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(std::numeric_limits<double>::max()),
                winrt::PropertyChangedCallback(&OnMaximumPropertyChanged));
    }
    if (!s_MinimumProperty)
    {
        s_MinimumProperty =
            InitializeDependencyProperty(
                L"Minimum",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(-std::numeric_limits<double>::max()),
                winrt::PropertyChangedCallback(&OnMinimumPropertyChanged));
    }
    if (!s_NumberFormatterProperty)
    {
        s_NumberFormatterProperty =
            InitializeDependencyProperty(
                L"NumberFormatter",
                winrt::name_of<winrt::INumberFormatter2>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::INumberFormatter2>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnNumberFormatterPropertyChanged));
    }
    if (!s_PlaceholderTextProperty)
    {
        s_PlaceholderTextProperty =
            InitializeDependencyProperty(
                L"PlaceholderText",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_PreventKeyboardDisplayOnProgrammaticFocusProperty)
    {
        s_PreventKeyboardDisplayOnProgrammaticFocusProperty =
            InitializeDependencyProperty(
                L"PreventKeyboardDisplayOnProgrammaticFocus",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectionFlyoutProperty)
    {
        s_SelectionFlyoutProperty =
            InitializeDependencyProperty(
                L"SelectionFlyout",
                winrt::name_of<winrt::FlyoutBase>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::FlyoutBase>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectionHighlightColorProperty)
    {
        s_SelectionHighlightColorProperty =
            InitializeDependencyProperty(
                L"SelectionHighlightColor",
                winrt::name_of<winrt::SolidColorBrush>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::SolidColorBrush>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SmallChangeProperty)
    {
        s_SmallChangeProperty =
            InitializeDependencyProperty(
                L"SmallChange",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnSmallChangePropertyChanged));
    }
    if (!s_SpinButtonPlacementModeProperty)
    {
        s_SpinButtonPlacementModeProperty =
            InitializeDependencyProperty(
                L"SpinButtonPlacementMode",
                winrt::name_of<winrt::NumberBoxSpinButtonPlacementMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(winrt::NumberBoxSpinButtonPlacementMode::Hidden),
                winrt::PropertyChangedCallback(&OnSpinButtonPlacementModePropertyChanged));
    }
    if (!s_TextProperty)
    {
        s_TextProperty =
            InitializeDependencyProperty(
                L"Text",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTextPropertyChanged));
    }
    if (!s_TextAlignmentProperty)
    {
        s_TextAlignmentProperty =
            InitializeDependencyProperty(
                L"TextAlignment",
                winrt::name_of<winrt::TextAlignment>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::TextAlignment>::BoxValueIfNecessary(winrt::TextAlignment::Left),
                nullptr);
    }
    if (!s_TextReadingOrderProperty)
    {
        s_TextReadingOrderProperty =
            InitializeDependencyProperty(
                L"TextReadingOrder",
                winrt::name_of<winrt::TextReadingOrder>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::TextReadingOrder>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ValidationModeProperty)
    {
        s_ValidationModeProperty =
            InitializeDependencyProperty(
                L"ValidationMode",
                winrt::name_of<winrt::NumberBoxValidationMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxValidationMode>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnValidationModePropertyChanged));
    }
    if (!s_ValueProperty)
    {
        s_ValueProperty =
            InitializeDependencyProperty(
                L"Value",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(std::numeric_limits<double>::quiet_NaN()),
                winrt::PropertyChangedCallback(&OnValuePropertyChanged));
    }
}

void NumberBoxProperties::ClearProperties()
{
    s_AcceptsExpressionProperty = nullptr;
    s_DescriptionProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_HeaderTemplateProperty = nullptr;
    s_InputScopeProperty = nullptr;
    s_IsWrapEnabledProperty = nullptr;
    s_LargeChangeProperty = nullptr;
    s_MaximumProperty = nullptr;
    s_MinimumProperty = nullptr;
    s_NumberFormatterProperty = nullptr;
    s_PlaceholderTextProperty = nullptr;
    s_PreventKeyboardDisplayOnProgrammaticFocusProperty = nullptr;
    s_SelectionFlyoutProperty = nullptr;
    s_SelectionHighlightColorProperty = nullptr;
    s_SmallChangeProperty = nullptr;
    s_SpinButtonPlacementModeProperty = nullptr;
    s_TextProperty = nullptr;
    s_TextAlignmentProperty = nullptr;
    s_TextReadingOrderProperty = nullptr;
    s_ValidationModeProperty = nullptr;
    s_ValueProperty = nullptr;
}

void NumberBoxProperties::OnHeaderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnHeaderPropertyChanged(args);
}

void NumberBoxProperties::OnHeaderTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnHeaderTemplatePropertyChanged(args);
}

void NumberBoxProperties::OnIsWrapEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnIsWrapEnabledPropertyChanged(args);
}

void NumberBoxProperties::OnMaximumPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnMaximumPropertyChanged(args);
}

void NumberBoxProperties::OnMinimumPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnMinimumPropertyChanged(args);
}

void NumberBoxProperties::OnNumberFormatterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();

    auto value = winrt::unbox_value<winrt::INumberFormatter2>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NumberBox>(owner)->ValidateNumberFormatter(coercedValue);
    if (value != coercedValue)
    {
        sender.SetValue(args.Property(), winrt::box_value<winrt::INumberFormatter2>(coercedValue));
        return;
    }

    winrt::get_self<NumberBox>(owner)->OnNumberFormatterPropertyChanged(args);
}

void NumberBoxProperties::OnSmallChangePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSmallChangePropertyChanged(args);
}

void NumberBoxProperties::OnSpinButtonPlacementModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSpinButtonPlacementModePropertyChanged(args);
}

void NumberBoxProperties::OnTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnTextPropertyChanged(args);
}

void NumberBoxProperties::OnValidationModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnValidationModePropertyChanged(args);
}

void NumberBoxProperties::OnValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnValuePropertyChanged(args);
}

void NumberBoxProperties::AcceptsExpression(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_AcceptsExpressionProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NumberBoxProperties::AcceptsExpression()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_AcceptsExpressionProperty));
}

void NumberBoxProperties::Description(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_DescriptionProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NumberBoxProperties::Description()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_DescriptionProperty));
}

void NumberBoxProperties::Header(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable NumberBoxProperties::Header()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HeaderProperty));
}

void NumberBoxProperties::HeaderTemplate(winrt::DataTemplate const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_HeaderTemplateProperty, ValueHelper<winrt::DataTemplate>::BoxValueIfNecessary(value));
    }
}

winrt::DataTemplate NumberBoxProperties::HeaderTemplate()
{
    return ValueHelper<winrt::DataTemplate>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HeaderTemplateProperty));
}

void NumberBoxProperties::InputScope(winrt::InputScope const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_InputScopeProperty, ValueHelper<winrt::InputScope>::BoxValueIfNecessary(value));
    }
}

winrt::InputScope NumberBoxProperties::InputScope()
{
    return ValueHelper<winrt::InputScope>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_InputScopeProperty));
}

void NumberBoxProperties::IsWrapEnabled(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_IsWrapEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NumberBoxProperties::IsWrapEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_IsWrapEnabledProperty));
}

void NumberBoxProperties::LargeChange(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_LargeChangeProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double NumberBoxProperties::LargeChange()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_LargeChangeProperty));
}

void NumberBoxProperties::Maximum(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_MaximumProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double NumberBoxProperties::Maximum()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MaximumProperty));
}

void NumberBoxProperties::Minimum(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_MinimumProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double NumberBoxProperties::Minimum()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinimumProperty));
}

void NumberBoxProperties::NumberFormatter(winrt::INumberFormatter2 const& value)
{
    [[gsl::suppress(con)]]
    {
    winrt::INumberFormatter2 coercedValue = value;
    static_cast<NumberBox*>(this)->ValidateNumberFormatter(coercedValue);
    static_cast<NumberBox*>(this)->SetValue(s_NumberFormatterProperty, ValueHelper<winrt::INumberFormatter2>::BoxValueIfNecessary(coercedValue));
    }
}

winrt::INumberFormatter2 NumberBoxProperties::NumberFormatter()
{
    return ValueHelper<winrt::INumberFormatter2>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_NumberFormatterProperty));
}

void NumberBoxProperties::PlaceholderText(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_PlaceholderTextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring NumberBoxProperties::PlaceholderText()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_PlaceholderTextProperty));
}

void NumberBoxProperties::PreventKeyboardDisplayOnProgrammaticFocus(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_PreventKeyboardDisplayOnProgrammaticFocusProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool NumberBoxProperties::PreventKeyboardDisplayOnProgrammaticFocus()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_PreventKeyboardDisplayOnProgrammaticFocusProperty));
}

void NumberBoxProperties::SelectionFlyout(winrt::FlyoutBase const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_SelectionFlyoutProperty, ValueHelper<winrt::FlyoutBase>::BoxValueIfNecessary(value));
    }
}

winrt::FlyoutBase NumberBoxProperties::SelectionFlyout()
{
    return ValueHelper<winrt::FlyoutBase>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SelectionFlyoutProperty));
}

void NumberBoxProperties::SelectionHighlightColor(winrt::SolidColorBrush const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_SelectionHighlightColorProperty, ValueHelper<winrt::SolidColorBrush>::BoxValueIfNecessary(value));
    }
}

winrt::SolidColorBrush NumberBoxProperties::SelectionHighlightColor()
{
    return ValueHelper<winrt::SolidColorBrush>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SelectionHighlightColorProperty));
}

void NumberBoxProperties::SmallChange(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_SmallChangeProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double NumberBoxProperties::SmallChange()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SmallChangeProperty));
}

void NumberBoxProperties::SpinButtonPlacementMode(winrt::NumberBoxSpinButtonPlacementMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_SpinButtonPlacementModeProperty, ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(value));
    }
}

winrt::NumberBoxSpinButtonPlacementMode NumberBoxProperties::SpinButtonPlacementMode()
{
    return ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SpinButtonPlacementModeProperty));
}

void NumberBoxProperties::Text(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_TextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring NumberBoxProperties::Text()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_TextProperty));
}

void NumberBoxProperties::TextAlignment(winrt::TextAlignment const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_TextAlignmentProperty, ValueHelper<winrt::TextAlignment>::BoxValueIfNecessary(value));
    }
}

winrt::TextAlignment NumberBoxProperties::TextAlignment()
{
    return ValueHelper<winrt::TextAlignment>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_TextAlignmentProperty));
}

void NumberBoxProperties::TextReadingOrder(winrt::TextReadingOrder const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_TextReadingOrderProperty, ValueHelper<winrt::TextReadingOrder>::BoxValueIfNecessary(value));
    }
}

winrt::TextReadingOrder NumberBoxProperties::TextReadingOrder()
{
    return ValueHelper<winrt::TextReadingOrder>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_TextReadingOrderProperty));
}

void NumberBoxProperties::ValidationMode(winrt::NumberBoxValidationMode const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_ValidationModeProperty, ValueHelper<winrt::NumberBoxValidationMode>::BoxValueIfNecessary(value));
    }
}

winrt::NumberBoxValidationMode NumberBoxProperties::ValidationMode()
{
    return ValueHelper<winrt::NumberBoxValidationMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValidationModeProperty));
}

void NumberBoxProperties::Value(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<NumberBox*>(this)->SetValue(s_ValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double NumberBoxProperties::Value()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValueProperty));
}

winrt::event_token NumberBoxProperties::ValueChanged(winrt::TypedEventHandler<winrt::NumberBox, winrt::NumberBoxValueChangedEventArgs> const& value)
{
    return m_valueChangedEventSource.add(value);
}

void NumberBoxProperties::ValueChanged(winrt::event_token const& token)
{
    m_valueChangedEventSource.remove(token);
}
