namespace MU_XC_NAMESPACE
{

[MUX_PUBLIC]
[webhosthidden]
interface IAnimatedVisual
    requires Windows.Foundation.IClosable
{
    Microsoft.UI.Composition.Visual RootVisual{ get; };
    Windows.Foundation.Numerics.Vector2 Size{ get; };
    Windows.Foundation.TimeSpan Duration{ get; };
};

[MUX_PUBLIC_V3]
[webhosthidden]
interface IAnimatedVisual2 requires IAnimatedVisual
{
    void CreateAnimations();
    void DestroyAnimations();
};

[MUX_PUBLIC]
[webhosthidden]
interface IAnimatedVisualSource
{
    IAnimatedVisual TryCreateAnimatedVisual(
        Microsoft.UI.Composition.Compositor compositor,
        out Object diagnostics);
};

[MUX_PUBLIC]
[webhosthidden]
interface IDynamicAnimatedVisualSource
    requires IAnimatedVisualSource
{
    event Windows.Foundation.TypedEventHandler<IDynamicAnimatedVisualSource, Object> AnimatedVisualInvalidated;
};

[MUX_PUBLIC_V3]
[webhosthidden]
interface IAnimatedVisualSource3
{
    IAnimatedVisual2 TryCreateAnimatedVisual(
        Microsoft.UI.Composition.Compositor compositor,
        out Object diagnostics,
        Boolean createAnimations);
};

[MUX_INTERNAL]
[webhosthidden]
interface ISelfPlayingAnimatedVisual
    requires IAnimatedVisual
{
    void Pause();
    Windows.Foundation.IAsyncAction PlayAsync(Double fromProgress, Double toProgress, Boolean looped);
    void Resume();
    void Stop();
    void SetPlaybackRate(Double playbackRate);
    void SetProgress(Double progress);
    void SetProgressObject(Microsoft.UI.Composition.CompositionPropertySet compositionPropertySet);
    void SetSize(Windows.Foundation.Size size);
};

[MUX_PUBLIC_V3]
[webhosthidden]
enum PlayerAnimationOptimization
{
    Latency,
    Resources
};

[MUX_PUBLIC]
[webhosthidden]
[contentproperty("Source")]
unsealed runtimeclass AnimatedVisualPlayer
    : Microsoft.UI.Xaml.FrameworkElement
{
    AnimatedVisualPlayer();

    Object Diagnostics{ get; };
    Windows.Foundation.TimeSpan Duration{ get; };

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    IAnimatedVisualSource Source;
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Microsoft.UI.Xaml.DataTemplate FallbackContent;

    [MUX_DEFAULT_VALUE("true")]
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Boolean AutoPlay;
    Boolean IsAnimatedVisualLoaded{ get; };
    Boolean IsPlaying{ get; };
    [MUX_DEFAULT_VALUE("1")]
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Double PlaybackRate;

    [MUX_PUBLIC_V3]
    {
        [MUX_DEFAULT_VALUE("winrt::PlayerAnimationOptimization::Latency")]
        [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
        PlayerAnimationOptimization AnimationOptimization;
    }

    Microsoft.UI.Composition.CompositionObject ProgressObject{ get; };

    [MUX_DEFAULT_VALUE("winrt::Stretch::Uniform")]
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Microsoft.UI.Xaml.Media.Stretch Stretch;

    void Pause();
    Windows.Foundation.IAsyncAction PlayAsync(Double fromProgress, Double toProgress, Boolean looped);
    void Resume();
    void SetProgress(Double progress);
    void Stop();

    // Dependency properties
    static Microsoft.UI.Xaml.DependencyProperty AutoPlayProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty DiagnosticsProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty DurationProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty FallbackContentProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty IsAnimatedVisualLoadedProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty IsPlayingProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty PlaybackRateProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty SourceProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty StretchProperty{ get; };

    [MUX_PUBLIC_V3]
    {
        static Microsoft.UI.Xaml.DependencyProperty AnimationOptimizationProperty{ get; };
    }
}

}
