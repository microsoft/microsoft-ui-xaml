namespace MU_XC_NAMESPACE
{

runtimeclass ItemsSourceView;
runtimeclass ItemsRepeater;
runtimeclass ElementFactory;
runtimeclass LayoutContext;
runtimeclass VirtualizingLayoutContext;
runtimeclass Layout;
runtimeclass VirtualizingLayout;
runtimeclass ItemCollectionTransition;
runtimeclass ItemCollectionTransitionProgress;
runtimeclass ItemCollectionTransitionProvider;
runtimeclass LinedFlowLayoutItemCollectionTransitionProvider;
runtimeclass ItemsRepeaterScrollHost;
runtimeclass ItemsRepeaterElementPreparedEventArgs;
runtimeclass ItemsRepeaterElementClearingEventArgs;
runtimeclass ItemsRepeaterElementIndexChangedEventArgs;
runtimeclass LinedFlowLayout;
runtimeclass LinedFlowLayoutItemsInfoRequestedEventArgs;
runtimeclass UniformGridLayoutState;
runtimeclass UniformGridLayout;
runtimeclass StackLayoutState;
runtimeclass StackLayout;
runtimeclass FlowLayoutState;
runtimeclass FlowLayout;
runtimeclass RecyclePool;
runtimeclass SelectTemplateEventArgs;
runtimeclass RecyclingElementFactory;
runtimeclass IndexPath;
runtimeclass SelectionModelSelectionChangedEventArgs;
runtimeclass SelectionModelChildrenRequestedEventArgs;
runtimeclass SelectionModel;

[MUX_PUBLIC_V5]
[webhosthidden]
[flags]
enum ItemCollectionTransitionTriggers
{
    CollectionChangeAdd = 1,
    CollectionChangeRemove = 2,
    CollectionChangeReset = 4,
    LayoutTransition = 8,
};

[MUX_PUBLIC_V5]
[webhosthidden]
enum ItemCollectionTransitionOperation
{
    Add = 0,
    Remove = 1,
    Move = 2
};

[MUX_PUBLIC]
[webhosthidden]
[flags]
enum ElementRealizationOptions
{
    None = 0,
    ForceCreate = 1,
    SuppressAutoRecycle = 2
};

[MUX_PUBLIC_V5]
[webhosthidden]
enum IndexBasedLayoutOrientation
{
    None = 0,
    TopToBottom = 1,
    LeftToRight = 2,
};

[MUX_PREVIEW]
[webhosthidden]
enum FlowLayoutLineAlignment
{
    Start = 0,
    Center = 1,
    End = 2,
    SpaceAround = 3,
    SpaceBetween = 4,
    SpaceEvenly = 5
};

[MUX_PUBLIC]
[webhosthidden]
enum UniformGridLayoutItemsJustification
{
    Start = 0,
    Center = 1,
    End = 2,
    SpaceAround = 3,
    SpaceBetween = 4,
    SpaceEvenly = 5
};

[MUX_PUBLIC]
[webhosthidden]
enum UniformGridLayoutItemsStretch
{
    None = 0,
    Fill = 1,
    Uniform = 2
};

[MUX_PUBLIC_V5]
[webhosthidden]
enum LinedFlowLayoutItemsJustification
{
    Start = 0,
    Center = 1,
    End = 2,
    SpaceAround = 3,
    SpaceBetween = 4,
    SpaceEvenly = 5
};

[MUX_PUBLIC_V5]
[webhosthidden]
enum LinedFlowLayoutItemsStretch
{
    None = 0,
    Fill = 1
};

[MUX_PUBLIC]
[webhosthidden]
interface IKeyIndexMapping
{
    String KeyFromIndex(Int32 index);
    Int32 IndexFromKey(String key);
}

[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass ItemsSourceView: Microsoft.UI.Xaml.Interop.INotifyCollectionChanged
{
    ItemsSourceView(Object source);

    Int32 Count{ get; };
    Object GetAt(Int32 index);

    Boolean HasKeyIndexMapping{ get; };
    String KeyFromIndex(Int32 index);
    Int32 IndexFromKey(String key);
    Int32 IndexOf(IInspectable item);
}

[MUX_PUBLIC]
[webhosthidden]
[contentproperty("ItemTemplate")]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass ItemsRepeater : Microsoft.UI.Xaml.FrameworkElement
{
    ItemsRepeater();

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Object ItemsSource { get; set; };
    ItemsSourceView ItemsSourceView { get; };

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Object ItemTemplate { get; set; };

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Layout Layout { get; set; };

    [MUX_PUBLIC_V5]
    {
        [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
        ItemCollectionTransitionProvider ItemTransitionProvider{ get; set; };
    }

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_DEFAULT_VALUE("2.0")]
    Double HorizontalCacheLength { get; set; };
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_DEFAULT_VALUE("2.0")]
    Double VerticalCacheLength { get; set; };

    Microsoft.UI.Xaml.Media.Brush Background{ get; set; };

    Int32 GetElementIndex(Microsoft.UI.Xaml.UIElement element);
    Microsoft.UI.Xaml.UIElement TryGetElement(Int32 index);
    Microsoft.UI.Xaml.UIElement GetOrCreateElement(Int32 index);
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementPreparedEventArgs> ElementPrepared;
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementClearingEventArgs> ElementClearing;
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementIndexChangedEventArgs> ElementIndexChanged;

    static Microsoft.UI.Xaml.DependencyProperty ItemsSourceProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty ItemTemplateProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty LayoutProperty { get; };
    [MUX_PUBLIC_V5]
    {
        static Microsoft.UI.Xaml.DependencyProperty ItemTransitionProviderProperty { get; };
    }
    static Microsoft.UI.Xaml.DependencyProperty HorizontalCacheLengthProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty VerticalCacheLengthProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty BackgroundProperty{ get; };
}

[MUX_PREVIEW]
[webhosthidden]
unsealed runtimeclass ElementFactory : Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.IElementFactory
{
    ElementFactory();

    overridable Microsoft.UI.Xaml.UIElement GetElementCore(Microsoft.UI.Xaml.ElementFactoryGetArgs args);
    overridable void RecycleElementCore(Microsoft.UI.Xaml.ElementFactoryRecycleArgs args);
}

[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass LayoutContext : Microsoft.UI.Xaml.DependencyObject
{
    Object LayoutState{ get; set; };
    overridable Object LayoutStateCore{ get; set; };
}


[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass NonVirtualizingLayoutContext : LayoutContext
{
    NonVirtualizingLayoutContext();

    Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement> Children { get; };
    overridable Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement> ChildrenCore { get; };
}


[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass VirtualizingLayoutContext : LayoutContext
{
    VirtualizingLayoutContext();

    Int32 ItemCount{ get; };
    Object GetItemAt(Int32 index);

    Windows.Foundation.Rect RealizationRect{ get; };

    Microsoft.UI.Xaml.UIElement GetOrCreateElementAt(Int32 index);
    Microsoft.UI.Xaml.UIElement GetOrCreateElementAt(Int32 index, ElementRealizationOptions options);
    void RecycleElement(Microsoft.UI.Xaml.UIElement element);

    Int32 RecommendedAnchorIndex{ get; };

    Windows.Foundation.Point LayoutOrigin{ get; set; };

    overridable Int32 ItemCountCore();
    overridable Object GetItemAtCore(Int32 index);

    overridable Windows.Foundation.Rect RealizationRectCore();

    overridable Microsoft.UI.Xaml.UIElement GetOrCreateElementAtCore(Int32 index, ElementRealizationOptions options);
    overridable void RecycleElementCore(Microsoft.UI.Xaml.UIElement element);

    overridable Int32 RecommendedAnchorIndexCore{ get; };

    overridable Windows.Foundation.Point LayoutOriginCore{ get; set; };

    [MUX_PUBLIC_V5]
    {
        Windows.Foundation.Rect VisibleRect{ get; };
        overridable Windows.Foundation.Rect VisibleRectCore();
    }
}

[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass Layout : Microsoft.UI.Xaml.DependencyObject
{
    void InitializeForContext(LayoutContext context);
    void UninitializeForContext(LayoutContext context);
    Windows.Foundation.Size Measure(LayoutContext context, Windows.Foundation.Size availableSize);
    Windows.Foundation.Size Arrange(LayoutContext context, Windows.Foundation.Size finalSize);

    event Windows.Foundation.TypedEventHandler<Layout, Object> MeasureInvalidated;
    event Windows.Foundation.TypedEventHandler<Layout, Object> ArrangeInvalidated;

    protected void InvalidateMeasure();
    protected void InvalidateArrange();

    [MUX_PUBLIC_V5]
    {
        IndexBasedLayoutOrientation IndexBasedLayoutOrientation{ get; };
        protected void SetIndexBasedLayoutOrientation(IndexBasedLayoutOrientation orientation);
    }

    [MUX_PUBLIC_V5]
    {
        overridable ItemCollectionTransitionProvider CreateDefaultItemTransitionProvider();
    }
}

[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass NonVirtualizingLayout : Layout
{
    NonVirtualizingLayout();

    overridable void InitializeForContextCore(NonVirtualizingLayoutContext context);
    overridable void UninitializeForContextCore(NonVirtualizingLayoutContext context);
    overridable Windows.Foundation.Size MeasureOverride(NonVirtualizingLayoutContext context, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size ArrangeOverride(NonVirtualizingLayoutContext context, Windows.Foundation.Size finalSize);
}

[MUX_PUBLIC]
[webhosthidden]
unsealed runtimeclass VirtualizingLayout : Layout
{
    VirtualizingLayout();

    overridable void InitializeForContextCore(VirtualizingLayoutContext context);
    overridable void UninitializeForContextCore(VirtualizingLayoutContext context);
    overridable Windows.Foundation.Size MeasureOverride(VirtualizingLayoutContext context, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size ArrangeOverride(VirtualizingLayoutContext context, Windows.Foundation.Size finalSize);

    overridable void OnItemsChangedCore(VirtualizingLayoutContext context, IInspectable source, Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs args);
}

[MUX_PUBLIC_V5]
[webhosthidden]
runtimeclass ItemCollectionTransition
{
    ItemCollectionTransitionOperation Operation{ get; };
    ItemCollectionTransitionTriggers Triggers{ get; };
    Windows.Foundation.Rect OldBounds{ get; };
    Windows.Foundation.Rect NewBounds{ get; };
    Boolean HasStarted{ get; };

    ItemCollectionTransitionProgress Start();
}

[MUX_PUBLIC_V5]
[webhosthidden]
runtimeclass ItemCollectionTransitionProgress
{
    ItemCollectionTransition Transition{ get; };
    Microsoft.UI.Xaml.UIElement Element{ get; };

    void Complete();
}

[MUX_PUBLIC_V5]
[webhosthidden]
runtimeclass ItemCollectionTransitionCompletedEventArgs
{
    ItemCollectionTransition Transition{ get; };
    Microsoft.UI.Xaml.UIElement Element{ get; };
}

[MUX_PUBLIC_V5]
[webhosthidden]
unsealed runtimeclass ItemCollectionTransitionProvider
{
    ItemCollectionTransitionProvider();

    Boolean ShouldAnimate(ItemCollectionTransition transition);
    overridable Boolean ShouldAnimateCore(ItemCollectionTransition transition);

    void QueueTransition(ItemCollectionTransition transition);
    overridable void StartTransitions(Windows.Foundation.Collections.IVector<ItemCollectionTransition> transitions);

    event Windows.Foundation.TypedEventHandler<ItemCollectionTransitionProvider, ItemCollectionTransitionCompletedEventArgs> TransitionCompleted;
}

[MUX_PUBLIC_V5]
[webhosthidden]
unsealed runtimeclass LinedFlowLayoutItemCollectionTransitionProvider : Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider
{
    LinedFlowLayoutItemCollectionTransitionProvider();
}

[MUX_PUBLIC]
[webhosthidden]
[contentproperty("ScrollViewer")]
runtimeclass ItemsRepeaterScrollHost : Microsoft.UI.Xaml.FrameworkElement
{
    ItemsRepeaterScrollHost();

    Microsoft.UI.Xaml.Controls.ScrollViewer ScrollViewer { get; set; };

    Microsoft.UI.Xaml.UIElement CurrentAnchor{ get; };

    Double HorizontalAnchorRatio { get; set; };
    Double VerticalAnchorRatio { get; set; };
}

[MUX_PUBLIC]
[webhosthidden]
runtimeclass ItemsRepeaterElementPreparedEventArgs
{
    Microsoft.UI.Xaml.UIElement Element { get; };
    Int32 Index { get; };
}

[MUX_PUBLIC]
[webhosthidden]
runtimeclass ItemsRepeaterElementClearingEventArgs
{
    Microsoft.UI.Xaml.UIElement Element { get; };
}

[MUX_PUBLIC]
[webhosthidden]
runtimeclass ItemsRepeaterElementIndexChangedEventArgs
{
    Microsoft.UI.Xaml.UIElement Element { get; };
    Int32 OldIndex { get; };
    Int32 NewIndex { get; };
}

[MUX_PREVIEW]
[webhosthidden]
struct FlowLayoutAnchorInfo
{
    Int32 Index;
    Double Offset;
};

[MUX_PREVIEW]
[webhosthidden]
unsealed runtimeclass UniformGridLayoutState
{
    UniformGridLayoutState();
}

[MUX_PUBLIC]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass UniformGridLayout : VirtualizingLayout
{
    UniformGridLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Horizontal")]
    Microsoft.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinItemWidth { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinItemHeight { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinRowSpacing { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinColumnSpacing { get; set; };
    [MUX_DEFAULT_VALUE("winrt::UniformGridLayoutItemsJustification::Start")]
    UniformGridLayoutItemsJustification ItemsJustification{ get; set; };
    [MUX_DEFAULT_VALUE("winrt::UniformGridLayoutItemsStretch::None")]
    UniformGridLayoutItemsStretch ItemsStretch{ get; set; };
    [MUX_DEFAULT_VALUE("-1")]
    Int32 MaximumRowsOrColumns{ get; set; };

    static Microsoft.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinItemWidthProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinItemHeightProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinRowSpacingProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinColumnSpacingProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty ItemsJustificationProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty ItemsStretchProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty MaximumRowsOrColumnsProperty{ get; };
}

[MUX_PREVIEW]
[webhosthidden]
unsealed runtimeclass StackLayoutState
{
    StackLayoutState();
}

[MUX_PUBLIC]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass StackLayout : VirtualizingLayout
{
    StackLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Vertical")]
    Microsoft.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double Spacing { get; set; };

    static Microsoft.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty SpacingProperty { get; };

    [MUX_PREVIEW]
    {
        Boolean DisableVirtualization{ get; set; };
        static Microsoft.UI.Xaml.DependencyProperty DisableVirtualizationProperty{ get; };
    }

   // Removing until we are ready to expose.
   // overridable FlowLayoutAnchorInfo GetAnchorForRealizationRect(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
   // overridable Windows.Foundation.Rect GetExtent(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context, Microsoft.UI.Xaml.UIElement firstRealized, Int32 firstRealizedItemIndex, Windows.Foundation.Rect firstRealizedLayoutBounds, Microsoft.UI.Xaml.UIElement lastRealized, Int32 lastRealizedItemIndex, Windows.Foundation.Rect lastRealizedLayoutBounds);
   // overridable void OnElementMeasured(Microsoft.UI.Xaml.UIElement element, Int32 index, Windows.Foundation.Size availableSize, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize, Windows.Foundation.Size provisionalArrangeSize, VirtualizingLayoutContext context);
}

[MUX_PREVIEW]
[webhosthidden]
unsealed runtimeclass FlowLayoutState
{
    FlowLayoutState();
}

[MUX_PREVIEW]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass FlowLayout : VirtualizingLayout
{
    FlowLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Horizontal")]
    Microsoft.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinRowSpacing { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinColumnSpacing { get; set; };
    [MUX_DEFAULT_VALUE("winrt::FlowLayoutLineAlignment::Start")]
    FlowLayoutLineAlignment LineAlignment { get; set; };

    static Microsoft.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinRowSpacingProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty MinColumnSpacingProperty { get; };
    static Microsoft.UI.Xaml.DependencyProperty LineAlignmentProperty { get; };

    overridable Windows.Foundation.Size GetMeasureSize(Int32 index, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size GetProvisionalArrangeSize(Int32 index, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize);
    overridable Boolean ShouldBreakLine(Int32 index, Double remainingSpace);
    overridable FlowLayoutAnchorInfo GetAnchorForRealizationRect(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
    overridable FlowLayoutAnchorInfo GetAnchorForTargetElement(Int32 targetIndex, Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
    overridable Windows.Foundation.Rect GetExtent(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context, Microsoft.UI.Xaml.UIElement firstRealized, Int32 firstRealizedItemIndex, Windows.Foundation.Rect firstRealizedLayoutBounds, Microsoft.UI.Xaml.UIElement lastRealized, Int32 lastRealizedItemIndex, Windows.Foundation.Rect lastRealizedLayoutBounds);
    overridable void OnElementMeasured(Microsoft.UI.Xaml.UIElement element, Int32 index, Windows.Foundation.Size availableSize, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize, Windows.Foundation.Size provisionalArrangeSize, VirtualizingLayoutContext context);
    overridable void OnLineArranged(Int32 startIndex, Int32 countInLine, Double lineSize, VirtualizingLayoutContext context);
}

[MUX_PUBLIC_V5]
[webhosthidden]
runtimeclass LinedFlowLayoutItemsInfoRequestedEventArgs
{
    Int32 ItemsRangeStartIndex{ get; set; };
    Int32 ItemsRangeRequestedLength{ get; };
    Double MinWidth{ get; set; };
    Double MaxWidth{ get; set; };
    void SetDesiredAspectRatios(Double[] values);
    void SetMinWidths(Double[] values);
    void SetMaxWidths(Double[] values);
}

[MUX_PUBLIC_V5]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass LinedFlowLayout : VirtualizingLayout
{
    LinedFlowLayout();

    event Windows.Foundation.TypedEventHandler<LinedFlowLayout, LinedFlowLayoutItemsInfoRequestedEventArgs> ItemsInfoRequested;
    event Windows.Foundation.TypedEventHandler<LinedFlowLayout, Object> ItemsUnlocked;

    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultItemsJustification")]
    LinedFlowLayoutItemsJustification ItemsJustification{ get; set; };
    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultItemsStretch")]
    LinedFlowLayoutItemsStretch ItemsStretch{ get; set; };
    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultMinItemSpacing")]
    Double MinItemSpacing{ get; set; };
    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultLineSpacing")]
    Double LineSpacing{ get; set; };
    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultLineHeight")]
    Double LineHeight{ get; set; };
    [MUX_DEFAULT_VALUE("LinedFlowLayout::s_defaultActualLineHeight")]
    Double ActualLineHeight{ get; };
    Int32 RequestedRangeStartIndex{ get; };
    Int32 RequestedRangeLength{ get; };

    void InvalidateItemsInfo();
    Int32 LockItemToLine(Int32 itemIndex);

    static Microsoft.UI.Xaml.DependencyProperty ItemsJustificationProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty ItemsStretchProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty MinItemSpacingProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty LineSpacingProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty LineHeightProperty{ get; };
    static Microsoft.UI.Xaml.DependencyProperty ActualLineHeightProperty{ get; };
}

[MUX_PREVIEW]
[webhosthidden]
[MUX_OVERRIDE_ENSURE_PROPERTIES]
unsealed runtimeclass RecyclePool
{
    RecyclePool();

    [method_name("PutElement")]
    void PutElement(Microsoft.UI.Xaml.UIElement element, String key);
    [method_name("PutElementWithOwner")]
    void PutElement(Microsoft.UI.Xaml.UIElement element, String key, Microsoft.UI.Xaml.UIElement owner);
    [method_name("TryGetElement")]
    Microsoft.UI.Xaml.UIElement TryGetElement(String key);
    [method_name("TryGetElementWithOwner")]
    Microsoft.UI.Xaml.UIElement TryGetElement(String key, Microsoft.UI.Xaml.UIElement owner);

    static Microsoft.UI.Xaml.DependencyProperty PoolInstanceProperty{ get; };
    static RecyclePool GetPoolInstance(Microsoft.UI.Xaml.DataTemplate dataTemplate);
    static void SetPoolInstance(Microsoft.UI.Xaml.DataTemplate dataTemplate, RecyclePool value);

    overridable void PutElementCore(Microsoft.UI.Xaml.UIElement element, String key, Microsoft.UI.Xaml.UIElement owner);
    overridable Microsoft.UI.Xaml.UIElement TryGetElementCore(String key, Microsoft.UI.Xaml.UIElement owner);
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass SelectTemplateEventArgs
{
    String TemplateKey{ get; set; };
    Object DataContext { get; };
    Microsoft.UI.Xaml.UIElement Owner { get; };
}

[MUX_PREVIEW]
[webhosthidden]
[contentproperty("Templates")]
unsealed runtimeclass RecyclingElementFactory : ElementFactory
{
    RecyclingElementFactory();

    RecyclePool RecyclePool { get; set; };
    Windows.Foundation.Collections.IMap<String, Microsoft.UI.Xaml.DataTemplate> Templates { get; set; };
    event Windows.Foundation.TypedEventHandler<RecyclingElementFactory, SelectTemplateEventArgs> SelectTemplateKey;

    overridable String OnSelectTemplateKeyCore(Object dataContext, Microsoft.UI.Xaml.UIElement owner);
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass IndexPath : Windows.Foundation.IStringable
{
    Int32 GetSize();
    Int32 GetAt(Int32 index);
    Int32 CompareTo(IndexPath other);

    [default_overload] [method_name("CreateFrom")]
    static IndexPath CreateFrom(Int32 index);
    [method_name("CreateFromGroupAndItemIndex")]
    static IndexPath CreateFrom(Int32 groupIndex, Int32 itemIndex);
    static IndexPath CreateFromIndices(Windows.Foundation.Collections.IVector<Int32> indices);
}

[MUX_PREVIEW]
[webhosthidden]
[default_interface]
runtimeclass SelectionModelSelectionChangedEventArgs
{
}

[MUX_PREVIEW]
[webhosthidden]
runtimeclass SelectionModelChildrenRequestedEventArgs
{
    Object Source { get; };
    IndexPath SourceIndex { get; };
    Object Children { get; set; };
}

[MUX_PREVIEW]
[webhosthidden]
unsealed runtimeclass SelectionModel : Microsoft.UI.Xaml.Data.INotifyPropertyChanged
{
    SelectionModel();

    event Windows.Foundation.TypedEventHandler<SelectionModel, SelectionModelSelectionChangedEventArgs> SelectionChanged;
    event Windows.Foundation.TypedEventHandler<SelectionModel, SelectionModelChildrenRequestedEventArgs> ChildrenRequested;
    Object Source { get; set; };
    Boolean SingleSelect { get; set; };
    IndexPath AnchorIndex { get; set; };
    IndexPath SelectedIndex { get; set; };
    Object SelectedItem { get; };
    Windows.Foundation.Collections.IVectorView<Object> SelectedItems { get; };
    Windows.Foundation.Collections.IVectorView<IndexPath> SelectedIndices { get; };
    [method_name("SetAnchorIndex")]
    void SetAnchorIndex(Int32 index);
    [method_name("SetAnchorIndexWithGroup")]
    void SetAnchorIndex(Int32 groupIndex, Int32 itemIndex);
    [default_overload] [method_name("Select")]
    void Select(Int32 index);
    [method_name("SelectWithGroup")]
    void Select(Int32 groupIndex, Int32 itemIndex);
    void SelectAt(IndexPath index);
    [default_overload] [method_name("Deselect")]
    void Deselect(Int32 index);
    [method_name("DeselectWithGroup")]
    void Deselect(Int32 groupIndex, Int32 itemIndex);
    void DeselectAt(IndexPath index);
    [default_overload] [method_name("IsSelected")]
    Windows.Foundation.IReference<Boolean> IsSelected(Int32 index);
    [method_name("IsSelectedWithGroup")]
    Windows.Foundation.IReference<Boolean> IsSelected(Int32 groupIndex, Int32 itemIndex);
    Windows.Foundation.IReference<Boolean> IsSelectedAt(IndexPath index);
    [default_overload] [method_name("SelectRangeFromAnchor")]
    void SelectRangeFromAnchor(Int32 index);
    [method_name("SelectRangeFromAnchorWithGroup")]
    void SelectRangeFromAnchor(Int32 groupIndex, Int32 itemIndex);
    void SelectRangeFromAnchorTo(IndexPath index);
    [default_overload] [method_name("DeselectRangeFromAnchor")]
    void DeselectRangeFromAnchor(Int32 index);
    [method_name("DeselectRangeFromAnchorWithGroup")]
    void DeselectRangeFromAnchor(Int32 groupIndex, Int32 itemIndex);
    void DeselectRangeFromAnchorTo(IndexPath index);
    void SelectRange(IndexPath start, IndexPath end);
    void DeselectRange(IndexPath start, IndexPath end);
    void SelectAll();
    void SelectAllFlat();
    void ClearSelection();

    protected void OnPropertyChanged(String propertyName);
}

}
