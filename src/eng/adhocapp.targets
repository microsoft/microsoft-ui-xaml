<!-- Copyright (c) Microsoft Corporation. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project>
  
  <!-- 
    Replace mock WinAppSDK nuget's Microsoft.WinUI.dll with private Microsoft.WinUI.dll 
  -->
  <Target Name="ResolveLocalPrivateProjection"
          AfterTargets="ResolvePackageAssets;ResolveNuGetPackageAssets"
          BeforeTargets="_UpdateMuiFilesAfterNugetRestore"
          Condition="'$(IncludePrivateMetadata)' == 'true' and '$(MSBuildProjectExtension)'=='.csproj' and '$(UsingMicrosoftNETSdk)' == 'true'">

    <PropertyGroup>
      <PrivateWinUIProjectionAssembly>$(ArtifactsObjDir)src\projection\private\Microsoft.WinUI.dll</PrivateWinUIProjectionAssembly>
      <!-- Ensure ResolveAssemblyReferences does the right thing -->
      <AdditionalExplicitAssemblyReferences>$(PrivateWinUIProjectionAssembly);$(AdditionalExplicitAssemblyReferences)</AdditionalExplicitAssemblyReferences>
    </PropertyGroup>

    <ItemGroup>
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.Filename)%(RuntimeCopyLocalItems.Extension)' == 'Microsoft.WinUI.dll'" />
      <ResolvedCompileFileDefinitions Remove="@(ResolvedCompileFileDefinitions)" Condition="'%(ResolvedCompileFileDefinitions.Filename)%(ResolvedCompileFileDefinitions.Extension)' == 'Microsoft.WinUI.dll'" />
      <RuntimeCopyLocalItems Include="$(PrivateWinUIProjectionAssembly)">
        <DestinationSubPath>Microsoft.WinUI.dll</DestinationSubPath>
        <NuGetPackageVersion>Local Build Output</NuGetPackageVersion>
        <AssetType>runtime</AssetType>
        <NuGetPackageId>Microsoft.WinUI</NuGetPackageId>
        <CopyLocal>true</CopyLocal>
        <PathInPackage>lib\$(DotNetCoreTargetFrameworkMoniker)\Microsoft.WinUI.dll</PathInPackage>
      </RuntimeCopyLocalItems>
      <ResolvedCompileFileDefinitions Include="$(PrivateWinUIProjectionAssembly)">
        <HintPath>$(PrivateWinUIProjectionAssembly)</HintPath>
        <NuGetPackageVersion>Local Build Output</NuGetPackageVersion>
        <Private>false</Private>
        <NuGetPackageId>Microsoft.WinUI</NuGetPackageId>
        <PathInPackage>lib\$(DotNetCoreTargetFrameworkMoniker)\Microsoft.WinUI.dll</PathInPackage>
        <NuGetSourceType>Package</NuGetSourceType>
      </ResolvedCompileFileDefinitions>
    </ItemGroup>

  </Target>

  <!--
    If pointing to a local WinUI Details repo, use the binaries from there instead of the one in the NuGet.
    This is done in the ResolveLocalBuildPackageAssets for managed projects.
  -->
  <ItemGroup Condition="'$(WinUIDetailsRepoLocation)' != '' and '$(MSBuildProjectExtension)'=='.vcxproj'">
    <ReferenceCopyLocalPaths Remove="$(NativeAssemblyPackageLocation)\Microsoft.UI.Xaml.Internal.dll" />
    <ReferenceCopyLocalPaths Include="$(WinUIDetailsRepoLocation)\bin\$(WinUIDetailsArch)fre\Microsoft.UI.Xaml.Internal\Microsoft.UI.Xaml.Internal.dll" />
    <ReferenceCopyLocalPaths Remove="$(NativeAssemblyPackageLocation)\WinUIEdit.dll" />
    <ReferenceCopyLocalPaths Include="$(WinUIDetailsRepoLocation)\bin\$(WinUIDetailsArch)fre\WinUIEdit\WinUIEdit.dll" />
  </ItemGroup>

  <Target Name="BinplacePDBForAdHocApp" AfterTargets="Build" BeforeTargets="AddBinplaceItems" Condition="'$(BinplaceOutputAssemblies)'=='false'">
    <PropertyGroup>
      <PdbBinplacePath>$(TestSymbolsBinplacePath)</PdbBinplacePath>
      <PdbBinplacePath Condition="'$(BinplaceSymbolsToSubdir)'=='true'" >$(TestSymbolsBinplacePath)\$(AppxPackageName)</PdbBinplacePath>
    </PropertyGroup>
    <ItemGroup>
      <BinplaceItem Include="$(OutDir)$(TargetName).pdb" Condition="Exists('$(OutDir)$(TargetName).pdb')">
        <Destination>$(PdbBinplacePath)</Destination>
      </BinplaceItem>
    </ItemGroup>
  </Target>

  <!-- Opt-in legacy support for appxmanifest activatable class registrations, for tests/samples 
  targeting UWP or RS5, neither of which support fusion manifest activatable class entries.
  (This logic previously lived in Microsoft.WinUI.AppX.targets.) -->
  <PropertyGroup>
    <EnableMUXWinRTRegistrations Condition="'$(EnableMUXWinRTRegistrations)'=='' and '$(TargetPlatformIdentifier)'=='UAP'">true</EnableMUXWinRTRegistrations>
  </PropertyGroup>
  <Import Project="adhocappreg.targets" Condition="'$(EnableMUXWinRTRegistrations)'=='true'"/>

</Project>