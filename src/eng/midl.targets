<!-- Copyright (c) Microsoft Corporation. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project>
  <!--
    Provide default output location for projects. The only projects that need to specify OutputWinmds
    are those that are merge only projects and don't have any actual <Midl/> items
  -->
  <PropertyGroup Condition="'$(OutputWinmds)' == ''">
    <!--
      For projects that don't run mdmerge, there will be one unmerged .winmd file per .idl file.
      This will be properly expanded when GetResolvedWinMD is ran
    -->
    <OutputWinmds Condition="'$(MergeWinMd)'=='false'">@(Midl->'$(UnmergedWinmdOutputLocation)%(Filename).winmd')</OutputWinmds>

    <!--
      Default OutputWinmd location for merged projects in in the $(MergedWinMDOutputDir) location of the output.
      The unmerged metadata is located in the directory above it.
    -->
    <OutputWinmds  Condition="'$(MergeWinMd)'=='true'">$(MergedWinmdOutputLocation)\$(TargetName).winmd</OutputWinmds>
  </PropertyGroup>

  <ItemGroup Condition="'$(MergeWinMd)' == 'true' and '@(Midl)' != ''">
    <_WinMdInputsForMerge Include="$(UnmergedWinmdOutputLocation)$(TargetName).winmd"/>
  </ItemGroup>

  <!--
    This target gathers all the winmds references by this project through <ProjectReference> or <Reference> and adds
    them to the list of winmds to include for running mdmerge
   -->
  <Target Name="_GatherComposedMetadataInputs"
          Returns="@(_WinMdInputsForMerge);@(_WinMdReferenceDirectories)"
          AfterTargets="ResolveAssemblyReferences"
          BeforeTargets="_ComposedMetadata"
          Condition="'$(MergeWinMd)'=='true'">
    <PropertyGroup>
      <_WinUIAssembliesWithMatchingWinMD>
        Microsoft.UI.Xaml.Phone.dll;
        Microsoft.UI.Xaml.Controls.dll;
      </_WinUIAssembliesWithMatchingWinMD>
    </PropertyGroup>
    <ItemGroup>
        <!-- 
          Only grab references we want to merge; due to the special way we compile midl, where we have
          distinct merge projects, there are differences in how we want to handle this for product vs. test code.
          Test code won't merge any referenced metadata files, since any project reference should just be used as
          a strict reference.
        -->
      <_PossibleWinMdInputsForMerge Include="%(ReferencePath.Identity)" Condition="'%(ReferencePath.Merge)'!='false' and '%(ReferencePath.IsSystemReference)'!='true'">
        <ImplementationDll>%(ReferencePath.ImplementationDll)</ImplementationDll>
        <!--
          If the Implementation of the reference (which is returned via ProjectReference) matches the filename of one of the WinUI assemblies
        that matches the WinRT mapping rules, then use that
        -->
        <ImplementationDll Condition="'%(ReferencePath.ImplementationDll)'=='' and $(_WinUIAssembliesWithMatchingWinMD.Contains('%(ReferencePath.Implementation)'))">%(ReferencePath.Implementation)</ImplementationDll>
        <ReferenceSourceTarget>%(ReferencePath.ReferenceSourceTarget)</ReferenceSourceTarget>
      </_PossibleWinMdInputsForMerge>

      <!-- Remove the private winmd file if IgnorePrivateMUXMetadataDir is true -->
      <_PrivateWinMD Include="@(_PossibleWinMdInputsForMerge)" Condition="'%(_PossibleWinMdInputsForMerge.Filename)'=='microsoft.ui.xaml.private' or '%(_PossibleWinMdInputsForMerge.Filename)'=='microsoft.ui.xaml.phone-private'"/>
      <_PossibleWinMdInputsForMerge Remove="@(_PrivateWinMD)" Condition="'$(IgnorePrivateMUXMetadataDir)' == 'true' and '$(IncludePrivateMetadata)'!='true'"/>

      <!-- Don't merge referenced winmds if this is test code. We'll just use them as references instead for that -->
      <_WinMdInputsForMerge Include="@(_PossibleWinMdInputsForMerge)" Condition="'$(TestCode)'!='true'"/>

      <!--
        If the winmd reference doesn't have merge specified, then it's only used as a metadata dir. This is only necessary while we have this custom
        build logic, and/or we merge in IXP. Once we stop merging IXP, we should be able to move over to consume the Microsoft.Windows.MidlRT package
        and remove this custom build logic
      -->
      <_WinMdReferenceDirectories Include="%(ReferencePath.RootDir)%(ReferencePath.Directory)" Condition="'%(ReferencePath.Merge)'=='false'" />
      <_WinMdReferenceDirectories Include="$(FacadeWinmdDir)"/>
      <_WinMdReferenceDirectories Condition="'$(XamlLightup)'=='true'" Include="$(SDKReferencesPath)"/>
      <_WinMdReferenceDirectories Include="@(_PossibleWinMdInputsForMerge->'%(RelativeDir)'->Distinct())" Condition="'$(TestCode)'=='true'"/>
    </ItemGroup>
  </Target>

  <!--
    This is the target that runs mdmerge and produces a consumable winmd
  -->
  <Target Name="_ComposedMetadata"
          Inputs="@(_WinMdInputsForMerge)"
          Outputs="$(OutputWinmds)"
          AfterTargets="Midl;ResolveReferences;Build"
          BeforeTargets="AddBinplaceItems"
          Condition="'$(MergeWinMd)'=='true'">
    <PropertyGroup>
        <WinMdOutputPath>$(MergedWinmdOutputLocation)</WinMdOutputPath>
    </PropertyGroup>
    <PropertyGroup>
      <MdMerge>&quot;$(WindowsSdkToolLocation)\mdmerge.exe&quot;</MdMerge>
      <IncludePaths>@(_WinMdInputsForMerge->'-i %(Identity)', ' ')</IncludePaths>
      <MetadataDirs>@(_WinMdReferenceDirectories->'-metadata_dir %(Identity)', ' ')</MetadataDirs>
      <WinMdStripMetadata Condition="'$(StripVelocityFromMetadata)'=='true'">-createPublicMetadata -transformExperimental:transform</WinMdStripMetadata>
      
    </PropertyGroup>

    <Exec Command="$(MdMerge) $(MetadataDirs) $(IncludePaths) -o $(WinMdOutputPath) -partial $(WinMdNamespaceOptions) $(WinMdStripMetadata)" />

    <ItemGroup>
      <FilesToSign Include="$(WinMdOutputPath)\*.winmd" />
    </ItemGroup>
    <ItemGroup>
      <FileReads Include="@(_WinMdInputsForMerge)" />
      <FileReads Include="$(WinMdMetadataDir)\*.winmd" />
      <FileReads Include="$(PrivateMUXDir)\*.winmd" Condition="'$(IgnorePrivateMUXMetadataDir)' != 'true'" />
      <FileWrites Include="$(OutputWinmds)" />
    </ItemGroup>
  </Target>

  <!--
    Due to the customization in our build system, we need to set this MSBuild Item so that projects that build WinMD files
    correctly specify their outputs. This ensures that the GetResolvedWinMD target returns the correct outputs. The inputs of
    this target are the <Link/> items, but because our projects only build IDL, and don't produce any compiled outputs, the
    Link itemgroup is empty.

    Without this, projects that reference one of our WinMD projects won't include the output from the build.
    -->
  <ItemGroup>
    <WinMDFullPath Include="$(OutputWinmds)" />
  </ItemGroup>

  <!--
    The Implementation metadata attached to the WinMD files causes Appx packaging targets and DesktopBridge targets
    to try and copy the MergedWinMD.exe file, which doesn't exist. This target removes this metadata since we don't
    have an implementation file associated with these WinMDs
  -->
  <Target Name="RemoveImplementation" AfterTargets="GetResolvedWinMD" BeforeTargets="GetTargetPath;PrepareForBuild">
    <ItemGroup>
      <WinMDFullPath Update="@(WinMDFullPath)" Condition="'%(WinMDFullPath.Implementation)' == 'MergedWinMD.exe'" >
        <Implementation />
      </WinMDFullPath>
    </ItemGroup>
  </Target>

  <!-- If the lifted ixp idl is needed add a project reference to the project that ensures this will be generated -->
  <ItemGroup Condition="$(ProjectIncludeDirectories.Contains('$(LiftedIXPGeneratedIdlPath)'))">
    <ProjectReference Include="$(MSBuildThisFileDirectory)gencompheadersandidl\gencompheadersandidl.vcxproj" />
  </ItemGroup>

  <!-- If the lifted MRT idl is needed add a project reference to the project that ensures this will be generated -->
  <ItemGroup Condition="$(ProjectIncludeDirectories.Contains('$(LiftedMRTGeneratedIdlPath)'))">
    <ProjectReference Include="$(MSBuildThisFileDirectory)genmrtheadersandidl\genmrtheadersandidl.vcxproj" />
  </ItemGroup>

  <!-- This target copies the public headers to a known location, so that location can be included in others projects' include directories -->
  <Target Name="_GatherPublicHeaders" DependsOnTargets="SetMidlOutputFiles">
    <ItemGroup>
      <_PublicHeadersToCopy
        Include="@(Midl -> '%(HeaderFileName)')"
        Condition="'%(Midl.CopyToPublicHeadersPath)'=='true'" />
    </ItemGroup>
  </Target>
  <Target Name="CopyPublicHeaders"
          Inputs="@(_PublicHeadersToCopy)"
          Outputs="@(_PublicHeadersToCopy->'$(XamlPublicHeadersPath)\%(Filename)%(Extension)')"
          DependsOnTargets="_GatherPublicHeaders"
          AfterTargets="_ComposedMetadata">
    <Copy SourceFiles="@(_PublicHeadersToCopy)" DestinationFolder="$(XamlPublicHeadersPath)" />
  </Target>
</Project>