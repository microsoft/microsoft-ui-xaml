//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SuccinctCollectionSyntax.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SuccinctCollectionSyntaxParser : Parser {
	public const int
		SINGLE_QUOTE=1, DOUBLE_QUOTE=2, OPEN_SQUARE_BRACE=3, CLOSE_SQUARE_BRACE=4, 
		CHARACTER=5, COMMA=6, BACKSLASH=7, RESERVED_SYMBOL=8, QUOTE=9;
	public const int
		RULE_program = 0, RULE_items = 1, RULE_z = 2, RULE_item = 3, RULE_text = 4, 
		RULE_literal_text = 5, RULE_sequence = 6;
	public static readonly string[] ruleNames = {
		"program", "items", "z", "item", "text", "literal_text", "sequence"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'\"'", "'['", "']'", null, "','", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_QUOTE", "DOUBLE_QUOTE", "OPEN_SQUARE_BRACE", "CLOSE_SQUARE_BRACE", 
		"CHARACTER", "COMMA", "BACKSLASH", "RESERVED_SYMBOL", "QUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SuccinctCollectionSyntax.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SuccinctCollectionSyntaxParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ItemsContext items() {
			return GetRuleContext<ItemsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SuccinctCollectionSyntaxParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; items();
			State = 15; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public ZContext z() {
			return GetRuleContext<ZContext>(0);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitItems(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 2, RULE_items);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; item();
			State = 18; z();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(SuccinctCollectionSyntaxParser.COMMA, 0); }
		public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public ZContext z() {
			return GetRuleContext<ZContext>(0);
		}
		public ZContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_z; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterZ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitZ(this);
		}
	}

	[RuleVersion(0)]
	public ZContext z() {
		ZContext _localctx = new ZContext(Context, State);
		EnterRule(_localctx, 4, RULE_z);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 20; Match(COMMA);
				State = 21; item();
				State = 22; z();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode[] SINGLE_QUOTE() { return GetTokens(SuccinctCollectionSyntaxParser.SINGLE_QUOTE); }
		public ITerminalNode SINGLE_QUOTE(int i) {
			return GetToken(SuccinctCollectionSyntaxParser.SINGLE_QUOTE, i);
		}
		public Literal_textContext literal_text() {
			return GetRuleContext<Literal_textContext>(0);
		}
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(SuccinctCollectionSyntaxParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(SuccinctCollectionSyntaxParser.DOUBLE_QUOTE, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_item);
		try {
			State = 35;
			switch (TokenStream.La(1)) {
			case Eof:
			case CHARACTER:
			case COMMA:
			case BACKSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; text();
				}
				break;
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; Match(SINGLE_QUOTE);
				State = 28; literal_text();
				State = 29; Match(SINGLE_QUOTE);
				}
				break;
			case DOUBLE_QUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; Match(DOUBLE_QUOTE);
				State = 32; literal_text();
				State = 33; Match(DOUBLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(SuccinctCollectionSyntaxParser.CHARACTER, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode BACKSLASH() { return GetToken(SuccinctCollectionSyntaxParser.BACKSLASH, 0); }
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 8, RULE_text);
		int _la;
		try {
			State = 45;
			switch (TokenStream.La(1)) {
			case Eof:
			case CHARACTER:
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				_la = TokenStream.La(1);
				if (_la==CHARACTER) {
					{
					State = 37; Match(CHARACTER);
					State = 38; text();
					}
				}

				}
				break;
			case BACKSLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; Match(BACKSLASH);
				State = 42; sequence();
				State = 43; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_textContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(SuccinctCollectionSyntaxParser.CHARACTER, 0); }
		public Literal_textContext literal_text() {
			return GetRuleContext<Literal_textContext>(0);
		}
		public ITerminalNode BACKSLASH() { return GetToken(SuccinctCollectionSyntaxParser.BACKSLASH, 0); }
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ITerminalNode RESERVED_SYMBOL() { return GetToken(SuccinctCollectionSyntaxParser.RESERVED_SYMBOL, 0); }
		public ITerminalNode COMMA() { return GetToken(SuccinctCollectionSyntaxParser.COMMA, 0); }
		public Literal_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterLiteral_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitLiteral_text(this);
		}
	}

	[RuleVersion(0)]
	public Literal_textContext literal_text() {
		Literal_textContext _localctx = new Literal_textContext(Context, State);
		EnterRule(_localctx, 10, RULE_literal_text);
		int _la;
		try {
			State = 59;
			switch (TokenStream.La(1)) {
			case SINGLE_QUOTE:
			case DOUBLE_QUOTE:
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				_la = TokenStream.La(1);
				if (_la==CHARACTER) {
					{
					State = 47; Match(CHARACTER);
					State = 48; literal_text();
					}
				}

				}
				break;
			case BACKSLASH:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 51; Match(BACKSLASH);
				State = 52; sequence();
				State = 53; literal_text();
				}
				}
				break;
			case RESERVED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 55; Match(RESERVED_SYMBOL);
				State = 56; literal_text();
				}
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 57; Match(COMMA);
				State = 58; literal_text();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(SuccinctCollectionSyntaxParser.CHARACTER, 0); }
		public ITerminalNode RESERVED_SYMBOL() { return GetToken(SuccinctCollectionSyntaxParser.RESERVED_SYMBOL, 0); }
		public ITerminalNode QUOTE() { return GetToken(SuccinctCollectionSyntaxParser.QUOTE, 0); }
		public ITerminalNode COMMA() { return GetToken(SuccinctCollectionSyntaxParser.COMMA, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(SuccinctCollectionSyntaxParser.BACKSLASH, 0); }
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISuccinctCollectionSyntaxListener typedListener = listener as ISuccinctCollectionSyntaxListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COMMA) | (1L << BACKSLASH) | (1L << RESERVED_SYMBOL) | (1L << QUOTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\v\x42\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x1B\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5&\n\x5\x3\x6"+
		"\x3\x6\x5\x6*\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x30\n\x6\x3\a\x3\a\x5"+
		"\a\x34\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a>\n\a\x3\b\x3\b"+
		"\x3\b\x2\x2\t\x2\x4\x6\b\n\f\xE\x2\x3\x3\x2\a\v\x43\x2\x10\x3\x2\x2\x2"+
		"\x4\x13\x3\x2\x2\x2\x6\x1A\x3\x2\x2\x2\b%\x3\x2\x2\x2\n/\x3\x2\x2\x2\f"+
		"=\x3\x2\x2\x2\xE?\x3\x2\x2\x2\x10\x11\x5\x4\x3\x2\x11\x12\a\x2\x2\x3\x12"+
		"\x3\x3\x2\x2\x2\x13\x14\x5\b\x5\x2\x14\x15\x5\x6\x4\x2\x15\x5\x3\x2\x2"+
		"\x2\x16\x17\a\b\x2\x2\x17\x18\x5\b\x5\x2\x18\x19\x5\x6\x4\x2\x19\x1B\x3"+
		"\x2\x2\x2\x1A\x16\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\a\x3\x2\x2\x2\x1C"+
		"&\x5\n\x6\x2\x1D\x1E\a\x3\x2\x2\x1E\x1F\x5\f\a\x2\x1F \a\x3\x2\x2 &\x3"+
		"\x2\x2\x2!\"\a\x4\x2\x2\"#\x5\f\a\x2#$\a\x4\x2\x2$&\x3\x2\x2\x2%\x1C\x3"+
		"\x2\x2\x2%\x1D\x3\x2\x2\x2%!\x3\x2\x2\x2&\t\x3\x2\x2\x2\'(\a\a\x2\x2("+
		"*\x5\n\x6\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x30\x3\x2\x2\x2+,\a\t\x2\x2"+
		",-\x5\xE\b\x2-.\x5\n\x6\x2.\x30\x3\x2\x2\x2/)\x3\x2\x2\x2/+\x3\x2\x2\x2"+
		"\x30\v\x3\x2\x2\x2\x31\x32\a\a\x2\x2\x32\x34\x5\f\a\x2\x33\x31\x3\x2\x2"+
		"\x2\x33\x34\x3\x2\x2\x2\x34>\x3\x2\x2\x2\x35\x36\a\t\x2\x2\x36\x37\x5"+
		"\xE\b\x2\x37\x38\x5\f\a\x2\x38>\x3\x2\x2\x2\x39:\a\n\x2\x2:>\x5\f\a\x2"+
		";<\a\b\x2\x2<>\x5\f\a\x2=\x33\x3\x2\x2\x2=\x35\x3\x2\x2\x2=\x39\x3\x2"+
		"\x2\x2=;\x3\x2\x2\x2>\r\x3\x2\x2\x2?@\t\x2\x2\x2@\xF\x3\x2\x2\x2\b\x1A"+
		"%)/\x33=";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
