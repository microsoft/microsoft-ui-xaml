//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConditionalNamespace.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ConditionalNamespaceParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IConditionalNamespaceListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ConditionalNamespaceParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ConditionalNamespaceParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ConditionalNamespaceParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ConditionalNamespaceParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.uri"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUri([NotNull] ConditionalNamespaceParser.UriContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.uri"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUri([NotNull] ConditionalNamespaceParser.UriContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.unquoted_namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnquoted_namespace([NotNull] ConditionalNamespaceParser.Unquoted_namespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.unquoted_namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnquoted_namespace([NotNull] ConditionalNamespaceParser.Unquoted_namespaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.api_information"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterApi_information([NotNull] ConditionalNamespaceParser.Api_informationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.api_information"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitApi_information([NotNull] ConditionalNamespaceParser.Api_informationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.function_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_param([NotNull] ConditionalNamespaceParser.Function_paramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.function_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_param([NotNull] ConditionalNamespaceParser.Function_paramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.target_platform_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTarget_platform_value([NotNull] ConditionalNamespaceParser.Target_platform_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.target_platform_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTarget_platform_value([NotNull] ConditionalNamespaceParser.Target_platform_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.query_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery_string([NotNull] ConditionalNamespaceParser.Query_stringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.query_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery_string([NotNull] ConditionalNamespaceParser.Query_stringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>QueryStringTargetPlatform</c>
	/// labeled alternative in <see cref="ConditionalNamespaceParser.query_string_component"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryStringTargetPlatform([NotNull] ConditionalNamespaceParser.QueryStringTargetPlatformContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>QueryStringTargetPlatform</c>
	/// labeled alternative in <see cref="ConditionalNamespaceParser.query_string_component"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryStringTargetPlatform([NotNull] ConditionalNamespaceParser.QueryStringTargetPlatformContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>QueryStringApiInformation</c>
	/// labeled alternative in <see cref="ConditionalNamespaceParser.query_string_component"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryStringApiInformation([NotNull] ConditionalNamespaceParser.QueryStringApiInformationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>QueryStringApiInformation</c>
	/// labeled alternative in <see cref="ConditionalNamespaceParser.query_string_component"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryStringApiInformation([NotNull] ConditionalNamespaceParser.QueryStringApiInformationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionalNamespaceParser.target_platform_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTarget_platform_func([NotNull] ConditionalNamespaceParser.Target_platform_funcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionalNamespaceParser.target_platform_func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTarget_platform_func([NotNull] ConditionalNamespaceParser.Target_platform_funcContext context);
}
