//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConditionalNamespace.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ConditionalNamespaceLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, ESCAPEDQUOTE=11, QUOTE=12, DOUBLE_QUOTE=13, TargetPlatformString=14, 
		PlatformUWP=15, PlatformiOS=16, PlatformAndroid=17, Digits=18, QuotedString=19, 
		IDENTIFIER=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"WS", "ESCAPEDQUOTE", "QUOTE", "DOUBLE_QUOTE", "TargetPlatformString", 
		"PlatformUWP", "PlatformiOS", "PlatformAndroid", "Digits", "QuotedString", 
		"IDENTIFIER", "Available_identifier", "Identifier_or_keyword", "Identifier_start_character", 
		"Identifier_part_character", "Letter_character", "Combining_character", 
		"Decimal_digit_character", "Connecting_character", "Formatting_character", 
		"UNICODE_CLASS_LU", "UNICODE_CLASS_LL", "UNICODE_CLASS_LT", "UNICODE_CLASS_LM", 
		"UNICODE_CLASS_LO", "UNICODE_CLASS_NL", "UNICODE_CLASS_MN", "UNICODE_CLASS_MC", 
		"UNICODE_CLASS_CF", "UNICODE_CLASS_PC", "UNICODE_CLASS_ND"
	};


	public ConditionalNamespaceLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'?'", "'/'", "':'", "'-'", "'.'", "'('", "','", "')'", "';'", null, 
		null, "'''", "'\"'", "'TargetPlatform'", "'UWP'", "'iOS'", "'Android'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "ESCAPEDQUOTE", 
		"QUOTE", "DOUBLE_QUOTE", "TargetPlatformString", "PlatformUWP", "PlatformiOS", 
		"PlatformAndroid", "Digits", "QuotedString", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ConditionalNamespace.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x16");
		sb.Append("\xEE\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x6");
		sb.Append("\vg\n\v\r\v\xE\vh\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\fq\n\f\x3");
		sb.Append("\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x6\x13\x97\n");
		sb.Append("\x13\r\x13\xE\x13\x98\x3\x14\x3\x14\x3\x14\a\x14\x9E\n\x14\f");
		sb.Append("\x14\xE\x14\xA1\v\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14");
		sb.Append("\xA8\n\x14\f\x14\xE\x14\xAB\v\x14\x3\x14\x3\x14\x5\x14\xAF\n");
		sb.Append("\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\a\x17\xB7\n\x17");
		sb.Append("\f\x17\xE\x17\xBA\v\x17\x3\x18\x3\x18\x5\x18\xBE\n\x18\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xC5\n\x19\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xCD\n\x1A\x3\x1B\x3\x1B");
		sb.Append("\x5\x1B\xD1\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E");
		sb.Append("\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3");
		sb.Append("%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)\x4\x9F\xA9\x2*\x3\x3");
		sb.Append("\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE");
		sb.Append("\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x2-\x2/\x2");
		sb.Append("\x31\x2\x33\x2\x35\x2\x37\x2\x39\x2;\x2=\x2?\x2\x41\x2\x43\x2");
		sb.Append("\x45\x2G\x2I\x2K\x2M\x2O\x2Q\x2\x3\x2\n\x4\x2\v\v\"\"\x4\x2");
		sb.Append("\x43\\\xC2\xE0\x6\x2\x1C7\x1C7\x1CA\x1CA\x1CD\x1CD\x1F4\x1F4");
		sb.Append("\x5\x2\x1BD\x1BD\x1C2\x1C5\x296\x296\x4\x2\x16F0\x16F2\x2162");
		sb.Append("\x2171\x5\x2\x905\x905\x940\x942\x94B\x94E\x5\x2\xAF\xAF\x602");
		sb.Append("\x605\x6DF\x6DF\b\x2\x61\x61\x2041\x2042\x2056\x2056\xFE35\xFE36");
		sb.Append("\xFE4F\xFE51\xFF41\xFF41\xED\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r");
		sb.Append("\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x2)\x3\x2\x2\x2\x3S\x3\x2\x2\x2\x5U\x3\x2\x2\x2\a");
		sb.Append("W\x3\x2\x2\x2\tY\x3\x2\x2\x2\v[\x3\x2\x2\x2\r]\x3\x2\x2\x2\xF");
		sb.Append("_\x3\x2\x2\x2\x11\x61\x3\x2\x2\x2\x13\x63\x3\x2\x2\x2\x15\x66");
		sb.Append("\x3\x2\x2\x2\x17p\x3\x2\x2\x2\x19r\x3\x2\x2\x2\x1Bt\x3\x2\x2");
		sb.Append("\x2\x1Dv\x3\x2\x2\x2\x1F\x85\x3\x2\x2\x2!\x89\x3\x2\x2\x2#\x8D");
		sb.Append("\x3\x2\x2\x2%\x96\x3\x2\x2\x2\'\xAE\x3\x2\x2\x2)\xB0\x3\x2\x2");
		sb.Append("\x2+\xB2\x3\x2\x2\x2-\xB4\x3\x2\x2\x2/\xBD\x3\x2\x2\x2\x31\xC4");
		sb.Append("\x3\x2\x2\x2\x33\xCC\x3\x2\x2\x2\x35\xD0\x3\x2\x2\x2\x37\xD2");
		sb.Append("\x3\x2\x2\x2\x39\xD4\x3\x2\x2\x2;\xD6\x3\x2\x2\x2=\xD8\x3\x2");
		sb.Append("\x2\x2?\xDA\x3\x2\x2\x2\x41\xDC\x3\x2\x2\x2\x43\xDE\x3\x2\x2");
		sb.Append("\x2\x45\xE0\x3\x2\x2\x2G\xE2\x3\x2\x2\x2I\xE4\x3\x2\x2\x2K\xE6");
		sb.Append("\x3\x2\x2\x2M\xE8\x3\x2\x2\x2O\xEA\x3\x2\x2\x2Q\xEC\x3\x2\x2");
		sb.Append("\x2ST\a\x41\x2\x2T\x4\x3\x2\x2\x2UV\a\x31\x2\x2V\x6\x3\x2\x2");
		sb.Append("\x2WX\a<\x2\x2X\b\x3\x2\x2\x2YZ\a/\x2\x2Z\n\x3\x2\x2\x2[\\\a");
		sb.Append("\x30\x2\x2\\\f\x3\x2\x2\x2]^\a*\x2\x2^\xE\x3\x2\x2\x2_`\a.\x2");
		sb.Append("\x2`\x10\x3\x2\x2\x2\x61\x62\a+\x2\x2\x62\x12\x3\x2\x2\x2\x63");
		sb.Append("\x64\a=\x2\x2\x64\x14\x3\x2\x2\x2\x65g\t\x2\x2\x2\x66\x65\x3");
		sb.Append("\x2\x2\x2gh\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3");
		sb.Append("\x2\x2\x2jk\b\v\x2\x2k\x16\x3\x2\x2\x2lm\a`\x2\x2mq\a$\x2\x2");
		sb.Append("no\a`\x2\x2oq\a)\x2\x2pl\x3\x2\x2\x2pn\x3\x2\x2\x2q\x18\x3\x2");
		sb.Append("\x2\x2rs\a)\x2\x2s\x1A\x3\x2\x2\x2tu\a$\x2\x2u\x1C\x3\x2\x2");
		sb.Append("\x2vw\aV\x2\x2wx\a\x63\x2\x2xy\at\x2\x2yz\ai\x2\x2z{\ag\x2\x2");
		sb.Append("{|\av\x2\x2|}\aR\x2\x2}~\an\x2\x2~\x7F\a\x63\x2\x2\x7F\x80\a");
		sb.Append("v\x2\x2\x80\x81\ah\x2\x2\x81\x82\aq\x2\x2\x82\x83\at\x2\x2\x83");
		sb.Append("\x84\ao\x2\x2\x84\x1E\x3\x2\x2\x2\x85\x86\aW\x2\x2\x86\x87\a");
		sb.Append("Y\x2\x2\x87\x88\aR\x2\x2\x88 \x3\x2\x2\x2\x89\x8A\ak\x2\x2\x8A");
		sb.Append("\x8B\aQ\x2\x2\x8B\x8C\aU\x2\x2\x8C\"\x3\x2\x2\x2\x8D\x8E\a\x43");
		sb.Append("\x2\x2\x8E\x8F\ap\x2\x2\x8F\x90\a\x66\x2\x2\x90\x91\at\x2\x2");
		sb.Append("\x91\x92\aq\x2\x2\x92\x93\ak\x2\x2\x93\x94\a\x66\x2\x2\x94$");
		sb.Append("\x3\x2\x2\x2\x95\x97\x5\x37\x1C\x2\x96\x95\x3\x2\x2\x2\x97\x98");
		sb.Append("\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99&\x3");
		sb.Append("\x2\x2\x2\x9A\x9F\x5\x19\r\x2\x9B\x9E\x5\x17\f\x2\x9C\x9E\v");
		sb.Append("\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3");
		sb.Append("\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA2\x3");
		sb.Append("\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\x5\x19\r\x2\xA3\xAF\x3");
		sb.Append("\x2\x2\x2\xA4\xA9\x5\x1B\xE\x2\xA5\xA8\x5\x17\f\x2\xA6\xA8\v");
		sb.Append("\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA6\x3\x2\x2\x2\xA8\xAB\x3");
		sb.Append("\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAC\x3");
		sb.Append("\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\x5\x1B\xE\x2\xAD\xAF\x3");
		sb.Append("\x2\x2\x2\xAE\x9A\x3\x2\x2\x2\xAE\xA4\x3\x2\x2\x2\xAF(\x3\x2");
		sb.Append("\x2\x2\xB0\xB1\x5+\x16\x2\xB1*\x3\x2\x2\x2\xB2\xB3\x5-\x17\x2");
		sb.Append("\xB3,\x3\x2\x2\x2\xB4\xB8\x5/\x18\x2\xB5\xB7\x5\x31\x19\x2\xB6");
		sb.Append("\xB5\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8");
		sb.Append("\xB9\x3\x2\x2\x2\xB9.\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBE");
		sb.Append("\x5\x33\x1A\x2\xBC\xBE\a\x61\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBC");
		sb.Append("\x3\x2\x2\x2\xBE\x30\x3\x2\x2\x2\xBF\xC5\x5\x33\x1A\x2\xC0\xC5");
		sb.Append("\x5\x37\x1C\x2\xC1\xC5\x5\x39\x1D\x2\xC2\xC5\x5\x35\x1B\x2\xC3");
		sb.Append("\xC5\x5;\x1E\x2\xC4\xBF\x3\x2\x2\x2\xC4\xC0\x3\x2\x2\x2\xC4");
		sb.Append("\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5");
		sb.Append("\x32\x3\x2\x2\x2\xC6\xCD\x5=\x1F\x2\xC7\xCD\x5? \x2\xC8\xCD");
		sb.Append("\x5\x41!\x2\xC9\xCD\x5\x43\"\x2\xCA\xCD\x5\x45#\x2\xCB\xCD\x5");
		sb.Append("G$\x2\xCC\xC6\x3\x2\x2\x2\xCC\xC7\x3\x2\x2\x2\xCC\xC8\x3\x2");
		sb.Append("\x2\x2\xCC\xC9\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2");
		sb.Append("\x2\x2\xCD\x34\x3\x2\x2\x2\xCE\xD1\x5I%\x2\xCF\xD1\x5K&\x2\xD0");
		sb.Append("\xCE\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\x36\x3\x2\x2\x2\xD2");
		sb.Append("\xD3\x5Q)\x2\xD3\x38\x3\x2\x2\x2\xD4\xD5\x5O(\x2\xD5:\x3\x2");
		sb.Append("\x2\x2\xD6\xD7\x5M\'\x2\xD7<\x3\x2\x2\x2\xD8\xD9\t\x3\x2\x2");
		sb.Append("\xD9>\x3\x2\x2\x2\xDA\xDB\x4\x63|\x2\xDB@\x3\x2\x2\x2\xDC\xDD");
		sb.Append("\t\x4\x2\x2\xDD\x42\x3\x2\x2\x2\xDE\xDF\x4\x2B2\x2F0\x2\xDF");
		sb.Append("\x44\x3\x2\x2\x2\xE0\xE1\t\x5\x2\x2\xE1\x46\x3\x2\x2\x2\xE2");
		sb.Append("\xE3\t\x6\x2\x2\xE3H\x3\x2\x2\x2\xE4\xE5\x4\x302\x312\x2\xE5");
		sb.Append("J\x3\x2\x2\x2\xE6\xE7\t\a\x2\x2\xE7L\x3\x2\x2\x2\xE8\xE9\t\b");
		sb.Append("\x2\x2\xE9N\x3\x2\x2\x2\xEA\xEB\t\t\x2\x2\xEBP\x3\x2\x2\x2\xEC");
		sb.Append("\xED\x4\x32;\x2\xEDR\x3\x2\x2\x2\x10\x2hp\x98\x9D\x9F\xA7\xA9");
		sb.Append("\xAE\xB8\xBD\xC4\xCC\xD0\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
