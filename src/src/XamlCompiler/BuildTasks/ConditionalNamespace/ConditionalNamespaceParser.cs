//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConditionalNamespace.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ConditionalNamespaceParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, ESCAPEDQUOTE=11, QUOTE=12, DOUBLE_QUOTE=13, TargetPlatformString=14, 
		PlatformUWP=15, PlatformiOS=16, PlatformAndroid=17, Digits=18, QuotedString=19, 
		IDENTIFIER=20;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_uri = 2, RULE_unquoted_namespace = 3, 
		RULE_api_information = 4, RULE_function_param = 5, RULE_target_platform_value = 6, 
		RULE_query_string = 7, RULE_query_string_component = 8, RULE_target_platform_func = 9;
	public static readonly string[] ruleNames = {
		"program", "expression", "uri", "unquoted_namespace", "api_information", 
		"function_param", "target_platform_value", "query_string", "query_string_component", 
		"target_platform_func"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "'/'", "':'", "'-'", "'.'", "'('", "','", "')'", "';'", null, 
		null, "'''", "'\"'", "'TargetPlatform'", "'UWP'", "'iOS'", "'Android'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "ESCAPEDQUOTE", 
		"QUOTE", "DOUBLE_QUOTE", "TargetPlatformString", "PlatformUWP", "PlatformiOS", 
		"PlatformAndroid", "Digits", "QuotedString", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ConditionalNamespace.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ConditionalNamespaceParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ConditionalNamespaceParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expression();
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.ApiInformation ApiInformation;
		public Microsoft.UI.Xaml.Markup.Compiler.Platform TargetPlatform;
		public UriContext uri() {
			return GetRuleContext<UriContext>(0);
		}
		public Query_stringContext query_string() {
			return GetRuleContext<Query_stringContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; uri();
			State = 24; Match(T__0);
			State = 25; query_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UriContext : ParserRuleContext {
		public UriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterUri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitUri(this);
		}
	}

	[RuleVersion(0)]
	public UriContext uri() {
		UriContext _localctx = new UriContext(Context, State);
		EnterRule(_localctx, 4, RULE_uri);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 32;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 27;
						MatchWildcard();
						}
						break;
					case 2:
						{
						State = 28; Match(T__1);
						}
						break;
					case 3:
						{
						State = 29; Match(T__2);
						}
						break;
					case 4:
						{
						State = 30; Match(T__3);
						}
						break;
					case 5:
						{
						State = 31; Match(T__4);
						}
						break;
					}
					} 
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unquoted_namespaceContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ConditionalNamespaceParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ConditionalNamespaceParser.IDENTIFIER, i);
		}
		public Unquoted_namespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquoted_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterUnquoted_namespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitUnquoted_namespace(this);
		}
	}

	[RuleVersion(0)]
	public Unquoted_namespaceContext unquoted_namespace() {
		Unquoted_namespaceContext _localctx = new Unquoted_namespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_unquoted_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(IDENTIFIER);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 38; Match(T__4);
				State = 39; Match(IDENTIFIER);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Api_informationContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.ApiInformation ApiInformation;
		public ITerminalNode IDENTIFIER() { return GetToken(ConditionalNamespaceParser.IDENTIFIER, 0); }
		public Function_paramContext[] function_param() {
			return GetRuleContexts<Function_paramContext>();
		}
		public Function_paramContext function_param(int i) {
			return GetRuleContext<Function_paramContext>(i);
		}
		public Api_informationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_api_information; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterApi_information(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitApi_information(this);
		}
	}

	[RuleVersion(0)]
	public Api_informationContext api_information() {
		Api_informationContext _localctx = new Api_informationContext(Context, State);
		EnterRule(_localctx, 8, RULE_api_information);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(IDENTIFIER);
			State = 46; Match(T__5);
			State = 47; function_param();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__6) {
				{
				{
				State = 48; Match(T__6);
				State = 49; function_param();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 55; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_paramContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.ApiInformationParameter ApiInformationParameter;
		public Unquoted_namespaceContext unquoted_namespace() {
			return GetRuleContext<Unquoted_namespaceContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ConditionalNamespaceParser.IDENTIFIER, 0); }
		public ITerminalNode QuotedString() { return GetToken(ConditionalNamespaceParser.QuotedString, 0); }
		public ITerminalNode Digits() { return GetToken(ConditionalNamespaceParser.Digits, 0); }
		public Function_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterFunction_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitFunction_param(this);
		}
	}

	[RuleVersion(0)]
	public Function_paramContext function_param() {
		Function_paramContext _localctx = new Function_paramContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_param);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; unquoted_namespace();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; Match(QuotedString);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60; Match(Digits);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_platform_valueContext : ParserRuleContext {
		public ITerminalNode PlatformUWP() { return GetToken(ConditionalNamespaceParser.PlatformUWP, 0); }
		public ITerminalNode PlatformiOS() { return GetToken(ConditionalNamespaceParser.PlatformiOS, 0); }
		public ITerminalNode PlatformAndroid() { return GetToken(ConditionalNamespaceParser.PlatformAndroid, 0); }
		public Target_platform_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_platform_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterTarget_platform_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitTarget_platform_value(this);
		}
	}

	[RuleVersion(0)]
	public Target_platform_valueContext target_platform_value() {
		Target_platform_valueContext _localctx = new Target_platform_valueContext(Context, State);
		EnterRule(_localctx, 12, RULE_target_platform_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PlatformUWP) | (1L << PlatformiOS) | (1L << PlatformAndroid))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_stringContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.ApiInformation ApiInformation;
		public Microsoft.UI.Xaml.Markup.Compiler.Platform TargetPlatform;
		public Query_string_componentContext[] query_string_component() {
			return GetRuleContexts<Query_string_componentContext>();
		}
		public Query_string_componentContext query_string_component(int i) {
			return GetRuleContext<Query_string_componentContext>(i);
		}
		public Query_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterQuery_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitQuery_string(this);
		}
	}

	[RuleVersion(0)]
	public Query_stringContext query_string() {
		Query_stringContext _localctx = new Query_stringContext(Context, State);
		EnterRule(_localctx, 14, RULE_query_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; query_string_component();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__8) {
				{
				{
				State = 66; Match(T__8);
				State = 67; query_string_component();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_string_componentContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.ApiInformation ApiInformation;
		public Microsoft.UI.Xaml.Markup.Compiler.Platform TargetPlatform;
		public Query_string_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_string_component; } }
	 
		public Query_string_componentContext() { }
		public virtual void CopyFrom(Query_string_componentContext context) {
			base.CopyFrom(context);
			this.ApiInformation = context.ApiInformation;
			this.TargetPlatform = context.TargetPlatform;
		}
	}
	public partial class QueryStringTargetPlatformContext : Query_string_componentContext {
		public Target_platform_funcContext target_platform_func() {
			return GetRuleContext<Target_platform_funcContext>(0);
		}
		public QueryStringTargetPlatformContext(Query_string_componentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterQueryStringTargetPlatform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitQueryStringTargetPlatform(this);
		}
	}
	public partial class QueryStringApiInformationContext : Query_string_componentContext {
		public Api_informationContext api_information() {
			return GetRuleContext<Api_informationContext>(0);
		}
		public QueryStringApiInformationContext(Query_string_componentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterQueryStringApiInformation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitQueryStringApiInformation(this);
		}
	}

	[RuleVersion(0)]
	public Query_string_componentContext query_string_component() {
		Query_string_componentContext _localctx = new Query_string_componentContext(Context, State);
		EnterRule(_localctx, 16, RULE_query_string_component);
		try {
			State = 75;
			switch (TokenStream.La(1)) {
			case TargetPlatformString:
				_localctx = new QueryStringTargetPlatformContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; target_platform_func();
				}
				break;
			case IDENTIFIER:
				_localctx = new QueryStringApiInformationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; api_information();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_platform_funcContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.Platform TargetPlatform;
		public ITerminalNode TargetPlatformString() { return GetToken(ConditionalNamespaceParser.TargetPlatformString, 0); }
		public Target_platform_valueContext target_platform_value() {
			return GetRuleContext<Target_platform_valueContext>(0);
		}
		public Target_platform_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_platform_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.EnterTarget_platform_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IConditionalNamespaceListener typedListener = listener as IConditionalNamespaceListener;
			if (typedListener != null) typedListener.ExitTarget_platform_func(this);
		}
	}

	[RuleVersion(0)]
	public Target_platform_funcContext target_platform_func() {
		Target_platform_funcContext _localctx = new Target_platform_funcContext(Context, State);
		EnterRule(_localctx, 18, RULE_target_platform_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(TargetPlatformString);
			State = 78; Match(T__5);
			State = 79; target_platform_value();
			State = 80; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x16");
		sb.Append("U\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4");
		sb.Append("#\n\x4\f\x4\xE\x4&\v\x4\x3\x5\x3\x5\x3\x5\a\x5+\n\x5\f\x5\xE");
		sb.Append("\x5.\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x35\n\x6\f\x6\xE");
		sb.Append("\x6\x38\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a@\n\a\x3\b");
		sb.Append("\x3\b\x3\t\x3\t\x3\t\a\tG\n\t\f\t\xE\tJ\v\t\x3\n\x3\n\x5\nN");
		sb.Append("\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3$\x2\f\x2\x4\x6\b\n\f\xE");
		sb.Append("\x10\x12\x14\x2\x3\x3\x2\x11\x13V\x2\x16\x3\x2\x2\x2\x4\x19");
		sb.Append("\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b\'\x3\x2\x2\x2\n/\x3\x2\x2\x2");
		sb.Append("\f?\x3\x2\x2\x2\xE\x41\x3\x2\x2\x2\x10\x43\x3\x2\x2\x2\x12M");
		sb.Append("\x3\x2\x2\x2\x14O\x3\x2\x2\x2\x16\x17\x5\x4\x3\x2\x17\x18\a");
		sb.Append("\x2\x2\x3\x18\x3\x3\x2\x2\x2\x19\x1A\x5\x6\x4\x2\x1A\x1B\a\x3");
		sb.Append("\x2\x2\x1B\x1C\x5\x10\t\x2\x1C\x5\x3\x2\x2\x2\x1D#\v\x2\x2\x2");
		sb.Append("\x1E#\a\x4\x2\x2\x1F#\a\x5\x2\x2 #\a\x6\x2\x2!#\a\a\x2\x2\"");
		sb.Append("\x1D\x3\x2\x2\x2\"\x1E\x3\x2\x2\x2\"\x1F\x3\x2\x2\x2\" \x3\x2");
		sb.Append("\x2\x2\"!\x3\x2\x2\x2#&\x3\x2\x2\x2$%\x3\x2\x2\x2$\"\x3\x2\x2");
		sb.Append("\x2%\a\x3\x2\x2\x2&$\x3\x2\x2\x2\',\a\x16\x2\x2()\a\a\x2\x2");
		sb.Append(")+\a\x16\x2\x2*(\x3\x2\x2\x2+.\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3");
		sb.Append("\x2\x2\x2-\t\x3\x2\x2\x2.,\x3\x2\x2\x2/\x30\a\x16\x2\x2\x30");
		sb.Append("\x31\a\b\x2\x2\x31\x36\x5\f\a\x2\x32\x33\a\t\x2\x2\x33\x35\x5");
		sb.Append("\f\a\x2\x34\x32\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2");
		sb.Append("\x2\x2\x36\x37\x3\x2\x2\x2\x37\x39\x3\x2\x2\x2\x38\x36\x3\x2");
		sb.Append("\x2\x2\x39:\a\n\x2\x2:\v\x3\x2\x2\x2;@\x5\b\x5\x2<@\a\x16\x2");
		sb.Append("\x2=@\a\x15\x2\x2>@\a\x14\x2\x2?;\x3\x2\x2\x2?<\x3\x2\x2\x2");
		sb.Append("?=\x3\x2\x2\x2?>\x3\x2\x2\x2@\r\x3\x2\x2\x2\x41\x42\t\x2\x2");
		sb.Append("\x2\x42\xF\x3\x2\x2\x2\x43H\x5\x12\n\x2\x44\x45\a\v\x2\x2\x45");
		sb.Append("G\x5\x12\n\x2\x46\x44\x3\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2");
		sb.Append("\x2HI\x3\x2\x2\x2I\x11\x3\x2\x2\x2JH\x3\x2\x2\x2KN\x5\x14\v");
		sb.Append("\x2LN\x5\n\x6\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\x13\x3\x2\x2\x2");
		sb.Append("OP\a\x10\x2\x2PQ\a\b\x2\x2QR\x5\xE\b\x2RS\a\n\x2\x2S\x15\x3");
		sb.Append("\x2\x2\x2\t\"$,\x36?HM");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
