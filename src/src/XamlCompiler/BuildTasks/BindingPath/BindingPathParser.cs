//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BindingPath.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class BindingPathParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, WS=9, 
		ESCAPEDQUOTE=10, QUOTE=11, DOUBLE_QUOTE=12, TRUE=13, FALSE=14, NULL=15, 
		Digits=16, QuotedString=17, IDENTIFIER=18;
	public const int
		RULE_program = 0, RULE_decimal_value = 1, RULE_boolean_value = 2, RULE_namespace_qualifier = 3, 
		RULE_static_type = 4, RULE_attached_expr = 5, RULE_cast_expr = 6, RULE_function = 7, 
		RULE_path = 8, RULE_function_param = 9;
	public static readonly string[] ruleNames = {
		"program", "decimal_value", "boolean_value", "namespace_qualifier", "static_type", 
		"attached_expr", "cast_expr", "function", "path", "function_param"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'.'", "':'", "'('", "')'", "','", "'['", "']'", null, null, 
		"'''", "'\"'", "'x:True'", "'x:False'", "'x:Null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "WS", "ESCAPEDQUOTE", 
		"QUOTE", "DOUBLE_QUOTE", "TRUE", "FALSE", "NULL", "Digits", "QuotedString", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BindingPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BindingPathParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BindingPathParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; path(0);
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decimal_valueContext : ParserRuleContext {
		public ITerminalNode[] Digits() { return GetTokens(BindingPathParser.Digits); }
		public ITerminalNode Digits(int i) {
			return GetToken(BindingPathParser.Digits, i);
		}
		public Decimal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterDecimal_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitDecimal_value(this);
		}
	}

	[RuleVersion(0)]
	public Decimal_valueContext decimal_value() {
		Decimal_valueContext _localctx = new Decimal_valueContext(Context, State);
		EnterRule(_localctx, 2, RULE_decimal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 23; Match(T__0);
				}
			}

			State = 26; Match(Digits);
			State = 29;
			_la = TokenStream.La(1);
			if (_la==T__1) {
				{
				State = 27; Match(T__1);
				State = 28; Match(Digits);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_valueContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(BindingPathParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(BindingPathParser.FALSE, 0); }
		public Boolean_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterBoolean_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitBoolean_value(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_valueContext boolean_value() {
		Boolean_valueContext _localctx = new Boolean_valueContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolean_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_la = TokenStream.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_qualifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public Namespace_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterNamespace_qualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitNamespace_qualifier(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_qualifierContext namespace_qualifier() {
		Namespace_qualifierContext _localctx = new Namespace_qualifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(IDENTIFIER);
			State = 34; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_typeContext : ParserRuleContext {
		public Namespace_qualifierContext namespace_qualifier() {
			return GetRuleContext<Namespace_qualifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public Static_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterStatic_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitStatic_type(this);
		}
	}

	[RuleVersion(0)]
	public Static_typeContext static_type() {
		Static_typeContext _localctx = new Static_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_static_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; namespace_qualifier();
			State = 37; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attached_exprContext : ParserRuleContext {
		public Static_typeContext static_type() {
			return GetRuleContext<Static_typeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(BindingPathParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BindingPathParser.IDENTIFIER, i);
		}
		public Attached_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attached_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterAttached_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitAttached_expr(this);
		}
	}

	[RuleVersion(0)]
	public Attached_exprContext attached_expr() {
		Attached_exprContext _localctx = new Attached_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_attached_expr);
		try {
			State = 50;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(T__3);
				State = 40; static_type();
				State = 41; Match(T__1);
				State = 42; Match(IDENTIFIER);
				State = 43; Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; Match(T__3);
				State = 46; Match(IDENTIFIER);
				State = 47; Match(T__1);
				State = 48; Match(IDENTIFIER);
				State = 49; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_exprContext : ParserRuleContext {
		public Static_typeContext static_type() {
			return GetRuleContext<Static_typeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public Cast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterCast_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitCast_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cast_exprContext cast_expr() {
		Cast_exprContext _localctx = new Cast_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_cast_expr);
		try {
			State = 59;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; Match(T__3);
				State = 53; static_type();
				State = 54; Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(T__3);
				State = 57; Match(IDENTIFIER);
				State = 58; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public Function_paramContext[] function_param() {
			return GetRuleContexts<Function_paramContext>();
		}
		public Function_paramContext function_param(int i) {
			return GetRuleContext<Function_paramContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(IDENTIFIER);
			State = 62; Match(T__3);
			State = 64;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << Digits) | (1L << QuotedString) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 63; function_param();
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__5) {
				{
				{
				State = 66; Match(T__5);
				State = 67; function_param();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 73; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.BindPathStep PathStep;
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
	 
		public PathContext() { }
		public virtual void CopyFrom(PathContext context) {
			base.CopyFrom(context);
			this.PathStep = context.PathStep;
		}
	}
	public partial class PathStaticFuctionContext : PathContext {
		public Static_typeContext static_type() {
			return GetRuleContext<Static_typeContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public PathStaticFuctionContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathStaticFuction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathStaticFuction(this);
		}
	}
	public partial class PathCastContext : PathContext {
		public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		public PathCastContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathCast(this);
		}
	}
	public partial class PathPathToFunctionContext : PathContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public PathPathToFunctionContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathPathToFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathPathToFunction(this);
		}
	}
	public partial class PathIndexerContext : PathContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode Digits() { return GetToken(BindingPathParser.Digits, 0); }
		public PathIndexerContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathIndexer(this);
		}
	}
	public partial class PathCastInvalidContext : PathContext {
		public Attached_exprContext attached_expr() {
			return GetRuleContext<Attached_exprContext>(0);
		}
		public PathCastInvalidContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathCastInvalid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathCastInvalid(this);
		}
	}
	public partial class PathCastPathParenContext : PathContext {
		public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PathCastPathParenContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathCastPathParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathCastPathParen(this);
		}
	}
	public partial class PathFunctionContext : PathContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public PathFunctionContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathFunction(this);
		}
	}
	public partial class PathStringIndexerContext : PathContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode QuotedString() { return GetToken(BindingPathParser.QuotedString, 0); }
		public PathStringIndexerContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathStringIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathStringIndexer(this);
		}
	}
	public partial class PathIdentifierContext : PathContext {
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public PathIdentifierContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathIdentifier(this);
		}
	}
	public partial class PathCastPathContext : PathContext {
		public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PathCastPathContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathCastPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathCastPath(this);
		}
	}
	public partial class PathStaticIdentifierContext : PathContext {
		public Static_typeContext static_type() {
			return GetRuleContext<Static_typeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public PathStaticIdentifierContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathStaticIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathStaticIdentifier(this);
		}
	}
	public partial class PathDotIdentifierContext : PathContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(BindingPathParser.IDENTIFIER, 0); }
		public PathDotIdentifierContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathDotIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathDotIdentifier(this);
		}
	}
	public partial class PathDotAttachedContext : PathContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public Attached_exprContext attached_expr() {
			return GetRuleContext<Attached_exprContext>(0);
		}
		public PathDotAttachedContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterPathDotAttached(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitPathDotAttached(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		return path(0);
	}

	private PathContext path(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PathContext _localctx = new PathContext(Context, _parentState);
		PathContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_path, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new PathCastPathContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 76; cast_expr();
				State = 77; path(5);
				}
				break;
			case 2:
				{
				_localctx = new PathIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new PathStaticIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80; static_type();
				State = 81; Match(T__1);
				State = 82; Match(IDENTIFIER);
				}
				break;
			case 4:
				{
				_localctx = new PathCastInvalidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; attached_expr();
				}
				break;
			case 5:
				{
				_localctx = new PathCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; cast_expr();
				}
				break;
			case 6:
				{
				_localctx = new PathCastPathParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; Match(T__3);
				State = 87; cast_expr();
				State = 88; path(0);
				State = 89; Match(T__4);
				}
				break;
			case 7:
				{
				_localctx = new PathFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; function();
				}
				break;
			case 8:
				{
				_localctx = new PathStaticFuctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; static_type();
				State = 93; Match(T__1);
				State = 94; function();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 115;
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new PathDotIdentifierContext(new PathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 98;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 99; Match(T__1);
						State = 100; Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new PathIndexerContext(new PathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 101;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 102; Match(T__6);
						State = 103; Match(Digits);
						State = 104; Match(T__7);
						}
						break;
					case 3:
						{
						_localctx = new PathStringIndexerContext(new PathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 105;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 106; Match(T__6);
						State = 107; Match(QuotedString);
						State = 108; Match(T__7);
						}
						break;
					case 4:
						{
						_localctx = new PathDotAttachedContext(new PathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 109;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 110; Match(T__1);
						State = 111; attached_expr();
						}
						break;
					case 5:
						{
						_localctx = new PathPathToFunctionContext(new PathContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 112;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 113; Match(T__1);
						State = 114; function();
						}
						break;
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_paramContext : ParserRuleContext {
		public Microsoft.UI.Xaml.Markup.Compiler.FunctionParam Param;
		public Function_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_param; } }
	 
		public Function_paramContext() { }
		public virtual void CopyFrom(Function_paramContext context) {
			base.CopyFrom(context);
			this.Param = context.Param;
		}
	}
	public partial class FunctionParamNumberContext : Function_paramContext {
		public Decimal_valueContext decimal_value() {
			return GetRuleContext<Decimal_valueContext>(0);
		}
		public FunctionParamNumberContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParamNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParamNumber(this);
		}
	}
	public partial class FunctionParamBoolContext : Function_paramContext {
		public Boolean_valueContext boolean_value() {
			return GetRuleContext<Boolean_valueContext>(0);
		}
		public FunctionParamBoolContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParamBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParamBool(this);
		}
	}
	public partial class FunctionParameterInvalidContext : Function_paramContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionParameterInvalidContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParameterInvalid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParameterInvalid(this);
		}
	}
	public partial class FunctionParamStringContext : Function_paramContext {
		public ITerminalNode QuotedString() { return GetToken(BindingPathParser.QuotedString, 0); }
		public FunctionParamStringContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParamString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParamString(this);
		}
	}
	public partial class FunctionParamPathContext : Function_paramContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public FunctionParamPathContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParamPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParamPath(this);
		}
	}
	public partial class FunctionParamNullValueContext : Function_paramContext {
		public ITerminalNode NULL() { return GetToken(BindingPathParser.NULL, 0); }
		public FunctionParamNullValueContext(Function_paramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.EnterFunctionParamNullValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBindingPathListener typedListener = listener as IBindingPathListener;
			if (typedListener != null) typedListener.ExitFunctionParamNullValue(this);
		}
	}

	[RuleVersion(0)]
	public Function_paramContext function_param() {
		Function_paramContext _localctx = new Function_paramContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_param);
		try {
			State = 126;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new FunctionParameterInvalidContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; function();
				}
				break;
			case 2:
				_localctx = new FunctionParamPathContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; path(0);
				}
				break;
			case 3:
				_localctx = new FunctionParamBoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; boolean_value();
				}
				break;
			case 4:
				_localctx = new FunctionParamNumberContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 123; decimal_value();
				}
				break;
			case 5:
				_localctx = new FunctionParamStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 124; Match(QuotedString);
				}
				break;
			case 6:
				_localctx = new FunctionParamNullValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 125; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return path_sempred((PathContext)_localctx, predIndex);
		}
		return true;
	}
	private bool path_sempred(PathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x14\x83\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x1B\n\x3\x3\x3\x3"+
		"\x3\x3\x3\x5\x3 \n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x35\n\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b>\n\b\x3\t\x3\t\x3\t\x5\t\x43\n\t"+
		"\x3\t\x3\t\a\tG\n\t\f\t\xE\tJ\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\x63\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\nv\n\n\f\n\xE\ny\v\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\x81\n\v\x3\v\x2\x3\x12\f\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x14\x2\x3\x3\x2\xF\x10\x8F\x2\x16\x3\x2\x2\x2\x4\x1A\x3\x2\x2\x2"+
		"\x6!\x3\x2\x2\x2\b#\x3\x2\x2\x2\n&\x3\x2\x2\x2\f\x34\x3\x2\x2\x2\xE=\x3"+
		"\x2\x2\x2\x10?\x3\x2\x2\x2\x12\x62\x3\x2\x2\x2\x14\x80\x3\x2\x2\x2\x16"+
		"\x17\x5\x12\n\x2\x17\x18\a\x2\x2\x3\x18\x3\x3\x2\x2\x2\x19\x1B\a\x3\x2"+
		"\x2\x1A\x19\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1F"+
		"\a\x12\x2\x2\x1D\x1E\a\x4\x2\x2\x1E \a\x12\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F"+
		" \x3\x2\x2\x2 \x5\x3\x2\x2\x2!\"\t\x2\x2\x2\"\a\x3\x2\x2\x2#$\a\x14\x2"+
		"\x2$%\a\x5\x2\x2%\t\x3\x2\x2\x2&\'\x5\b\x5\x2\'(\a\x14\x2\x2(\v\x3\x2"+
		"\x2\x2)*\a\x6\x2\x2*+\x5\n\x6\x2+,\a\x4\x2\x2,-\a\x14\x2\x2-.\a\a\x2\x2"+
		".\x35\x3\x2\x2\x2/\x30\a\x6\x2\x2\x30\x31\a\x14\x2\x2\x31\x32\a\x4\x2"+
		"\x2\x32\x33\a\x14\x2\x2\x33\x35\a\a\x2\x2\x34)\x3\x2\x2\x2\x34/\x3\x2"+
		"\x2\x2\x35\r\x3\x2\x2\x2\x36\x37\a\x6\x2\x2\x37\x38\x5\n\x6\x2\x38\x39"+
		"\a\a\x2\x2\x39>\x3\x2\x2\x2:;\a\x6\x2\x2;<\a\x14\x2\x2<>\a\a\x2\x2=\x36"+
		"\x3\x2\x2\x2=:\x3\x2\x2\x2>\xF\x3\x2\x2\x2?@\a\x14\x2\x2@\x42\a\x6\x2"+
		"\x2\x41\x43\x5\x14\v\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43H\x3"+
		"\x2\x2\x2\x44\x45\a\b\x2\x2\x45G\x5\x14\v\x2\x46\x44\x3\x2\x2\x2GJ\x3"+
		"\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IK\x3\x2\x2\x2JH\x3\x2\x2\x2K"+
		"L\a\a\x2\x2L\x11\x3\x2\x2\x2MN\b\n\x1\x2NO\x5\xE\b\x2OP\x5\x12\n\aP\x63"+
		"\x3\x2\x2\x2Q\x63\a\x14\x2\x2RS\x5\n\x6\x2ST\a\x4\x2\x2TU\a\x14\x2\x2"+
		"U\x63\x3\x2\x2\x2V\x63\x5\f\a\x2W\x63\x5\xE\b\x2XY\a\x6\x2\x2YZ\x5\xE"+
		"\b\x2Z[\x5\x12\n\x2[\\\a\a\x2\x2\\\x63\x3\x2\x2\x2]\x63\x5\x10\t\x2^_"+
		"\x5\n\x6\x2_`\a\x4\x2\x2`\x61\x5\x10\t\x2\x61\x63\x3\x2\x2\x2\x62M\x3"+
		"\x2\x2\x2\x62Q\x3\x2\x2\x2\x62R\x3\x2\x2\x2\x62V\x3\x2\x2\x2\x62W\x3\x2"+
		"\x2\x2\x62X\x3\x2\x2\x2\x62]\x3\x2\x2\x2\x62^\x3\x2\x2\x2\x63w\x3\x2\x2"+
		"\x2\x64\x65\f\xE\x2\x2\x65\x66\a\x4\x2\x2\x66v\a\x14\x2\x2gh\f\f\x2\x2"+
		"hi\a\t\x2\x2ij\a\x12\x2\x2jv\a\n\x2\x2kl\f\v\x2\x2lm\a\t\x2\x2mn\a\x13"+
		"\x2\x2nv\a\n\x2\x2op\f\n\x2\x2pq\a\x4\x2\x2qv\x5\f\a\x2rs\f\x4\x2\x2s"+
		"t\a\x4\x2\x2tv\x5\x10\t\x2u\x64\x3\x2\x2\x2ug\x3\x2\x2\x2uk\x3\x2\x2\x2"+
		"uo\x3\x2\x2\x2ur\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2"+
		"x\x13\x3\x2\x2\x2yw\x3\x2\x2\x2z\x81\x5\x10\t\x2{\x81\x5\x12\n\x2|\x81"+
		"\x5\x6\x4\x2}\x81\x5\x4\x3\x2~\x81\a\x13\x2\x2\x7F\x81\a\x11\x2\x2\x80"+
		"z\x3\x2\x2\x2\x80{\x3\x2\x2\x2\x80|\x3\x2\x2\x2\x80}\x3\x2\x2\x2\x80~"+
		"\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x15\x3\x2\x2\x2\f\x1A\x1F\x34=\x42"+
		"H\x62uw\x80";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
