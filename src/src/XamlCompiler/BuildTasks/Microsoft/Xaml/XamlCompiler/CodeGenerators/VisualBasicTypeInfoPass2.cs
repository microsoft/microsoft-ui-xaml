// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class VisualBasicTypeInfoPass2 : VB_CodeGenerator<TypeInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

");
  if(!Model.GenerateTypeInfo)  
  {                                       
            this.Write("\' No local types .\r\n");
  }                                       
  else                                    
  {                                       
            this.Write("\r\n");
  if (!ProjectInfo.IsLibrary) 
  { 
            this.Write("Namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.AppMetadataProviderNamespace)));
            this.Write("\r\n\r\n");
      Output_AppMetadataProvider();      
            this.Write("\r\nEnd Namespace\r\n\r\n");
  } 
            this.Write("Namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n");
  if (ProjectInfo.GenerateFullXamlMetadataProvider) { 
            this.Write("    <");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".FullXamlMetadataProvider()>  _\r\n");
  } 
            this.Write("    Public NotInheritable Class XamlMetaDataProvider\r\n        Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider\r\n        Private _provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider\r\n        Private ReadOnly Property Provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider\r\n            Get\r\n                If _provider Is Nothing\r\n" +
                    "                    _provider = New ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider()\r\n                End If\r\n                Return _provider" +
                    "\r\n            End Get\r\n        End Property\r\n\r\n");
      if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
      {
            this.Write("        Friend Sub AddOtherProvider(otherProvider as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider)\r\n            Provider.AddOtherProvider(otherProvider)\r\n  " +
                    "      End Sub\r\n\r\n");
      }
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("Public Function GetXamlType(type as Global.System.Type) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider.GetXamlType\r\n            Return Provider.GetXamlTypeByType" +
                    "(type)\r\n        End Function\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("Public Function GetXamlType(fullName As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider.GetXamlType\r\n            Return Provider.GetXamlTypeByName" +
                    "(fullName)\r\n        End Function\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("Public Function GetXmlnsDefinitions() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".XmlnsDefinition() Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider.GetXmlnsDefinitions\r\n            Return New ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".XmlnsDefinition() {}\r\n        End Function\r\n    End Class\r\n\r\n");
    if(ProjectInfo.EnableTypeInfoReflection) 
    { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Friend Class XamlTypeInfoProvider\r\n        Private _provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider\r\n        Private ReadOnly Property Provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider\r\n            Get\r\n                If _provider Is" +
                    " Nothing\r\n                    _provider = New ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider()\r\n                End If\r\n                Return" +
                    " _provider\r\n            End Get\r\n        End Property\r\n\r\n        Public Function" +
                    " GetXamlTypeByType(ByVal type As Global.System.Type) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            Return Provider.GetXamlType(type)\r\n        End Function\r\n" +
                    "\r\n        Public Function GetXamlTypeByName(ByVal typeName As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            Return Provider.GetXamlType(typeName)\r\n        End Functi" +
                    "on\r\n    End Class\r\n");
    } 
    else 
    { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Friend Class XamlTypeInfoProvider\r\n        Public Function GetXamlTypeByTyp" +
                    "e(ByVal type As Global.System.Type) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            Dim xamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByType.TryGetValue(type, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByType(type)
                If typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
");
      if(SchemaInfo.OtherMetadataProviders.Count > 0)    
      {                                       
            this.Write("                Dim userXamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType = TryCast(xamlType, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType)\r\n                If xamlType Is Nothing Or (userXamlType IsNot Not" +
                    "hing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType)" +
                    " Then\r\n                    Dim libXamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType  = CheckOtherMetadataProvidersForType(type)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
");
      }                                       
            this.Write(@"                If xamlType IsNot Nothing Then
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetXamlTypeByName(ByVal typeName As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            If String.IsNullOrEmpty(typeName) Then\r\n                R" +
                    "eturn Nothing\r\n            End If\r\n            Dim xamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByName.TryGetValue(typeName, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByName(typeName)
                if typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
");
      if(SchemaInfo.OtherMetadataProviders.Count > 0)    
      {                                       
            this.Write("                Dim userXamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType = TryCast(xamlType, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType)\r\n                If xamlType Is Nothing Or (userXamlType IsNot Not" +
                    "hing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType)" +
                    " Then\r\n                    Dim libXamlType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType = CheckOtherMetadataProvidersForName(typeName)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
");
      }                                       
            this.Write(@"                If xamlType IsNot Nothing
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetMemberByLongName(ByVal longMemberName As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember\r\n            If String.IsNullOrEmpty(longMemberName) Then\r\n         " +
                    "       Return Nothing\r\n            End If\r\n            Dim xamlMember As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember = Nothing
            SyncLock _xamlMembers
                If _xamlMembers.TryGetValue(longMemberName, xamlMember) Then
                    Return xamlMember
                End If
                xamlMember = CreateXamlMember(longMemberName)
                If xamlMember IsNot Nothing Then
                    _xamlMembers.Add(longMemberName, xamlMember)
                End If
            End SyncLock
            Return xamlMember
        End Function

        Private _xamlTypeCacheByName As New Global.System.Collections.Generic.Dictionary(Of String, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType)()\r\n        Private _xamlTypeCacheByType As New Global.System.Collecti" +
                    "ons.Generic.Dictionary(Of Global.System.Type, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType)()\r\n        Private _xamlMembers As New Global.System.Collections.Gene" +
                    "ric.Dictionary(Of String, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember)()\r\n\r\n");
      Output_TypeTables();            
            this.Write("\r\n");
      Output_Activators();            
      Output_ListAndMapMethods();     
            this.Write("\r\n");
      Output_CreateXamlType();    
            this.Write("\r\n");
      Output_CheckOtherMetadataProviders();  
            this.Write("\r\n");
      Output_SettersAndGetters();     
            this.Write("\r\n");
      Output_CreateXamlMember();      
            this.Write("\r\n    End Class\r\n\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Friend Class XamlSystemBaseType\r\n        Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType
        Private _fullName As String
        Private _underlyingType As Global.System.Type

        Public Sub New(ByVal fullName As String, ByVal underlyingType As Global.System.Type)
            _fullName = fullName
            _underlyingType = underlyingType
        End Sub

        Public ReadOnly Property UnderlyingType As Global.System.Type Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.UnderlyingType\r\n            Get\r\n                Return _underlyingTyp" +
                    "e\r\n            End Get\r\n        End Property\r\n\r\n        Public Overridable ReadO" +
                    "nly Property FullName() As String Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.FullName\r\n            Get\r\n                Return _fullName\r\n         " +
                    "   End Get\r\n        End Property\r\n\r\n        Public Overridable ReadOnly Property" +
                    " BaseType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.BaseType\r\n            Get\r\n                Throw New Global.System.Not" +
                    "ImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        Pub" +
                    "lic Overridable ReadOnly Property ContentProperty() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.ContentProperty\r\n            Get\r\n                Throw New Global.Sys" +
                    "tem.NotImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n    " +
                    "    Public Overridable Function GetMember(ByVal name As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.GetMember\r\n            Throw New Global.System.NotImplementedException" +
                    "()\r\n        End Function\r\n\r\n        Public Overridable ReadOnly Property IsArray" +
                    "() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsArray\r\n            Get\r\n                Throw New Global.System.NotI" +
                    "mplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        Publ" +
                    "ic Overridable ReadOnly Property IsCollection() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsCollection\r\n            Get\r\n                Throw New Global.System" +
                    ".NotImplementedException()\r\n            End Get\r\n        End Property\r\n        P" +
                    "ublic Overridable ReadOnly Property IsConstructible() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsConstructible\r\n            Get\r\n                Throw New Global.Sys" +
                    "tem.NotImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n    " +
                    "    Public Overridable ReadOnly Property IsDictionary() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsDictionary\r\n            Get\r\n                Throw New Global.System" +
                    ".NotImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n       " +
                    " Public Overridable ReadOnly Property IsMarkupExtension() As Boolean Implements " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsMarkupExtension\r\n            Get\r\n                Throw New Global.S" +
                    "ystem.NotImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n  " +
                    "      Public Overridable  ReadOnly Property IsBindable() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.IsBindable\r\n            Get\r\n                Throw New Global.System.N" +
                    "otImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        P" +
                    "ublic Overridable ReadOnly Property ItemType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.ItemType\r\n            Get\r\n                Throw New Global.System.Not" +
                    "ImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        Pub" +
                    "lic Overridable ReadOnly Property KeyType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.KeyType\r\n            Get\r\n                Throw New Global.System.NotI" +
                    "mplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        Publ" +
                    "ic Overridable ReadOnly Property BoxedType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.BoxedType\r\n            Get\r\n                Throw New Global.System.No" +
                    "tImplementedException()\r\n            End Get\r\n        End Property\r\n\r\n        Pu" +
                    "blic Overridable Function ActivateInstance() As Global.System.Object Implements " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType.ActivateInstance
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable Sub AddToMap(ByVal instance As Global.System.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Object) Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.AddToMap\r\n            Throw New Global.System.NotImplementedException(" +
                    ")\r\n        End Sub\r\n\r\n        Public Overridable Sub AddToVector(ByVal instance " +
                    "As Global.System.Object, ByVal item As Global.System.Object) Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.AddToVector\r\n            Throw New Global.System.NotImplementedExcepti" +
                    "on()\r\n        End Sub\r\n\r\n        Public Overridable Sub RunInitializer() Impleme" +
                    "nts ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType.RunInitializer\r\n            Throw New Global.System.NotImplementedExce" +
                    "ption()\r\n        End Sub\r\n\r\n        Public Overridable Function CreateFromString" +
                    "(ByVal input As String) As Global.System.Object Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType.CreateFromString
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable  ReadOnly Property IsReturnTypeStub() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable  ReadOnly Property IsLocalType() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property
    End Class

    Friend Delegate Function Activator() As Global.System.Object
    Friend Delegate Sub AddToCollection(instance As Global.System.Object, item As Global.System.Object)
    Friend Delegate Sub AddToDictionary(instance As Global.System.Object, key As Global.System.Object, item As Global.System.Object)
    Friend Delegate Function CreateFromStringMethod(input As String) As Global.System.Object
    Friend Delegate Function BoxInstanceMethod(input As Global.System.Object) As Global.System.Object

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Friend Class XamlUserType\r\n        Inherits ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlSystemBaseType\r\n        Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n        Private _provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider\r\n        Private _baseType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n        Private _isArray As Boolean\r\n        Private _isMarkupExtensi" +
                    "on As Boolean\r\n        Private _isBindable As Boolean\r\n        Private _isReturn" +
                    "TypeStub As Boolean\r\n        Private _isLocalType As Boolean\r\n        Private _b" +
                    "oxedType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType

        Private _contentPropertyName As String
        Private _itemTypeName As String
        Private _keyTypeName As String
        Private _memberNames As Dictionary(Of String, String)
        Private _enumValues As Dictionary(Of String, Global.System.Object)

        Public Sub New(ByVal provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider, ByVal fullName As String, ByVal fullType As Global.System." +
                    "Type, ByVal baseType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType)\r\n            MyBase.New(fullName, fullType)\r\n            _provider = " +
                    "provider\r\n            _baseType = baseType\r\n        End Sub\r\n\r\n        \' --- Int" +
                    "erface methods ----\r\n\r\n        Public Overrides ReadOnly Property BaseType() As " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType
            Get
                Return _baseType
            End Get
        End Property

        Public Overrides ReadOnly Property IsArray() As Boolean
            Get
                Return _isArray
            End Get
        End Property

        Public Overrides ReadOnly Property IsCollection() As Boolean
            Get
                Return CollectionAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsConstructible() As Boolean
            Get
                Return Activator <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsDictionary() As Boolean
            Get
                Return DictionaryAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsMarkupExtension() As Boolean
            Get
                Return _isMarkupExtension
            End Get
        End Property

        Public Overrides ReadOnly Property IsBindable() as Boolean
            Get
                Return _isBindable
            End Get
        End Property

        Public Overrides ReadOnly Property ContentProperty() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember\r\n            Get\r\n                Return _provider.GetMemberByLongNa" +
                    "me(_contentPropertyName)\r\n            End Get\r\n        End Property\r\n\r\n        P" +
                    "ublic Overrides ReadOnly Property ItemType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            Get\r\n                Return _provider.GetXamlTypeByName(_" +
                    "itemTypeName)\r\n            End Get\r\n        End Property\r\n\r\n        Public Overr" +
                    "ides ReadOnly Property KeyType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType\r\n            Get\r\n                Return _provider.GetXamlTypeByName(_" +
                    "keyTypeName)\r\n            End Get\r\n        End Property\r\n\r\n        Public Overri" +
                    "des Function GetMember(ByVal name As String) As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember\r\n            If _memberNames Is Nothing Then\r\n                Return" +
                    " Nothing\r\n            End If\r\n            Dim longName As String = Nothing\r\n    " +
                    "        If _memberNames.TryGetValue(name, longName) Then\r\n                Return" +
                    " _provider.GetMemberByLongName(longName)\r\n            End If\r\n            Return" +
                    " Nothing\r\n        End Function\r\n\r\n        Public Overrides Function ActivateInst" +
                    "ance() As Global.System.Object\r\n            Return Activator.Invoke()\r\n        E" +
                    "nd Function\r\n\r\n        Public Overrides Sub AddToMap(ByVal instance As Global.Sy" +
                    "stem.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Obje" +
                    "ct)\r\n            DictionaryAdd.Invoke(instance, key, item)\r\n        End Sub\r\n\r\n " +
                    "       Public Overrides Sub AddToVector(ByVal instance As Global.System.Object, " +
                    "ByVal item As Global.System.Object)\r\n            CollectionAdd.Invoke(instance, " +
                    "item)\r\n        End Sub\r\n\r\n        Public Overrides Sub RunInitializer()\r\n       " +
                    "     Global.System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(U" +
                    "nderlyingType.TypeHandle)\r\n        End Sub\r\n\r\n        Public Overrides Function " +
                    "CreateFromString(ByVal input As String) As Global.System.Object\r\n            If " +
                    "BoxedType IsNot Nothing Then\r\n                Return BoxInstance(BoxedType.Creat" +
                    "eFromString(input))\r\n            End If\r\n\r\n            If CreateFromStringMethod" +
                    " IsNot Nothing Then\r\n                Return CreateFromStringMethod.Invoke(input)" +
                    "\r\n            ElseIf  Not _enumValues Is Nothing Then\r\n                Dim retur" +
                    "nValue As Int32 = 0\r\n\r\n                Dim valueParts As String() = input.Split(" +
                    "New [Char]() {\",\"c})\r\n\r\n                For Each valuePart As String In valuePar" +
                    "ts\r\n                    Dim partValue As Global.System.Object = Nothing\r\n       " +
                    "             Dim enumFieldValue As Int32 = 0\r\n                    Try\r\n         " +
                    "               If _enumValues.TryGetValue(valuePart.Trim(), partValue) Then\r\n   " +
                    "                         enumFieldValue = Convert.ToInt32(partValue)\r\n          " +
                    "              Else\r\n                            Try\r\n                           " +
                    "     enumFieldValue = Convert.ToInt32(valuePart.Trim())\r\n                       " +
                    "     Catch ex As FormatException\r\n                                For Each key A" +
                    "s String In _enumValues.Keys\r\n                                    If String.Comp" +
                    "are(valuePart.Trim(), key, Global.System.StringComparison.OrdinalIgnoreCase) = 0" +
                    " Then\r\n                                        If _enumValues.TryGetValue(key.Tr" +
                    "im(), partValue) Then\r\n                                            enumFieldValu" +
                    "e = Convert.ToInt32(partValue)\r\n                                        End If\r\n" +
                    "                                        Exit For\r\n                              " +
                    "      End If\r\n                                Next\r\n                            " +
                    "End Try\r\n                        End If\r\n\r\n                        returnValue =" +
                    " returnValue Or enumFieldValue\r\n\r\n                    Catch ex As Exception\r\n   " +
                    "                     Throw New ArgumentException(input, FullName)\r\n             " +
                    "       End Try\r\n                Next valuePart\r\n\r\n                Return returnV" +
                    "alue\r\n\r\n            End If\r\n            Throw New ArgumentException(input, FullN" +
                    "ame)\r\n        End Function\r\n\r\n        \' ---- End of Interface Methods\r\n\r\n       " +
                    " Public Overrides ReadOnly Property IsReturnTypeStub() As Boolean\r\n            G" +
                    "et\r\n                Return _isReturnTypeStub\r\n            End Get\r\n        End P" +
                    "roperty\r\n\r\n        Public Overrides ReadOnly Property IsLocalType() As Boolean\r\n" +
                    "            Get\r\n                Return _isLocalType\r\n            End Get\r\n     " +
                    "   End Property\r\n\r\n        Public ReadOnly Property BoxedType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType.BoxedType
            Get
                Return _boxedType
            End Get
        End Property

        Public Property Activator() As Activator
        Public Property CollectionAdd() As AddToCollection
        Public Property DictionaryAdd() As AddToDictionary
        Public Property CreateFromStringMethod() As CreateFromStringMethod
        Public Property BoxInstance As BoxInstanceMethod

        Public Sub SetContentPropertyName(ByVal contentPropertyName As String)
            _contentPropertyName = contentPropertyName
        End Sub

        Public Sub SetIsArray()
            _isArray = True
        End Sub

        Public Sub SetIsMarkupExtension()
            _isMarkupExtension = True
        End Sub

        Public Sub SetIsBindable()
            _isBindable = True
        End Sub

        Public Sub SetIsReturnTypeStub()
            _isReturnTypeStub = True
        End Sub

        Public Sub SetIsLocalType()
            _isLocalType = True
        End Sub

        Public Sub SetItemTypeName(ByVal itemTypeName As String)
            _itemTypeName = itemTypeName
        End Sub

        Public Sub SetKeyTypeName(ByVal keyTypeName As String)
            _keyTypeName = keyTypeName
        End Sub

        Public Sub SetBoxedType(ByVal boxedType As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlType)
            _boxedType = boxedType
        End Sub

        Public Function BoxType (Of t As Structure)(ByVal instance As Global.System.Object) As Global.System.Object
            Dim unwrapped As t= CType(instance, t)
            Return New Global.System.Nullable(Of t)(unwrapped)
        End Function

        Public Sub AddMemberName(ByVal shortName As String)
            If _memberNames Is Nothing Then
                _memberNames = New Global.System.Collections.Generic.Dictionary(Of String,String)()
            End If
            _memberNames.Add(shortName, FullName + ""."" +shortName)
        End Sub

        Public Sub AddEnumValue(ByVal name As String, ByVal value As Global.System.Object)
            If _enumValues Is Nothing Then
                _enumValues = New Global.System.Collections.Generic.Dictionary(Of String,Global.System.Object)()
            End If
            _enumValues.Add(name, value)
        End Sub
    End Class

    Friend Delegate Function Getter(ByVal instance As Global.System.Object) As Global.System.Object
    Friend Delegate Sub Setter(ByVal instance As Global.System.Object, ByVal value As Global.System.Object)

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Friend Class XamlMember\r\n        Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember\r\n        Private _provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(@".XamlTypeInfoProvider
        Private _name As String
        Private _isAttachable As Boolean
        Private _isDependencyProperty As Boolean
        Private _isReadOnly As Boolean

        Private _typeName As String
        Private _targetTypeName As String

        Public Sub New(ByVal provider As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider, ByVal name As String, ByVal typeName As String)\r\n         " +
                    "   _name = name\r\n            _typeName = typeName\r\n            _provider = provi" +
                    "der\r\n        End Sub\r\n\r\n        Public ReadOnly Property Name() As String Implem" +
                    "ents ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMember.Name\r\n            Get\r\n                Return _name\r\n            End" +
                    " Get\r\n        End Property\r\n\r\n        Public ReadOnly Property Type() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.Type
            Get
                Return _provider.GetXamlTypeByName(_typeName)
            End Get
        End Property

        Public Sub SetTargetTypeName(targetTypeName as String)
            _targetTypeName = targetTypeName
        End Sub
        Public ReadOnly Property TargetType() As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlType Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.TargetType
            Get
                Return _provider.GetXamlTypeByName(_targetTypeName)
            End Get
        End Property

        Public Sub SetIsAttachable()
            _isAttachable = True
        End Sub
        Public ReadOnly Property IsAttachable() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.IsAttachable
            Get
                Return _isAttachable
            End Get
        End Property

        Public Sub SetIsDependencyProperty()
            _isDependencyProperty = True
        End Sub

        Public ReadOnly Property IsDependencyProperty() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.IsDependencyProperty
            Get
                Return _isDependencyProperty
            End Get
        End Property

        Public Sub SetIsReadOnly()
            _isReadOnly = True
        End Sub

        Public ReadOnly Property IsReadOnly() As Boolean Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.IsReadOnly
            Get
                Return _isReadOnly
            End Get
        End Property

        Public Property Getter() As Getter
        Public Function GetValue(ByVal instance As Global.System.Object) As Global.System.Object Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.GetValue
            If Getter IsNot Nothing Then
                Return Getter.Invoke(instance)
            Else
                Throw New Global.System.InvalidOperationException(""GetValue"")
            End If
        End Function

        Public Property Setter() As Setter
        Public Sub SetValue(ByVal instance As Global.System.Object, ByVal value As Global.System.Object) Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(@".IXamlMember.SetValue
            If Setter IsNot Nothing Then
                Setter.Invoke(instance, value)
            Else
                Throw New Global.System.InvalidOperationException(""SetValue"")
            End If
        End Sub
    End Class
");
    } 
            this.Write("End Namespace\r\n");
  }                                       
            return this.GenerationEnvironment.ToString();
        }
 
         private void Output_CheckOtherMetadataProviders()   
         {                                                   
             if(SchemaInfo.OtherMetadataProviders.Count > 0)            
             {                                               
                 if (!ProjectInfo.GenerateProviderCode) 
                 {
this.Write("        Public Sub AddOtherProvider(otherProvider As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)\r\n            If _otherProviders Is Nothing\r\n             " +
        "   Dim otherProvidersTmp As List(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider) = New List(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)()\r\n                _otherProviders = otherProvidersTmp\r\n " +
        "           End If\r\n            _otherProviders.Add(otherProvider)\r\n        End S" +
        "ub\r\n");

                 }
this.Write("\r\n        Private Dim _otherProviders As List(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)\r\n        Private ReadOnly Property OtherProviders As List" +
        "(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)\r\n            Get\r\n                If _otherProviders Is N" +
        "othing\r\n                    Dim otherProvidersTmp As List(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider) = New List(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)()\r\n");

                 if (ProjectInfo.GenerateProviderCode && (SchemaInfo.OtherMetadataProviders.Count > 0)) 
                 {
this.Write("                    Dim provider As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider\r\n");

                     foreach(var xmp in SchemaInfo.OtherMetadataProviders) 
                     {                                           
this.Write("                    provider = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmp.FullName));

this.Write("()\r\n                    otherProvidersTmp.Add(provider)\r\n");

                     }                                           
                 }
this.Write("                    _otherProviders = otherProvidersTmp\r\n                End If\r\n" +
        "                Return _otherProviders\r\n            End Get\r\n        End Propert" +
        "y\r\n\r\n        Private Function CheckOtherMetadataProvidersForName(typeName As Str" +
        "ing) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType\r\n            Dim xamlType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType = Nothing\r\n            Dim foundXamlType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType = Nothing\r\n            For Each xmp As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(@".IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(typeName)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function

        Private Function CheckOtherMetadataProvidersForType(type As Global.System.Type) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType\r\n            Dim xamlType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType = Nothing\r\n            Dim foundXamlType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType = Nothing\r\n            For Each xmp As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(@".IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(type)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function
");

             }                           
         }                               
         private void Output_TypeTables()     
         {                                       
this.Write("        Private _typeNameTable(");

this.Write(this.ToStringHelper.ToStringWithCulture(SchemaInfo.TypeTableFromAllAssemblies.Count - 1));

this.Write(") As String\r\n        Private _typeTable(");

this.Write(this.ToStringHelper.ToStringWithCulture(SchemaInfo.TypeTableFromAllAssemblies.Count - 1));

this.Write(") As Global.System.Type\r\n\r\n        Private Sub InitTypeTables()\r\n");

         for(int i=0; i<SchemaInfo.TypeTable.Count; i++) 
         {                                                           
             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      
this.Write("            _typeNameTable(");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write(") = \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.StandardName));

this.Write("\"\r\n");

         }                                                           
         for(int i=0; i<SchemaInfo.TypeTable.Count; i++) 
         {                                                           
             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      
this.Write("            _typeTable(");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write(") = GetType(");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.FullName));

this.Write(")\r\n");

         }                                                           
this.Write(@"        End Sub

        Private Function LookupTypeIndexByName(ByVal typeName As String) As Integer
            If _typeNameTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeNameTable.Length - 1
                If 0 = String.CompareOrdinal(_typeNameTable(i), typeName) Then
                    Return i
                End If
            Next i
            Return -1
        End Function

        Private Function LookupTypeIndexByType(ByVal type As Global.System.Type) As Integer
            If _typeTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeTable.Length - 1
                If Global.System.Type.Equals(type, _typeTable(i)) Then
                    Return i
                End If
            Next
            Return -1
        End Function
");

         }                                       
         private void Output_CreateXamlType()     
         {                                        
this.Write("        Private Function CreateXamlType(ByVal typeIndex As Integer) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType\r\n            Dim xamlType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlSystemBaseType = Nothing\r\n");

             if(SchemaInfo.TypeTable.Count == 0) 
             {                                   
this.Write("            \' No Local Types\r\n");

             }                                   
             else                                
             {                                   
this.Write("            Dim userType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType\r\n            Dim typeName As String = _typeNameTable(typeIndex)\r\n  " +
        "          Dim type As Global.System.Type = _typeTable(typeIndex)\r\n\r\n            " +
        "Select Case typeIndex\r\n");

                 foreach(InternalTypeEntry entry in SchemaInfo.TypeTable)    
                 {                                                           
this.Write("            Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write("     \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.StandardName));

this.Write("\r\n");

                     if(entry.IsSystemType)                                  
                     {                                                       
this.Write("                xamlType = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlSystemBaseType(typeName, type)\r\n\r\n");

                     }           
                     else        
                     {           
                         InternalXamlUserTypeInfo uentry = entry.UserTypeInfo;    
                         if(uentry.BaseType == null)         
                         {                                   
this.Write("                userType = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType(Me, typeName, type, Nothing)\r\n");

                         }                                   
                         else                                
                         {                                   
this.Write("                userType = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType(Me, typeName, type, GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BaseType.StandardName));

this.Write("\"))\r\n");

                         }                                   
                         if (uentry.BoxedType != null) 
                         { 
this.Write("                userType.SetBoxedType(GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BoxedType.StandardName));

this.Write("\"))\r\n                userType.BoxInstance = AddressOf userType.BoxType(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BoxedType.FullName));

this.Write(")\r\n");

                         }
                         if(uentry.IsConstructible && !uentry.IsReturnTypeStub)  
                         {                                   
this.Write("                userType.Activator = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName(uentry)));

this.Write("\r\n");

                         }                                   
                         if (uentry.ContentProperty != null) 
                         {                                   
this.Write("                userType.SetContentPropertyName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.ContentProperty.DeclaringType.StandardName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.ContentProperty.Name));

this.Write("\")\r\n");

                         }                                   
                         if(uentry.IsCollection)             
                         {                                   
this.Write("                userType.CollectionAdd = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.VectorAddName(uentry)));

this.Write("\r\n");

                         }                                   
                         if(uentry.IsDictionary)             
                         {                                   
this.Write("                userType.DictionaryAdd = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.MapAddName(uentry)));

this.Write("\r\n");

                         }                                   
                         foreach(InternalXamlUserMemberInfo mem in uentry.Members)   
                         {                                                           
this.Write("                userType.AddMemberName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(mem.Name));

this.Write("\")\r\n");

                         }                                                           
                         if(uentry.HasEnumValues)            
                         {                                   
                             foreach(String eValue in uentry.EnumValues)    
                             {                                                           
this.Write("                userType.AddEnumValue(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(eValue));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.FullName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(eValue));

this.Write(")\r\n");

                             }                                                           
                         }                                   
                         if(uentry.IsBindable)               
                         {                                   
this.Write("                userType.SetIsBindable()\r\n");

                         }                                   
                         if (uentry.HasCreateFromStringMethod) 
                         {                                   
                             if (uentry.TypeEntry.UnderlyingType.IsValueType)
                             {
this.Write("                userType.CreateFromStringMethod = Function(x) DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.CreateFromStringMethod.ResolvedName.VBName()));

this.Write("(x), Object)\r\n");

                             }
                             else
                             {
this.Write("                userType.CreateFromStringMethod = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.CreateFromStringMethod.ResolvedName.VBName()));

this.Write("\r\n");

                             }
                         }                                   
                         if(uentry.IsMarkupExtension)    
                         {                               
this.Write("                userType.SetIsMarkupExtension()\r\n");

                         }                               
                         if(uentry.IsReturnTypeStub)         
                         {                                   
this.Write("                userType.SetIsReturnTypeStub()\r\n");

                         }                                   
                         if(uentry.IsLocalType)              
                         {                                   
this.Write("                userType.SetIsLocalType()\r\n");

                         }                                   
this.Write("                xamlType = userType\r\n\r\n");

                     }   
                 }       
this.Write("            End Select\r\n");

             }            
this.Write("            Return xamlType\r\n        End Function\r\n");

         }                
         private void Output_Activators()                                        
         {                                                                       
             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  
             {                                                                   
                 if(entry.IsConstructible)                                       
                 {                                                               
this.Write("        Private Function ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName(entry)));

this.Write("() As Global.System.Object\r\n            Return New ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.FullName));

this.Write("()\r\n        End Function\r\n\r\n");

                 }           
             }               
         }                   
         private void Output_ListAndMapMethods()                                 
         {                                                                       
             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  
             {                                                                   
                 if(entry.IsCollection)                                          
                 {                                                               
this.Write("        Private Sub ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.VectorAddName(entry)));

this.Write("(instance As Global.System.Object, item As Global.System.Object)\r\n            Dim" +
        " collection As Global.System.Collections.Generic.ICollection(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(") = CType(instance, Global.System.Collections.Generic.ICollection(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write("))\r\n            Dim newItem As ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(" = CType(item, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(")\r\n            collection.Add(newItem)\r\n        End Sub\r\n\r\n");

                 }                       
                 if(entry.IsDictionary)  
                 {                       
this.Write("        Private Sub ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.MapAddName(entry)));

this.Write("(instance As Global.System.Object, key As Global.System.Object, item As Global.Sy" +
        "stem.Object)\r\n            Dim collection As Global.System.Collections.Generic.ID" +
        "ictionary(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(") = CType(instance, Global.System.Collections.Generic.IDictionary(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write("))\r\n            Dim newKey As ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(" = CType(key, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(")\r\n            Dim newItem As ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(" = CType(item, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(")\r\n            collection.Add(newKey, newItem)\r\n        End Sub\r\n\r\n");

                 }           
             }               
         }                   
         private void Output_CreateXamlMember()          
         {                                               
this.Write("        Private Function CreateXamlMember(ByVal longMemberName As String) As Xaml" +
        "Member\r\n            Dim xamlMember As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMember = Nothing\r\n");

             if(SchemaInfo.UserMemberInfo.Count == 0)    
             {                                           
this.Write("            \' No Local Properties\r\n");

             }                                           
             else                                        
             {                                           
this.Write("            Dim userType As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType\r\n\r\n            Select Case longMemberName\r\n");

                 for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    
                 {                                                                       
                     InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    
this.Write("            Case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.StandardName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("\"\r\n                userType = CType(GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.StandardName));

this.Write("\"), ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType)\r\n                xamlMember = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMember(Me, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("\", \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.StandardName));

this.Write("\")\r\n");

                     if(entry.TargetType != null)    
                     {                               
this.Write("                xamlMember.SetTargetTypeName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.StandardName));

this.Write("\")\r\n");

                     }                               
                     if(entry.IsDependencyProperty)  
                     {                               
this.Write("                xamlMember.SetIsDependencyProperty()\r\n");

                     }                               
                     if(entry.IsAttachable )         
                     {                               
this.Write("                xamlMember.SetIsAttachable()\r\n");

                     }                               
                     if (entry.HasPublicGetter)      
                     {                               
this.Write("                xamlMember.Getter = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetterName(i)));

this.Write("\r\n");

                     }                               
                     if(entry.HasPublicGetter && !entry.HasPublicSetter) 
                     {                               
this.Write("                xamlMember.SetIsReadOnly()\r\n");

                     }                               
                     else if (entry.HasPublicSetter) 
                     {               
this.Write("                xamlMember.Setter = AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName(i)));

this.Write("\r\n");

                     }               
                 }                   
this.Write("            End Select\r\n");

             }                       
this.Write("            Return xamlMember\r\n        End Function\r\n");

         }                           
         private void Output_SettersAndGetters()                                     
         {                                                                           
             for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    
             {                                                                       
                 InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    
                 if (entry.IsEvent)          
                     continue;               
                 if(entry.HasPublicGetter)   
                 {                           
this.Write("        Private Function ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetterName(i)));

this.Write("(ByVal instance As Global.System.Object) As Global.System.Object\r\n");

                     if(entry.IsAttachable)              
                     {                                   
                         if (entry.TargetType != null)   
                         {                               
this.Write("            return ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Get");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(CType(instance, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.FullName));

this.Write("))\r\n");

                         }       
                         else    
                         {       
this.Write("            return ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Get");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(instance)\r\n");

                         }       
                     }           
                     else        
                     {           
this.Write("            Dim that As ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(" = CType(instance, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(")\r\n            Return that.");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("\r\n");

                     }           
this.Write("        End Function\r\n");

                 }                           
                 if(entry.HasPublicSetter)   
                 {                           
this.Write("        Private Sub ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName(i)));

this.Write("(ByVal instance As Global.System.Object, ByVal Value As Global.System.Object)\r\n");

                     if(entry.IsAttachable)  
                     {                       
                         if (entry.TargetType != null) 
                         {                                        
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(CType(instance, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.FullName));

this.Write("), CType(Value, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write("))\r\n");

                         }                                        
                         else                                    
                         {                                        
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(instance, CType(Value, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write("))\r\n");

                         }                                        
                     }                       
                     else                    
                     {                       
this.Write("            Dim that As ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(" = CType(instance, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(")\r\n            that.");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write(" = CType(Value, ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write(")\r\n");

                     }                       
this.Write("        End Sub\r\n");

                 }    
             }        
         }            
         private void Output_AppMetadataProvider()  
         {                                       
this.Write("    Partial Public Class ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.AppXamlInfo.ShortName));

this.Write("\r\n        Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider\r\n        \r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        Private __appProvider As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private ReadOnly Property _AppProvider() As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider\r\n            Get\r\n                If __appProvider Is Nothi" +
        "ng\r\n                    __appProvider = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider()\r\n                End If\r\n                Return __appProv" +
        "ider\r\n            End Get\r\n        End Property\r\n");

             if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
             {
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private Sub _AddOtherProvider(otherProvider as ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider)\r\n            _AppProvider.AddOtherProvider(otherProvider)" +
        "\r\n        End Sub\r\n");

             }
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Function GetXamlType(type as Global.System.Type) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider.GetXamlType\r\n            Return _AppProvider.GetXamlType(t" +
        "ype)\r\n        End Function\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Function GetXamlType(fullName As String) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlType Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider.GetXamlType\r\n            return _AppProvider.GetXamlType(f" +
        "ullName)\r\n        End Function\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Function GetXmlnsDefinitions() As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XmlnsDefinition() Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlMetadataProvider.GetXmlnsDefinitions\r\n            Return _AppProvider.GetXm" +
        "lnsDefinitions()\r\n        End Function\r\n    End Class\r\n");

         }           
    }
}
