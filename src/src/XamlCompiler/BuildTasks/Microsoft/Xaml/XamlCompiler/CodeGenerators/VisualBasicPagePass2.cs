// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Collections.Generic;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class VisualBasicPagePass2 : VB_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#ExternalChecksum(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\")\r\n");
  }   
            this.Write(@"'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.ClassName.Namespace)));
            this.Write("\r\n\r\n    Partial Class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("\r\n");
 if (!Model.CodeInfo.IsApplication)
 {
            this.Write("        Implements ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IComponentConnector\r\n\r\n");
      if (Model.CodeInfo.HasBindingSetters) 
      { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n        Friend Class XamlBindingSetters\r\n");
      var bindingSetters = new HashSet<String>();
      foreach (ConnectionIdElement connectionId in Model.AllConnectionIdElements)
      {
          foreach (BindPathStep step in connectionId.BindUniverse.BindPathSteps.Values)
          {
              foreach (BindAssignment bindAssignment in step.BindAssignments.Where(ba => ba.HasSetValueHelper))
              {
                  if (!bindingSetters.Contains(bindAssignment.MemberFullName))
                  {
                      Output_Binding_SetValue_Function(bindAssignment);
                      bindingSetters.Add(bindAssignment.MemberFullName);
                  }
              }
          }
      }
 
            this.Write("        End Class\r\n");
      } 
      if (Model.CodeInfo.IsUsingCompiledBinding) 
      { 
            this.Write("\r\n");
          Output_BindingsClasses();  
      } 
            this.Write("\r\n");
      Output_ConnectMethod();  
      Output_UnloadObjectMethod(); 
            this.Write("\r\n");
      Output_GetBindingConnectorMethod();  
      Output_ApiInformationDeclarations();  
      Output_InitializeXProperties(); 
 }
            this.Write("    End Class\r\n\r\nEnd Namespace\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
     private void Output_InitializeXProperties() 
     { 
         if (Model.XProperties.Any()) 
         { 
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private Sub InitializeXProperties()\r\n");

             foreach (xProperty xProp in Model.XProperties) 
             { 
                 if (xProp.DefaultValueString != null) 
                 { 
this.Write("            _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.GetStringToThing($"\"{xProp.DefaultValueString}\"")));

this.Write("\r\n");

                 } 
                 if (xProp.DefaultValueMarkup != null) 
                 { 
this.Write("            _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlReader.Load(");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.DefaultValueMarkup));

this.Write("), ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.VBName()));

this.Write(")\r\n");

                 } 
             } 
this.Write("        End Sub\r\n");

         } 
     } 
     private void Output_ConnectMethod()
     {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Sub Connect(ByVal connectionId As Integer, ByVal target As Globa" +
        "l.System.Object) Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector.Connect\r\n");

         if(Model.ConnectableElements.Any()) 
         {
this.Write("            Select Case connectionId\r\n");

             foreach (ConnectionIdElement element in Model.ConnectableElements)
             {
this.Write("            Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(" \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 FieldDefinition fieldInfo = element.FieldDefinition; 
                 string objectInitName; 
                 string objectName; 
                 if(fieldInfo == null) 
                 { 
                     objectInitName = "Dim " + element.ElementCodeName + " As " + element.Type.VBName(); 
                     objectName = element.ElementCodeName; 
                 } 
                 else 
                 { 
                     objectInitName = "Me." + fieldInfo.FieldName; 
                     objectName = "Me." + fieldInfo.FieldName; 
                 } 
                 Output_PushDeprecated(element.Type.IsDeprecated()); 
                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.TwoTabs); 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(objectInitName));

this.Write(" = CType(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")\r\n");

                 foreach (EventAssignment ev in element.EventAssignments)
                 {
                     Output_ApiInformationCall_Push(ev.ApiInformation, Indent.TwoTabs); 
this.Write("                AddHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(objectName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(").");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.EventName));

this.Write(", AddressOf Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.HandlerName));

this.Write("\r\n");

                     Output_ApiInformationCall_Pop(ev.ApiInformation, Indent.TwoTabs); 
                 }
                 Output_PopDeprecated(element.Type.IsDeprecated()); 
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.TwoTabs); 
this.Write("                    Exit Select\r\n");

             }
this.Write("                    Case Else\r\n                        Exit Select\r\n            E" +
        "nd Select\r\n");

         }
this.Write("                Me._contentLoaded = true\r\n        End Sub\r\n");

     }
     private void Output_UnloadObjectMethod()
     {
         if (Model.UnloadableFields.Count() > 0)
         {
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private Sub UnloadObject(unloadableObject As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".DependencyObject)\r\n            If unloadableObject IsNot Nothing Then\r\n");

             foreach (var element in Model.UnloadableFields) { 
this.Write("                \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("                If unloadableObject Is Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write(" Then\r\n                    Me.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(")\r\n                End If\r\n");

                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
             } 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlMarkupHelper.UnloadObject(unloadableObject)\r\n            End If\r\n        End" +
        " Sub\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private Sub DisconnectUnloadedObject(connectionId As Integer)\r\n        " +
        "    Select Case connectionId\r\n");

             foreach (var element in Model.DeferrableElements)
             {
this.Write("                Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 foreach (var childElem in element.Children) 
                 {
                     if (childElem.HasFieldDefinition) 
                     {
this.Write("                    Me.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(")\r\n");

                     }
                     if (childElem.HasBindAssignments || element.HasRootNamedElementStep) 
                     {
this.Write("                    Me.Bindings.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(")\r\n");

                     }
                 }
                 if (element.HasBindAssignments || element.HasRootNamedElementStep) 
                 {
this.Write("                    Me.Bindings.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(")\r\n");

                 }
                 FieldDefinition fieldInfo = element.FieldDefinition; 
                 if(fieldInfo != null) 
                 { 
this.Write("                    Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldInfo.FieldName));

this.Write(" = Nothing\r\n");

                 } 
this.Write("                    Exit Select\r\n");

             }
this.Write("                Case Else\r\n                    Throw New Global.System.ArgumentEx" +
        "ception(\"Invalid connectionId.\")\r\n            End Select\r\n        End Sub\r\n");

         } 
     }
     private void Output_GetBindingConnectorCaseBindingPropertiesSet(ConnectionIdElement element, bool isPageRoot) 
     { 
         if (element.BindUniverse.NeededForOuterScopeElement) 
         { 
             if (isPageRoot) 
             { 
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("                    bindings.RootWeakReference = New Global.System.WeakReference(" +
        "Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".ResourceDictionary)(Me)\r\n");

                 }
                 else
                 {
this.Write("                    bindings.RootWeakReference = New Global.System.WeakReference(" +
        "Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement)(Me)\r\n");

                 }
                 if (!element.BindUniverse.IsFileRoot) 
                 { 
this.Write("                    bindings.Parent = New Global.System.WeakReference(Me.Bindings" +
        ")\r\n");

                 } 
             } 
             else 
             { 
this.Write("                    bindings.RootWeakReference = Me.RootWeakReference\r\n          " +
        "          bindings.Parent = New Global.System.WeakReference(Me)\r\n");

             } 
         } 
     } 
     private void Output_GetBindingConnectorCase(ConnectionIdElement element, bool isPageRoot) 
     {
this.Write("               Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

         Output_PushDeprecated(element.Type.IsDeprecated());
         if (element.Type.IsDerivedFromControlTemplate())
         {
this.Write("                    Dim ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.TemplatedParentType));

this.Write(" = TryCast(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.TemplatedParentType));

this.Write(")\r\n                    If ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(" IsNot Nothing Then\r\n                        Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write(" = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("()\r\n                        returnValue = bindings\r\n                        bindi" +
        "ngs.SetDataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(")\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlBindingHelper.SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(", bindings)\r\n");

             PushIndent(Indent.TwoTabs); 
             Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
             PopIndent(); 
this.Write("                    End If\r\n");

         } else {
this.Write("                    Dim ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(" = CType(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")\r\n                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write(" = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("()\r\n                    returnValue = bindings\r\n                    bindings.SetD" +
        "ataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.IsBindingFileRoot ? "Me" : element.ElementCodeName + ".DataContext"));

this.Write(")\r\n");

             if (element.BindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
                 if (isPageRoot) 
                 { 
this.Write("                    bindings.SetConverterLookupRoot(Me)\r\n");

                 } 
                 else 
                 { 
                     if (Model.CodeInfo.IsResourceDictionary)
                     {
this.Write("                    Dim rootReference As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".ResourceDictionary\r\n");

                     }
                     else
                     {
this.Write("                    Dim rootReference As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement\r\n");

                     }
this.Write("                    Me.RootWeakReference.TryGetTarget(rootReference)\r\n           " +
        "         bindings.SetConverterLookupRoot(rootReference)\r\n");

                 } 
             }
             if (element.IsBindingFileRoot)
             { 
this.Write("                    Me.Bindings = bindings\r\n                    AddHandler ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(".Loading, AddressOf bindings.Loading\r\n");

             }
             else
             {
this.Write("                    AddHandler ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(".DataContextChanged, AddressOf bindings.DataContextChangedHandler\r\n              " +
        "      ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".DataTemplate.SetExtensionInstance(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings)\r\n");

             }
             if (ProjectInfo.ShouldGenerateDisableXBind || !element.IsBindingFileRoot) 
             {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlBindingHelper.SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings)\r\n");

             }
             Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
         }
         Output_PopDeprecated(element.Type.IsDeprecated()); 
this.Write("                    Exit Select\r\n");

     }
     private void Output_GetBindingConnectorMethod()
     {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Function GetBindingConnector(connectionId As Integer, target As " +
        "Object) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector.GetBindingConnector\r\n            Dim returnValue As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector = Nothing\r\n");

         if (Model.CodeInfo.BindStatus != BindStatus.None) 
         { 
this.Write("            Select Case connectionId\r\n");

             foreach (ConnectionIdElement element in Model.AllConnectionIdElements)
             {
                 if (element.IsBindingRoot)
                 {
                     Output_GetBindingConnectorCase(element, true); 
                 }
             }
this.Write("            End Select\r\n");

       } 
this.Write("            Return returnValue\r\n        End Function\r\n");

     }
 
     private void Output_PushDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#Disable Warning BC40000  \' Warning on Deprecated usage\r\n");

         } 
     }
     private void Output_PopDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#Enable Warning BC40000\r\n");

         } 
     }
     private void Output_BindingsClasses()
     {
         foreach (BindUniverse bindUniverse in Model.CodeInfo.BindUniverses)
         {
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Private Class ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("\r\n");

             if (bindUniverse.NeedsIDataTemplateExtension) 
             {
this.Write("            Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".IDataTemplateExtension\r\n");

             }
             if (bindUniverse.NeedsIDataTemplateExtension || ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("            Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IDataTemplateComponent\r\n");

             }
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("            Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlBindScopeDiagnostics\r\n");

             }
             if (bindUniverse.NeededForOuterScopeElement) { 
this.Write("            Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector\r\n            Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector\r\n");

             }
this.Write("            Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector\r\n            Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n\r\n            Private dataRoot As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType));

this.Write("\r\n");

             if (bindUniverse.NeededForOuterScopeElement) 
             { 
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            Public Property RootWeakReference As Global.System.WeakReference(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".ResourceDictionary)\r\n");

                 }
                 else
                 {
this.Write("            Public Property RootWeakReference As Global.System.WeakReference(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement)\r\n");

                 }
             } 
this.Write("            Private initialized As Boolean = False\r\n            Private Const NOT" +
        "_PHASED As Integer = 1 << 31\r\n            Private Const DATA_CHANGED As Integer " +
        "= 1 << 30\r\n");

             if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
this.Write("            Private localResources As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".ResourceDictionary\r\n");

                 if (!Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            Private converterLookupRoot As Global.System.WeakReference(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement)\r\n");

                 }
             }
             if (bindUniverse.NeedsIDataTemplateExtension) 
             { 
this.Write("            Private removedDataContextHandler As Boolean = False\r\n");

             } 
this.Write("\r\n            \' Fields for each control that has bindings.\r\n");

             foreach (ConnectionIdElement bindElement in bindUniverse.BoundElements)
             {
                 if (bindElement.IsWeakRef) 
                 {
this.Write("            Private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(" As Global.System.WeakReference\r\n");

                 }
                 else if (!bindElement.Type.IsDerivedFromControlTemplate()) 
                 {
this.Write("            Private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.Type));

this.Write("\r\n");

                 }
                 if (bindElement.CanBeInstantiatedLater)
                 {
                     foreach (var bindAssignment in bindElement.BindAssignments)
                     {
this.Write("            Private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberType));

this.Write("\r\n");

                     }
                 }
             }
             if (bindUniverse.UnloadableBindingSourceElements.Any()) { 
this.Write("            Private UnloadableBindingSourcesToUpdate As Global.System.Collections" +
        ".Generic.Queue(Of Global.System.Action) = new Global.System.Collections.Generic." +
        "Queue(Of Global.System.Action)()\r\n");

             } 
             if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
this.Write("            Private UnloadedElementsToUpdate As Global.System.Collections.Generic" +
        ".Queue(Of Global.System.Int32)  = new Global.System.Collections.Generic.Queue(Of" +
        " Global.System.Int32)()\r\n");

             } 
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\n            Private bindingsTracking As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_obj");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootElement.ConnectionId));

this.Write("_BindingsTracking\r\n");

             }
         if (bindUniverse.ElementsWithConnectCase.Where(e => e.BoundEventAssignments.Count > 0).Count() > 0)
             {
this.Write("\r\n            \' Subs for each event bindings event handler.\r\n");

             }
             foreach (ConnectionIdElement element in bindUniverse.ElementsWithConnectCase)
             {
                 foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                 {
this.Write("\r\n            Private Sub ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.Declaration()));

this.Write(")\r\n");

                     if (!evt.PathStep.ValueType.IsDelegate())
                     {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write("\r\n");

                     }
                     else
                     {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.ForCall()));

this.Write(");\r\n");

                     }
this.Write("            End Sub\r\n");

                 }
             }
this.Write("\r\n            \' Static fields for each binding\'s enabled/disabled state\r\n");

                 foreach (ConnectionIdElement bindElement in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in bindElement.BindAssignments)
                     {
this.Write("            Private Shared ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" As Boolean = False\r\n");

                     }
                 }
this.Write("\r\n            Public Sub New()\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                Me.bindingsTracking = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking(Me)\r\n");

             }
this.Write("            End Sub\r\n            \r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("            Public Sub Disable(lineNumber As Integer, columnNumber As Integer) Im" +
        "plements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IXamlBindScopeDiagnostics.Disable\r\n");

                 bool firstIfInDisable = true; 
                 foreach (var element in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in element.BindAssignments)
                     {
                         if (firstIfInDisable)
                         {
                         firstIfInDisable = false; 
this.Write("                If (lineNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" And columnNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(") Then\r\n");

                         } else {
this.Write("                ElseIf (lineNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" And columnNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(") Then\r\n");

                         }
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" = True\r\n");

                     }
                     foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                     {
                         if (firstIfInDisable)
                         {
                         firstIfInDisable = false; 
this.Write("                If (lineNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" And columnNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(") Then\r\n");

                         } else {
this.Write("                ElseIf (lineNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" And columnNumber = ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(") Then\r\n");

                         }
                         if (element.IsWeakRef)
                         {
this.Write("                    If (Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".IsAlive) Then\r\n                        RemoveHandler DirectCast(Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".Target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(").");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(", AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write("\r\n                    End If\r\n");

                         } else {
this.Write("                    RemoveHandler Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(", AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write("\r\n");

                         }
                     }
                 }
                 if (!firstIfInDisable)
                 {
this.Write("                End If\r\n");

                 }
this.Write("            End Sub\r\n");

             }
this.Write("\r\n            \' IComponentConnector\r\n\r\n            Public Sub Connect(connectionI" +
        "d As Integer, target As Global.System.Object) Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector.Connect\r\n");

             if (!bindUniverse.ElementsWithConnectCase.Any()) 
             { 
this.Write("                Exit Sub\r\n");

             } 
             else 
             { 
this.Write("                Select Case connectionId\r\n");

             foreach (ConnectionIdElement element in bindUniverse.ElementsWithConnectCase)
             {
this.Write("                    Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("                        \r\n");

                 if (bindUniverse.BoundElements.Contains(element)) { 
                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.ThreeTabs); 
                 if (element.IsWeakRef)
                 {
this.Write("                        Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = New Global.System.WeakReference(DirectCast(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write("))\r\n");

                 }
                 else if (element.Type.IsDerivedFromControlTemplate()) 
                 {
this.Write("                        Me.Update() \' Template children have been connected, init" +
        "ialize bindings\r\n");

                 }
                 else
                 {
this.Write("                        Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = DirectCast(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")\r\n");

                 }
                 if (element.IsUsedByOtherScopes) 
                 { 
this.Write("                        elementWeakRefs(connectionId) = New Global.System.WeakRef" +
        "erence(target)\r\n                        NotifyDependentScopes(connectionId)\r\n");

                 } 
                 foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                 {
                     Output_ApiInformationCall_Push(evt.ApiInformation, Indent.ThreeTabs); 
this.Write("                        AddHandler DirectCast(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(").");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(", AddressOf ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write("\r\n");

                     Output_ApiInformationCall_Pop(evt.ApiInformation, Indent.ThreeTabs); 
                 }
                 if (element.CanBeInstantiatedLater && (element.HasBindAssignments || element.HasBoundEventAssignments))
                 {
                     // In Connect() we update non-load assignments first, 
                     foreach (var ba in element.BindAssignments.Where(ba => !(ba is BoundLoadAssignment))) 
                     { 
                         PushIndent(Indent.TwoTabs); 
                         Output_Binding_SetValue_Non_Function_Call(ba, "Me." + ba.ObjectDeferredAssignmentCodeName.VBName(), false); 
                         PopIndent(); 
                     } 
                 }
                 foreach (var ba in element.BindAssignments.Where(bindAssignment => bindAssignment.IsTrackingTarget)) { 
                     if (element.TwoWayBindAssignments.Any()) { 
this.Write("                        Me.bindingsTracking.RegisterTwoWayListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(")\r\n");

                     }
                 }
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.ThreeTabs); 
                 } 
                 if (!element.IsBindingRoot) 
                 { 
                     // Queue load assignments to be updated later, because they're not available yet. 
                     foreach (var childElem in element.Children.Intersect(bindUniverse.ElementsWithBoundLoadAssignments)) 
                     { 
this.Write("                        If Not Me.UnloadedElementsToUpdate.Contains(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(") Then\r\n                            Me.UnloadedElementsToUpdate.Enqueue(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(")\r\n                        End If\r\n");

                     } 
                 } 
                 if (element.CanBeInstantiatedLater && element.HasRootNamedElementStep) { 
this.Write("                        Me.UnloadableBindingSourcesToUpdate.Enqueue(new Global.Sy" +
        "stem.Action(\r\n                        Sub()\r\n");

                     PushIndent(Indent.FourTabs); 
                     Output_Custom_Update_Call("Me", element.RootNamedElementStep, element.RootNamedElementStep.CodeGen().PathExpression.VBName(), KnownStrings.NotPhased);
                     PopIndent(); 
this.Write("                        End Sub\r\n                        ))\r\n");

                 } 
                 if (element.TryGetValidationContextStep(out PropertyStep validationStep) && ProjectInfo.IsInputValidationEnabled && ProjectInfo.EnableDefaultValidationContextGeneration) 
                 { 
                     Output_ApiInformationCall_Push(validationStep.ApiInformation, Indent.ThreeTabs); 
this.Write("                        Dim validationControl As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".IInputValidationControl = DirectCast(target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".IInputValidationControl)\r\n                        validationControl.ValidationCo" +
        "ntext = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".InputValidationContext(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.PropertyName));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.IsValueRequired));

this.Write(")\r\n");

                     Output_ApiInformationCall_Pop(validationStep.ApiInformation, Indent.ThreeTabs); 
                 }
this.Write("                        Exit Select\r\n");

             }
this.Write("                    Case Else\r\n                        Exit Select\r\n             " +
        "   End Select\r\n");

             } 
this.Write("            End Sub\r\n");

         if (bindUniverse.NeededForOuterScopeElement) { 
this.Write("\r\n            \' IComponentConnector\r\n\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n            Public Function GetBindingConnector(connectionId As Integer, target" +
        " As Object) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector.GetBindingConnector\r\n            \r\n                Dim retur" +
        "nValue As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector = Nothing\r\n");

             if (bindUniverse.Children.Any()) 
             { 
this.Write("                Select Case connectionId\r\n");

                 foreach (BindUniverse childUniverse in bindUniverse.Children)
                 {
                     ConnectionIdElement element = childUniverse.RootElement;
                     if (element.IsBindingRoot)
                     {
                         PushIndent(Indent.OneTab); 
                         Output_GetBindingConnectorCase(element, false); 
                         PopIndent(); 
                     }
                 }
this.Write("                End Select\r\n");

             } 
this.Write(@"                Return returnValue
            End Function

            Private dependentBindings As Global.System.Collections.Generic.Dictionary(Of Integer, Global.System.Collections.Generic.List(Of Global.System.WeakReference)) = New Global.System.Collections.Generic.Dictionary(Of Integer, Global.System.Collections.Generic.List(Of Global.System.WeakReference))()
            Private elementWeakRefs As Global.System.Collections.Generic.Dictionary(Of Integer, Global.System.WeakReference) = New Global.System.Collections.Generic.Dictionary(Of Integer, Global.System.WeakReference)()

            ' I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector\r\n\r\n            Private _parent As Global.System.WeakRefer" +
        "ence\r\n            Property Parent() As Global.System.WeakReference Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(@"_BindingsScopeConnector.Parent
                Get
                    Return _parent
                End Get
                Set(value As Global.System.WeakReference)
                    If _parent IsNot value Then
                        _parent = value
                        RegisterDependenciesOnParents()
                    End If
                End Set            
            End Property

            Public Function ContainsElement(connectionId As Integer) As Boolean Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector.ContainsElement\r\n                Select Case connectionId" +
        "\r\n");

             foreach (var element in bindUniverse.ElementsWithConnectCaseInLocalScope)
             {
                 if (element.IsUsedByOtherScopes) 
                 {
this.Write("                    Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("\r\n                        Return True\r\n");

                 }
             }
this.Write("                    Case Else\r\n                        Return False\r\n            " +
        "    End Select\r\n            End Function\r\n\r\n            Public Sub RegisterForEl" +
        "ementConnection(connectionId As Integer, connector As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector) Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(@"_BindingsScopeConnector.RegisterForElementConnection
                Dim dependentsList As Global.System.Collections.Generic.List(Of Global.System.WeakReference) = Nothing
                If Not dependentBindings.TryGetValue(connectionId, dependentsList)
                    dependentsList = New Global.System.Collections.Generic.List(Of Global.System.WeakReference)()
                    dependentBindings.Add(connectionId, dependentsList)
                End If

                dependentsList.Add(New Global.System.WeakReference(connector))

                NotifyDependentScope(connectionId, DirectCast(connector, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(@".IComponentConnector))
            End Sub

            Private Sub NotifyDependentScopes(connectionId As Integer)
                If dependentBindings.ContainsKey(connectionId) Then
                    Dim dependentsList As Global.System.Collections.Generic.List(Of Global.System.WeakReference) = dependentBindings(connectionId)
                    For Each dependent As Global.System.WeakReference In dependentsList
                        If dependent.IsAlive Then
                            NotifyDependentScope(connectionId, DirectCast(dependent.Target, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector))\r\n                        End If\r\n                    Next\r" +
        "\n                End If\r\n            End Sub\r\n\r\n            Private Sub NotifyDe" +
        "pendentScope(connectionId As Integer, connector As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(@".IComponentConnector)
                If elementWeakRefs.ContainsKey(connectionId) And elementWeakRefs(connectionId).IsAlive Then
                    connector.Connect(connectionId, elementWeakRefs(connectionId).Target)
                End If
            End Sub

            Private Sub RegisterDependenciesOnParents()
                Dim currentParent As Global.System.WeakReference = _parent
                Dim unresolvedDependencies As Global.System.Collections.Generic.List(Of Integer) = New Global.System.Collections.Generic.List(Of Integer)()
");

                 foreach (var element in bindUniverse.OuterScopeBoundElements)
                 {
this.Write("                unresolvedDependencies.Add(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(")\r\n");

                 }
this.Write("\r\n                While unresolvedDependencies.Count > 0 And Not currentParent Is" +
        " Nothing And currentParent.IsAlive\r\n                    Dim parentBindings As I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector = DirectCast(currentParent.Target, I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(@"_BindingsScopeConnector)
                    For i As Integer= unresolvedDependencies.Count - 1 To 0 Step -1
                        Dim unresolvedDependency As Integer = unresolvedDependencies(i)
                        If parentBindings.ContainsElement(unresolvedDependency) Then
                            parentBindings.RegisterForElementConnection(unresolvedDependency, Me)
                            unresolvedDependencies.RemoveAt(i)
                        End If
                    Next

                    currentParent = parentBindings.Parent
                End While
            End Sub

");

         } 
             if (bindUniverse.NeedsIDataTemplateExtension) 
             {
this.Write("\r\n            Public Sub DataContextChangedHandler(sender As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement, args As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(@".DataContextChangedEventArgs)
                If Me.SetDataRoot(args.NewValue) Then
                    Me.Update()
                End If
            End Sub

            ' IDataTemplateExtension

            Public Function ProcessBinding(phase As UInteger) As Boolean Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".IDataTemplateExtension.ProcessBinding\r\n                Throw New Global.System.N" +
        "otImplementedException()\r\n            End Function\r\n\r\n            Public Functio" +
        "n ProcessBindings(args As ContainerContentChangingEventArgs) As Integer Implemen" +
        "ts ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(@".IDataTemplateExtension.ProcessBindings
                Dim nextPhase As Integer = -1
                ProcessBindings(args.Item, args.ItemIndex, CInt(args.Phase), nextPhase)
                Return nextPhase
            End Function 

            Public Sub ResetTemplate() Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(@".IDataTemplateExtension.ResetTemplate
                Recycle()
            End Sub

            ' IDataTemplateComponent

            Public Sub ProcessBindings(item As Global.System.Object, itemIndex As Integer, phase As Integer, ByRef nextPhase As Integer) Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IDataTemplateComponent.ProcessBindings\r\n                nextPhase = -1\r\n        " +
        "        Select Case phase\r\n                    Case 0:\r\n                        " +
        "nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(0)));

this.Write("\r\n                        Me.SetDataRoot(item)\r\n                        If Not re" +
        "movedDataContextHandler Then\r\n                            removedDataContextHand" +
        "ler = True\r\n                            RemoveHandler ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootElement.ReferenceExpression));

this.Write(".DataContextChanged, AddressOf Me.DataContextChangedHandler\r\n                    " +
        "    End If\r\n                        Me.initialized = True\r\n                     " +
        "   Exit Select\r\n");

                     foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
                     { 
this.Write("                    Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));

this.Write(":\r\n");

                         foreach(PhaseAssignment phase in kvp.Value) 
                         { 
                             if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                             {
this.Write("                        If ");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" IsNot Nothing\r\n");

                             }
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlBindingHelper.ResumeRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(")\r\n");

                             if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                             {
this.Write("                        End If\r\n");

                             }
                         } 
this.Write("                        nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(kvp.Key)));

this.Write("\r\n                        Exit Select\r\n");

                     } 
this.Write("                End Select\r\n                Me.Update_(DirectCast(item, ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootStep.ValueType));

this.Write(") , 1 << phase)\r\n            End Sub\r\n\r\n            Public Sub Recycle() Implemen" +
        "ts ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IDataTemplateComponent.Recycle\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                Me.bindingsTracking.ReleaseAllListeners()\r\n");

             }
 foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
 { 
     foreach(PhaseAssignment phase in kvp.Value) 
     { 
         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" IsNot Nothing\r\n");

                 PushIndent();
         }
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlBindingHelper.SuspendRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(")\r\n");

         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
             PopIndent();
this.Write("                End If\r\n");

         }
     } 
 } 
this.Write("            End Sub\r\n");

             } else if (bindUniverse.NeedsIDataTemplateComponent || ProjectInfo.ShouldGenerateDisableXBind){
this.Write("\r\n            \' IDataTemplateComponent\r\n\r\n            Public Sub ProcessBindings(" +
        "item As Global.System.Object, itemIndex As Integer, phase As Integer, ByRef next" +
        "Phase As Integer) Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IDataTemplateComponent.ProcessBindings\r\n                nextPhase = -1\r\n        " +
        "    End Sub\r\n            \r\n            Public Sub Recycle() Implements ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IDataTemplateComponent.Recycle\r\n                Exit Sub\r\n            End Sub\r\n");

             } 
this.Write("\r\n            \' I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n            Public Sub Initialize() Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings.Initialize\r\n                If Not Me.initialized Then\r\n               " +
        "     Me.Update()\r\n                End If\r\n            End Sub\r\n            \r\n   " +
        "         Public Sub Update() Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings.Update\r\n");

             if (bindUniverse.HasBindings)
             {
this.Write("                Me.Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootStep.CodeName));

this.Write("(Me.dataRoot, NOT_PHASED)\r\n");

             }
this.Write("                Me.initialized = True\r\n            End Sub\r\n\r\n            Public " +
        "Sub StopTracking() Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings.StopTracking\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                Me.bindingsTracking.ReleaseAllListeners()\r\n");

             }
this.Write("                Me.initialized = False\r\n            End Sub\r\n\r\n            Public" +
        " Sub DisconnectUnloadedObject(connectionId As Integer) Implements I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings.DisconnectUnloadedObject\r\n");

                 if(bindUniverse.ElementsWithDisconnectCase.Count() == 0) { 
this.Write("                Throw New Global.System.ArgumentException(\"No unloadable elements" +
        " to disconnect.\")\r\n");

                 } else { 
this.Write("                Select Case connectionId\r\n");

                     foreach (var element in bindUniverse.ElementsWithDisconnectCase)
                     {
this.Write("                    Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                         if (bindUniverse.BoundElements.Contains(element)) { 
                         Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("                        If (Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" IsNot Nothing) Then\r\n");

                         foreach (BindAssignment bindAssignment in element.BindAssignments.Where(ba => ba.HasDeferredValueProxy))
                         {
this.Write("                            Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.GetMemberGetExpression(bindAssignment)));

this.Write("\r\n");

                         }
this.Write("                            Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = Nothing\r\n                        End If\r\n");

                         foreach (var childElem in element.Children.Where(c => bindUniverse.ElementsWithDisconnectCase.Contains(c))) 
                         {
this.Write("                        Me.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(")\r\n");

                         }
                         Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
                         } 
                         if (element.HasRootNamedElementStep) { 
this.Write("                        Me.UnloadableBindingSourcesToUpdate.Enqueue(new Global.Sy" +
        "stem.Action(\r\n                        Sub()\r\n");

                             PushIndent(Indent.FourTabs); 
                             Output_Custom_Update_Call("Me", element.RootNamedElementStep, "Nothing", KnownStrings.NotPhased);
                             PopIndent(); 
this.Write("                        End Sub\r\n                        ))\r\n");

                         } 
this.Write("                        Exit Select\r\n");

                     }
this.Write("                    Case Else\r\n                        Throw New Global.System.Ar" +
        "gumentException(\"Invalid connectionId.\")\r\n                End Select\r\n");

                 }
this.Write("            End Sub\r\n");

         if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) 
         { 
this.Write("\r\n            Private Sub UpdateUnloadedElement(connectionId as Integer)\r\n       " +
        "         Select Case connectionId\r\n");

             foreach (var element in bindUniverse.ElementsWithBoundLoadAssignments)
             {
this.Write("                    Case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
                 // The union below is so that BoundLoadAssignments are generated first 
                 foreach (var ba in element.BindAssignments.OfType<BoundLoadAssignment>()) 
                 { 
                     PushIndent(Indent.TwoTabs); 
                     Output_Binding_SetValue_Non_Function_Call(ba, "Me." + ba.ObjectDeferredAssignmentCodeName.VBName(), false); 
                     PopIndent(); 
                 } 
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
this.Write("                        Exit Select\r\n");

             }
this.Write("                    Case Else\r\n                        Throw New Global.System.Ar" +
        "gumentException(\"Invalid connectionId.\")\r\n                End Select\r\n          " +
        "  End Sub\r\n");

         }
this.Write("\r\n            Public Function SetDataRoot(newDataRoot As Global.System.Object)\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                Me.bindingsTracking.ReleaseAllListeners()\r\n");

             }
this.Write("                If Not newDataRoot Is Nothing Then\r\n                    Me.dataRo" +
        "ot = DirectCast(newDataRoot, ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType));

this.Write(")\r\n                    Return True\r\n                End If\r\n                Retur" +
        "n False\r\n            End Function\r\n");

             if (bindUniverse.RootElement.IsBindingFileRoot)
             {
this.Write("\r\n            Public Sub Loading(src As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement, data As object)\r\n                Me.Initialize()\r\n            " +
        "End Sub\r\n");

             }
             if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            Public Sub SetConverterLookupRoot(resources As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".ResourceDictionary)\r\n                Me.localResources = resources\r\n            " +
        "End Sub\r\n");

             }
             else
             {
this.Write("            Public Sub SetConverterLookupRoot(rootElement As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement)\r\n                Me.converterLookupRoot = New Global.System.We" +
        "akReference(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement)(rootElement)\r\n            End Sub\r\n");

             }
this.Write("\r\n            Public Function LookupConverter(key As string) As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlData)));

this.Write(".IValueConverter\r\n");

             if (!Model.CodeInfo.IsResourceDictionary)
             {
this.Write("                If (Me.localResources Is Nothing)\r\n                    Dim rootEl" +
        "ement As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".FrameworkElement = Nothing\r\n                    Me.converterLookupRoot.TryGetTar" +
        "get(rootElement)\r\n                    Me.localResources = rootElement.Resources\r" +
        "\n                    Me.converterLookupRoot = Nothing\r\n                End If\r\n");

             }
this.Write("                Return DirectCast( If( Me.localResources.ContainsKey(key), Me.loc" +
        "alResources(key), ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".Application.Current.Resources(key)), ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlData)));

this.Write(".IValueConverter)\r\n            End Function\r\n");

             }
             if (bindUniverse.HasBindings)
             {
                 if (bindUniverse.HasFunctionBindings)
                 {
                     Output_TryGetValueFunctions(bindUniverse);
                     Output_FunctionBindings(bindUniverse);
                 }
                 if (bindUniverse.NeedsCompleteUpdate)
                 {
                     Output_CompleteUpdate(bindUniverse);
                 }
this.Write("\r\n            \' Update methods for each path node used in binding steps.\r\n");

             }
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
this.Write("            Private Sub Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(GetUpdateParams(bindStep)));

this.Write(")\r\n");

                 if (bindStep.UpdateNeedsBindingsVariable || (bindStep is RootStep && bindUniverse.ElementRootStep != null)) { 
this.Write("                Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = Me\r\n");

                 }
                 if (bindStep.RequiresChildNotification && (bindStep is PropertyStep || bindStep is CastStep || bindStep is RootStep || bindStep is RootNamedElementStep || bindStep is ArrayIndexStep || bindStep is MapIndexStep))
                 {
this.Write("                Me.bindingsTracking.UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(obj)\r\n");

                 }
                 Output_Update_Steps(bindStep.ValueType.IsNullable, "Me", bindStep.Children, true, "phase");
                 Output_Update_Steps(bindStep.ValueType.IsNullable, "Me", bindStep.Dependents, false, "phase");
                 foreach (int distinctPhase in bindStep.DistinctPhases)
                 {
                     Output_Binding_Phased_SetValue(distinctPhase, true, bindStep, false);
                     Output_Binding_Phased_SetValue(distinctPhase, false, bindStep, false);
                 }
                 if (bindStep is RootStep) { 
                     Output_Update_Steps(false, "Me", bindUniverse.BindPathSteps.Values.Where(s => s.Parent is StaticRootStep), false, "phase");
                     if (bindUniverse.ElementRootStep != null) 
                     { 
                         Output_Update_Steps(false, "Me", bindUniverse.BindPathSteps.Values.Where(s => s.Parent == bindUniverse.ElementRootStep), false, "phase");
                     } 
                     if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                Me.CompleteUpdate(phase)\r\n");

                     }
                 }
this.Write("            End Sub\r\n");

             }
             // UpdateFallback generators 
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
                 if (bindStep.Parent != null && bindStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                 {
this.Write("\r\n            Private Sub UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(phase As Integer)\r\n");

                     foreach (BindPathStep childStep in bindStep.Children.Concat(bindStep.Dependents))
                     {
                         if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                         {
this.Write("                Me.UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(phase)\r\n");

                         }
                     }
                     foreach (int distinctPhase in bindStep.DistinctPhases) 
                     {
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, true, bindStep);
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, false, bindStep);
                     }
this.Write("            End Sub\r\n");

                 }
             }
             // UpdateTwoWay generators 
             foreach (var ba in bindUniverse.BindAssignments.Where(ba => ba.IsTrackingTarget)) { 
                 Output_UpdateTwoWay(ba); 
             } 
 if (ProjectInfo.IsInputValidationEnabled) {
             Output_UpdateErrors(bindUniverse); 
 } 
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n            Private Class ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking\r\n                Private weakRefToBindingObj As Global.System.WeakRefere" +
        "nce(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(") = Nothing\r\n\r\n                Public Sub New(obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(")\r\n                    weakRefToBindingObj = New Global.System.WeakReference(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(")(obj)\r\n                End Sub\r\n\r\n                Private Function TryGetBinding" +
        "Object() As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("\r\n                    Dim bindingObject As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(@" = Nothing
                    if weakRefToBindingObj IsNot Nothing Then
                        weakRefToBindingObj.TryGetTarget(bindingObject)
                        If bindingObject Is Nothing Then
                            weakRefToBindingObj = Nothing
                            ReleaseAllListeners()
                        End If
                    End If
                    return bindingObject
                End Function

                Public Sub ReleaseAllListeners()
");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.NeedsUpdateChildListeners))
                 {
                     Output_ApiInformationCall_Push(step.ApiInformation, Indent.TwoTabs); 
this.Write("                    UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(Nothing)\r\n");

                     Output_ApiInformationCall_Pop(step.ApiInformation, Indent.TwoTabs); 
                 }
this.Write("                End Sub\r\n\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
                 {
                     if (step.IsTrackingSource && step.ImplementsINPC && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep || step is ArrayIndexStep || step is MapIndexStep))
                     {
this.Write("                Public Sub PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As object, e As ");

this.Write(this.ToStringHelper.ToStringWithCulture(PropertyChangedEventArgName(step)));

this.Write(")\r\n                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     Dim propName As String = e.PropertyName\r\n                  " +
        "      Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = TryCast(sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n                        If Global.System.String.IsNullOrEmpty(propName) Then\r\n" +
        "");

                         PushIndent(Indent.ThreeTabs);
                         Output_Update_Steps(step.ValueType.IsNullable, "bindings",step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("                        Else\r\n                            Select Case propName\r\n");

                         foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
                         {
this.Write("                                Case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\":\r\n");

                                 PushIndent(Indent.SevenTabs);
                                 foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                                     Output_Update_DataChanged_Step("bindings", child);
                                 } 
                                 PopIndent();
this.Write("                                    Exit Select\r\n");

                         }
                         foreach (string functionName in step.TrackingSteps.OfType<FunctionStep>().Select(p => p.Method.MethodName).Distinct())
                         {
this.Write("                                Case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(functionName));

this.Write("\":\r\n");

                                 PushIndent(Indent.FiveTabs);
                                 Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps.OfType<FunctionStep>().Where(p => p.Method.MethodName == functionName), false, "DATA_CHANGED");
                                 PopIndent();
this.Write("                                    Exit Select\r\n");

                         }
this.Write("                                Case Else\r\n                                    Ex" +
        "it Select\r\n                            End Select\r\n                        End I" +
        "f\r\n");

                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED)\r\n");

                         }
this.Write("                    End If\r\n                End Sub\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep) && step.ImplementsINCC && !step.ImplementsIObservableVector && !step.ImplementsIObservableMap)
                     {
this.Write("                Public Sub CollectionChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As object, e As ");

this.Write(this.ToStringHelper.ToStringWithCulture(NotifyCollectionChangedEventArgName(step)));

this.Write(")\r\n                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = TryCast(sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n");

                     Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                     if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED)\r\n");

                     }
this.Write("                    End If\r\n                End Sub\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableVector)
                     {
this.Write("                Public Sub VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As Global.Windows.Foundation.Collections.IObservableVector(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write("), e As Global.Windows.Foundation.Collections.IVectorChangedEventArgs)\r\n         " +
        "           Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = Nothing\r\n                    If bindings IsNot Nothing Then\r\n                 " +
        "       Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = TryCast(sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n");

                         Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED)\r\n");

                         }
this.Write("                    End If\r\n                End Sub\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableMap)
                     {
this.Write("                Public Sub MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As Global.Windows.Foundation.Collections.IObservableMap(Of String, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write("), e As Global.Windows.Foundation.Collections.IMapChangedEventArgs(Of String))\r\n " +
        "                   Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = TryCast(sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n");

                         Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED)\r\n");

                         }
this.Write("                    End If\r\n                End Sub\r\n");

                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                Public Sub DependencyPropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write("(sender As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".DependencyObject, prop As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".DependencyProperty)\r\n                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = TryCast(sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n");

                         PushIndent(Indent.FourTabs);
                         Output_Update_DataChanged_Step("bindings", child);
                         PopIndent();
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED)\r\n");

                         }
this.Write("                    End If\r\n                End Sub\r\n");

                     }
                     if (step.IsTrackingSource && step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                     {
this.Write("                Public Sub ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As Global.System.Object, e As ");

this.Write(this.ToStringHelper.ToStringWithCulture(DataErrorsEventArgName(step)));

this.Write(")\r\n                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     Dim propName As String = e.PropertyName\r\n                  " +
        "      If (Global.System.String.IsNullOrEmpty(propName)) Then\r\n");

                 foreach (var propertyStep in step.TrackingSteps.OfType<PropertyStep>())
                 {
                         Output_ApiInformationCall_Push(propertyStep.ApiInformation, Indent.FourTabs);
this.Write("                            bindings.UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyStep.PropertyName));

this.Write("\")\r\n");

                         Output_ApiInformationCall_Pop(propertyStep.ApiInformation, Indent.FourTabs);
                 }
this.Write("                        Else\r\n");

                         Output_ApiInformationCall_Push(step.ApiInformation, Indent.FourTabs);
this.Write("                            bindings.UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender, propName)\r\n");

                         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.FourTabs);
this.Write("                        End If\r\n                    End If\r\n                End S" +
        "ub\r\n");

                      }
                     // Register & unregister change notification generators 
                     Output_UpdateChildListeners(step, bindUniverse);
                 }
                 foreach (var e in bindUniverse.BoundElements.Where(e => e.TwoWayBindAssignments.Any())) { 
                     PushIndent(Indent.TwoTabs); 
                     Output_RegisterTwoWayListeners(e); 
                     PopIndent(); 
                 } 
 //End of _BindingsTracking class 
this.Write("            End Class\r\n");

             }
 //End of bindings class 
this.Write("        End Class\r\n");

         }
     }
     private void Output_UpdateChildListeners(BindPathStep step, BindUniverse bindUniverse)
     {
         if (step.NeedsUpdateChildListeners)
         {
             string cacheName = "bindings.dataRoot"; 
                     if (!(step is RootStep))
                     {
this.Write("                Private cache_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" = Nothing\r\n");

                 cacheName="cache_" +step.CodeName;
                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                Private tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(" As Long = 0\r\n");

                     }
                     if (step.RequiresChildNotification)
                     {
this.Write("                Public Sub UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(")\r\n");

                 if (!(step is RootStep))
                 {
this.Write("                    If obj IsNot ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" Then\r\n                        If ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" IsNot Nothing Then\r\n");

                 }
                 else
                 {
this.Write("                    Dim bindings As ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" = TryGetBindingObject()\r\n                    If bindings IsNot Nothing Then\r\n   " +
        "                     If ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" IsNot Nothing Then\r\n");

                 }
                         if (step.ImplementsINPC)
                         {
this.Write("                            RemoveHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(",");

this.Write(this.ToStringHelper.ToStringWithCulture(INPCInterfaceName(step)));

this.Write(").PropertyChanged, AddressOf PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                         }
                         if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                         {
this.Write("                            RemoveHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(",");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(").ErrorsChanged, AddressOf ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                         }
                         if (step.ImplementsIObservableVector)
                         {
this.Write("                            RemoveHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(", Global.Windows.Foundation.Collections.IObservableVector(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(")).VectorChanged, AddressOf VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                         }
                         if (step.ImplementsIObservableMap)
                         {
this.Write("                            RemoveHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(", Global.Windows.Foundation.Collections.IObservablemap(Of String, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(")).MapChanged, AddressOf MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                         }
                         else if (step.ImplementsINCC)
                         {
this.Write("                            RemoveHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(INCCInterfaceName(step)));

this.Write(").CollectionChanged, AddressOf CollectionChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                         }
                         foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                         {
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(".UnregisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property, tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(")\r\n");

                         }
                     if (!(step is RootStep))
                     {
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" = Nothing\r\n");

                     }
this.Write("                        End If\r\n                        If obj IsNot Nothing Then" +
        "\r\n                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" = obj\r\n");

                     if (step.ImplementsINPC)
                     {
this.Write("                            AddHandler DirectCast(obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(INPCInterfaceName(step)));

this.Write(").PropertyChanged, AddressOf PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                     }
                     if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                     {
this.Write("                            AddHandler DirectCast(");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(").ErrorsChanged, AddressOf ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                     }
                     if (step.ImplementsIObservableVector)
                     {
this.Write("                            AddHandler DirectCast(obj, Global.Windows.Foundation." +
        "Collections.IObservableVector(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(")).VectorChanged, AddressOf VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                     }
                     if (step.ImplementsIObservableMap)
                     {
this.Write("                            AddHandler DirectCast(obj, Global.Windows.Foundation." +
        "Collections.IObservableMap(Of String, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(")).MapChanged, AddressOf MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                     }
                     else if (step.ImplementsINCC)
                     {
this.Write("                            AddHandler DirectCast(obj, Global.System.Collections." +
        "Specialized.INotifyCollectionChanged).CollectionChanged, AddressOf CollectionCha" +
        "nged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("\r\n");

                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                            tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(" = obj.RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property, AddressOf DependencyPropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(")\r\n");

                     }
this.Write("                        End If\r\n                    End If\r\n                End S" +
        "ub\r\n");

             }
         }
     }
 private void Output_RegisterTwoWayListeners(ConnectionIdElement element)
 {
this.Write("        Public Sub RegisterTwoWayListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("(sourceObject as ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")\r\n");

     foreach (var ba in element.TwoWayBindAssignments) { 
         Output_ApiInformationCall_Push(ba.ApiInformation, Indent.None); 
         if (ba.NeedsLostFocusForTwoWay) { 
this.Write("            AddHandler sourceObject.LostFocus, Sub(sender, e)\r\n");

         } else { 
this.Write("            sourceObject.RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("Property, Sub(sender, prop)\r\n");

         }
this.Write("                Dim bindingObj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.BindUniverse.BindingsClassName));

this.Write(" = Me.TryGetBindingObject()\r\n                If bindingObj IsNot Nothing Then\r\n  " +
        "                  bindingObj.UpdateTwoWay_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("()\r\n                End If\r\n            End Sub");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.NeedsLostFocusForTwoWay ? "" : ")"));

this.Write("\r\n");

         Output_ApiInformationCall_Pop(ba.ApiInformation, Indent.None); 
     } 
this.Write("        End Sub\r\n");

 } 
 private void Output_UpdateTwoWay(BindAssignment ba)
 {
this.Write("            Private Sub UpdateTwoWay_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ConnectionId));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("()\r\n                If Me.initialized Then\r\n");

         MethodStep bindBackStep = ba.BindBackStep as MethodStep; 
         if (bindBackStep != null)
         {
             var param = bindBackStep.Parameters[0]; 
this.Write("                    Dim ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ReverseAssignmentExpression));

this.Write("\r\n");

                 Output_NullCheckedAssignment(bindBackStep, null);
         }
         else
         {
                 Output_NullCheckedAssignment(ba.PathStep, ba.ReverseAssignmentExpression);
         }
this.Write("                End If\r\n            End Sub\r\n");

 } 
 void  Output_NullCheckedAssignment(BindPathStep step, LanguageSpecificString value) 
 { 
     PushIndent(Indent.TwoTabs);
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
this.Write("            If ");

this.Write(this.ToStringHelper.ToStringWithCulture(parent.CodeGen().PathExpression));

this.Write(" IsNot Nothing Then\r\n");

         PushIndent(); 
     } 
     if (value != null) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathSetExpression(value)));

this.Write("\r\n");

     } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write("\r\n");

     } 
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
         PopIndent(); 
this.Write("            End If\r\n");

     } 
     PopIndent();
 } 
 void Output_UpdateErrors(BindUniverse bindUniverse) 
 { 
     PushIndent(Indent.TwoTabs);
     var twoWayWithIndeiSteps =  bindUniverse.INDEIPathSteps; 
     if (twoWayWithIndeiSteps.Any(step => step.ValueType.ImplementsXamlINotifyDataErrorInfo())) { 
this.Write("    Private Sub UpdateErrors_(control As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".Control, sender As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlData)));

this.Write(".INotifyDataErrorInfo, propertyName As Global.System.String)\r\n        If sender I" +
        "sNot Nothing Then\r\n            UpdateInputValidationErrors(control, sender.GetEr" +
        "rors(propertyName))\r\n        End If\r\n    End Sub\r\n");

     }
this.Write(" \r\n");

     if (twoWayWithIndeiSteps.Any(step => step.ImplementsINDEI && !step.ValueType.ImplementsXamlINotifyDataErrorInfo())) { 
this.Write("    Private Sub UpdateErrors_(control As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(@".Control, sender As Global.System.ComponentModel.INotifyDataErrorInfo, propertyName As Global.System.String)
        If sender IsNot Nothing Then
            UpdateInputValidationErrors(control, sender.GetErrors(propertyName))
        End If
    End Sub
");

     }
     if (twoWayWithIndeiSteps.Any()) { 
this.Write("\r\n    Private Sub UpdateInputValidationErrors(control As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".Control, modelErrors As Global.System.Collections.IEnumerable)\r\n        Dim vali" +
        "dationControl As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".IInputValidationControl = TryCast(control, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".IInputValidationControl)\r\n        If validationControl IsNot Nothing Then\r\n     " +
        "       Dim inputValidationErrors As Global.Windows.Foundation.Collections.IObser" +
        "vableVector(Of ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".InputValidationError) = validationControl.ValidationErrors\r\n            inputVal" +
        "idationErrors.Clear()\r\n\r\n            For Each modelError As Global.System.Object" +
        " In modelErrors\r\n                Dim validationError As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".InputValidationError = TryCast(modelError, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".InputValidationError)\r\n                If validationError Is Nothing Then\r\n     " +
        "               validationError = New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControls)));

this.Write(".InputValidationError(modelError.ToString())\r\n                End If\r\n           " +
        "     inputValidationErrors.Add(validationError)\r\n            Next\r\n        End I" +
        "f\r\n    End Sub\r\n");

 } 
     foreach (BindPathStep step in twoWayWithIndeiSteps)
     {
this.Write("    Private Sub UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(sender As ");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(", propertyName As Global.System.String)\r\n        If Me.initialized Then\r\n        " +
        "    Select Case propertyName\r\n");

         foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
         {
this.Write("                Case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\"\r\n");

                 PushIndent(Indent.ThreeTabs);
                 foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                     Output_UpdateErrorsCall(child);
                 } 
                 PopIndent();
this.Write("                    Exit Select\r\n");

         }
this.Write("                Case Else\r\n                    Return\r\n                End Select" +
        "\r\n        End If\r\n    End Sub\r\n\r\n");

     } 
     PopIndent();
 } 
 void Output_UpdateErrorsCall(PropertyStep step) 
 { 
  foreach (var ba in step.AssociatedBindAssignments.Where(ba => ba.IsTrackingTarget)) {
this.Write("        UpdateErrors_(");

this.Write(this.ToStringHelper.ToStringWithCulture((ba as BindAssignmentBase).ConnectionIdElement.ObjectCodeName));

this.Write(", sender, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(step.PropertyName));

this.Write("\")\r\n");

  }
  }
     private void Output_Binding_SetValue_Function(BindAssignment ba)
     {
         if (ba.MemberType.IsNullable)
         {
this.Write("            Public Shared Sub Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(", value As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(", targetNullValue As String)\r\n                If value Is Nothing AndAlso targetN" +
        "ullValue IsNot Nothing Then\r\n");

             if (ba.MemberType.IsString())
             {
this.Write("                    value = targetNullValue\r\n");

             }
             else
             {
this.Write("                    value = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType.GetStringToThing("targetNullValue")));

this.Write("\r\n");

             }
this.Write("                End If\r\n");

         }
         else
         {
this.Write("            Public Shared Sub Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(", value As ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(")\r\n");

         }
         if (ba.IsAttachable)
         {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj, value)\r\n");

         }
         else if (ba.MemberType.IsString())
         {
                 // We cannot pass null .Net types to WinRT, so we decided to "fix" them to match what CX does. 
this.Write("                obj.");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write(" = If (value, Global.System.String.Empty)\r\n");

         }
         else
         {
this.Write("                obj.");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write(" = value\r\n");

         }
this.Write("            End Sub\r\n");

     }
 private void Output_Binding_Phased_SetValue(int phase, bool isTracking, BindPathStep bindStep, bool isFunctionResult)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition = GetDirectPhaseCondition(phase, isTracking); 
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(" Then\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue(bindAssignment, isFunctionResult);
         }
         PopIndent();
this.Write("                End If\r\n");

     }
 }
 private void Output_Binding_Phased_Fallback_SetValue(int phase, bool isTracking, BindPathStep bindStep)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking && ba.BindStatus.HasFlag(BindStatus.HasFallbackValue) select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(" Then\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, bindAssignment.FallbackValueExpression.VBName(), true);
         }
         PopIndent();
this.Write("                End If\r\n");

     }
 }
     private void Output_Binding_SetValue(BindAssignment bindAssignment, bool isFunctionResult)
     {
         if (bindAssignment.PathStep is FunctionStep && !isFunctionResult)
         {
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(" = False Then\r\n");

                 PushIndent();
             }
this.Write("                Me.PendingFunctionBindings(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write("\") = New InvokeFunctionDelegate(AddressOf Me.Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write(")\r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
                 PopIndent();
this.Write("                End If\r\n");

             }
         }
         else
         {
             string value = bindAssignment.DirectAssignmentExpression(isFunctionResult ? "result" : "obj").VBName();
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, value, true);
         }
     }
     private void Output_Binding_SetValue_Non_Function_Call(BindAssignment bindAssignment, string value, bool includeDeferredSet)
     {
         ConnectionIdElement element = bindAssignment.ConnectionIdElement;
         string objRef = element.ReferenceExpression.VBName();
         if (ProjectInfo.ShouldGenerateDisableXBind) 
         {
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(" = False Then\r\n");

             PushIndent();
         }
         Output_ApiInformationCall_Push(bindAssignment.ApiInformation, Indent.OneTab); 
         if (bindAssignment is BoundLoadAssignment) { 
             if (includeDeferredSet) { 
this.Write("                Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write("\r\n\r\n");

             }
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(" Then\r\n");

             if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("                    dataRoot.FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\")\r\n");

             } else { 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.BindUniverse.RootElement.ReferenceExpression));

this.Write(".FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\")\r\n");

             }
this.Write("                Else\r\n");

             if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("                    dataRoot.UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(")\r\n");

             } else { 
this.Write("                    If ");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(" IsNot Nothing Then\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".XamlMarkupHelper.UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(")\r\n                    End If\r\n                    Me.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(")\r\n");

             }
this.Write("                End If\r\n");

         } else { 
             if (element.NeedsNullCheckBeforeSetValue) { 
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(" IsNot Nothing Then\r\n");

             PushIndent();
             }
             if (bindAssignment.MemberType.IsNullable) { 
this.Write("                XamlBindingSetters.Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.TargetNullValueExpression));

this.Write(")\r\n");

             } else {
this.Write("                XamlBindingSetters.Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(")\r\n");

             }
             if (element.NeedsNullCheckBeforeSetValue) { 
                 PopIndent();
                 if (includeDeferredSet && element.CanBeInstantiatedLater) { 
this.Write("                Else\r\n                    Me.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write("\r\n");

                 }
this.Write("                End If\r\n");

             }
         }
         Output_ApiInformationCall_Pop(bindAssignment.ApiInformation, Indent.OneTab); 
         if (ProjectInfo.ShouldGenerateDisableXBind) 
         {
             PopIndent();
this.Write("                End If\r\n");

         }
     }
 private void Output_Update_DataChanged_Step(string context, BindPathStep step)
 {
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("        If obj IsNot Nothing Then\r\n");

     }
     Output_UpdateCall(context, step, KnownStrings.DataChanged);
     if (step.Parent.ValueType.IsNullable) 
     {
         if (step.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
         {
this.Write("        Else\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(DATA_CHANGED)\r\n");

         }
this.Write("        End If\r\n");

     }
 }
 private void Output_Update_Steps(bool checkForNull, string context, IEnumerable<BindPathStep> steps, bool checkPhaseCondition, string phaseParam)
 {
     if (steps.Count() > 0) 
     {
         PushIndent();
         if (checkForNull)
         {
             PushIndent();
this.Write("        If obj IsNot Nothing Then\r\n");

         }
         List<BindPathStep> stepsWithFallback = new List<BindPathStep>();
         string lastCondition = null;
         foreach (BindPathStep childStep in (from step in steps where step.IsIncludedInUpdate orderby step.PhaseList select step))
         {
             if(checkPhaseCondition)
             {
                 string thisCondition = GetPhaseCondition(childStep);
                 if (thisCondition != lastCondition)
                 {
                     if (lastCondition != null)
                     {
this.Write("            End If\r\n");

                     }
                     lastCondition = thisCondition;
this.Write("            If ");

this.Write(this.ToStringHelper.ToStringWithCulture(thisCondition));

this.Write(" Then\r\n");

                 }
                 PushIndent();
                 Output_UpdateCall(context, childStep, phaseParam);
                 PopIndent();
             }
             else
             {
                 if (lastCondition != null)
                 {
this.Write("            End If\r\n");

                 }
                 lastCondition = null;
                 Output_UpdateCall(context, childStep, phaseParam);
             }
             if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
             {
               stepsWithFallback.Add(childStep);
             }
         }
                 if (lastCondition != null)
                 {
this.Write("            End If\r\n");

                 }
         if (checkForNull) 
         {
             if (stepsWithFallback.Count > 0) 
             {
this.Write("        Else\r\n");

                 foreach (BindPathStep childStep in stepsWithFallback)
                 {
                     if(checkPhaseCondition)
                     {
this.Write("            If ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetPhaseCondition(childStep)));

this.Write(" Then\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(")\r\n            End If\r\n");

                     }
                     else
                     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(")\r\n");

                     }
                 }
             }
this.Write("        End If\r\n");

             PopIndent();
         }
         PopIndent();
     }
 }
 private string GetUpdateParams(BindPathStep bindStep)
 {
     if (bindStep is FunctionStep)
     {
         return "phase As Integer";
     }
     else
     {
         return "obj As " + bindStep.ValueType.VBName() + ", phase As Integer";
     }
 }
 private void Output_Custom_Update_Call(string context, BindPathStep step, string firstArgument, string phaseParam)
 {
     if (string.IsNullOrEmpty(firstArgument))
     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(")\r\n");

     }
     else
     {
         Output_ApiInformationCall_Push(step.ApiInformation, Indent.None);
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(firstArgument));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(")\r\n");

         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.None);
     }
 }
 private void Output_UpdateCall(string context, BindPathStep step, string phaseParam)
 {
     string firstArgument = step.CodeGen().UpdateCallParam.VBName(); 
     Output_Custom_Update_Call(context, step, firstArgument, phaseParam); 
 }
 private void Output_CompleteUpdate(BindUniverse bindUniverse)
 {
     List<string> conditions = new List<string>();
     bool needsLoop = bindUniverse.UnloadableBindingSourceElements.Any(); 
this.Write("\r\n            Private Sub CompleteUpdate(phase As Integer)\r\n");

     if (needsLoop) { 
this.Write("                Do\r\n");

         PushIndent(); 
     } 
     if (bindUniverse.HasFunctionBindings) {
this.Write(@"                Dim functions As Global.System.Collections.Generic.Dictionary(Of string, InvokeFunctionDelegate) = Me.PendingFunctionBindings
                Me.PendingFunctionBindings = New Global.System.Collections.Generic.Dictionary(Of string, InvokeFunctionDelegate)()
                For Each func As InvokeFunctionDelegate In functions.Values
                    func.Invoke(phase)
                Next
");

         conditions.Add("Me.PendingFunctionBindings.Count > 0"); 
     } 
     if (bindUniverse.UnloadableBindingSourceElements.Any()) {
this.Write("                Do While Me.UnloadableBindingSourcesToUpdate.Count > 0\r\n         " +
        "           Me.UnloadableBindingSourcesToUpdate.Dequeue()()\r\n                Loop" +
        "\r\n");

         conditions.Add("Me.UnloadableBindingSourcesToUpdate.Count > 0"); 
     } 
     if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) {
this.Write("                Do While Me.UnloadedElementsToUpdate.Count > 0\r\n                 " +
        "   Me.UpdateUnloadedElement(Me.UnloadedElementsToUpdate.Dequeue())\r\n            " +
        "    Loop\r\n");

         conditions.Add("Me.UnloadedElementsToUpdate.Count > 0"); 
     } 
     if (needsLoop) { 
         PopIndent(); 
this.Write("                Loop While ");

this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" Or ", conditions)));

this.Write("\r\n");

     } 
this.Write("            End Sub\r\n");

 } 
 private void Output_FunctionBindings(BindUniverse bindUniverse)
 {
this.Write(@"
            Private Delegate Sub InvokeFunctionDelegate(phase As Integer)
            Private PendingFunctionBindings As Global.System.Collections.Generic.Dictionary(Of string, InvokeFunctionDelegate) = New Global.System.Collections.Generic.Dictionary(Of string, InvokeFunctionDelegate)()
");

     foreach (FunctionStep functionStep in bindUniverse.BindPathSteps.Values.Where(s => s is FunctionStep))
     {
this.Write("\r\n            Private Sub Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeName));

this.Write("(phase As Integer)\r\n");

         foreach (var param in functionStep.Parameters.OrderBy(p => p.HasTryGetValue)) {
             if (param.HasTryGetValue && functionStep.RequiresSafeParameterRetrieval) {
this.Write("                Dim ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.AssignmentType));

this.Write(" = Nothing\r\n                If Not ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.TryGetValueCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(") Then Return\r\n");

             } else {
this.Write("                Dim ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.ValueType));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.CodeGen().PathExpression));

this.Write("\r\n");

             }
         }
this.Write("                Dim result As ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.ValueType));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeGen().PathExpression));

this.Write("\r\n");

         foreach (int distinctPhase in functionStep.DistinctPhases) {
             Output_Binding_Phased_SetValue(distinctPhase, true, functionStep, true);
             Output_Binding_Phased_SetValue(distinctPhase, false, functionStep, true);
         }
this.Write("            End Sub\r\n");

     }
 }
 private void Output_TryGetValueFunctions(BindUniverse bindUniverse)
 {
     foreach (BindPathStep step in bindUniverse.TryGetValueSteps)
     {
this.Write("\r\n            Private Function ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.TryGetValueCodeName));

this.Write("(<Global.System.Runtime.InteropServices.Out()> ByRef val As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(") As Boolean\r\n");

         if (step is RootStep || !step.Parent.IsIncludedInUpdate) {
this.Write("                val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write("\r\n                Return True\r\n");

         }
         else {
this.Write("                Dim obj As ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.ValueType));

this.Write(" = Nothing\r\n");

             if (step.Parent.ValueType.IsNullable) {
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj) And obj IsNot Nothing Then\r\n");

             } else { 
this.Write("                If ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj) Then\r\n");

             } 
this.Write("                    val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().UpdateCallParam));

this.Write("\r\n                    Return True\r\n                Else\r\n                    val " +
        "= Nothing\r\n                    Return False\r\n                End If\r\n");

         }
this.Write("            End Function\r\n");

     }
 }
 private void Output_ApiInformationCall_Push(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PushIndent(indent); 
this.Write("            If ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(" Then\r\n");

         PopIndent(); 
         PushIndent(); 
     } 
 } 
 private void Output_ApiInformationCall_Pop(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PopIndent(); 
         PushIndent(indent); 
this.Write("            End If\r\n");

         PopIndent(); 
     } 
 } 
 private void Output_ApiInformationDeclarations()
 {
     if (Model.ApiInformationDeclarations.Any()) { 
this.Write("\r\n        \' Api Information for conditional namespace declarations\r\n");

     } 
     foreach (var apiInformation in Model.ApiInformationDeclarations) { 
this.Write("        Shared ");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(" as Boolean = ");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.CodeGen().CallExpression));

this.Write("\r\n");

     } 
 } 
    }
}
