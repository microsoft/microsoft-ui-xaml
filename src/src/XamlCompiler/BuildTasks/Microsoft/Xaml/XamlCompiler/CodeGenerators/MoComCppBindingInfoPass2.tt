<#@ template language="C#" inherits="CppCX_CodeGenerator<BindingInfoDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { #>
#include "<#=ProjectInfo.PrecompiledHeaderFile#>"
<#  }#>
#include "XamlBindingInfo.g.h"

// XamlBindings

::XamlBindingInfo::XamlBindings::XamlBindings(::XamlBindingInfo::IXamlBindings* pBindings)
    : _pBindings(pBindings)
{
    _pBindings->SetOwningBindingsClass(this);
}

::XamlBindingInfo::XamlBindings::~XamlBindings()
{
    delete _pBindings;
}

void ::XamlBindingInfo::XamlBindings::Initialize()
{
    if (!this->_pBindings->IsInitialized())
    { 
        this->_pBindings->Update();
    }
}

void ::XamlBindingInfo::XamlBindings::Update()
{
    this->_pBindings->Update();
}

void ::XamlBindingInfo::XamlBindings::StopTracking()
{
    this->_pBindings->StopTracking();
}

void ::XamlBindingInfo::XamlBindings::Loading(<#=Projection(KnownNamespaces.Xaml)#>::FrameworkElement^, ::Platform::Object^)
{
    this->Initialize();
}

void ::XamlBindingInfo::XamlBindings::DataContextChanged(<#=Projection(KnownNamespaces.Xaml)#>::FrameworkElement^, <#=Projection(KnownNamespaces.Xaml)#>::DataContextChangedEventArgs^ args)
{
    if (this->_pBindings->SetDataRoot(args->NewValue))
    {
        this->Update();
    }
}

void ::XamlBindingInfo::XamlBindings::SubscribeForDataContextChanged(<#=Projection(KnownNamespaces.Xaml)#>::FrameworkElement^ object)
{
    this->_pBindings->SubscribeForDataContextChanged(object, this);
}

void ::XamlBindingInfo::XamlBindings::DisconnectUnloadedObject(int connectionId)
{
    this->_pBindings->DisconnectUnloadedObject(connectionId);
}

void ::XamlBindingInfo::XamlBindings::Connect(int connectionId, ::Platform::Object^ target)
{
    this->_pBindings->Connect(connectionId, target);
}

bool ::XamlBindingInfo::XamlBindings::ProcessBinding(unsigned int)
{
    throw ref new ::Platform::NotImplementedException();
}

int ::XamlBindingInfo::XamlBindings::ProcessBindings(<#=Projection(KnownNamespaces.XamlControls)#>::ContainerContentChangingEventArgs^ args)
{
    int nextPhase = -1;
    int phase = static_cast<int>(args->Phase);
    if (phase < 0)
    {
        throw ref new ::Platform::InvalidArgumentException();
    }
    this->_pBindings->ProcessBindings(args->Item, args->ItemIndex, phase, &nextPhase);
    return nextPhase;
}

void ::XamlBindingInfo::XamlBindings::ResetTemplate()
{
    this->_pBindings->Recycle();
}

void ::XamlBindingInfo::XamlBindings::ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
{
    this->_pBindings->ProcessBindings(item, itemIndex, phase, nextPhase);
}

void ::XamlBindingInfo::XamlBindings::Recycle()
{
    this->_pBindings->Recycle();
}

<#  if (ProjectInfo.ShouldGenerateDisableXBind) #>
<#  { #>
void ::XamlBindingInfo::XamlBindings::Disable(int lineNumber, int columnNumber)
{
    this->_pBindings->Disable(lineNumber, columnNumber);
}
<#  } #>

<#=Projection(KnownNamespaces.XamlMarkup)#>::IComponentConnector^ ::XamlBindingInfo::XamlBindings::GetBindingConnector(int connectionId, ::Platform::Object^ target)
{
    return this->_pBindings->GetBindingConnector(connectionId, target);
}

::XamlBindingInfo::XamlBindings^ ::XamlBindingInfo::XamlBindings::GetParent()
{
    return this->_pBindings->GetParent();
}

void ::XamlBindingInfo::XamlBindings::SetParent(::XamlBindingInfo::XamlBindings^ parent)
{
    this->_pBindings->SetParent(parent);
}

bool ::XamlBindingInfo::XamlBindings::ContainsElement(int connectionId)
{
    return this->_pBindings->ContainsElement(connectionId);
}

void ::XamlBindingInfo::XamlBindings::RegisterForElementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector)
{
    this->_pBindings->RegisterForElementConnection(connectionId, connector);
}

// XamlBindingTrackingBase

::XamlBindingInfo::XamlBindingTrackingBase::XamlBindingTrackingBase()
{
}

void ::XamlBindingInfo::XamlBindingTrackingBase::SetListener(::XamlBindingInfo::IXamlBindingTracking* pBindings)
{
    this->_pBindingsTrackingWeakRef = pBindings;
}

void ::XamlBindingInfo::XamlBindingTrackingBase::PropertyChanged(Platform::Object^ sender, <#=Projection(KnownNamespaces.XamlData)#>::PropertyChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->PropertyChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::CollectionChanged(::Platform::Object^ sender, <#=Projection(KnownNamespaces.XamlInterop)#>::NotifyCollectionChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->CollectionChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::DependencyPropertyChanged(<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^ sender, <#=Projection(KnownNamespaces.Xaml)#>::DependencyProperty^ prop)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->DependencyPropertyChanged(sender, prop);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->VectorChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->MapChanged(sender, e);
    }
}
<# if (ProjectInfo.IsInputValidationEnabled) {#>

void ::XamlBindingInfo::XamlBindingTrackingBase::ErrorsChanged(::Platform::Object^ sender, <#=Projection(KnownNamespaces.XamlData)#>::DataErrorsChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->ErrorsChanged(sender, e);
    }
}
<# } #>

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdatePropertyChangedListener(<#=Projection(KnownNamespaces.XamlData)#>::INotifyPropertyChanged^ obj, <#=Projection(KnownNamespaces.XamlData)#>::INotifyPropertyChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->PropertyChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->PropertyChanged += ref new <#=Projection(KnownNamespaces.XamlData)#>::PropertyChangedEventHandler(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::PropertyChanged);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdatePropertyChangedListener(<#=Projection(KnownNamespaces.XamlData)#>::INotifyPropertyChanged^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    <#=Projection(KnownNamespaces.XamlData)#>::INotifyPropertyChanged^ cache = cacheRef.Resolve<<#=Projection(KnownNamespaces.XamlData)#>::INotifyPropertyChanged>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->PropertyChanged -= *pToken;
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->PropertyChanged += ref new <#=Projection(KnownNamespaces.XamlData)#>::PropertyChangedEventHandler(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::PropertyChanged);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateCollectionChangedListener(<#=Projection(KnownNamespaces.XamlInterop)#>::INotifyCollectionChanged^ obj, <#=Projection(KnownNamespaces.XamlInterop)#>::INotifyCollectionChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->CollectionChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->CollectionChanged += ref new <#=Projection(KnownNamespaces.XamlInterop)#>::NotifyCollectionChangedEventHandler(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::CollectionChanged);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateDependencyPropertyChangedListener(<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^ obj, <#=Projection(KnownNamespaces.Xaml)#>::DependencyProperty^ property, <#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^* pCache, __int64* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->UnregisterPropertyChangedCallback(property, *pToken);
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->RegisterPropertyChangedCallback(property, ref new <#=Projection(KnownNamespaces.Xaml)#>::DependencyPropertyChangedCallback(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::DependencyPropertyChanged));
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateDependencyPropertyChangedListener(<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^ obj, <#=Projection(KnownNamespaces.Xaml)#>::DependencyProperty^ property, ::Platform::WeakReference& cacheRef, __int64* pToken)
{
    <#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^ cache = cacheRef.Resolve<<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->UnregisterPropertyChangedCallback(property, *pToken);
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->RegisterPropertyChangedCallback(property, ref new <#=Projection(KnownNamespaces.Xaml)#>::DependencyPropertyChangedCallback(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::DependencyPropertyChanged));
    }
}
<# if (ProjectInfo.IsInputValidationEnabled) {#>
void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateErrorsChangedListener(<#=Projection(KnownNamespaces.XamlData)#>::INotifyDataErrorInfo^ obj, <#=Projection(KnownNamespaces.XamlData)#>::INotifyDataErrorInfo^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->ErrorsChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->ErrorsChanged += ref new ::Windows::Foundation::EventHandler<<#=Projection(KnownNamespaces.XamlData)#>::DataErrorsChangedEventArgs^>(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::ErrorsChanged);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateErrorsChangedListener(<#=Projection(KnownNamespaces.XamlData)#>::INotifyDataErrorInfo^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    <#=Projection(KnownNamespaces.XamlData)#>::INotifyDataErrorInfo^ cache = cacheRef.Resolve<<#=Projection(KnownNamespaces.XamlData)#>::INotifyDataErrorInfo>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->ErrorsChanged -= *pToken;
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->ErrorsChanged += ref new ::Windows::Foundation::EventHandler<<#=Projection(KnownNamespaces.XamlData)#>::DataErrorsChangedEventArgs^>(
            this, &::XamlBindingInfo::XamlBindingTrackingBase::ErrorsChanged);
    }
}
<# } #>
