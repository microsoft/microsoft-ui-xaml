// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppAppPass2 : CppCX_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
 Output_IncludeFiles_CPP(); 
            this.Write("\r\n\r\n#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCE" +
                    "PTION\r\nextern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();\r\n#end" +
                    "if\r\n\r\n");
 if (ProjectInfo.VSDesignerDontLoadAsDll) { 
            this.Write("#define _VSDESIGNER_DONT_LOAD_AS_DLL\r\n");
 } 
            this.Write(@"
#if (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)
#if defined(_M_IX86)
#pragma comment(linker, ""/EXPORT:DllGetActivationFactory=_DllGetActivationFactory@8,PRIVATE"")
#pragma comment(linker, ""/EXPORT:DllCanUnloadNow=_DllCanUnloadNow@0,PRIVATE"")
#pragma comment(linker, ""/EXPORT:VSDesignerDllMain=_VSDesignerDllMain@12,PRIVATE"")
#pragma comment(linker, ""/INCLUDE:___refMTAThread"")
#elif defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)
#pragma comment(linker, ""/EXPORT:DllGetActivationFactory=DllGetActivationFactory,PRIVATE"")
#pragma comment(linker, ""/EXPORT:DllCanUnloadNow,PRIVATE"")
#pragma comment(linker, ""/EXPORT:VSDesignerDllMain,PRIVATE"")
#pragma comment(linker, ""/INCLUDE:__refMTAThread"")
#endif

extern int __abi___threading_model;

extern ""C""
{
    int __stdcall _DllMainCRTStartup(void* hinstDLL, unsigned long fdwReason, void** lpvReserved);

    int __stdcall VSDesignerDllMain(void* hinstDLL, unsigned long fdwReason, void** lpvReserved)
    {
        __abi___threading_model = _VCCORLIB_THREADING_MODEL_OVERRIDE;
        return _DllMainCRTStartup(hinstDLL, fdwReason, lpvReserved);
    }
}

#endif // (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)

void ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("::InitializeComponent()\r\n{\r\n    ::Windows::Foundation::Uri^ resourceLocator = ref" +
                    " new ::Windows::Foundation::Uri(L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)));
            this.Write("\");\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::Application::LoadComponent(this, resourceLocator);\r\n\r\n#if defined _DEBUG && !de" +
                    "fined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION\r\n    UnhandledExceptio" +
                    "n += ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::UnhandledExceptionEventHandler(\r\n        [](::Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::UnhandledExceptionEventArgs^ e)
        {
            (void)sender; // Unused parameter
            if (IsDebuggerPresent())
            {
                ::Platform::String^ errorMessage = e->Message;
                __debugbreak();
            }
        });
#endif
}

");
  if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
  {
            this.Write("void  ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("::AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider)\r\n{\r\n    _AppProvider->AddOtherProvider(ot" +
                    "herProvider);\r\n}\r\n\r\n");
  }
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("::GetXamlType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName type)\r\n{\r\n    return _AppProvider->GetXamlTypeByType(type);\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("::GetXamlType(::Platform::String^ fullName)\r\n{\r\n    return _AppProvider->GetXamlT" +
                    "ypeByName(fullName);\r\n}\r\n\r\n::Platform::Array<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XmlnsDefinition>^ ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("::GetXmlnsDefinitions()\r\n{\r\n    return ref new ::Platform::Array<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XmlnsDefinition>(0);\r\n}\r\n\r\n::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ " +
                    "::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write(@"::_AppProvider::get()
{
    if (__provider == nullptr)
    {
        __provider = ref new ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider();
    }
    return __provider;
}

#ifndef DISABLE_XAML_GENERATED_MAIN
int __cdecl main(::Platform::Array<::Platform::String^>^ args)
{
    (void)args; // Unused parameter
    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::Application::Start(ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::ApplicationInitializationCallback(\r\n        [](");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::ApplicationInitializationCallbackParams^ p) {\r\n            (void)p; // Unused p" +
                    "arameter\r\n            auto app = ref new ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.ClassName.FullName)));
            this.Write("();\r\n        }));\r\n}\r\n#endif\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
 
     private void Output_IncludeFiles_CPP()
     {
             foreach(string includeFile in Model.NeededLocalXamlHeaderFiles)
              {
this.Write("#include \"");

this.Write(this.ToStringHelper.ToStringWithCulture(includeFile));

this.Write("\"\r\n");

              }
     }
    }
}
