<#@ template language="C#" inherits="CppCX_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

<#  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { #>
#include "<#=ProjectInfo.PrecompiledHeaderFile#>"
<#  }#>
<# Output_IncludeFiles_CPP(); #>


#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

<# if (ProjectInfo.VSDesignerDontLoadAsDll) { #>
#define _VSDESIGNER_DONT_LOAD_AS_DLL
<# } #>

#if (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)
#if defined(_M_IX86)
#pragma comment(linker, "/EXPORT:DllGetActivationFactory=_DllGetActivationFactory@8,PRIVATE")
#pragma comment(linker, "/EXPORT:DllCanUnloadNow=_DllCanUnloadNow@0,PRIVATE")
#pragma comment(linker, "/EXPORT:VSDesignerDllMain=_VSDesignerDllMain@12,PRIVATE")
#pragma comment(linker, "/INCLUDE:___refMTAThread")
#elif defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)
#pragma comment(linker, "/EXPORT:DllGetActivationFactory=DllGetActivationFactory,PRIVATE")
#pragma comment(linker, "/EXPORT:DllCanUnloadNow,PRIVATE")
#pragma comment(linker, "/EXPORT:VSDesignerDllMain,PRIVATE")
#pragma comment(linker, "/INCLUDE:__refMTAThread")
#endif

extern int __abi___threading_model;

extern "C"
{
    int __stdcall _DllMainCRTStartup(void* hinstDLL, unsigned long fdwReason, void** lpvReserved);

    int __stdcall VSDesignerDllMain(void* hinstDLL, unsigned long fdwReason, void** lpvReserved)
    {
        __abi___threading_model = _VCCORLIB_THREADING_MODEL_OVERRIDE;
        return _DllMainCRTStartup(hinstDLL, fdwReason, lpvReserved);
    }
}

#endif // (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)

void ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::InitializeComponent()
{
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"<#=Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)#>");
    <#=Projection(KnownNamespaces.Xaml)#>::Application::LoadComponent(this, resourceLocator);

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
    UnhandledException += ref new <#=Projection(KnownNamespaces.Xaml)#>::UnhandledExceptionEventHandler(
        [](::Platform::Object^ sender, <#=Projection(KnownNamespaces.Xaml)#>::UnhandledExceptionEventArgs^ e)
        {
            (void)sender; // Unused parameter
            if (IsDebuggerPresent())
            {
                ::Platform::String^ errorMessage = e->Message;
                __debugbreak();
            }
        });
#endif
}

<#  if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#  {#>
void  ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider)
{
    _AppProvider->AddOtherProvider(otherProvider);
}

<#  }#>
<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::GetXamlType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName type)
{
    return _AppProvider->GetXamlTypeByType(type);
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::GetXamlType(::Platform::String^ fullName)
{
    return _AppProvider->GetXamlTypeByName(fullName);
}

::Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>^ ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::GetXmlnsDefinitions()
{
    return ref new ::Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>(0);
}

::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>::_AppProvider::get()
{
    if (__provider == nullptr)
    {
        __provider = ref new ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider();
    }
    return __provider;
}

#ifndef DISABLE_XAML_GENERATED_MAIN
int __cdecl main(::Platform::Array<::Platform::String^>^ args)
{
    (void)args; // Unused parameter
    <#=Projection(KnownNamespaces.Xaml)#>::Application::Start(ref new <#=Projection(KnownNamespaces.Xaml)#>::ApplicationInitializationCallback(
        [](<#=Projection(KnownNamespaces.Xaml)#>::ApplicationInitializationCallbackParams^ p) {
            (void)p; // Unused parameter
            auto app = ref new ::<#=Colonize(Model.CodeInfo.ClassName.FullName)#>();
        }));
}
#endif

<#+ #>


<#+     private void Output_IncludeFiles_CPP()#>
<#+     {#>
<#+             foreach(string includeFile in Model.NeededLocalXamlHeaderFiles)#>
<#+              {#>
#include "<#=includeFile#>"
<#+              }#>
<#+     }#>
