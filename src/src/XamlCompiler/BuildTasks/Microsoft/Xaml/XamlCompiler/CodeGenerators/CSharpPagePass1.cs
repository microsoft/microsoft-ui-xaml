// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CSharpPagePass1 : CSharp_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#pragma checksum \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\"\r\n");
  }   
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.Namespace));
            this.Write("\r\n{\r\n    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write(" : global::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.BaseTypeName));
            this.Write("\r\n    {\r\n\r\n");
 Output_xProperties(); 
            this.Write("\r\n");
 Output_FieldDefinitions(); 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        private bool _contentLoaded;\r\n\r\n");
 Output_InitializeComponent(); 
            this.Write("\r\n");
 if (Model.CodeInfo.BindStatus != BindStatus.None) 
 { 
      Output_BindingsHeader(); 
 } 
            this.Write("    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
     private void Output_InitializeComponent() 
     { 
         string defaultUri = Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath); 
this.Write("        /// <summary>\r\n        /// InitializeComponent()\r\n        /// </summary>\r" +
        "\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public void InitializeComponent()\r\n        {\r\n");

         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) 
         { 
this.Write("            this.InitializeComponent(null);\r\n        }\r\n\r\n        /// <summary>\r\n" +
        "        /// InitializeComponent()\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public void InitializeComponent(global::System.Uri resourceLocator)\r\n  " +
        "      {\r\n");

         } 
this.Write("            if (_contentLoaded)\r\n                return;\r\n\r\n            _contentL" +
        "oaded = true;\r\n\r\n");

         if (Model.XProperties.Any()) 
         { 
this.Write("        InitializeXProperties();\r\n");

         } 
         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) 
         { 
this.Write("            if (resourceLocator == null)\r\n            {\r\n                resource" +
        "Locator = new global::System.Uri(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\");\r\n            }\r\n");

         } 
         else 
         { 
this.Write("            global::System.Uri resourceLocator = new global::System.Uri(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\");\r\n");

         } 
         string loadType = (ProjectInfo.IsLibrary) ? "Nested" : "Application"; 
         if(!String.IsNullOrEmpty(Model.CodeInfo.XamlComponentResourceLocation)) 
         { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));

this.Write(".LoadComponent(this, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ComponentResourceLocation)));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.XamlComponentResourceLocation));

this.Write(");\r\n");

         } 
         else
         { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));

this.Write(".LoadComponent(this, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ComponentResourceLocation)));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(loadType));

this.Write(");\r\n");

         } 
this.Write("        }\r\n\r\n        partial void UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DependencyObject)));

this.Write(" unloadableObject);\r\n");

     } 
     private void Output_FieldDefinitions() 
     { 
this.Write("#pragma warning disable 0169    //  Proactively suppress unused/uninitialized fie" +
        "ld warning in case they aren\'t used, for things like x:Name\r\n#pragma warning dis" +
        "able 0649\r\n");

         foreach (FieldDefinition fieldData in Model.CodeInfo.FieldDeclarations) 
         { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n");

             if (fieldData.IsDeprecated) 
             { 
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

             } 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldData.FieldModifier));

this.Write(" global::");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldData.FieldTypeName));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldData.FieldName));

this.Write("; \r\n");

             if (fieldData.IsDeprecated) 
             { 
this.Write("#pragma warning restore 0618\r\n");

             } 
         } 
this.Write("#pragma warning restore 0649\r\n#pragma warning restore 0169\r\n");

     } 
     private void Output_BindingsHeader() 
     { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        private interface I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n        {\r\n            void Initialize();\r\n            void Update();\r" +
        "\n            void StopTracking();\r\n            void DisconnectUnloadedObject(int" +
        " connectionId);\r\n        }\r\n\r\n        private interface I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(" Parent { get; set; }\r\n            bool ContainsElement(int connectionId);\r\n     " +
        "       void RegisterForElementConnection(int connectionId, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" connector);\r\n        }\r\n#pragma warning disable 0169    //  Proactively suppress" +
        " unused field warning in case Bindings is not used.\r\n#pragma warning disable 064" +
        "9\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        private I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings Bindings;\r\n#pragma warning restore 0649\r\n#pragma warning restore 0169\r\n" +
        "");

     } 
     private void Output_xProperties() 
     { 
         if (Model.XProperties.Any()) 
         { 
this.Write("        partial void InitializeXProperties();\r\n\r\n");

         } 
         foreach (xProperty xProp in Model.XProperties) 
         { 
this.Write("        // ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.CodegenComment));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        private global::");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write(" _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(";\r\n");

             if (!xProp.IsReadOnly) 
             { 
this.Write("        /// <summary>\r\n        /// ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write(" - changed handler for ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        public event ");

this.Write(this.ToStringHelper.ToStringWithCulture(PrependNamespace("PropertyChangedEventHandler")));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write(";\r\n");

             } 
this.Write("        /// <summary>\r\n        /// ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public global::");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("\r\n        {\r\n            get { return _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("; }\r\n");

             if (!xProp.IsReadOnly) 
             { 
this.Write("            set\r\n            {\r\n                if (_");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" != value)\r\n                {\r\n                    _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = value;\r\n                    if (");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write(" != null)\r\n                    {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write("(this, new global::");

this.Write(this.ToStringHelper.ToStringWithCulture(PrependNamespace($"PropertyChangedEventArgs(\"{xProp.Name}\")")));

this.Write(");\r\n                       \r\n                    }\r\n                }\r\n          " +
        "  }\r\n");

             } 
this.Write("        }\r\n\r\n");

         } 
     } 
    }
}
