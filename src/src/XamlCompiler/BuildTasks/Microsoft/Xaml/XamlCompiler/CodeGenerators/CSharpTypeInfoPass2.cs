// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CSharpTypeInfoPass2 : CSharp_CodeGenerator<TypeInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

");
  if(!Model.GenerateTypeInfo)  
  {                                       
            this.Write("// No local types.\r\n");
  }                                       
  else                                    
  {                                       
            this.Write("\r\n");
  if (!ProjectInfo.IsLibrary && Model.AppMetadataProviderNamespace != null) 
  { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AppMetadataProviderNamespace));
            this.Write("\r\n{\r\n");
      Output_AppMetadataProvider();      
            this.Write("}\r\n");
  } 
            this.Write("\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.XamlTypeInfoNamespace));
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Main class for providing metadata for the app or " +
                    "library\r\n    /// </summary>\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n");
  if (ProjectInfo.GenerateFullXamlMetadataProvider) { 
            this.Write("    [");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".FullXamlMetadataProvider()]\r\n");
  } 
            this.Write("    public sealed class XamlMetaDataProvider : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));
            this.Write("\r\n    {\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider _provider = null;\r\n\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider Provider\r\n        {\r\n            get\r\n            {\r\n      " +
                    "          if (_provider == null)\r\n                {\r\n                    _provid" +
                    "er = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider();\r\n                }\r\n                return _provider;\r\n " +
                    "           }\r\n        }\r\n\r\n");
      if((!ProjectInfo.GenerateProviderCode)  && !ProjectInfo.EnableTypeInfoReflection)
      {
            this.Write("        /// <summary>\r\n        /// AddOtherProvider(IXamlMetadataProvider)\r\n     " +
                    "   /// </summary>\r\n        internal void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));
            this.Write(" otherProvider)\r\n        {\r\n            Provider.AddOtherProvider(otherProvider);" +
                    "\r\n        }\r\n\r\n");
      }
            this.Write("        /// <summary>\r\n        /// GetXamlType(Type)\r\n        /// </summary>\r\n   " +
                    "     ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OverloadAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlType(global::System.Type type)\r\n        {\r\n            return Provider.Ge" +
                    "tXamlTypeByType(type);\r\n        }\r\n\r\n        /// <summary>\r\n        /// GetXamlT" +
                    "ype(String)\r\n        /// </summary>\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlType(string fullName)\r\n        {\r\n            return Provider.GetXamlType" +
                    "ByName(fullName);\r\n        }\r\n\r\n        /// <summary>\r\n        /// GetXmlnsDefin" +
                    "itions()\r\n        /// </summary>\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NotCLSCompliantAttribute));
            this.Write("public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XmlnsDefinition)));
            this.Write("[] GetXmlnsDefinitions()\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XmlnsDefinition)));
            this.Write("[0];\r\n        }\r\n    }\r\n\r\n");
    if(ProjectInfo.EnableTypeInfoReflection)
    { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    internal partial class XamlTypeInfoProvider\r\n    {\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider _Provider;\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider Provider\r\n        {\r\n            get\r\n           " +
                    " {\r\n                if (_Provider == null)\r\n                {\r\n                 " +
                    "   _Provider = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write(".ReflectionXamlMetadataProvider();\r\n                }\r\n                return _Pr" +
                    "ovider;\r\n            }\r\n        }\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlTypeByType(global::System.Type type)\r\n        {\r\n            return Provi" +
                    "der.GetXamlType(type);\r\n        }\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlTypeByName(string typeName)\r\n        {\r\n            return Provider.GetXa" +
                    "mlType(typeName);\r\n        }\r\n    }\r\n");
    } 
    else 
    { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    internal partial class XamlTypeInfoProvider\r\n    {\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlTypeByType(global::System.Type type)\r\n        {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
");
      if(SchemaInfo.OtherMetadataProviders.Count > 0)    
      {                                       
            this.Write("                var userXamlType = xamlType as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType;\r\n                if(xamlType == null || (userXamlType != null && u" +
                    "serXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))\r\n                {\r\n" +
                    "                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
");
      }                                       
            this.Write("                if (xamlType != null)\r\n                {\r\n");
                  //  IXamlType.FullName is not Type.FullName, it does not use reflection.    
            this.Write("                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);\r\n     " +
                    "               _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);\r\n   " +
                    "             }\r\n            }\r\n            return xamlType;\r\n        }\r\n\r\n      " +
                    "  public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" GetXamlTypeByName(string typeName)\r\n        {\r\n            if (string.IsNullOrEm" +
                    "pty(typeName))\r\n            {\r\n                return null;\r\n            }\r\n    " +
                    "        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
");
      if(SchemaInfo.OtherMetadataProviders.Count > 0)    
      {                                       
            this.Write("                var userXamlType = xamlType as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlUserType;\r\n                if(xamlType == null || (userXamlType != null && u" +
                    "serXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))\r\n                {\r\n" +
                    "                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
");
      }                                       
            this.Write("                if (xamlType != null)\r\n                {\r\n");
                  //  IXamlType.FullName is not Type.FullName, it does not use reflection.    
            this.Write("                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);\r\n     " +
                    "               _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);\r\n   " +
                    "             }\r\n            }\r\n            return xamlType;\r\n        }\r\n\r\n      " +
                    "  public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(" GetMemberByLongName(string longMemberName)\r\n        {\r\n            if (string.Is" +
                    "NullOrEmpty(longMemberName))\r\n            {\r\n                return null;\r\n     " +
                    "       }\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(@" xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(">\r\n                _xamlTypeCacheByName = new global::System.Collections.Generic." +
                    "Dictionary<string, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(">();\r\n\r\n        global::System.Collections.Generic.Dictionary<global::System.Type" +
                    ", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(">\r\n                _xamlTypeCacheByType = new global::System.Collections.Generic." +
                    "Dictionary<global::System.Type, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(">();\r\n\r\n        global::System.Collections.Generic.Dictionary<string, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(">\r\n                _xamlMembers = new global::System.Collections.Generic.Dictiona" +
                    "ry<string, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(">();\r\n\r\n");
      Output_TypeTables();            
            this.Write("\r\n");
      Output_Activators();            
      Output_ListAndMapMethods();     
            this.Write("\r\n");
      Output_CreateXamlType();        
            this.Write("\r\n");
      Output_CheckOtherMetadataProviders();  
            this.Write("\r\n");
      Output_SettersAndGetters();     
            this.Write("\r\n");
      Output_CreateXamlMember();      
            this.Write("    }\r\n\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    internal class XamlSystemBaseType : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@"
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" BaseType { get { throw new global::System.NotImplementedException(); } }\r\n      " +
                    "  virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(" ContentProperty { get { throw new global::System.NotImplementedException(); } }\r" +
                    "\n        virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(@" GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" ItemType { get { throw new global::System.NotImplementedException(); } }\r\n      " +
                    "  virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" KeyType { get { throw new global::System.NotImplementedException(); } }\r\n       " +
                    " virtual public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    internal class XamlUserType : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlSystemBaseType\r\n        , ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider _provider;\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" _baseType;\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" baseType)\r\n            :base(fullName, fullType)\r\n        {\r\n            _provid" +
                    "er = provider;\r\n            _baseType = baseType;\r\n        }\r\n\r\n        // --- I" +
                    "nterface methods ----\r\n\r\n        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" BoxedType { get { return _boxedType; } }\r\n\r\n        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(" ContentProperty\r\n        {\r\n            get { return _provider.GetMemberByLongNa" +
                    "me(_contentPropertyName); }\r\n        }\r\n\r\n        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" ItemType\r\n        {\r\n            get { return _provider.GetXamlTypeByName(_itemT" +
                    "ypeName); }\r\n        }\r\n\r\n        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" KeyType\r\n        {\r\n            get { return _provider.GetXamlTypeByName(_keyTyp" +
                    "eName); }\r\n        }\r\n\r\n        override public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write(" GetMember(string name)\r\n        {\r\n            if (_memberNames == null)\r\n      " +
                    "      {\r\n                return null;\r\n            }\r\n            string longNam" +
                    "e;\r\n            if (_memberNames.TryGetValue(name, out longName))\r\n            {" +
                    "\r\n                return _provider.GetMemberByLongName(longName);\r\n            }" +
                    "\r\n            return null;\r\n        }\r\n\r\n        override public object Activate" +
                    "Instance()\r\n        {\r\n            return Activator(); \r\n        }\r\n\r\n        ov" +
                    "erride public void AddToMap(object instance, object key, object item) \r\n        " +
                    "{\r\n            DictionaryAdd(instance, key, item);\r\n        }\r\n\r\n        overrid" +
                    "e public void AddToVector(object instance, object item)\r\n        {\r\n            " +
                    "CollectionAdd(instance, item);\r\n        }\r\n\r\n        override public void RunIni" +
                    "tializer() \r\n        {\r\n            global::System.Runtime.CompilerServices.Runt" +
                    "imeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);\r\n        }\r\n\r\n       " +
                    " override public object CreateFromString(string input)\r\n        {\r\n            i" +
                    "f (BoxedType != null)\r\n            {\r\n                return BoxInstance(BoxedTy" +
                    "pe.CreateFromString(input));\r\n            }\r\n\r\n            if (CreateFromStringM" +
                    "ethod != null)\r\n            {\r\n                return this.CreateFromStringMetho" +
                    "d(input);\r\n            }\r\n            else if (_enumValues != null)\r\n           " +
                    " {\r\n                long value = 0;\r\n\r\n                string[] valueParts = inp" +
                    "ut.Split(\',\');\r\n\r\n                foreach (string valuePart in valueParts) \r\n   " +
                    "             {\r\n                    object partValue;\r\n                    long " +
                    "enumFieldValue = 0;\r\n                    try\r\n                    {\r\n           " +
                    "             if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))\r\n    " +
                    "                    {\r\n                            enumFieldValue = global::Syst" +
                    "em.Convert.ToInt64(partValue);\r\n                        }\r\n                     " +
                    "   else\r\n                        {\r\n                            try\r\n           " +
                    "                 {\r\n                                enumFieldValue = global::Sys" +
                    "tem.Convert.ToInt64(valuePart.Trim());\r\n                            }\r\n         " +
                    "                   catch( global::System.FormatException )\r\n                    " +
                    "        {\r\n                                foreach( string key in _enumValues.Ke" +
                    "ys )\r\n                                {\r\n                                    if(" +
                    " string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIg" +
                    "noreCase) == 0 )\r\n                                    {\r\n                       " +
                    "                 if( _enumValues.TryGetValue(key.Trim(), out partValue) )\r\n     " +
                    "                                   {\r\n                                          " +
                    "  enumFieldValue = global::System.Convert.ToInt64(partValue);\r\n                 " +
                    "                           break;\r\n                                        }\r\n  " +
                    "                                  }\r\n                                }\r\n        " +
                    "                    }\r\n                        }\r\n                        value " +
                    "|= enumFieldValue; \r\n                    }\r\n                    catch( global::S" +
                    "ystem.FormatException )\r\n                    {\r\n                        throw ne" +
                    "w global::System.ArgumentException(input, FullName);\r\n                    }\r\n   " +
                    "             }\r\n\r\n                return System.Convert.ChangeType(value, System" +
                    ".Enum.GetUnderlyingType(this.UnderlyingType));\r\n            }\r\n            throw" +
                    " new global::System.ArgumentException(input, FullName);\r\n        }\r\n\r\n        //" +
                    " --- End of Interface methods\r\n\r\n        public Activator Activator { get; set; " +
                    "}\r\n        public AddToCollection CollectionAdd { get; set; }\r\n        public Ad" +
                    "dToDictionary DictionaryAdd { get; set; }\r\n        public CreateFromStringMethod" +
                    " CreateFromStringMethod {get; set; }\r\n        public BoxInstanceMethod BoxInstan" +
                    "ce {get; set; }\r\n\r\n        public void SetContentPropertyName(string contentProp" +
                    "ertyName)\r\n        {\r\n            _contentPropertyName = contentPropertyName;\r\n " +
                    "       }\r\n\r\n        public void SetIsArray()\r\n        {\r\n            _isArray = " +
                    "true; \r\n        }\r\n\r\n        public void SetIsMarkupExtension()\r\n        {\r\n    " +
                    "        _isMarkupExtension = true;\r\n        }\r\n\r\n        public void SetIsBindab" +
                    "le()\r\n        {\r\n            _isBindable = true;\r\n        }\r\n\r\n        public vo" +
                    "id SetIsReturnTypeStub()\r\n        {\r\n            _isReturnTypeStub = true;\r\n    " +
                    "    }\r\n\r\n        public void SetIsLocalType()\r\n        {\r\n            _isLocalTy" +
                    "pe = true;\r\n        }\r\n\r\n        public void SetItemTypeName(string itemTypeName" +
                    ")\r\n        {\r\n            _itemTypeName = itemTypeName;\r\n        }\r\n\r\n        pu" +
                    "blic void SetKeyTypeName(string keyTypeName)\r\n        {\r\n            _keyTypeNam" +
                    "e = keyTypeName;\r\n        }\r\n\r\n        public void SetBoxedType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + ""."" + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    internal class XamlMember : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider _provider;\r\n        string _name;\r\n        bool _isAttachab" +
                    "le;\r\n        bool _isDependencyProperty;\r\n        bool _isReadOnly;\r\n\r\n        s" +
                    "tring _typeName;\r\n        string _targetTypeName;\r\n\r\n        public XamlMember(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write(".XamlTypeInfoProvider provider, string name, string typeName)\r\n        {\r\n       " +
                    "     _name = name;\r\n            _typeName = typeName;\r\n            _provider = p" +
                    "rovider;\r\n        }\r\n\r\n        public string Name { get { return _name; } }\r\n\r\n " +
                    "       public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(" Type\r\n        {\r\n            get { return _provider.GetXamlTypeByName(_typeName)" +
                    "; }\r\n        }\r\n\r\n        public void SetTargetTypeName(string targetTypeName)\r\n" +
                    "        {\r\n            _targetTypeName = targetTypeName;\r\n        }\r\n        pub" +
                    "lic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));
            this.Write(@" TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException(""GetValue"");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException(""SetValue"");
        }
    }
");
  } //End of non-reflection type info provider 
            this.Write("}\r\n");
 } // End of both type info providers codegen
            return this.GenerationEnvironment.ToString();
        }
 
         private void Output_CheckOtherMetadataProviders()   
         {                                                   
             if(SchemaInfo.OtherMetadataProviders.Count > 0)            
             {                                               
                 if (!ProjectInfo.GenerateProviderCode) 
                 {
this.Write("        public void AddOtherProvider(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(" otherProvider)\r\n        {\r\n            if(_otherProviders == null)\r\n            " +
        "{\r\n                var otherProviders = new global::System.Collections.Generic.L" +
        "ist<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(">();\r\n                _otherProviders = otherProviders;\r\n            }\r\n         " +
        "   _otherProviders.Add(otherProvider); \r\n        }\r\n");

                 }
this.Write("        private global::System.Collections.Generic.List<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write("> _otherProviders;\r\n        private global::System.Collections.Generic.List<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write("> OtherProviders\r\n        {\r\n            get\r\n            {\r\n                if(_" +
        "otherProviders == null)\r\n                {\r\n                    var otherProvide" +
        "rs = new global::System.Collections.Generic.List<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(">();\r\n");

                 if (ProjectInfo.GenerateProviderCode && (SchemaInfo.OtherMetadataProviders.Count > 0)) 
                 {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(" provider;\r\n");

                     foreach(var xmp in SchemaInfo.OtherMetadataProviders) 
                     {                                           
this.Write("                    provider = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmp.FullName));

this.Write("() as ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(";\r\n                    otherProviders.Add(provider); \r\n");

                     }                                           
                 }
this.Write("                    _otherProviders = otherProviders;\r\n                }\r\n       " +
        "         return _otherProviders;\r\n            }\r\n        }\r\n\r\n        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" CheckOtherMetadataProvidersForName(string typeName)\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" xamlType = null;\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" foundXamlType = null;\r\n            foreach(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(@" xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" CheckOtherMetadataProvidersForType(global::System.Type type)\r\n        {\r\n       " +
        "     ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" xamlType = null;\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" foundXamlType = null;\r\n            foreach(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(@" xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }
");

             }                           
         }                               
         private void Output_TypeTables()     
         {                                       
this.Write("        string[] _typeNameTable = null;\r\n        global::System.Type[] _typeTable" +
        " = null;\r\n\r\n        private void InitTypeTables()\r\n        {\r\n            _typeN" +
        "ameTable = new string[");

this.Write(this.ToStringHelper.ToStringWithCulture(SchemaInfo.TypeTableFromAllAssemblies.Count));

this.Write("];\r\n");

         for(int i=0; i<SchemaInfo.TypeTable.Count; i++)             
         {                                                           
             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      
this.Write("            _typeNameTable[");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write("] = \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.StandardName));

this.Write("\";\r\n");

         }                                                           
this.Write("\r\n            _typeTable = new global::System.Type[");

this.Write(this.ToStringHelper.ToStringWithCulture(SchemaInfo.TypeTableFromAllAssemblies.Count));

this.Write("];\r\n");

         for(int i=0; i<SchemaInfo.TypeTable.Count; i++)             
         {                                                           
             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      
             if (entry.IsDeprecated)                                 
             {                                                       
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

             }                                                       
this.Write("            _typeTable[");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write("] = typeof(");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.FullName));

this.Write(");\r\n");

             if (entry.IsDeprecated)                                 
             {                                                       
this.Write("#pragma warning restore 0618\r\n");

             }                                                       
         }                                                           
this.Write(@"        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }
");

         }                                       
         private void Output_CreateXamlType()    
         {                                       
this.Write("        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" CreateXamlType(int typeIndex)\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlSystemBaseType xamlType = null;\r\n");

             if(SchemaInfo.TypeTable.Count == 0) 
             {                                   
this.Write("            // No Local Types\r\n");

             }                                   
             else                                
             {                                   
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType userType;\r\n            string typeName = _typeNameTable[typeIndex];" +
        "\r\n            global::System.Type type = _typeTable[typeIndex];\r\n\r\n            s" +
        "witch (typeIndex)\r\n            {\r\n");

                 foreach(InternalTypeEntry entry in SchemaInfo.TypeTable)    
                 {                                                           
this.Write("\r\n            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TypeIndex));

this.Write(":   //  ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.StandardName));

this.Write("\r\n");

                     if(entry.IsSystemType)              
                     {                                   
this.Write("                xamlType = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlSystemBaseType(typeName, type);\r\n                break;\r\n");

                     }                                   
                     else                                
                     {                                   
                         InternalXamlUserTypeInfo uentry = entry.UserTypeInfo;   
                         if(uentry.BaseType == null)     
                         {                               
this.Write("                userType = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType(this, typeName, type, null);\r\n");

                         }                               
                         else                            
                         {                               
this.Write("                userType = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType(this, typeName, type, GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BaseType.StandardName));

this.Write("\"));\r\n");

                         }
                         if (uentry.BoxedType != null) 
                         { 
this.Write("                userType.SetBoxedType(GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BoxedType.StandardName));

this.Write("\"));\r\n                userType.BoxInstance = userType.BoxType<");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.BoxedType.FullName));

this.Write(">;\r\n");

                         }
                         if(uentry.IsConstructible && !uentry.IsReturnTypeStub)  
                         {                               
this.Write("                userType.Activator = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName(uentry)));

this.Write(";\r\n");

                         }                               
                         if(uentry.ContentProperty != null)   
                         {                               
this.Write("                userType.SetContentPropertyName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.ContentProperty.DeclaringType.StandardName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.ContentProperty.Name));

this.Write("\");\r\n");

                         }                               
                         if(uentry.IsCollection)         
                         {                               
this.Write("                userType.CollectionAdd = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.VectorAddName(uentry)));

this.Write(";\r\n");

                         }                               
                         if(uentry.IsDictionary)         
                         {                               
this.Write("                userType.DictionaryAdd = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.MapAddName(uentry)));

this.Write(";\r\n");

                         }                               
                         if (uentry.HasCreateFromStringMethod)
                         {
                             if (uentry.TypeEntry.UnderlyingType.IsValueType)
                             {
this.Write("                userType.CreateFromStringMethod = x => (global::System.Object)");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.CreateFromStringMethod.ResolvedName.CSharpName()));

this.Write("(x);\r\n");

                             }
                             else
                             {
this.Write("                userType.CreateFromStringMethod = ");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.CreateFromStringMethod.ResolvedName.CSharpName()));

this.Write(";\r\n");

                             }
                         }
                         foreach(InternalXamlUserMemberInfo mem in uentry.Members)   
                         {                                                           
this.Write("                userType.AddMemberName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(mem.Name));

this.Write("\");\r\n");

                         }                                                           
                         if(uentry.HasEnumValues)        
                         {                               
                             if (uentry.IsDeprecated)    
                             {                           
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

                             }                                            
                             foreach(string eValue in uentry.EnumValues)  
                             {                                            
this.Write("                userType.AddEnumValue(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(eValue));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(uentry.FullName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(eValue));

this.Write(");\r\n");

                             }                           
                             if (uentry.IsDeprecated)    
                             {                           
this.Write("#pragma warning restore 0618\r\n");

                             }                           
                         }                               
                         if(uentry.IsBindable)           
                         {                               
this.Write("                userType.SetIsBindable();\r\n");

                         }                               
                         if(uentry.IsMarkupExtension)    
                         {                               
this.Write("                userType.SetIsMarkupExtension();\r\n");

                         }                               
                         if(uentry.IsReturnTypeStub)     
                         {                               
this.Write("                userType.SetIsReturnTypeStub();\r\n");

                         }                               
                         if(uentry.IsLocalType)          
                         {                               
this.Write("                userType.SetIsLocalType();\r\n");

                         }                               
this.Write("                xamlType = userType;\r\n                break;\r\n");

                     }   
                 }       
this.Write("            }\r\n");

             }       
this.Write("            return xamlType;\r\n        }\r\n");

         }           
         private void Output_Activators()                                        
         {                                                                       
             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  
             {                                                                   
                 if(entry.IsConstructible)                                       
                 {                                                               
                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

                     }                                                           
this.Write("        private object ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName(entry)));

this.Write("() { return new ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.FullName));

this.Write("(); }\r\n");

                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning restore 0618\r\n");

                     }                                                           
                 }           
             }               
         }                   
         private void Output_ListAndMapMethods()                                 
         {                                                                       
             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  
             {                                                                   
                 if(entry.IsCollection)                                          
                 {                                                               
                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

                     }                                                           
this.Write("        private void ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.VectorAddName(entry)));

this.Write("(object instance, object item)\r\n        {\r\n            var collection = (global::" +
        "System.Collections.Generic.ICollection<");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(">)instance;\r\n            var newItem = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(")item;\r\n            collection.Add(newItem);\r\n        }\r\n");

                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning restore 0618\r\n");

                     }                                                           
                 }                       
                 if(entry.IsDictionary)  
                 {                       
                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

                     }                                                           
this.Write("        private void ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.MapAddName(entry)));

this.Write("(object instance, object key, object item)\r\n        {\r\n            var collection" +
        " = (global::System.Collections.Generic.IDictionary<");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(">)instance;\r\n            var newKey = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.KeyType.FullName));

this.Write(")key;\r\n            var newItem = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.ItemType.FullName));

this.Write(")item;\r\n            collection.Add(newKey, newItem);\r\n        }\r\n");

                     if (entry.IsDeprecated)                                     
                     {                                                           
this.Write("#pragma warning restore 0618\r\n");

                     }                                                           
                 }           
             }               
         }                   
         private void Output_CreateXamlMember()   
         {                                        
this.Write("        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMember)));

this.Write(" CreateXamlMember(string longMemberName)\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMember xamlMember = null;\r\n");

             if(SchemaInfo.UserMemberInfo.Count == 0)    
             {                                           
this.Write("            // No Local Properties\r\n");

             }               
             else            
             {               
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType userType;\r\n\r\n            switch (longMemberName)\r\n            {\r\n");

                 for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    
                 {                                                                       
                     InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    
this.Write("            case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.StandardName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("\":\r\n                userType = (");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlUserType)GetXamlTypeByName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.StandardName));

this.Write("\");\r\n                xamlMember = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMember(this, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("\", \"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.StandardName));

this.Write("\");\r\n");

                     if(entry.TargetType != null)    
                     {                               
this.Write("                xamlMember.SetTargetTypeName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.StandardName));

this.Write("\");\r\n");

                     }                               
                     if(entry.IsDependencyProperty)  
                     {                               
this.Write("                xamlMember.SetIsDependencyProperty();\r\n");

                     }                               
                     if(entry.IsAttachable )         
                     {                               
this.Write("                xamlMember.SetIsAttachable();\r\n");

                     }                               
                     if (entry.HasPublicGetter)      
                     {                               
this.Write("                xamlMember.Getter = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetterName(i)));

this.Write(";\r\n");

                     }                               
                     if(entry.HasPublicGetter && !entry.HasPublicSetter) 
                     {                               
this.Write("                xamlMember.SetIsReadOnly();\r\n");

                     }                               
                     else if (entry.HasPublicSetter) 
                     {                               
this.Write("                xamlMember.Setter = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName(i)));

this.Write(";\r\n");

                     }                               
this.Write("                break;\r\n");

                }            
this.Write("            }\r\n");

            }                
this.Write("            return xamlMember;\r\n        }\r\n");

        }                    
         private void Output_SettersAndGetters()                                     
         {                                                                           
             for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    
             {                                                                       
                 InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    
                 if (entry.IsEvent)                  
                     continue;                       
                 if (entry.IsDeprecated)             
                 {                                   
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

                 }                                   
                 if (entry.HasPublicGetter)          
                 {                                   
this.Write("        private object ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetterName(i)));

this.Write("(object instance)\r\n        {\r\n");

                     if(entry.IsAttachable)          
                     {                               
                         if(entry.TargetType != null)
                         {           
this.Write("            return ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Get");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.FullName));

this.Write(")instance);\r\n");

                         }           
                         else        
                         {           
this.Write("            return ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Get");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(instance);\r\n");

                         }           
                     }               
                     else if (entry.Name != "Template") 
                     {               
this.Write("            var that = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(")instance;\r\n            return that.");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write(";\r\n");

                     }               
                     else  
                     {               
this.Write("            return null;\r\n");

                     }               
this.Write("        }\r\n");

                 }                           
                 if(entry.HasPublicSetter)   
                 {                           
this.Write("        private void ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName(i)));

this.Write("(object instance, object Value)\r\n        {\r\n");

                     if(entry.IsAttachable)  
                     {                       
                         if(entry.TargetType != null)    
                         {                   
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.TargetType.FullName));

this.Write(")instance, (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write(")Value);\r\n");

                         }                   
                         else                
                         {                   
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write("(instance, (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write(")Value);\r\n");

                         }                   
                     }                       
                     else if (entry.Name != "Template")   
                     {                       
this.Write("            var that = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.DeclaringType.FullName));

this.Write(")instance;\r\n            that.");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));

this.Write(" = (");

this.Write(this.ToStringHelper.ToStringWithCulture(entry.Type.FullName));

this.Write(")Value;\r\n");

                     }                       
this.Write("        }\r\n");

                }    
                     if (entry.IsDeprecated) 
                     {                       
this.Write("#pragma warning restore 0618\r\n");

                     }                       
            }        
        }            
         private void Output_AppMetadataProvider()  
         {                                       
this.Write("    public partial class ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.AppXamlInfo.ShortName));

this.Write(" : ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write("\r\n    {\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider __appProvider;\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider _AppProvider\r\n        {\r\n            get\r\n            {\r\n  " +
        "              if (__appProvider == null)\r\n                {\r\n                   " +
        " __appProvider = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));

this.Write(".XamlMetaDataProvider();\r\n                }\r\n                return __appProvider" +
        ";\r\n            }\r\n        }\r\n\r\n");

             if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
             {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        partial void _AddOtherProvider(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));

this.Write(" otherProvider)\r\n        {\r\n            _AppProvider.AddOtherProvider(otherProvid" +
        "er);\r\n        }\r\n");

             }
this.Write("        /// <summary>\r\n        /// GetXamlType(Type)\r\n        /// </summary>\r\n   " +
        "     ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" GetXamlType(global::System.Type type)\r\n        {\r\n            return _AppProvide" +
        "r.GetXamlType(type);\r\n        }\r\n\r\n        /// <summary>\r\n        /// GetXamlTyp" +
        "e(String)\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlType)));

this.Write(" GetXamlType(string fullName)\r\n        {\r\n            return _AppProvider.GetXaml" +
        "Type(fullName);\r\n        }\r\n\r\n        /// <summary>\r\n        /// GetXmlnsDefinit" +
        "ions()\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XmlnsDefinition)));

this.Write("[] GetXmlnsDefinitions()\r\n        {\r\n            return _AppProvider.GetXmlnsDefi" +
        "nitions();\r\n        }\r\n    }\r\n");

         }           
    }
}
