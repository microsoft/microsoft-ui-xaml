// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CSharpAppPass1 : CSharp_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#pragma checksum \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\"\r\n");
  }   
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.Namespace));
            this.Write("\r\n{\r\n#if !DISABLE_XAML_GENERATED_MAIN\r\n    /// <summary>\r\n    /// Program class\r\n" +
                    "    /// </summary>\r\n    public static class Program\r\n    {\r\n");
  if (ProjectInfo.IsWin32App) { 
            this.Write(@"        [global::System.Runtime.InteropServices.DllImport(""Microsoft.ui.xaml.dll"")]
        [global::System.Runtime.InteropServices.DefaultDllImportSearchPaths(global::System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)]
        private static extern void XamlCheckProcessRequirements();

");
  } 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n");
  if (ProjectInfo.IsWin32App) { 
            this.Write("        [global::System.STAThreadAttribute]\r\n");
  } 
            this.Write("        static void Main(string[] args)\r\n        {\r\n");
  if (ProjectInfo.IsWin32App) { 
            this.Write("            XamlCheckProcessRequirements();\r\n            \r\n");
  } 
  if (ProjectInfo.UsingCSWinRT) { 
            this.Write("            global::WinRT.ComWrappersSupport.InitializeComWrappers();\r\n");
  }
  if (ProjectInfo.UsingCSWinRT) { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));
            this.Write(@".Start((p) => {
                var context = new global::Microsoft.UI.Dispatching.DispatcherQueueSynchronizationContext(global::Microsoft.UI.Dispatching.DispatcherQueue.GetForCurrentThread());
                global::System.Threading.SynchronizationContext.SetSynchronizationContext(context);
                new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("();\r\n            });\r\n");
  } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));
            this.Write(".Start((p) => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("());\r\n");
  } 
            this.Write("        }\r\n    }\r\n#endif\r\n\r\n    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write(" : global::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.BaseTypeName));
            this.Write("\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        private bool _contentLoaded;\r\n");
 if((!ProjectInfo.GenerateProviderCode) && (!ProjectInfo.EnableTypeInfoReflection))
 {
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n        public void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));
            this.Write(" otherProvider)\r\n        {\r\n            _AddOtherProvider(otherProvider);\r\n      " +
                    "  }\r\n        partial void _AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlMetadataProvider)));
            this.Write(" otherProvider);\r\n");
 }
            this.Write("        /// <summary>\r\n        /// InitializeComponent()\r\n        /// </summary>\r" +
                    "\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n        public void InitializeComponent()\r\n        {\r\n            if (_contentL" +
                    "oaded)\r\n                return;\r\n\r\n            _contentLoaded = true;\r\n\r\n       " +
                    "     global::System.Uri resourceLocator = new global::System.Uri(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)));
            this.Write("\");\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));
            this.Write(@".LoadComponent(this, resourceLocator);

#if DEBUG && !DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
            DebugSettings.BindingFailed += (sender, args) =>
            {
                global::System.Diagnostics.Debug.WriteLine(args.Message);
            };
#endif
#if DEBUG && !DISABLE_XAML_GENERATED_RESOURCE_REFERENCE_DEBUG_OUTPUT
            DebugSettings.XamlResourceReferenceFailed  += (sender, args) =>
            {
                global::System.Diagnostics.Debug.WriteLine(args.Message);
            };
#endif
#if DEBUG && !DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
            UnhandledException += (sender, e) =>
            {
                if (global::System.Diagnostics.Debugger.IsAttached) global::System.Diagnostics.Debugger.Break();
            };
#endif
        }
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
 
    }
}
