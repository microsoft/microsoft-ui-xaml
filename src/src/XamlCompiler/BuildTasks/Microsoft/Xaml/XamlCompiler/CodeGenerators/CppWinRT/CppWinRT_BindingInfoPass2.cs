// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_BindingInfoPass2 : CppWinRT_CodeGenerator<BindingInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
            this.Write("#include \"XamlBindingInfo.xaml.g.h\"\r\n\r\nnamespace winrt::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(ProjectInfo.RootNamespace)));
            this.Write("::implementation\r\n{\r\n\r\nusing DataContextChangedEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DataContextChangedEventArgs;\r\nusing DependencyObject = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject;\r\nusing DependencyProperty = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyProperty;\r\nusing FrameworkElement = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement;\r\nusing INotifyCollectionChanged = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::INotifyCollectionChanged;\r\nusing INotifyPropertyChanged = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged;\r\nusing PropertyChangedEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventArgs;\r\nusing NotifyCollectionChangedEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::NotifyCollectionChangedEventArgs;\r\nusing ContainerContentChangingEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write("::ContainerContentChangingEventArgs;\r\nusing IComponentConnector = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IComponentConnector;\r\nusing WindowActivatedEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::WindowActivatedEventArgs;\r\n");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("using INotifyDataErrorInfo = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo;\r\nusing DataErrorsChangedEventArgs = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs;\r\n");
 }
            this.Write("\r\n// XamlBindings\r\n\r\nXamlBindings::XamlBindings(std::unique_ptr<IXamlBindings>&& " +
                    "pBindings)\r\n    : _pBindings(std::move(pBindings))\r\n{\r\n}\r\n\r\nvoid XamlBindings::I" +
                    "nitialize()\r\n{\r\n    if (!_pBindings->IsInitialized())\r\n    { \r\n        _pBinding" +
                    "s->Update();\r\n    }\r\n}\r\n\r\nvoid XamlBindings::Update()\r\n{\r\n    _pBindings->Update" +
                    "();\r\n}\r\n\r\nvoid XamlBindings::StopTracking()\r\n{\r\n    _pBindings->StopTracking();\r" +
                    "\n}\r\n\r\nvoid XamlBindings::Loading(FrameworkElement const&, IInspectable const&)\r\n" +
                    "{\r\n    Initialize();\r\n}\r\n\r\nvoid XamlBindings::Activated(IInspectable const&, Win" +
                    "dowActivatedEventArgs const&)\r\n{\r\n    Initialize();\r\n}\r\n\r\nvoid XamlBindings::Dat" +
                    "aContextChanged(\r\n    FrameworkElement const&,\r\n    DataContextChangedEventArgs " +
                    "const& args)\r\n{\r\n    if (_pBindings->SetDataRoot(args.NewValue()))\r\n    {\r\n     " +
                    "   Update();\r\n    }\r\n}\r\n\r\nvoid XamlBindings::SubscribeForDataContextChanged(Fram" +
                    "eworkElement const& object)\r\n{\r\n    _pBindings->SubscribeForDataContextChanged(o" +
                    "bject, *this);\r\n}\r\n\r\nvoid XamlBindings::DisconnectUnloadedObject(int connectionI" +
                    "d)\r\n{\r\n    _pBindings->DisconnectUnloadedObject(connectionId);\r\n}\r\n\r\nvoid XamlBi" +
                    "ndings::Connect(int connectionId, IInspectable const& target)\r\n{\r\n    _pBindings" +
                    "->Connect(connectionId, target);\r\n}\r\n\r\nIComponentConnector XamlBindings::GetBind" +
                    "ingConnector(int32_t, IInspectable const&)\r\n{\r\n    return nullptr;\r\n}\r\n\r\nbool Xa" +
                    "mlBindings::ProcessBinding(unsigned int)\r\n{\r\n    throw ::winrt::hresult_not_impl" +
                    "emented {};\r\n}\r\n\r\nint XamlBindings::ProcessBindings(ContainerContentChangingEven" +
                    "tArgs const& args)\r\n{\r\n    int32_t nextPhase;\r\n    _pBindings->ProcessBindings(a" +
                    "rgs.Item(), args.ItemIndex(), args.Phase(), nextPhase);\r\n    return nextPhase;\r\n" +
                    "}\r\n\r\nvoid XamlBindings::ResetTemplate()\r\n{\r\n    _pBindings->Recycle();\r\n}\r\n\r\nvoi" +
                    "d XamlBindings::ProcessBindings(\r\n    IInspectable const& item, int itemIndex, i" +
                    "nt phase, int32_t& nextPhase)\r\n{\r\n    _pBindings->ProcessBindings(item, itemInde" +
                    "x, phase, nextPhase);\r\n}\r\n\r\nvoid XamlBindings::Recycle()\r\n{\r\n    _pBindings->Rec" +
                    "ycle();\r\n}\r\n\r\n// XamlBindingTrackingBase\r\n\r\nXamlBindingTrackingBase::XamlBinding" +
                    "TrackingBase()\r\n{\r\n}\r\n\r\nvoid XamlBindingTrackingBase::SetListener(IXamlBindingTr" +
                    "acking* pBindings)\r\n{\r\n    _pBindingsTrackingWeakRef = pBindings;\r\n}\r\n\r\nvoid Xam" +
                    "lBindingTrackingBase::PropertyChanged(\r\n    IInspectable const& sender,\r\n    Pro" +
                    "pertyChangedEventArgs const&  e)\r\n{\r\n    if (_pBindingsTrackingWeakRef)\r\n    {\r\n" +
                    "        _pBindingsTrackingWeakRef->PropertyChanged(sender, e);\r\n    }\r\n}\r\n\r\nvoid" +
                    " XamlBindingTrackingBase::CollectionChanged(\r\n    IInspectable const& sender,\r\n " +
                    "   NotifyCollectionChangedEventArgs const& e)\r\n{\r\n    if (_pBindingsTrackingWeak" +
                    "Ref)\r\n    {\r\n        _pBindingsTrackingWeakRef->CollectionChanged(sender, e);\r\n " +
                    "   }\r\n}\r\n\r\nvoid XamlBindingTrackingBase::DependencyPropertyChanged(\r\n    Depende" +
                    "ncyObject const& sender,\r\n    DependencyProperty const& prop)\r\n{\r\n    if (_pBind" +
                    "ingsTrackingWeakRef)\r\n    {\r\n        _pBindingsTrackingWeakRef->DependencyProper" +
                    "tyChanged(sender, prop);\r\n    }\r\n}\r\n\r\nvoid XamlBindingTrackingBase::VectorChange" +
                    "d(\r\n    IInspectable const& sender,\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundationCollections)));
            this.Write("::IVectorChangedEventArgs const& e)\r\n{\r\n    if (_pBindingsTrackingWeakRef)\r\n    {" +
                    "\r\n        _pBindingsTrackingWeakRef->VectorChanged(sender, e);\r\n    }\r\n}\r\n\r\nvoid" +
                    " XamlBindingTrackingBase::MapChanged(\r\n    IInspectable const& sender,\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundationCollections)));
            this.Write("::IMapChangedEventArgs<::winrt::hstring> const& e)\r\n{\r\n    if (_pBindingsTracking" +
                    "WeakRef)\r\n    {\r\n        _pBindingsTrackingWeakRef->MapChanged(sender, e);\r\n    " +
                    "}\r\n}\r\n");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("\r\nvoid XamlBindingTrackingBase::ErrorsChanged(\r\n    IInspectable const& sender,\r\n" +
                    "    DataErrorsChangedEventArgs const&  e)\r\n{\r\n    if (_pBindingsTrackingWeakRef)" +
                    "\r\n    {\r\n        _pBindingsTrackingWeakRef->ErrorsChanged(sender, e);\r\n    }\r\n}\r" +
                    "\n");
 }
            this.Write(@"
void XamlBindingTrackingBase::UpdatePropertyChangedListener(
    INotifyPropertyChanged const& obj,
    INotifyPropertyChanged& cache,
    ::winrt::event_token& token)
{
    if (cache && cache != obj)
    {
        cache.PropertyChanged(token);
        cache = nullptr;
    }

    if (!cache && obj)
    {
        cache = obj;
        token = obj.PropertyChanged({ this, &XamlBindingTrackingBase::PropertyChanged });
    }
}

void XamlBindingTrackingBase::UpdatePropertyChangedListener(
    INotifyPropertyChanged const& obj,
    ::winrt::weak_ref<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged>& cacheRef,\r\n    ::winrt::event_token& token)\r\n{\r\n    IN" +
                    "otifyPropertyChanged cache = cacheRef.get();\r\n    if (cache && cache != obj)\r\n  " +
                    "  {\r\n        cache.PropertyChanged(token);\r\n        cache = nullptr;\r\n        ca" +
                    "cheRef = nullptr;\r\n    }\r\n\r\n    if (!cache && obj)\r\n    {\r\n        cacheRef = ca" +
                    "che = obj;\r\n        token = obj.PropertyChanged({ this, &XamlBindingTrackingBase" +
                    "::PropertyChanged });\r\n    }\r\n}\r\n\r\nvoid XamlBindingTrackingBase::UpdateCollectio" +
                    "nChangedListener(\r\n    INotifyCollectionChanged const& obj,\r\n    INotifyCollecti" +
                    "onChanged& cache,\r\n    ::winrt::event_token& token)\r\n{\r\n    if (cache && cache !" +
                    "= obj)\r\n    {\r\n        cache.CollectionChanged(token);\r\n        cache = nullptr;" +
                    "\r\n    }\r\n\r\n    if (!cache && obj)\r\n    {\r\n        cache = obj;\r\n        token = " +
                    "obj.CollectionChanged({ this, &XamlBindingTrackingBase::CollectionChanged });\r\n " +
                    "   }\r\n}\r\n\r\nvoid XamlBindingTrackingBase::UpdateDependencyPropertyChangedListener" +
                    "(\r\n    DependencyObject const& obj,\r\n    DependencyProperty const& property,\r\n  " +
                    "  DependencyObject& cache,\r\n    int64_t& token)\r\n{\r\n    if (cache && cache != ob" +
                    "j)\r\n    {\r\n        cache.UnregisterPropertyChangedCallback(property, token);\r\n  " +
                    "      cache = nullptr;\r\n    }\r\n\r\n    if (!cache && obj)\r\n    {\r\n        cache = " +
                    "obj;\r\n        token = obj.RegisterPropertyChangedCallback(property, \r\n          " +
                    "  { this, &XamlBindingTrackingBase::DependencyPropertyChanged });\r\n    }\r\n}\r\n\r\nv" +
                    "oid XamlBindingTrackingBase::UpdateDependencyPropertyChangedListener(\r\n    Depen" +
                    "dencyObject const& obj,\r\n    DependencyProperty const& property,\r\n    winrt::wea" +
                    "k_ref<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyObject>& cacheRef,
    int64_t& token)
{
    DependencyObject cache = cacheRef.get();
    if (cache && cache != obj)
    {
        cache.UnregisterPropertyChangedCallback(property, token);
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (!cache && obj)
    {
        cacheRef = cache = obj;
        token = obj.RegisterPropertyChangedCallback(property, 
            { this, &XamlBindingTrackingBase::DependencyPropertyChanged });
    }
}

");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write(@"void XamlBindingTrackingBase::UpdateErrorsChangedListener(
    INotifyDataErrorInfo const& obj,
    INotifyDataErrorInfo& cache,
    ::winrt::event_token& token)
{
    if (cache && cache != obj)
    {
        cache.ErrorsChanged(token);
        cache = nullptr;
    }

    if (!cache && obj)
    {
        cache = obj;
        token = obj.ErrorsChanged({ this, &XamlBindingTrackingBase::ErrorsChanged });
    }
}

void XamlBindingTrackingBase::UpdateErrorsChangedListener(
    INotifyDataErrorInfo const& obj,
    ::winrt::weak_ref<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::INotifyDataErrorInfo>& cacheRef,
    ::winrt::event_token& token)
{
    INotifyDataErrorInfo cache = cacheRef.get();
    if (cache && cache != obj)
    {
        cache.ErrorsChanged(token);
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (!cache && obj)
    {
        cacheRef = cache = obj;
        token = obj.ErrorsChanged({ this, &XamlBindingTrackingBase::ErrorsChanged });
    }
}
");
 } 
            this.Write("} // namespace\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
