// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Collections.Generic;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_PageBinding : CppWinRT_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

    BindUniverse bindUniverse = Arguments[0] as BindUniverse;

            this.Write("    template <typename D, typename ... I>\r\n    struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("T<D, I...>::");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));
            this.Write("\r\n        : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(ProjectInfo.RootNamespace)));
            this.Write("::implementation::");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType.NeedsBoxUnbox() ? "ValueTypeXamlBindings" : "ReferenceTypeXamlBindings"));
            this.Write("<");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingClassName(bindUniverse, Model.CodeInfo)));
            this.Write(">\r\n");
  if (bindUniverse.NeedsBindingsTracking) { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(ProjectInfo.RootNamespace)));
            this.Write("::implementation::IXamlBindingTracking\r\n");
  }
            this.Write("{\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));
            this.Write("()\r\n        {\r\n");
  if (bindUniverse.NeedsBindingsTracking) {
            this.Write("            InitializeTracking(this);\r\n");
  }
            this.Write("        }\r\n\r\n");
  if (bindUniverse.NeedsBindingsTracking) { 
            this.Write("        ~");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));
            this.Write("()\r\n        {\r\n            ReleaseAllListeners();\r\n        }\r\n\r\n");
  }
            this.Write("        void Connect(int32_t connectionId, IInspectable const& target) override\r\n" +
                    "        {\r\n            switch(connectionId)\r\n            {\r\n");
 foreach (var element in bindUniverse.ElementsWithConnectCase) { 
            this.Write("            case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));
            this.Write(": // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));
            this.Write("\r\n                {\r\n");
               if (element.Type.IsDerivedFromControlTemplate())
               {
            this.Write("                    Update(); // Template children have been connected, initializ" +
                    "e bindings\r\n");
               }
               else
               {
      Output_ConnectionId_Case(element); 
               }
            this.Write("                }\r\n                break;\r\n");
 } 
            this.Write("            }\r\n        }\r\n\r\n        void DisconnectUnloadedObject(int connectionI" +
                    "d) override\r\n        {\r\n");
      if (bindUniverse.ElementsWithDisconnectCase.Count() == 0) { 
            this.Write("            throw ::winrt::hresult_invalid_argument { L\"No unloadable elements to" +
                    " disconnect.\" };\r\n");
      } else { 
            this.Write("            switch (connectionId)\r\n            {\r\n");
          foreach (var element in bindUniverse.ElementsWithDisconnectCase) { 
            this.Write("                case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));
            this.Write(": // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));
            this.Write("\r\n                    {\r\n");
              if (bindUniverse.BoundElements.Contains(element)) { 
              Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
            this.Write("                        if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));
            this.Write(")\r\n                        {\r\n");
              foreach (var ba in element.BindAssignments.Where(ba => ba.HasDeferredValueProxy)) { 
            this.Write("                            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ba.ObjectDeferredAssignmentCodeName));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.GetMemberGetExpression(ba)));
            this.Write(";\r\n");
              }
            this.Write("                            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));
            this.Write(" = nullptr;\r\n                        }\r\n");
              foreach (var childElem in element.Children.Where(c => bindUniverse.ElementsWithDisconnectCase.Contains(c))) {
            this.Write("                        DisconnectUnloadedObject(");
            this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));
            this.Write(");\r\n");
              }
              Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
              } 
              if (element.HasRootNamedElementStep) { 
            this.Write("                    this->UnloadableBindingSourcesToUpdate.push_back([this]()\r\n  " +
                    "                  {\r\n");
                  PushIndent(Indent.TwoTabs); 
                  Output_Custom_Update_Call(element.RootNamedElementStep, "nullptr", KnownStrings.NotPhased);
                  PopIndent(); 
            this.Write("                            });\r\n");
              } 
            this.Write("                }\r\n                break;\r\n");
          }
            this.Write("                default:\r\n                    throw hresult_invalid_argument(L\"In" +
                    "valid connectionId.\");\r\n            }\r\n");
      } 
            this.Write("        }\r\n");
  if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
            this.Write("\r\n        void UpdateUnloadedElement(int connectionId)\r\n        {\r\n            sw" +
                    "itch (connectionId)\r\n            {\r\n");
      foreach (var element in bindUniverse.ElementsWithBoundLoadAssignments) { 
            this.Write("            case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));
            this.Write(": // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));
            this.Write("\r\n                {\r\n");
          foreach (var ba in element.BindAssignments.OfType<BoundLoadAssignment>()) { 
              PushIndent(Indent.TwoTabs); 
              Output_Binding_SetValue_Non_Function_Call(ba, ba.ObjectDeferredAssignmentCodeName.CppWinRTName(), false); 
              PopIndent(); 
          } 
            this.Write("                    }\r\n                    break;\r\n");
      }
            this.Write("            default:\r\n                throw hresult_invalid_argument(L\"Invalid co" +
                    "nnectionId.\");\r\n            }\r\n        }\r\n");
  }
  if (bindUniverse.NeedsIDataTemplateExtension) {
            this.Write("\r\n        void Recycle() override\r\n        {\r\n");
      if (bindUniverse.NeedsBindingsTracking) { 
            this.Write("            ReleaseAllListeners();\r\n");
      } 
      foreach (KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) { 
          foreach(PhaseAssignment phase in kvp.Value) { 
              if (phase.ConnectionIdElement.CanBeInstantiatedLater) { 
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));
            this.Write(")\r\n            {\r\n");
                  PushIndent();
              }
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XamlBindingHelper::SuspendRendering(");
            this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));
            this.Write(");\r\n");
              if (phase.ConnectionIdElement.CanBeInstantiatedLater) { 
                  PopIndent();
            this.Write("            }\r\n");
              }
          } 
      } 
            this.Write(@"        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(0)));
            this.Write(";\r\n                    SetDataRoot(item);\r\n                    if (_dataContextCh" +
                    "angedToken.value != 0)\r\n                    {\r\n                        auto root" +
                    "Element = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootElement.ReferenceExpression));
            this.Write(@";
                        if (rootElement != nullptr)
                        {
                            rootElement.DataContextChanged(_dataContextChangedToken);
                        }
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
");
      foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) { 
            this.Write("            case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            this.Write(":\r\n                {\r\n");
          foreach(PhaseAssignment phase in kvp.Value) { 
              if (phase.ConnectionIdElement.CanBeInstantiatedLater) { 
            this.Write("                    if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));
            this.Write(")\r\n                    {\r\n");
                     PushIndent();
              }
            this.Write("                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XamlBindingHelper::ResumeRendering(");
            this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));
            this.Write(");\r\n");
              if (phase.ConnectionIdElement.CanBeInstantiatedLater) { 
                     PopIndent();
            this.Write("                    }\r\n");
              }
          } 
            this.Write("                    nextPhase = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(kvp.Key)));
            this.Write(";\r\n                }\r\n                break;\r\n");
      } 
            this.Write("            }\r\n            Update_(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootStep.ValueType));
            this.Write(">(item) , 1 << phase);\r\n        }\r\n");
 } else if (bindUniverse.NeedsIDataTemplateComponent) { 
            this.Write("        void Recycle() override\r\n        {\r\n            return;\r\n        }\r\n\r\n   " +
                    "     void ProcessBindings(IInspectable const& item, int itemIndex, int phase, in" +
                    "t32_t& nextPhase)\r\n        {\r\n            nextPhase = 1;\r\n        }\r\n");
 } 
            this.Write("\r\n");
 if (bindUniverse.DistinctConvertersUsed.Count() > 0) { 
     if (Model.CodeInfo.IsResourceDictionary) { 
            this.Write("        void SetConverterLookupRoot(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::ResourceDictionary const& resources)\r\n        {\r\n            localResources = r" +
                    "esources;\r\n        }\r\n");
     } else { 
            this.Write("        void SetConverterLookupRoot(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement const& rootElement)\r\n        {\r\n            converterLookupRoo" +
                    "t = rootElement;\r\n        }\r\n");
     }
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::IValueConverter LookupConverter(::winrt::hstring const& key)\r\n        {\r\n");
      if (!Model.CodeInfo.IsResourceDictionary) { 
            this.Write("            if (!localResources)\r\n            {\r\n                localResources =" +
                    " converterLookupRoot.get().Resources();\r\n                converterLookupRoot = n" +
                    "ullptr;\r\n            }\r\n");
      }
            this.Write("            auto boxedKey = ::winrt::box_value(key);\r\n            return (localRe" +
                    "sources.HasKey(boxedKey) ? localResources.Lookup(boxedKey) : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::Application::Current().Resources().Lookup(boxedKey))\r\n                .as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::IValueConverter>();\r\n        }\r\n");
  }
            this.Write("\r\n    private:\r\n");
  if (bindUniverse.BoundElements != null && bindUniverse.BoundElements.Any()) { 
            this.Write("        // Fields for each control that has bindings.\r\n");
  }
  foreach (ConnectionIdElement bindElement in bindUniverse.BoundElements) { 
      if (bindElement.IsWeakRef) { 
            this.Write("        ::winrt::weak_ref<");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.Type));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));
            this.Write(";\r\n");
      } else if (!bindElement.Type.IsDerivedFromControlTemplate()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.Type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));
            this.Write(" { nullptr };\r\n");
      }
      if (bindElement.CanBeInstantiatedLater) { 
          foreach (var ba in bindElement.BindAssignments) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ba.ObjectDeferredAssignmentCodeName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType.IsNullable ? "{nullptr}" : "{}"));
            this.Write(";\r\n");
          } 
      } 
  } 
  if (bindUniverse.UnloadableBindingSourceElements.Any()) { 
            this.Write("        std::list<std::function<void ()>> UnloadableBindingSourcesToUpdate;\r\n");
  } 
  if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
            this.Write("        std::list<int> UnloadedElementsToUpdate;\r\n");
  } 
  if (bindUniverse.NeedsBindingsTracking) { 
            this.Write("\r\n        // Fields for binding tracking.\r\n");
      Output_Listener_Tracking_Fields(bindUniverse);
  }
  if (bindUniverse.DistinctConvertersUsed.Count() > 0) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::ResourceDictionary localResources { nullptr };\r\n");
      if (!Model.CodeInfo.IsResourceDictionary) { 
            this.Write("        ::winrt::weak_ref<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement> converterLookupRoot;\r\n");
      }
  }
  if (bindUniverse.HasBindings) { 
      if (bindUniverse.HasFunctionBindings) {
          Output_TryGetValueFunctions(bindUniverse);
          Output_FunctionBindings(bindUniverse);
      }
      if (bindUniverse.NeedsCompleteUpdate) { 
          Output_CompleteUpdate(bindUniverse);
      }
            this.Write("\r\n        // Update methods for each path node used in binding steps.\r\n");
  }
  foreach (var bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true)) { 
            this.Write("\r\n");
      if (bindStep is FunctionStep) { 
            this.Write("        void Update_");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));
            this.Write("(int32_t phase)\r\n");
      } else { 
            this.Write("        void Update_");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.ValueType));
            this.Write(" obj, int32_t phase)\r\n");
      }
            this.Write("        {\r\n");
      Output_UpdateChildListeners_Call(bindStep, "obj");
      Output_Update_Steps(bindStep.ValueType.IsNullable, bindStep.Children, true, "phase");
      Output_Update_Steps(false, bindStep.Dependents, false, "phase");
      foreach (int distinctPhase in bindStep.DistinctPhases) { 
          Output_Binding_Phased_SetValue(distinctPhase, true, bindStep, false);
          Output_Binding_Phased_SetValue(distinctPhase, false, bindStep, false);
      }
      if (bindStep is RootStep) { 
          Output_Update_Steps(false, bindUniverse.BindPathSteps.Values.Where(s => s.Parent is StaticRootStep), false, "phase");
          if (bindUniverse.NeedsCompleteUpdate) { 
            this.Write("            CompleteUpdate(phase);\r\n");
          }
      }
            this.Write("        }\r\n");
  }
  foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true)) { 
      if (bindStep.Parent != null && bindStep.BindStatus.HasFlag(BindStatus.HasFallbackValue)) { 
            this.Write("\r\n        void UpdateFallback_");
            this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));
            this.Write("(int phase)\r\n        {\r\n");
          foreach (BindPathStep childStep in bindStep.Children.Concat(bindStep.Dependents)) { 
              if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue)) { 
            this.Write("            UpdateFallback_");
            this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));
            this.Write("(phase);\r\n");
              } 
          }
          foreach (int distinctPhase in bindStep.DistinctPhases)  { 
              Output_Binding_Phased_Fallback_SetValue(distinctPhase, true, bindStep);
              Output_Binding_Phased_Fallback_SetValue(distinctPhase, false, bindStep);
          } 
            this.Write("        }\r\n");
      } 
  } 
  if (bindUniverse.NeedsBindingsTracking) { 
            this.Write("\r\n        virtual void ReleaseAllListeners() override\r\n        {\r\n");
      foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.NeedsUpdateChildListeners)) { 
          Output_UpdateChildListeners_Call(step, "nullptr");
      }
            this.Write("        }\r\n\r\n        virtual void PropertyChanged(IInspectable const& sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventArgs const& e) override\r\n        {\r\n");
      foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true)) { 
          if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep || step is ArrayIndexStep || step is MapIndexStep) && step.ImplementsINPC) { 
              string cacheName = "GetDataRoot()";
              if (step.RequiresChildNotification && !(step is RootStep)) { 
                  cacheName="cachePC_" + step.CodeName;
              }
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" == sender)\r\n            {\r\n                auto propName = e.PropertyName();\r\n  " +
                    "              auto obj = sender.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(">();\r\n                if (propName.empty())\r\n                {\r\n");
              PushIndent(Indent.TwoTabs);
              Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
              PopIndent();
            this.Write("                }\r\n");
              foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct()) { 
            this.Write("                else if (propName == L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("\")\r\n                {\r\n");
                  PushIndent(Indent.TwoTabs); 
                  foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                      Output_Update_DataChanged_Step(child); 
                  } 
                  PopIndent(); 
            this.Write("                }\r\n");
              } 
              foreach (string functionName in step.TrackingSteps.OfType<FunctionStep>().Select(p => p.Method.MethodName).Distinct())
              {
            this.Write("                else if (propName == L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionName));
            this.Write("\")\r\n                {\r\n");
                  PushIndent(Indent.TwoTabs);
                  Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps.OfType<FunctionStep>().Where(p => p.Method.MethodName == functionName), false, "DATA_CHANGED");
                  PopIndent();
            this.Write("                }\r\n");
              }
            this.Write("            }\r\n");
          }
      }
      if (bindUniverse.NeedsCompleteUpdate) { 
            this.Write("            CompleteUpdate(DATA_CHANGED);\r\n");
      }
            this.Write("        }\r\n\r\n        void CollectionChanged(IInspectable const& sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::NotifyCollectionChangedEventArgs const& e) override\r\n        {\r\n");
  foreach (var step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true)) { 
      if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep) && step.ImplementsINCC && !step.ImplementsIObservableVector && !step.ImplementsIObservableMap) { 
          string cacheName = "GetDataRoot()"; 
          if (step.RequiresChildNotification && !(step is RootStep)) { 
              cacheName="cacheCC_" + step.CodeName; 
          }
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" == sender)\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(" obj = sender.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(">();\r\n");
          PushIndent();
          Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
          PopIndent();
            this.Write("            }\r\n");
      }
  }
  if (bindUniverse.NeedsCompleteUpdate) { 
            this.Write("            CompleteUpdate(DATA_CHANGED);\r\n");
  }
            this.Write("        }\r\n\r\n        void VectorChanged(IInspectable const& sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundationCollections)));
            this.Write("::IVectorChangedEventArgs const& e) override\r\n        {\r\n");
      foreach (var step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true)) { 
          if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableVector) { 
              string cacheName = "GetDataRoot()";
              if (step.RequiresChildNotification && !(step is RootStep)) { 
                  cacheName="cacheVC_" + step.CodeName;
              }
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" == sender)\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(" obj = sender.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(">();\r\n");
              PushIndent();
              Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
              PopIndent();
            this.Write("            }\r\n");
          }
      }
      if (bindUniverse.NeedsCompleteUpdate) { 
            this.Write("            CompleteUpdate(DATA_CHANGED);\r\n");
      }
            this.Write("        }\r\n\r\n        void MapChanged(IInspectable const& sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundationCollections)));
            this.Write("::IMapChangedEventArgs<::winrt::hstring> const& e) override\r\n        {\r\n");
      foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true)) { 
          if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableMap) { 
              string cacheName = "GetDataRoot()";
              if (step.RequiresChildNotification && !(step is RootStep)) { 
                  cacheName="cacheMC_" + step.CodeName;
              }
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" == sender)\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(" obj = sender.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(">();\r\n");
              PushIndent();
              Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
              PopIndent();
            this.Write("            }\r\n");
          }
      }
      if (bindUniverse.NeedsCompleteUpdate) { 
            this.Write("            CompleteUpdate(DATA_CHANGED);\r\n");
      }
            this.Write("        }\r\n\r\n        void DependencyPropertyChanged(DependencyObject const& sende" +
                    "r, DependencyProperty const& prop) override\r\n        {\r\n            if (sender)\r" +
                    "\n            {\r\n");
      foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true)) { 
          foreach (var child in step.TrackingSteps.OfType<DependencyPropertyStep>()) { 
            this.Write("                if (sender == cacheDPC_");
            this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));
            this.Write(this.ToStringHelper.ToStringWithCulture(step is RootStep ? ".get()" : ""));
            this.Write(" && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType.CppWinRTLocalElseRef()));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));
            this.Write("Property() == prop)\r\n                {\r\n                    auto obj = sender.as<" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));
            this.Write(">();\r\n");
              PushIndent(Indent.TwoTabs);
              Output_Update_DataChanged_Step(child);
              PopIndent();
            this.Write("                }\r\n");
          }
      }
      if (bindUniverse.HasFunctionBindings) { 
            this.Write("                CompleteUpdate(DATA_CHANGED);\r\n");
      }
            this.Write("            }\r\n        }\r\n\r\n");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("        virtual void ErrorsChanged(IInspectable const& sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs const& e) override\r\n        {\r\n");
      foreach (BindPathStep step in bindUniverse.INDEIPathSteps)
      {
          string cacheName = "GetDataRoot()";
          if (!(step is RootStep))
          {
              cacheName="cacheEC_" + step.CodeName;
          }
            this.Write("            if (");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" != nullptr && ");
            this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));
            this.Write(" == sender)\r\n            {\r\n                auto errorInfo= sender.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo>();\r\n                auto propertyName = e.PropertyName();" +
                    "\r\n                if (propertyName.empty())\r\n                {\r\n");
         foreach (var child in step.TrackingSteps.OfType<PropertyStep>())
         {
              Output_UpdateErrorsCall(child);
         }
            this.Write("                }\r\n");
      foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
      { 
            this.Write("                else if (propertyName == L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            this.Write("\")\r\n                {\r\n");
          foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) 
          { 
              Output_UpdateErrorsCall(child);
          } 
            this.Write("                }\r\n            }\r\n");
  }
 }
            this.Write("        }\r\n");
 void Output_UpdateErrorsCall(PropertyStep step) 
 { 
      foreach (var ba in step.AssociatedBindAssignments.Where(ba => ba.IsTrackingTarget)) {
            this.Write("                    UpdateErrors(");
            this.Write(this.ToStringHelper.ToStringWithCulture((ba as BindAssignmentBase).ConnectionIdElement.ObjectCodeName));
            this.Write(", errorInfo, L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(step.PropertyName));
            this.Write("\");\r\n");
      }
  }
 if (bindUniverse.INDEIPathSteps.Any()) { 
            this.Write("\r\n        void UpdateErrors(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write("::Control const& control, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo const& sender, ::winrt::hstring propertyName)\r\n        {\r\n" +
                    "            if (auto validationControl = control.try_as");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write(@"::IInputValidationControl>())
            {
                auto validationErrors =  validationControl.ValidationErrors();
                validationErrors.Clear();
                for (const auto& error : sender.GetErrors(propertyName))
                {
                    auto inputValidationError = ::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write(@"::InputValidationError>(error);
                    if (inputValidationError == nullptr)
                    {
                        auto errorMessage = ::winrt::unbox_value<::winrt::hstring>(error);
                        if (errorMessage.empty())
                        {
                            if (auto stringable = ::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write(@"::IStringable>(error))
                            {
                                errorMessage = stringable.ToString();
                            }
                            else
                            {
                                errorMessage = ::winrt::get_class_name(error);
                            }
                        }
                        inputValidationError = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write("::InputValidationError(errorMessage);\r\n                    }\r\n                   " +
                    " validationErrors.Append(inputValidationError);\r\n                }\r\n            " +
                    "}\r\n        }\r\n");
 }
 } 
  } 
 Output_BindingSetters(bindUniverse); 
            this.Write("    }; ");
 //End of bindings class 
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
 private void Output_ConnectionId_Case(ConnectionIdElement element)
 {
     if (element.BindUniverse.BoundElements.Contains(element)) { 
     Output_ApiInformationCall_Push(element.ApiInformation, Indent.ThreeTabs); 
this.Write("                    auto targetElement = target.as<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">();\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = targetElement;\r\n");

     foreach (BoundEventAssignment evt in element.BoundEventAssignments) { 
         Output_ApiInformationCall_Push(evt.ApiInformation, Indent.ThreeTabs); 
this.Write("                    targetElement.");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write("([this](");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.Declaration()));

this.Write(")\r\n                    {\r\n");

         if (!evt.PathStep.ValueType.IsDelegate()) { 
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write(";\r\n");

         } else { 
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.ForCall()));

this.Write(");\r\n");

         }
this.Write("                    });\r\n");

         Output_ApiInformationCall_Pop(evt.ApiInformation, Indent.ThreeTabs); 
     }
     if (element.CanBeInstantiatedLater && (element.HasBindAssignments || element.HasBoundEventAssignments))
     {
         // In Connect() we update non-load assignments first, 
         foreach (var ba in element.BindAssignments.Where(ba => !(ba is BoundLoadAssignment))) 
         { 
             PushIndent(Indent.TwoTabs); 
             Output_Binding_SetValue_Non_Function_Call(ba, ba.ObjectDeferredAssignmentCodeName.CppWinRTName(), false); 
             PopIndent(); 
         } 
     }
     foreach (var ba in element.BindAssignments.Where(bindAssignment => bindAssignment.IsTrackingTarget)) { 
         PushIndent();
         Output_Connect_TwoWayBinding(ba);
         PopIndent();
     }
     Output_ApiInformationCall_Pop(element.ApiInformation, Indent.ThreeTabs); 
     } 
     if (!element.IsBindingRoot) 
     { 
         // Queue load assignments to be updated later, because they're not available yet. 
         foreach (var childElem in element.Children.Intersect(element.BindUniverse.ElementsWithBoundLoadAssignments)) 
         { 
this.Write("                if (std::find(UnloadedElementsToUpdate.begin(), UnloadedElementsT" +
        "oUpdate.end(), ");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(") == UnloadedElementsToUpdate.end())\r\n                {\r\n                    Unlo" +
        "adedElementsToUpdate.push_back(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n                }\r\n");

         } 
     } 
     if (element.CanBeInstantiatedLater && element.HasRootNamedElementStep) { 
this.Write("                    this->UnloadableBindingSourcesToUpdate.push_back([this]()\r\n  " +
        "                  {\r\n");

         PushIndent(Indent.TwoTabs); 
         Output_Custom_Update_Call(element.RootNamedElementStep, element.RootNamedElementStep.CodeGen().PathExpression.CppWinRTName(), KnownStrings.NotPhased);
         PopIndent(); 
this.Write("                    });\r\n");

     } 
    if (element.TryGetValidationContextStep(out PropertyStep validationStep) && ProjectInfo.IsInputValidationEnabled && ProjectInfo.EnableDefaultValidationContextGeneration) 
    { 
        Output_ApiInformationCall_Push(validationStep.ApiInformation, Indent.ThreeTabs); 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::InputValidationContext context(L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.PropertyName));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.IsValueRequired));

this.Write(");\r\n                    target.as<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::IInputValidationControl>().ValidationContext(context);\r\n");

        Output_ApiInformationCall_Pop(validationStep.ApiInformation, Indent.ThreeTabs); 
    }
  }
     private void Output_Listener_Tracking_Fields(BindUniverse bindUniverse)
     {
         foreach(var cache in GetCacheDeclarations(bindUniverse)) { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(cache));

this.Write("\r\n");

         }
         foreach(var token in GetTokenDeclarations(bindUniverse)) { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(token));

this.Write("\r\n");

         }
     }
 private void Output_Connect_TwoWayBinding(BindAssignment ba)
 {
     Output_ApiInformationCall_Push(ba.ApiInformation, Indent.None); 
     if (ba.NeedsLostFocusForTwoWay) { 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ReferenceExpression));

this.Write(".LostFocus(\r\n                    [this] (IInspectable const& sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::RoutedEventArgs const& e)\r\n                    {\r\n");

     } else { 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ReferenceExpression));

this.Write(".RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.CppWinRTLocalElseRef()));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("Property(),\r\n                    [this] (DependencyObject const& sender, Dependen" +
        "cyProperty const& prop)\r\n                    {\r\n");

     } 
this.Write("                        if (IsInitialized())\r\n                        {\r\n        " +
        "                    // Update Two Way binding\r\n");

     MethodStep bindBackStep = ba.BindBackStep as MethodStep; 
     if (bindBackStep != null) { 
         var param = bindBackStep.Parameters[0]; 
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ReverseAssignmentExpression));

this.Write(";\r\n");

                         Output_NullCheckedAssignment(bindBackStep, null);
     } else { 
                         Output_NullCheckedAssignment(ba.PathStep, ba.ReverseAssignmentExpression);
     }
this.Write("                        }\r\n                    });\r\n");

     Output_ApiInformationCall_Pop(ba.ApiInformation, Indent.None); 
 } 
 void  Output_NullCheckedAssignment(BindPathStep step, LanguageSpecificString value) 
 { 
     PushIndent(Indent.FourTabs);
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(parent.CodeGen().PathExpression));

this.Write(" != nullptr)\r\n            {\r\n");

         PushIndent(); 
     } 
     if (value != null) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathSetExpression(value)));

this.Write(";\r\n");

     } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n");

     } 
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
         PopIndent(); 
this.Write("            }\r\n");

     } 
     PopIndent();
 } 
     private void Output_UpdateChildListeners_Call(BindPathStep step, string parameter)
     {
         if (step.NeedsUpdateChildListeners)
         {
             Output_ApiInformationCall_Push(step.ApiInformation, Indent.OneTab); 
             if (step.ImplementsINPC) { 
this.Write("            _bindingsTracking->UpdatePropertyChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", cachePC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", tokenPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled) { 
this.Write("            _bindingsTracking->UpdateErrorsChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", cacheEC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", tokenEC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsIObservableVector) { 
this.Write("            _bindingsTracking->UpdateVectorChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType.MemberFriendlyName()));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", cacheVC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", tokenVC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsIObservableMap) { 
this.Write("            _bindingsTracking->UpdateMapChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType.MemberFriendlyName()));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", cacheMC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", tokenMC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             else if (step.ImplementsINCC) { 
this.Write("            _bindingsTracking->UpdateCollectionChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", cacheCC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", tokenCC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             foreach (var child in step.TrackingSteps.OfType<DependencyPropertyStep>()) { 
this.Write("            _bindingsTracking->UpdateDependencyPropertyChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType.CppWinRTLocalElseRef()));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property(), cacheDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(", tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(");\r\n");

             }
             Output_ApiInformationCall_Pop(step.ApiInformation, Indent.OneTab); 
         }
     }
 private void Output_Binding_Phased_SetValue(int phase, bool isTracking, BindPathStep bindStep, bool isFunctionResult)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("            if(");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n            {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue(bindAssignment, isFunctionResult);
         }
         PopIndent();
this.Write("            }\r\n");

     }
 }
 private void Output_Binding_Phased_Fallback_SetValue(int phase, bool isTracking, BindPathStep bindStep)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking && ba.BindStatus.HasFlag(BindStatus.HasFallbackValue) select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("            if(");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n            {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, bindAssignment.FallbackValueExpression.CppWinRTName(), true);
         }
         PopIndent();
this.Write("            }\r\n");

     }
 }
 private void Output_Binding_SetValue(BindAssignment bindAssignment, bool isFunctionResult)
 {
         if (bindAssignment.PathStep is FunctionStep && !isFunctionResult)
         {
this.Write("            PendingFunctionBindings[L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write("\"] = std::bind(&");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.BindUniverse.BindingsClassName));

this.Write("::Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write(", this, std::placeholders::_1);\r\n");

         }
         else
         {
             string value = bindAssignment.DirectAssignmentExpression(isFunctionResult ? "result" : "obj").CppWinRTName();
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, value, true);
         }
     }
 private void Output_Binding_SetValue_Non_Function_Call(BindAssignment ba, String value, bool includeDeferredSet)
 {
     var element = ba.ConnectionIdElement;
this.Write("            // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

     Output_ApiInformationCall_Push(ba.ApiInformation, Indent.OneTab); 
     if (ba is BoundLoadAssignment) { 
         if (includeDeferredSet) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n\r\n");

     }
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(")\r\n            {\r\n");

         if (ba.BindUniverse.IsFileRoot) { 
this.Write("                GetDataRoot().FindName(L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

         } else { 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.BindUniverse.RootElement.ReferenceExpression));

this.Write(".FindName(L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

         }
this.Write("            }\r\n            else\r\n            {\r\n");

         if (ba.BindUniverse.IsFileRoot) { 
this.Write("                ::winrt::get_self<");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.BindUniverse.DataRootType.CppWinRTLocalElseRef()));

this.Write(">(GetDataRoot())->UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(");\r\n");

         } else { 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(") \r\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlMarkupHelper::UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(");\r\n                }\r\n                DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

         }
this.Write("            }\r\n");

     } else { 
         if (element.NeedsNullCheckBeforeSetValue) {
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(")\r\n            {\r\n");

             PushIndent();
         }
         var potentiallyBoxedValue = ba.NeedsBox ? $"::winrt::box_value({value})" : value; 
         if (ba.MemberType.IsNullable) { 
this.Write("            Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(potentiallyBoxedValue));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.TargetNullValueExpression));

this.Write(");\r\n");

         } else {
this.Write("            Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(potentiallyBoxedValue));

this.Write(");\r\n");

         }
         if (element.NeedsNullCheckBeforeSetValue) {
             PopIndent();
this.Write("            }\r\n");

             if (includeDeferredSet && element.CanBeInstantiatedLater) { 
this.Write("            else\r\n            {\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n            }\r\n");

             }
         }
     }
     Output_ApiInformationCall_Pop(ba.ApiInformation, Indent.OneTab); 
 }
 private void Output_Update_DataChanged_Step( BindPathStep step)
 {
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("            if (obj)\r\n            {\r\n");

     }
     Output_UpdateCall(step, KnownStrings.DataChanged); 
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("            }\r\n");

     }
     if (step.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
     {
this.Write("            else\r\n            {\r\n                UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(DATA_CHANGED);\r\n            }\r\n");

     }
 }
 private void Output_Update_Steps(bool checkForNull, IEnumerable<BindPathStep> steps, bool checkPhaseCondition, string phaseParam)
 {
     if (steps.Count() > 0) 
     {
         if (checkForNull) 
         {
this.Write("            if (obj)\r\n            {\r\n");

         }
         List<BindPathStep> stepsWithFallback = new List<BindPathStep>();
         string lastCondition = null;
         foreach (BindPathStep childStep in (from step in steps where step.IsIncludedInUpdate orderby step.PhaseList select step))
         {
             if(checkPhaseCondition) 
             { 
                 string thisCondition = GetPhaseCondition(childStep);
                 if (thisCondition != lastCondition)
                 {
                     if (lastCondition != null)
                     {
this.Write("                }\r\n");

                     }
                     lastCondition = thisCondition;
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(thisCondition));

this.Write(")\r\n                {\r\n");

                 }
                 PushIndent();
                 Output_UpdateCall(childStep, phaseParam); 
                 PopIndent();
             }
             else
             {
                 if (lastCondition != null)
                 {
this.Write("                }\r\n");

                 }
                 lastCondition = null;
                 Output_UpdateCall(childStep, phaseParam); 
             } 
             if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
             {
               stepsWithFallback.Add(childStep);
             }
         }
                 if (lastCondition != null)
                 {
this.Write("                }\r\n");

                 }
         if (checkForNull) 
         {
this.Write("            }\r\n");

             if (stepsWithFallback.Count > 0) 
             {
this.Write("            else\r\n            {\r\n");

                 foreach (BindPathStep childStep in stepsWithFallback)
                 {
                     if(checkPhaseCondition) 
                     { 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(GetPhaseCondition(childStep)));

this.Write(")\r\n                {\r\n                    UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n                }\r\n");

                     } 
                     else 
                     { 
this.Write("                UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

                     } 
                 }
this.Write("            }\r\n");

             }
         }
     }
 }
 private void Output_Custom_Update_Call(BindPathStep step, string firstArgument, string phaseParam)
 {
     if (string.IsNullOrEmpty(firstArgument)) { 
this.Write("                Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

     } else { 
         Output_ApiInformationCall_Push(step.ApiInformation, Indent.TwoTabs);
this.Write("                Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(firstArgument));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.TwoTabs);
     }
 }
 private void Output_UpdateCall(BindPathStep step, string phaseParam)
 {
     string firstArgument = step.CodeGen().UpdateCallParam.CppWinRTName(); 
     Output_Custom_Update_Call(step, firstArgument, phaseParam); 
 }
 private void Output_CompleteUpdate(BindUniverse bindUniverse)
 {
     List<string> conditions = new List<string>();
     bool needsLoop = bindUniverse.UnloadableBindingSourceElements.Any(); 
this.Write("\r\n        void CompleteUpdate(int phase)\r\n        {\r\n");

     if (needsLoop) { 
this.Write("            do\r\n            {\r\n");

         PushIndent(); 
     } 
     if (bindUniverse.HasFunctionBindings) { 
this.Write(@"        auto copiedBindings = std::move(PendingFunctionBindings);
        PendingFunctionBindings = std::map<::std::wstring, std::function<void (int)>>();

        for(auto& pair : copiedBindings)
        {
            pair.second(phase);
        }
");

         conditions.Add("!this->PendingFunctionBindings.empty()"); 
     } 
     if (bindUniverse.UnloadableBindingSourceElements.Any()) {
this.Write("            while (!this->UnloadableBindingSourcesToUpdate.empty())\r\n            " +
        "{\r\n                this->UnloadableBindingSourcesToUpdate.front()();\r\n          " +
        "      this->UnloadableBindingSourcesToUpdate.pop_front();\r\n            }\r\n");

         conditions.Add("!this->UnloadableBindingSourcesToUpdate.empty()"); 
     } 
     if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
this.Write("            while (!UnloadedElementsToUpdate.empty())\r\n            {\r\n           " +
        "     UpdateUnloadedElement(UnloadedElementsToUpdate.front());\r\n                U" +
        "nloadedElementsToUpdate.pop_front();\r\n            }\r\n");

         conditions.Add("!this->UnloadedElementsToUpdate.empty()"); 
     } 
     if (needsLoop) { 
         PopIndent(); 
this.Write("            }\r\n            while (");

this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" || ", conditions)));

this.Write(");\r\n");

     } 
this.Write("        }\r\n");

 }
 private void Output_FunctionBindings(BindUniverse bindUniverse)
 {
this.Write("        std::map<::std::wstring, std::function<void (int)>> PendingFunctionBindin" +
        "gs;\r\n\r\n");

     foreach (FunctionStep functionStep in bindUniverse.BindPathSteps.Values.Where(s => s is FunctionStep))
     {
this.Write("\r\n        void Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeName));

this.Write("(int phase)\r\n        {\r\n");

         foreach (var param in functionStep.Parameters.OrderBy(p => p.HasTryGetValue)) {
             if (param.HasTryGetValue && functionStep.RequiresSafeParameterRetrieval) {
                 if (param.AssignmentType.IsNullable) {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.AssignmentType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = nullptr;\r\n");

                 } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.AssignmentType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(";\r\n");

                 }
this.Write("            if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(param.TryGetValueCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(")) { return; }\r\n");

             } else {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.ValueType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.CodeGen().PathExpression));

this.Write(";\r\n");

             }
         }
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.ValueType));

this.Write(" result = ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeGen().PathExpression));

this.Write(";\r\n");

         foreach (int distinctPhase in functionStep.DistinctPhases) {
             Output_Binding_Phased_SetValue(distinctPhase, true, functionStep, true);
             Output_Binding_Phased_SetValue(distinctPhase, false, functionStep, true);
         }
this.Write("        }\r\n");

     }
 }
 private void Output_TryGetValueFunctions(BindUniverse bindUniverse)
 {
     foreach (BindPathStep step in bindUniverse.TryGetValueSteps)
     {
this.Write("\r\n        bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.TryGetValueCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write("& val)\r\n        {\r\n");

         if (step is RootStep || !step.Parent.IsIncludedInUpdate) {
this.Write("            val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n            return true;\r\n");

         }
         else {
             if (step.Parent.ValueType.IsNullable) {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.ValueType));

this.Write(" obj{nullptr};\r\n            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj) && obj)\r\n");

             } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.ValueType));

this.Write(" obj;\r\n            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj))\r\n");

             } 
this.Write("            {\r\n                val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().UpdateCallParam));

this.Write(";\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n" +
        "                return false;\r\n            }\r\n");

         }
this.Write("        }\r\n");

     }
 }
 private void Output_BindingSetValueFunction(BindAssignment ba)
 {
     if (ba.MemberType.IsNullable) { 
this.Write("\r\n        static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" const& obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" value, std::optional<::winrt::hstring> const& targetNullValue)\r\n        {\r\n     " +
        "       if (!value && targetNullValue)\r\n            {\r\n                value = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType.GetStringToThing("targetNullValue.value()")));

this.Write(";\r\n            }\r\n");

     } else { 
this.Write("\r\n        static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" const& obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" const& value)\r\n        {\r\n");

     }
     if (ba.IsAttachable) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType));

this.Write("::Set");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj, value);\r\n");

     } else { 
this.Write("            obj.");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(value);\r\n");

     }
this.Write("        }\r\n");

 }
     private string GetCacheArgumentStatement(BindPathStep step, string prefix, BindPathStep child)
     {
         return String.Format("{0}{1}",  prefix, child.CodeName);
     }
 private void Output_BindingSetters(BindUniverse bu)
{
    var distinctAsignmentsByMember = from ba in bu.BindAssignments.Where(ba => ba.HasSetValueHelper) group ba by ba.MemberFullName;
    foreach (var item in distinctAsignmentsByMember) {
        Output_BindingSetValueFunction(item.First());
    }
}
 private void Output_ApiInformationCall_Push(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PushIndent(indent); 
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(")\r\n        {\r\n");

         PopIndent(); 
         PushIndent(); 
     } 
 } 
 private void Output_ApiInformationCall_Pop(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PopIndent(); 
         PushIndent(indent); 
this.Write("        }\r\n");

         PopIndent(); 
     } 
 } 
    }
}
