<#@ template language="C#" inherits="CppCX_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
#pragma once
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

#include "XamlTypeInfo.g.h"

<# OutputNamespaceBegin(Model.CodeInfo.ClassName.Namespace); #>
partial ref class <#=Model.CodeInfo.ClassName.ShortName#> :  public ::<#=Colonize(Model.CodeInfo.BaseTypeName)#>,
    public <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider
{
public:
    void InitializeComponent();
<#  if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#  {#>
    void AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider);
<#  }#>
    [::Windows::Foundation::Metadata::DefaultOverload]
    virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName type);
    virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlType(::Platform::String^ fullName);
    virtual ::Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>^ GetXmlnsDefinitions();
private:
    ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ __provider; 
    bool _contentLoaded;
    property ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _AppProvider
    {
        ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ get();
    }
};
<# OutputNamespaceEnd(Model.CodeInfo.ClassName.Namespace); #>
<#+ #>