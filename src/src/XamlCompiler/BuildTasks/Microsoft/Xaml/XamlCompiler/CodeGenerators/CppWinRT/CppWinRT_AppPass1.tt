<#@ template language="C#" inherits="CppWinRT_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
#pragma once
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

#include <unknwn.h>

// Undefine GetCurrentTime macro to prevent
// conflict with Storyboard::GetCurrentTime
#undef GetCurrentTime

#include "winrt/<#=KnownNamespaces.Xaml#>.h"
#include "winrt/<#=KnownNamespaces.XamlMarkup#>.h"
#include "winrt/<#=KnownNamespaces.XamlInterop#>.h"
#include "winrt/<#=KnownNamespaces.WindowsXamlInterop#>.h"

#include "XamlTypeInfo.xaml.g.h"
#include "XamlMetaDataProvider.h"

namespace winrt::<#=Colonize(Model.CodeInfo.ClassName.Namespace)#>::implementation
{
    template <typename D, typename ... Interfaces>
    struct AppT: public <#=Projection(Model.CodeInfo.BaseTypeName)#>T<D, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider, Interfaces...>
    {
        using IXamlType = <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType;

        void InitializeComponent()
        {
            if (_contentLoaded)
                return;
           
            _contentLoaded = true;

            ::winrt::Windows::Foundation::Uri resourceLocator{ L"<#=Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)#>" };
            <#=Projection(KnownNamespaces.Xaml)#>::Application::LoadComponent(*this, resourceLocator);
        }

<#  if(!ProjectInfo.GenerateProviderCode) { #>

        void AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider const& otherProvider)
        {
            AppProvider()->AddOtherProvider(otherProvider);
        }
<#  }#>

        IXamlType GetXamlType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName const& type)
        {
            return AppProvider()->GetXamlType(type);
        }

        IXamlType GetXamlType(::winrt::hstring const& fullName)
        {
            return AppProvider()->GetXamlType(fullName);
        }

        ::winrt::com_array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition> GetXmlnsDefinitions()
        {
            return AppProvider()->GetXmlnsDefinitions();
        }

    private:
        bool _contentLoaded{false};
        winrt::com_ptr<XamlMetaDataProvider> _appProvider;
        winrt::com_ptr<XamlMetaDataProvider> AppProvider()
        {
            if (!_appProvider)
            {
                _appProvider = winrt::make_self<XamlMetaDataProvider>();
            }
            return _appProvider;
        }
    };
}
