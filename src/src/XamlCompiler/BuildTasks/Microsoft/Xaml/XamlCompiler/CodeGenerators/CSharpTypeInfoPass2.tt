<#@ template language="C#" inherits="CSharp_CodeGenerator<TypeInfoDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#  if(!Model.GenerateTypeInfo)  #>
<#  {                                       #>
// No local types.
<#  }                                       #>
<#  else                                    #>
<#  {                                       #>

<#  if (!ProjectInfo.IsLibrary && Model.AppMetadataProviderNamespace != null) #>
<#  { #>
namespace <#=Model.AppMetadataProviderNamespace#>
{
<#      Output_AppMetadataProvider();      #>
}
<#  } #>

namespace <#=ProjectInfo.XamlTypeInfoNamespace#>
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
<#  if (ProjectInfo.GenerateFullXamlMetadataProvider) { #>
    [<#=Globalize(KnownNamespaces.XamlMarkup)#>.FullXamlMetadataProvider()]
<#  } #>
    public sealed class XamlMetaDataProvider : <#=Globalize(KnownTypes.IXamlMetadataProvider)#>
    {
        private <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider _provider = null;

        private <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

<#      if((!ProjectInfo.GenerateProviderCode)  && !ProjectInfo.EnableTypeInfoReflection)#>
<#      {#>
        /// <summary>
        /// AddOtherProvider(IXamlMetadataProvider)
        /// </summary>
        internal void AddOtherProvider(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> otherProvider)
        {
            Provider.AddOtherProvider(otherProvider);
        }

<#      }#>
        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        <#=OverloadAttribute#>
        <#=NotCLSCompliantAttribute#>public <#=Globalize(KnownTypes.IXamlType)#> GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        <#=NotCLSCompliantAttribute#>public <#=Globalize(KnownTypes.IXamlType)#> GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        <#=NotCLSCompliantAttribute#>public <#=Globalize(KnownTypes.XmlnsDefinition)#>[] GetXmlnsDefinitions()
        {
            return new <#=Globalize(KnownTypes.XmlnsDefinition)#>[0];
        }
    }

<#    if(ProjectInfo.EnableTypeInfoReflection)#>
<#    { #>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    internal partial class XamlTypeInfoProvider
    {
        private <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider _Provider;
        private <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider Provider
        {
            get
            {
                if (_Provider == null)
                {
                    _Provider = new <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider();
                }
                return _Provider;
            }
        }

        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlTypeByType(global::System.Type type)
        {
            return Provider.GetXamlType(type);
        }

        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlTypeByName(string typeName)
        {
            return Provider.GetXamlType(typeName);
        }
    }
<#    } #>
<#    else #>
<#    { #>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    internal partial class XamlTypeInfoProvider
    {
        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlTypeByType(global::System.Type type)
        {
            <#=Globalize(KnownTypes.IXamlType)#> xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
<#      if(SchemaInfo.OtherMetadataProviders.Count > 0)    #>
<#      {                                       #>
                var userXamlType = xamlType as <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    <#=Globalize(KnownTypes.IXamlType)#> libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
<#      }                                       #>
                if (xamlType != null)
                {
<#                  //  IXamlType.FullName is not Type.FullName, it does not use reflection.    #>
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            <#=Globalize(KnownTypes.IXamlType)#> xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
<#      if(SchemaInfo.OtherMetadataProviders.Count > 0)    #>
<#      {                                       #>
                var userXamlType = xamlType as <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    <#=Globalize(KnownTypes.IXamlType)#> libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
<#      }                                       #>
                if (xamlType != null)
                {
<#                  //  IXamlType.FullName is not Type.FullName, it does not use reflection.    #>
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public <#=Globalize(KnownTypes.IXamlMember)#> GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            <#=Globalize(KnownTypes.IXamlMember)#> xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, <#=Globalize(KnownTypes.IXamlType)#>>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, <#=Globalize(KnownTypes.IXamlType)#>>();

        global::System.Collections.Generic.Dictionary<global::System.Type, <#=Globalize(KnownTypes.IXamlType)#>>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, <#=Globalize(KnownTypes.IXamlType)#>>();

        global::System.Collections.Generic.Dictionary<string, <#=Globalize(KnownTypes.IXamlMember)#>>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, <#=Globalize(KnownTypes.IXamlMember)#>>();

<#      Output_TypeTables();            #>

<#      Output_Activators();            #>
<#      Output_ListAndMapMethods();     #>

<#      Output_CreateXamlType();        #>

<#      Output_CheckOtherMetadataProviders();  #>

<#      Output_SettersAndGetters();     #>

<#      Output_CreateXamlMember();      #>
    }

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    internal class XamlSystemBaseType : <#=Globalize(KnownTypes.IXamlType)#>
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public <#=Globalize(KnownTypes.IXamlType)#> BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public <#=Globalize(KnownTypes.IXamlMember)#> ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public <#=Globalize(KnownTypes.IXamlMember)#> GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public <#=Globalize(KnownTypes.IXamlType)#> ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public <#=Globalize(KnownTypes.IXamlType)#> KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public <#=Globalize(KnownTypes.IXamlType)#> BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    internal class XamlUserType : <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType
        , <#=Globalize(KnownTypes.IXamlType)#>
    {
        <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider _provider;
        <#=Globalize(KnownTypes.IXamlType)#> _baseType;
        <#=Globalize(KnownTypes.IXamlType)#> _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(<#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, <#=Globalize(KnownTypes.IXamlType)#> baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public <#=Globalize(KnownTypes.IXamlType)#> BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public <#=Globalize(KnownTypes.IXamlType)#> BoxedType { get { return _boxedType; } }

        override public <#=Globalize(KnownTypes.IXamlMember)#> ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public <#=Globalize(KnownTypes.IXamlType)#> ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public <#=Globalize(KnownTypes.IXamlType)#> KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public <#=Globalize(KnownTypes.IXamlMember)#> GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(<#=Globalize(KnownTypes.IXamlType)#> boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    internal class XamlMember : <#=Globalize(KnownTypes.IXamlMember)#>
    {
        <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(<#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public <#=Globalize(KnownTypes.IXamlType)#> Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public <#=Globalize(KnownTypes.IXamlType)#> TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
<#  } //End of non-reflection type info provider #>
}
<# } // End of both type info providers codegen#>
<#+ #>


<#+         private void Output_CheckOtherMetadataProviders()   #>
<#+         {                                                   #>
<#+             if(SchemaInfo.OtherMetadataProviders.Count > 0)            #>
<#+             {                                               #>
<#+                 if (!ProjectInfo.GenerateProviderCode) #>
<#+                 {#>
        public void AddOtherProvider(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> otherProvider)
        {
            if(_otherProviders == null)
            {
                var otherProviders = new global::System.Collections.Generic.List<<#=Globalize(KnownTypes.IXamlMetadataProvider)#>>();
                _otherProviders = otherProviders;
            }
            _otherProviders.Add(otherProvider); 
        }
<#+                 }#>
        private global::System.Collections.Generic.List<<#=Globalize(KnownTypes.IXamlMetadataProvider)#>> _otherProviders;
        private global::System.Collections.Generic.List<<#=Globalize(KnownTypes.IXamlMetadataProvider)#>> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<<#=Globalize(KnownTypes.IXamlMetadataProvider)#>>();
<#+                 if (ProjectInfo.GenerateProviderCode && (SchemaInfo.OtherMetadataProviders.Count > 0)) #>
<#+                 {#>
                    <#=Globalize(KnownTypes.IXamlMetadataProvider)#> provider;
<#+                     foreach(var xmp in SchemaInfo.OtherMetadataProviders) #>
<#+                     {                                           #>
                    provider = new <#=xmp.FullName#>() as <#=Globalize(KnownTypes.IXamlMetadataProvider)#>;
                    otherProviders.Add(provider); 
<#+                     }                                           #>
<#+                 }#>
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private <#=Globalize(KnownTypes.IXamlType)#> CheckOtherMetadataProvidersForName(string typeName)
        {
            <#=Globalize(KnownTypes.IXamlType)#> xamlType = null;
            <#=Globalize(KnownTypes.IXamlType)#> foundXamlType = null;
            foreach(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private <#=Globalize(KnownTypes.IXamlType)#> CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            <#=Globalize(KnownTypes.IXamlType)#> xamlType = null;
            <#=Globalize(KnownTypes.IXamlType)#> foundXamlType = null;
            foreach(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }
<#+             }                           #>
<#+         }                               #>


<#+         private void Output_TypeTables()     #>
<#+         {                                       #>
        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[<#=SchemaInfo.TypeTableFromAllAssemblies.Count#>];
<#+         for(int i=0; i<SchemaInfo.TypeTable.Count; i++)             #>
<#+         {                                                           #>
<#+             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      #>
            _typeNameTable[<#=entry.TypeIndex#>] = "<#=entry.StandardName#>";
<#+         }                                                           #>

            _typeTable = new global::System.Type[<#=SchemaInfo.TypeTableFromAllAssemblies.Count#>];
<#+         for(int i=0; i<SchemaInfo.TypeTable.Count; i++)             #>
<#+         {                                                           #>
<#+             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      #>
<#+             if (entry.IsDeprecated)                                 #>
<#+             {                                                       #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+             }                                                       #>
            _typeTable[<#=entry.TypeIndex#>] = typeof(<#=entry.FullName#>);
<#+             if (entry.IsDeprecated)                                 #>
<#+             {                                                       #>
#pragma warning restore 0618
<#+             }                                                       #>
<#+         }                                                           #>
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }
<#+         }                                       #>


<#+         private void Output_CreateXamlType()    #>
<#+         {                                       #>
        private <#=Globalize(KnownTypes.IXamlType)#> CreateXamlType(int typeIndex)
        {
            <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType xamlType = null;
<#+             if(SchemaInfo.TypeTable.Count == 0) #>
<#+             {                                   #>
            // No Local Types
<#+             }                                   #>
<#+             else                                #>
<#+             {                                   #>
            <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {
<#+                 foreach(InternalTypeEntry entry in SchemaInfo.TypeTable)    #>
<#+                 {                                                           #>

            case <#=entry.TypeIndex#>:   //  <#=entry.StandardName#>
<#+                     if(entry.IsSystemType)              #>
<#+                     {                                   #>
                xamlType = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType(typeName, type);
                break;
<#+                     }                                   #>
<#+                     else                                #>
<#+                     {                                   #>
<#+                         InternalXamlUserTypeInfo uentry = entry.UserTypeInfo;   #>
<#+                         if(uentry.BaseType == null)     #>
<#+                         {                               #>
                userType = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType(this, typeName, type, null);
<#+                         }                               #>
<#+                         else                            #>
<#+                         {                               #>
                userType = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType(this, typeName, type, GetXamlTypeByName("<#=uentry.BaseType.StandardName#>"));
<#+                         }#>
<#+                         if (uentry.BoxedType != null) #>
<#+                         { #>
                userType.SetBoxedType(GetXamlTypeByName("<#=uentry.BoxedType.StandardName#>"));
                userType.BoxInstance = userType.BoxType<<#=uentry.BoxedType.FullName#>>;
<#+                         }#>
<#+                         if(uentry.IsConstructible && !uentry.IsReturnTypeStub)  #>
<#+                         {                               #>
                userType.Activator = <#=Model.ActivatorName(uentry)#>;
<#+                         }                               #>
<#+                         if(uentry.ContentProperty != null)   #>
<#+                         {                               #>
                userType.SetContentPropertyName("<#=uentry.ContentProperty.DeclaringType.StandardName#>.<#=uentry.ContentProperty.Name#>");
<#+                         }                               #>
<#+                         if(uentry.IsCollection)         #>
<#+                         {                               #>
                userType.CollectionAdd = <#=Model.VectorAddName(uentry)#>;
<#+                         }                               #>
<#+                         if(uentry.IsDictionary)         #>
<#+                         {                               #>
                userType.DictionaryAdd = <#=Model.MapAddName(uentry)#>;
<#+                         }                               #>
<#+                         if (uentry.HasCreateFromStringMethod)#>
<#+                         {#>
<#+                             if (uentry.TypeEntry.UnderlyingType.IsValueType)#>
<#+                             {#>
                userType.CreateFromStringMethod = x => (global::System.Object)<#=uentry.CreateFromStringMethod.ResolvedName.CSharpName()#>(x);
<#+                             }#>
<#+                             else#>
<#+                             {#>
                userType.CreateFromStringMethod = <#=uentry.CreateFromStringMethod.ResolvedName.CSharpName()#>;
<#+                             }#>
<#+                         }#>
<#+                         foreach(InternalXamlUserMemberInfo mem in uentry.Members)   #>
<#+                         {                                                           #>
                userType.AddMemberName("<#=mem.Name#>");
<#+                         }                                                           #>
<#+                         if(uentry.HasEnumValues)        #>
<#+                         {                               #>
<#+                             if (uentry.IsDeprecated)    #>
<#+                             {                           #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+                             }                                            #>
<#+                             foreach(string eValue in uentry.EnumValues)  #>
<#+                             {                                            #>
                userType.AddEnumValue("<#=eValue#>", <#=uentry.FullName#>.<#=eValue#>);
<#+                             }                           #>
<#+                             if (uentry.IsDeprecated)    #>
<#+                             {                           #>
#pragma warning restore 0618
<#+                             }                           #>
<#+                         }                               #>
<#+                         if(uentry.IsBindable)           #>
<#+                         {                               #>
                userType.SetIsBindable();
<#+                         }                               #>
<#+                         if(uentry.IsMarkupExtension)    #>
<#+                         {                               #>
                userType.SetIsMarkupExtension();
<#+                         }                               #>
<#+                         if(uentry.IsReturnTypeStub)     #>
<#+                         {                               #>
                userType.SetIsReturnTypeStub();
<#+                         }                               #>
<#+                         if(uentry.IsLocalType)          #>
<#+                         {                               #>
                userType.SetIsLocalType();
<#+                         }                               #>
                xamlType = userType;
                break;
<#+                     }   #>
<#+                 }       #>
            }
<#+             }       #>
            return xamlType;
        }
<#+         }           #>


<#+         private void Output_Activators()                                        #>
<#+         {                                                                       #>
<#+             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  #>
<#+             {                                                                   #>
<#+                 if(entry.IsConstructible)                                       #>
<#+                 {                                                               #>
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+                     }                                                           #>
        private object <#=Model.ActivatorName(entry)#>() { return new <#=entry.FullName#>(); }
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning restore 0618
<#+                     }                                                           #>

<#+                 }           #>
<#+             }               #>
<#+         }                   #>

<#+         private void Output_ListAndMapMethods()                                 #>
<#+         {                                                                       #>
<#+             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  #>
<#+             {                                                                   #>
<#+                 if(entry.IsCollection)                                          #>
<#+                 {                                                               #>
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+                     }                                                           #>
        private void <#=Model.VectorAddName(entry)#>(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<<#=entry.ItemType.FullName#>>)instance;
            var newItem = (<#=entry.ItemType.FullName#>)item;
            collection.Add(newItem);
        }
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning restore 0618
<#+                     }                                                           #>

<#+                 }                       #>
<#+                 if(entry.IsDictionary)  #>
<#+                 {                       #>
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+                     }                                                           #>
        private void <#=Model.MapAddName(entry)#>(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<<#=entry.KeyType.FullName#>, <#=entry.ItemType.FullName#>>)instance;
            var newKey = (<#=entry.KeyType.FullName#>)key;
            var newItem = (<#=entry.ItemType.FullName#>)item;
            collection.Add(newKey, newItem);
        }
<#+                     if (entry.IsDeprecated)                                     #>
<#+                     {                                                           #>
#pragma warning restore 0618
<#+                     }                                                           #>

<#+                 }           #>
<#+             }               #>
<#+         }                   #>

<#+         private void Output_CreateXamlMember()   #>
<#+         {                                        #>
        private <#=Globalize(KnownTypes.IXamlMember)#> CreateXamlMember(string longMemberName)
        {
            <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMember xamlMember = null;
<#+             if(SchemaInfo.UserMemberInfo.Count == 0)    #>
<#+             {                                           #>
            // No Local Properties
<#+             }               #>
<#+             else            #>
<#+             {               #>
            <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType userType;

            switch (longMemberName)
            {
<#+                 for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    #>
<#+                 {                                                                       #>
<#+                     InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    #>
            case "<#=entry.DeclaringType.StandardName#>.<#=entry.Name#>":
                userType = (<#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType)GetXamlTypeByName("<#=entry.DeclaringType.StandardName#>");
                xamlMember = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMember(this, "<#=entry.Name#>", "<#=entry.Type.StandardName#>");
<#+                     if(entry.TargetType != null)    #>
<#+                     {                               #>
                xamlMember.SetTargetTypeName("<#=entry.TargetType.StandardName#>");
<#+                     }                               #>
<#+                     if(entry.IsDependencyProperty)  #>
<#+                     {                               #>
                xamlMember.SetIsDependencyProperty();
<#+                     }                               #>
<#+                     if(entry.IsAttachable )         #>
<#+                     {                               #>
                xamlMember.SetIsAttachable();
<#+                     }                               #>
<#+                     if (entry.HasPublicGetter)      #>
<#+                     {                               #>
                xamlMember.Getter = <#=Model.GetterName(i)#>;
<#+                     }                               #>
<#+                     if(entry.HasPublicGetter && !entry.HasPublicSetter) #>
<#+                     {                               #>
                xamlMember.SetIsReadOnly();
<#+                     }                               #>
<#+                     else if (entry.HasPublicSetter) #>
<#+                     {                               #>
                xamlMember.Setter = <#=Model.SetterName(i)#>;
<#+                     }                               #>
                break;
<#+                }            #>
            }
<#+            }                #>
            return xamlMember;
        }
<#+        }                    #>



<#+         private void Output_SettersAndGetters()                                     #>
<#+         {                                                                           #>
<#+             for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    #>
<#+             {                                                                       #>
<#+                 InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    #>
<#+                 if (entry.IsEvent)                  #>
<#+                     continue;                       #>

<#+                 if (entry.IsDeprecated)             #>
<#+                 {                                   #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+                 }                                   #>
<#+                 if (entry.HasPublicGetter)          #>
<#+                 {                                   #>
        private object <#=Model.GetterName(i)#>(object instance)
        {
<#+                     if(entry.IsAttachable)          #>
<#+                     {                               #>
<#+                         if(entry.TargetType != null)#>
<#+                         {           #>
            return <#=entry.DeclaringType.FullName#>.Get<#=entry.Name#>((<#=entry.TargetType.FullName#>)instance);
<#+                         }           #>
<#+                         else        #>
<#+                         {           #>
            return <#=entry.DeclaringType.FullName#>.Get<#=entry.Name#>(instance);
<#+                         }           #>
<#+                     }               #>
<#+                     else if (entry.Name != "Template") #>
<#+                     {               #>
            var that = (<#=entry.DeclaringType.FullName#>)instance;
            return that.<#=entry.Name#>;
<#+                     }               #>
<#+                     else  #>
<#+                     {               #>
            return null;
<#+                     }               #>
        }
<#+                 }                           #>
<#+                 if(entry.HasPublicSetter)   #>
<#+                 {                           #>
        private void <#=Model.SetterName(i)#>(object instance, object Value)
        {
<#+                     if(entry.IsAttachable)  #>
<#+                     {                       #>
<#+                         if(entry.TargetType != null)    #>
<#+                         {                   #>
            <#=entry.DeclaringType.FullName#>.Set<#=entry.Name#>((<#=entry.TargetType.FullName#>)instance, (<#=entry.Type.FullName#>)Value);
<#+                         }                   #>
<#+                         else                #>
<#+                         {                   #>
            <#=entry.DeclaringType.FullName#>.Set<#=entry.Name#>(instance, (<#=entry.Type.FullName#>)Value);
<#+                         }                   #>
<#+                     }                       #>
<#+                     else if (entry.Name != "Template")   #>
<#+                     {                       #>
            var that = (<#=entry.DeclaringType.FullName#>)instance;
            that.<#=entry.Name#> = (<#=entry.Type.FullName#>)Value;
<#+                     }                       #>
        }
<#+                }    #>
<#+                     if (entry.IsDeprecated) #>
<#+                     {                       #>
#pragma warning restore 0618
<#+                     }                       #>
<#+            }        #>
<#+        }            #>


<#+         private void Output_AppMetadataProvider()  #>
<#+         {                                       #>
    public partial class <#=Model.AppXamlInfo.ShortName#> : <#=Globalize(KnownTypes.IXamlMetadataProvider)#>
    {
        <#=GeneratedCodeAttribute#>
        private <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider __appProvider;

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        private <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

<#+             if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#+             {#>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        partial void _AddOtherProvider(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> otherProvider)
        {
            _AppProvider.AddOtherProvider(otherProvider);
        }
<#+             }#>
        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public <#=Globalize(KnownTypes.IXamlType)#> GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public <#=Globalize(KnownTypes.XmlnsDefinition)#>[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
<#+         }           #>
