// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class VisualBasicPagePass1 : VB_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#ExternalChecksum(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\")\r\n");
  }   
            this.Write(@"'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.ClassName.Namespace)));
            this.Write("\r\n\r\n    <Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()>  _\r\n " +
                    "   Partial Class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("\r\n        Inherits ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.BaseTypeName)));
            this.Write("\r\n\r\n");
 Output_xProperties(); 
            this.Write("\r\n");
 Output_FieldDefinitions(); 
            this.Write("\r\n        Private _contentLoaded As Boolean\r\n\r\n");
 Output_InitializeComponent(); 
            this.Write("\r\n");
 if (Model.CodeInfo.BindStatus != BindStatus.None) 
 { 
 Output_BindingsHeader(); 
 } 
            this.Write("\r\n    End Class\r\n\r\nEnd Namespace\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
     private void Output_InitializeComponent() 
     { 
         string defaultUri = Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath); 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Sub InitializeComponent()\r\n");

         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) 
         { 
this.Write("            Me.InitializeComponent(Nothing)\r\n        End Sub\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Sub InitializeComponent(ByVal resourceLocator As Global.System.U" +
        "ri)\r\n");

         } 
this.Write("            If _contentLoaded Then\r\n                Return\r\n            End If\r\n " +
        "           _contentLoaded = true\r\n\r\n");

         if (Model.XProperties.Any()) 
         { 
this.Write("        InitializeXProperties()\r\n");

         } 
         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) 
         { 
this.Write("            if resourceLocator Is Nothing Then\r\n                resourceLocator =" +
        " new Global.System.Uri(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\")\r\n            End If\r\n");

         } 
         else 
         { 
this.Write("            Dim resourceLocator As New Global.System.Uri(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\")\r\n");

         } 
         string loadType = (ProjectInfo.IsLibrary) ? "Nested" : "Application"; 
         if(!String.IsNullOrEmpty(Model.CodeInfo.XamlComponentResourceLocation)) 
         { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".Application.LoadComponent(Me, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControlsPrimitives)));

this.Write(".ComponentResourceLocation.");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.XamlComponentResourceLocation));

this.Write(")\r\n");

         } 
         else 
         { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".Application.LoadComponent(Me, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlControlsPrimitives)));

this.Write(".ComponentResourceLocation.");

this.Write(this.ToStringHelper.ToStringWithCulture(loadType));

this.Write(")\r\n");

         } 
this.Write("        End Sub\r\n\r\n        Partial Private Sub UnloadObject(unloadableObject As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".DependencyObject)\r\n        End Sub\r\n\r\n");

     } 
     private void Output_FieldDefinitions() 
     { 
         foreach (FieldDefinition fieldData in Model.CodeInfo.FieldDeclarations) 
         { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldData.FieldModifier));

this.Write(" WithEvents ");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldData.FieldName));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(fieldData.FieldTypeName)));

this.Write("\r\n");

         } 
     } 
     private void Output_BindingsHeader() 
     { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        Private Interface I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n            Sub Initialize()\r\n            Sub Update()\r\n            Su" +
        "b StopTracking()\r\n            Sub DisconnectUnloadedObject(connectionId As Integ" +
        "er)\r\n        End Interface\r\n\r\n        Private Interface I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector\r\n            Property Parent() As Global.System.WeakRefer" +
        "ence\r\n            Function ContainsElement(connectionId As Integer) As Boolean\r\n" +
        "            Sub RegisterForElementConnection(connectionId As Integer, connector " +
        "As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));

this.Write(".IComponentConnector)\r\n        End Interface\r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        Private Bindings As I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n");

     } 
     private void Output_xProperties() 
     { 
         if (Model.XProperties.Any()) 
         { 
this.Write("        Partial Private Sub InitializeXProperties\r\n        End Sub\r\n\r\n");

         } 
         foreach (xProperty xProp in Model.XProperties) 
         { 
this.Write("        \' ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.CodegenComment));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        Private  _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" As Global.");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write("\r\n");

             if (!xProp.IsReadOnly) 
             { 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        Public Event ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write(" As ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlData)));

this.Write(".PropertyChangedEventHandler        \r\n\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        Public Property ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("() As Global.");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write("\r\n");

             } 
             else 
             { 
this.Write("        Public ReadOnly Property ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("() As Global.");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write("\r\n");

             } 
this.Write("            Get\r\n                Return _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("\r\n            End Get\r\n");

             if (!xProp.IsReadOnly) 
             { 
this.Write("            Set(ByVal Value As Global.");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.FullTypeName));

this.Write(")\r\n                If Not _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" Is Value Then\r\n                    _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = Value\r\n                    RaiseEvent ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.ChangedHandler));

this.Write("(Me, New ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlData)));

this.Write(".PropertyChangedEventArgs(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write("\"))\r\n                End If\r\n            End Set\r\n");

             } 
this.Write("        End Property\r\n\r\n");

         } 
     } 
    }
}
