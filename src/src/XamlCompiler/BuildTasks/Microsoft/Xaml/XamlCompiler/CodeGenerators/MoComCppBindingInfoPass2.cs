// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppBindingInfoPass2 : CppCX_CodeGenerator<BindingInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
            this.Write(@"#include ""XamlBindingInfo.g.h""

// XamlBindings

::XamlBindingInfo::XamlBindings::XamlBindings(::XamlBindingInfo::IXamlBindings* pBindings)
    : _pBindings(pBindings)
{
    _pBindings->SetOwningBindingsClass(this);
}

::XamlBindingInfo::XamlBindings::~XamlBindings()
{
    delete _pBindings;
}

void ::XamlBindingInfo::XamlBindings::Initialize()
{
    if (!this->_pBindings->IsInitialized())
    { 
        this->_pBindings->Update();
    }
}

void ::XamlBindingInfo::XamlBindings::Update()
{
    this->_pBindings->Update();
}

void ::XamlBindingInfo::XamlBindings::StopTracking()
{
    this->_pBindings->StopTracking();
}

void ::XamlBindingInfo::XamlBindings::Loading(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^, ::Platform::Object^)\r\n{\r\n    this->Initialize();\r\n}\r\n\r\nvoid " +
                    "::XamlBindingInfo::XamlBindings::DataContextChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DataContextChangedEventArgs^ args)\r\n{\r\n    if (this->_pBindings->SetDataRoot(ar" +
                    "gs->NewValue))\r\n    {\r\n        this->Update();\r\n    }\r\n}\r\n\r\nvoid ::XamlBindingIn" +
                    "fo::XamlBindings::SubscribeForDataContextChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::FrameworkElement^ object)
{
    this->_pBindings->SubscribeForDataContextChanged(object, this);
}

void ::XamlBindingInfo::XamlBindings::DisconnectUnloadedObject(int connectionId)
{
    this->_pBindings->DisconnectUnloadedObject(connectionId);
}

void ::XamlBindingInfo::XamlBindings::Connect(int connectionId, ::Platform::Object^ target)
{
    this->_pBindings->Connect(connectionId, target);
}

bool ::XamlBindingInfo::XamlBindings::ProcessBinding(unsigned int)
{
    throw ref new ::Platform::NotImplementedException();
}

int ::XamlBindingInfo::XamlBindings::ProcessBindings(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write(@"::ContainerContentChangingEventArgs^ args)
{
    int nextPhase = -1;
    int phase = static_cast<int>(args->Phase);
    if (phase < 0)
    {
        throw ref new ::Platform::InvalidArgumentException();
    }
    this->_pBindings->ProcessBindings(args->Item, args->ItemIndex, phase, &nextPhase);
    return nextPhase;
}

void ::XamlBindingInfo::XamlBindings::ResetTemplate()
{
    this->_pBindings->Recycle();
}

void ::XamlBindingInfo::XamlBindings::ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
{
    this->_pBindings->ProcessBindings(item, itemIndex, phase, nextPhase);
}

void ::XamlBindingInfo::XamlBindings::Recycle()
{
    this->_pBindings->Recycle();
}

");
  if (ProjectInfo.ShouldGenerateDisableXBind) 
  { 
            this.Write("void ::XamlBindingInfo::XamlBindings::Disable(int lineNumber, int columnNumber)\r\n" +
                    "{\r\n    this->_pBindings->Disable(lineNumber, columnNumber);\r\n}\r\n");
  } 
            this.Write("\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IComponentConnector^ ::XamlBindingInfo::XamlBindings::GetBindingConnector(int connectionId, ::Platform::Object^ target)
{
    return this->_pBindings->GetBindingConnector(connectionId, target);
}

::XamlBindingInfo::XamlBindings^ ::XamlBindingInfo::XamlBindings::GetParent()
{
    return this->_pBindings->GetParent();
}

void ::XamlBindingInfo::XamlBindings::SetParent(::XamlBindingInfo::XamlBindings^ parent)
{
    this->_pBindings->SetParent(parent);
}

bool ::XamlBindingInfo::XamlBindings::ContainsElement(int connectionId)
{
    return this->_pBindings->ContainsElement(connectionId);
}

void ::XamlBindingInfo::XamlBindings::RegisterForElementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector)
{
    this->_pBindings->RegisterForElementConnection(connectionId, connector);
}

// XamlBindingTrackingBase

::XamlBindingInfo::XamlBindingTrackingBase::XamlBindingTrackingBase()
{
}

void ::XamlBindingInfo::XamlBindingTrackingBase::SetListener(::XamlBindingInfo::IXamlBindingTracking* pBindings)
{
    this->_pBindingsTrackingWeakRef = pBindings;
}

void ::XamlBindingInfo::XamlBindingTrackingBase::PropertyChanged(Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::PropertyChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->PropertyChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::CollectionChanged(::Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write(@"::NotifyCollectionChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->CollectionChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::DependencyPropertyChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyProperty^ prop)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->DependencyPropertyChanged(sender, prop);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->VectorChanged(sender, e);
    }
}

void ::XamlBindingInfo::XamlBindingTrackingBase::MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
{
    if (this->_pBindingsTrackingWeakRef != nullptr)
    {
        this->_pBindingsTrackingWeakRef->MapChanged(sender, e);
    }
}
");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("\r\nvoid ::XamlBindingInfo::XamlBindingTrackingBase::ErrorsChanged(::Platform::Obje" +
                    "ct^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs^ e)\r\n{\r\n    if (this->_pBindingsTrackingWeakRef != n" +
                    "ullptr)\r\n    {\r\n        this->_pBindingsTrackingWeakRef->ErrorsChanged(sender, e" +
                    ");\r\n    }\r\n}\r\n");
 } 
            this.Write("\r\nvoid ::XamlBindingInfo::XamlBindingTrackingBase::UpdatePropertyChangedListener(" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::INotifyPropertyChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->PropertyChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->PropertyChanged += ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventHandler(\r\n            this, &::XamlBindingInfo::XamlBinding" +
                    "TrackingBase::PropertyChanged);\r\n    }\r\n}\r\n\r\nvoid ::XamlBindingInfo::XamlBinding" +
                    "TrackingBase::UpdatePropertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Fo" +
                    "undation::EventRegistrationToken* pToken)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^ cache = cacheRef.Resolve<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::INotifyPropertyChanged>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->PropertyChanged -= *pToken;
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->PropertyChanged += ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventHandler(\r\n            this, &::XamlBindingInfo::XamlBinding" +
                    "TrackingBase::PropertyChanged);\r\n    }\r\n}\r\n\r\nvoid ::XamlBindingInfo::XamlBinding" +
                    "TrackingBase::UpdateCollectionChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::INotifyCollectionChanged^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write(@"::INotifyCollectionChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->CollectionChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->CollectionChanged += ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::NotifyCollectionChangedEventHandler(\r\n            this, &::XamlBindingInfo::Xam" +
                    "lBindingTrackingBase::CollectionChanged);\r\n    }\r\n}\r\n\r\nvoid ::XamlBindingInfo::X" +
                    "amlBindingTrackingBase::UpdateDependencyPropertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyProperty^ property, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyObject^* pCache, __int64* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->UnregisterPropertyChangedCallback(property, *pToken);
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->RegisterPropertyChangedCallback(property, ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyPropertyChangedCallback(\r\n            this, &::XamlBindingInfo::XamlB" +
                    "indingTrackingBase::DependencyPropertyChanged));\r\n    }\r\n}\r\n\r\nvoid ::XamlBinding" +
                    "Info::XamlBindingTrackingBase::UpdateDependencyPropertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyProperty^ property, ::Platform::WeakReference& cacheRef, __int64* pTo" +
                    "ken)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ cache = cacheRef.Resolve<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyObject>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->UnregisterPropertyChangedCallback(property, *pToken);
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->RegisterPropertyChangedCallback(property, ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyPropertyChangedCallback(\r\n            this, &::XamlBindingInfo::XamlB" +
                    "indingTrackingBase::DependencyPropertyChanged));\r\n    }\r\n}\r\n");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("void ::XamlBindingInfo::XamlBindingTrackingBase::UpdateErrorsChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::INotifyDataErrorInfo^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
{
    if (*pCache != nullptr && !(*pCache)->Equals(obj))
    {
        (*pCache)->ErrorsChanged -= *pToken;
        *pCache = nullptr;
    }

    if (*pCache == nullptr && obj != nullptr)
    {
        *pCache = obj;
        *pToken = obj->ErrorsChanged += ref new ::Windows::Foundation::EventHandler<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs^>(\r\n            this, &::XamlBindingInfo::XamlBindin" +
                    "gTrackingBase::ErrorsChanged);\r\n    }\r\n}\r\n\r\nvoid ::XamlBindingInfo::XamlBindingT" +
                    "rackingBase::UpdateErrorsChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Foun" +
                    "dation::EventRegistrationToken* pToken)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^ cache = cacheRef.Resolve<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write(@"::INotifyDataErrorInfo>();
    if (cache != nullptr && !cache->Equals(obj))
    {
        cache->ErrorsChanged -= *pToken;
        cache = nullptr;
        cacheRef = nullptr;
    }

    if (cache == nullptr && obj != nullptr)
    {
        cacheRef = cache = obj;
        *pToken = obj->ErrorsChanged += ref new ::Windows::Foundation::EventHandler<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs^>(\r\n            this, &::XamlBindingInfo::XamlBindin" +
                    "gTrackingBase::ErrorsChanged);\r\n    }\r\n}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
