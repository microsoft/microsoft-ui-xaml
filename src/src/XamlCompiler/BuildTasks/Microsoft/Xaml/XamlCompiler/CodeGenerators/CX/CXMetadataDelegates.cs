// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CXMetadataDelegates : CppCX_CodeGenerator<TypeGenInfo>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 
    bool prototypeOnly = (bool)Arguments[0] == true;

            this.Write("\r\n");
  if (Model.HasActivator) { 
      if (prototypeOnly) { 
            this.Write("extern ::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName));
            this.Write("();\r\n");
      } else { 
            this.Write("::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName));
            this.Write("()\r\n{\r\n    return ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write("();\r\n}\r\n");
      } 
  } 
 if (!ProjectInfo.EnableTypeInfoReflection) 
 { 
  if (Model.IsCollection) { 
      if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CollectionAddName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ item);\r\n");
      } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CollectionAddName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ item)\r\n{\r\n    safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write("^>(instance)->Append((");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.FullName));
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.RefHat));
            this.Write(")item);\r\n}\r\n");
      } 
  } 
  if (Model.IsDictionary) { 
      if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DictionaryAddName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)" +
                    ";\r\n");
      } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DictionaryAddName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)" +
                    "\r\n{\r\n    safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write("^>(instance)->Insert((");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.KeyType.FullName));
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.KeyType.RefHat));
            this.Write(")key, (");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.FullName));
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.RefHat));
            this.Write(")item);\r\n}\r\n");
      } 
  } 
  if (Model.HasEnumValues) { 
      if (prototypeOnly) { 
            this.Write("extern ::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FromStringConverterName));
            this.Write("(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)" +
                    ";\r\n");
      } else { 
            this.Write("::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FromStringConverterName));
            this.Write("(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)" +
                    "\r\n{\r\n    return ref new ::Platform::Box<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write(">((");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write(")userType->CreateEnumUIntFromString(input));\r\n}\r\n");
      } 
  } 
 foreach(var member in Model.Members) { 
            this.Write("\r\n");
      if (member.HasGetAttachableMember) { 
          if (prototypeOnly) { 
            this.Write("extern ::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetAttachableMemberName));
            this.Write("(::Platform::Object^ instance);\r\n");
          } else { 
            this.Write("::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetAttachableMemberName));
            this.Write("(::Platform::Object^ instance)\r\n{\r\n    return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("::Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.TargetType.FullName));
            this.Write("^>(instance));\r\n}\r\n");
          } 
      } 
      if (member.HasSetAttachableMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetAttachableMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetAttachableMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("::Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.TargetType.FullName));
            this.Write("^>(instance), (");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsValueType ? String.Empty : "^"));
            this.Write(")value);\r\n}\r\n");
          } 
      } 
      if (member.HasGetValueTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern ::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetValueTypeMemberName));
            this.Write("(::Platform::Object^ instance);\r\n");
          } else { 
            this.Write("::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetValueTypeMemberName));
            this.Write("(::Platform::Object^ instance)\r\n{\r\n    return ref new ::Platform::Box<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("^>(instance)->");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write(");\r\n}\r\n");
          } 
      } 
      if (member.HasSetValueTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetValueTypeMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetValueTypeMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value)\r\n{\r\n    safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("^>(instance)->");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write(" = safe_cast<::Platform::IBox<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">^>(value)->Value;\r\n}\r\n");
          } 
      } 
      if (member.HasSetEnumMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetEnumMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetEnumMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value)\r\n{\r\n    safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("^>(instance)->");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write(" = safe_cast<::Platform::IBox<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">^>(value)->Value;\r\n}\r\n");
          } 
      } 
      if (member.HasGetReferenceTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern ::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetReferenceTypeMemberName));
            this.Write("(::Platform::Object^ instance);\r\n");
          } else { 
            this.Write("::Platform::Object^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetReferenceTypeMemberName));
            this.Write("(::Platform::Object^ instance)\r\n{\r\n    return safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("^>(instance)->");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write(";\r\n}\r\n");
          } 
      } 
      if (member.HasSetReferenceTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetReferenceTypeMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetReferenceTypeMemberName));
            this.Write("(::Platform::Object^ instance, ::Platform::Object^ value)\r\n{\r\n    safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("^>(instance)->");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write(" = safe_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write("^>(value);\r\n}\r\n");
          } 
      } 
  } 
 } // End of type info reflection check
            return this.GenerationEnvironment.ToString();
        }
    }
}
