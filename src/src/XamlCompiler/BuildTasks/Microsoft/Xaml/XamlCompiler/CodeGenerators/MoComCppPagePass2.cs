// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Xaml;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppPagePass2 : CppCX_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
            this.Write("\r\n#pragma warning(push)\r\n#pragma warning(disable: 4100) // unreferenced formal pa" +
                    "rameter\r\n\r\n#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_O" +
                    "UTPUT\r\nextern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();\r\n#end" +
                    "if\r\n\r\n");
 foreach(string includeFile in Model.NeededLocalXamlHeaderFiles)
 {
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(includeFile));
            this.Write("\"\r\n");
 }
 Output_ApiInformationDeclarations(); 
            this.Write("\r\n");
 Output_InitializeComponent(); 
            this.Write("\r\n");
 if (Model.CodeInfo.IsUsingCompiledBinding) 
 { 
     Output_BindingsClasses();  
            this.Write("\r\n");
 } 
 Output_ConnectMethod(); 
 Output_UnloadObjectMethod(); 
            this.Write("\r\n");
 Output_GetBindingConnectorMethod(); 
 Output_InitializeXProperties(); 
 if (ProjectInfo.GenerateIncrementalTypeInfo) { 
            this.Write("\r\n");
      foreach(var entry in Model.TypeInfos.Where(t => t.StandardName == Model.CodeInfo.ClassType.StandardName)) { 
        IncludeTemplate<CXMetadataDelegates>(entry, false); 
      } 
  } 
            this.Write("\r\n#pragma warning(pop)\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
 private void Output_InitializeComponent() 
 { 
         string defaultUri = Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath);
this.Write("void ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::InitializeComponent()\r\n{\r\n");

     if(Model.CodeInfo.PerXamlFileInfo.Count > 1)
     {
this.Write("    this->InitializeComponent(nullptr);\r\n}\r\n\r\nvoid ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::InitializeComponent(::Windows::Foundation::Uri^ resourceLocator)\r\n{\r\n");

     }
this.Write("    if (_contentLoaded)\r\n    {\r\n        return;\r\n    }\r\n    _contentLoaded = true" +
        ";\r\n");

         if (Model.XProperties.Any()) 
         { 
this.Write("    InitializeXProperties();\r\n");

         } 
 Output_ApiInformationInit(); 
     if(Model.CodeInfo.PerXamlFileInfo.Count > 1)
     {
this.Write("    if (resourceLocator == nullptr)\r\n    {\r\n        resourceLocator = ref new ::W" +
        "indows::Foundation::Uri(L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\");\r\n    }\r\n");

     }
     else
     {
this.Write("    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::" +
        "Uri(L\"");

this.Write(this.ToStringHelper.ToStringWithCulture(defaultUri));

this.Write("\");\r\n");

     }
     string loadType = (ProjectInfo.IsLibrary) ? "Nested" : "Application"; 
    if(!String.IsNullOrEmpty(Model.CodeInfo.XamlComponentResourceLocation)) 
    { 
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::Application::LoadComponent(this, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControlsPrimitives)));

this.Write("::ComponentResourceLocation::");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.XamlComponentResourceLocation));

this.Write(");\r\n");

    } 
    else 
    { 
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::Application::LoadComponent(this, resourceLocator, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControlsPrimitives)));

this.Write("::ComponentResourceLocation::");

this.Write(this.ToStringHelper.ToStringWithCulture(loadType));

this.Write(");\r\n");

    } 
this.Write("}\r\n");

 } 
     private void Output_InitializeXProperties() 
     { 
         if (Model.XProperties.Any()) 
         { 
this.Write("\r\nvoid ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::InitializeXProperties()\r\n{\r\n");

             foreach (xProperty xProp in Model.XProperties) 
             { 
                 if (xProp.DefaultValueString != null) 
                 { 
this.Write("    _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.GetStringToThing($"\"{xProp.DefaultValueString}\"")));

this.Write(";\r\n");

                 } 
                 if (xProp.DefaultValueMarkup != null) 
                 { 
this.Write("    _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = (");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.CppCXName()));

this.Write(")(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::Load(");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.DefaultValueMarkup));

this.Write("));\r\n");

                 } 
             } 
this.Write("        }\r\n");

         } 
     } 
 private void Output_ConnectMethod()
 {
     bool usedTarget = false;
this.Write("void ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::Connect(int __connectionId, ::Platform::Object^ __target)\r\n{\r\n");

     if(Model.ConnectableElements.Any()) 
     {
this.Write("    switch (__connectionId)\r\n    {\r\n");

         foreach (ConnectionIdElement element in Model.ConnectableElements)
         {
this.Write("    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(":\r\n        {\r\n");

             Output_ConnectionId_Case(element);
             usedTarget= true;  
this.Write("        }\r\n        break;\r\n");

         }
this.Write("    }\r\n");

     }
     else 
     {
this.Write("    __connectionId;         // unreferenced \r\n");

     }
     if (!usedTarget)
     {
this.Write("    __target;               // unreferenced\r\n");

     }
this.Write("    _contentLoaded = true;\r\n}\r\n");

 }
 private void Output_UnloadObjectMethod()
 {
     if (Model.UnloadableFields.Count() > 0)
     {
this.Write("\r\nvoid ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyObject^ unloadableObject)\r\n{\r\n    if (unloadableObject != nullptr)\r\n " +
        "   {\r\n");

         foreach (var element in Model.UnloadableFields) { 
this.Write("        // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

             Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("        if (unloadableObject == this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write(")\r\n        {\r\n            this->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n        }\r\n");

             Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
         } 
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlMarkupHelper::UnloadObject(unloadableObject);\r\n    }\r\n}\r\n\r\nvoid ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::DisconnectUnloadedObject(int connectionId)\r\n{\r\n    switch(connectionId)\r\n    {\r" +
        "\n");

         foreach (var element in Model.DeferrableElements)
         {
this.Write("        case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n        {\r\n");

             foreach (var childElem in element.Children) 
             {
                 if (childElem.HasFieldDefinition) 
                 {
this.Write("            this->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                 }
                 if (childElem.HasBindAssignments || element.HasRootNamedElementStep) 
                 {
this.Write("            this->Bindings->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                 }
             }
             if (element.HasBindAssignments || element.HasRootNamedElementStep) 
             {
this.Write("            this->Bindings->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

             }
             FieldDefinition fieldInfo = element.FieldDefinition; 
             if(fieldInfo != null) 
             { 
                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.TwoTabs); 
this.Write("            this->");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldInfo.FieldName));

this.Write(" = nullptr;\r\n");

                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.TwoTabs); 
             } 
this.Write("            break;\r\n        }\r\n");

         }
this.Write("        default:\r\n        {\r\n            throw ref new ::Platform::InvalidArgumen" +
        "tException(\"Invalid connectionId.\");\r\n        }\r\n    }\r\n}\r\n");

     }
 }
 private void Output_ConnectionId_Case(ConnectionIdElement element)
 {
     string objectName = element.ElementCodeName;
     Output_PushDeprecated(element.Type.IsDeprecated()); 
     Output_ApiInformationCall_Push(element.ApiInformation, Indent.TwoTabs); 
     if (element.HasFieldDefinition)
     {
         objectName = "this->" + element.FieldDefinition.FieldName; 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(objectName));

this.Write(" = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(__target);\r\n");

     }
     else if (element.EventAssignments.Count > 0)
     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(objectName));

this.Write(" = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(__target);\r\n");

     }
     foreach (EventAssignment ev in element.EventAssignments) 
     { 
         Output_ApiInformationCall_Push(ev.ApiInformation, Indent.TwoTabs); 
this.Write("            (safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(");

this.Write(this.ToStringHelper.ToStringWithCulture(objectName));

this.Write("))->");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.EventName));

this.Write(" += ref new ::");

this.Write(this.ToStringHelper.ToStringWithCulture(ColonizeRef(ev)));

this.Write("(this, (void (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::*)\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.EventParamsForCppSignature));

this.Write(")&");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.HandlerName));

this.Write(");\r\n");

         Output_ApiInformationCall_Pop(ev.ApiInformation, Indent.TwoTabs); 
     } 
     Output_ApiInformationCall_Pop(element.ApiInformation, Indent.TwoTabs); 
     Output_PopDeprecated(element.Type.IsDeprecated()); 
 }
     private void Output_GetBindingConnectorCaseBindingPropertiesSet(ConnectionIdElement element, bool isPageRoot) 
     { 
         if (element.BindUniverse.NeededForOuterScopeElement) 
         { 
             if (isPageRoot) 
             { 
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("                    objBindings->SetRootWeakReference(this);\r\n");

                 }
                 else
                 {
this.Write("                    objBindings->SetRootWeakReference(this);\r\n");

                 }
                 if (!element.BindUniverse.IsFileRoot) 
                 { 
this.Write("                    bindings->SetParent(this->Bindings);\r\n");

                 } 
             } 
             else 
             { 
this.Write("                    objBindings->SetRootWeakReference(this->GetRootWeakReference(" +
        "));\r\n                    bindings->SetParent(owningXamlBindings.Resolve<::XamlBi" +
        "ndingInfo::XamlBindings>());\r\n");

             } 
         } 
     } 
 private void Output_GetBindingConnectorCase(ConnectionIdElement element, bool isPageRoot) 
 {
this.Write("        case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n            {\r\n");

     Output_PushDeprecated(element.Type.IsDeprecated());
     if (element.Type.IsDerivedFromControlTemplate())
     {
this.Write("                if (auto ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(" = dynamic_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.TemplatedParentType));

this.Write(">(__target))\r\n                {\r\n                    auto objBindings = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("();\r\n                    objBindings->SetDataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(");\r\n                    bindings = ref new ::XamlBindingInfo::XamlBindings(objBin" +
        "dings);\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlBindingHelper::SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(", bindings);\r\n");

         Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
this.Write("                }\r\n");

     } else { 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(" = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(__target);\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("* objBindings = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("();\r\n                objBindings->SetDataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.IsBindingFileRoot ? "this" : element.ElementCodeName + "->DataContext"));

this.Write(");\r\n");

         if (element.BindUniverse.DistinctConvertersUsed.Count() > 0) 
         {
this.Write("                objBindings->SetConverterLookupRoot(this);\r\n");

         }
this.Write("                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);\r" +
        "\n");

         if (element.IsBindingFileRoot)
         { 
this.Write("                this->Bindings = bindings;\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write("->Loading += ref new ::Windows::Foundation::TypedEventHandler<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindi" +
        "ngs::Loading);\r\n");

         }
         else
         {
this.Write("                bindings->SubscribeForDataContextChanged(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(");\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DataTemplate::SetExtensionInstance(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings);\r\n");

         }
         if (ProjectInfo.ShouldGenerateDisableXBind || !element.IsBindingFileRoot) 
         {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlBindingHelper::SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings);\r\n");

         }
         Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
     }
                 Output_PopDeprecated(element.Type.IsDeprecated()); 
this.Write("            }\r\n            break;\r\n");

 }
 private void Output_GetBindingConnectorMethod()
 { 
this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::IComponentConnector^ ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassType.FullName));

this.Write("::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)\r\n{\r\n");

 if (Model.CodeInfo.BindStatus != BindStatus.None) 
 { 
this.Write("    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;\r\n    switch (__connectio" +
        "nId)\r\n    {\r\n");

         foreach (ConnectionIdElement element in Model.AllConnectionIdElements)
         {
             if (element.IsBindingRoot)
             {
                 Output_GetBindingConnectorCase(element, true); 
             }
         }
this.Write("    }\r\n    return bindings;\r\n");

     } 
     else 
     { 
this.Write("    __connectionId;         // unreferenced\r\n    __target;               // unref" +
        "erenced\r\n    return nullptr;\r\n");

     } 
this.Write("}\r\n");

 }
     private void Output_PushDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#pragma warning( push )\r\n#pragma warning( disable : 4973 )\r\n");

         } 
     }
     private void Output_PopDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#pragma warning( pop )\r\n");

         } 
     }
 
     private void Output_BindingsClasses()
     {
         foreach (BindUniverse bindUniverse in Model.CodeInfo.BindUniverses)
         { 
             if (bindUniverse.NeedsCppBindingTrackingClass) { 
                 Output_BindingTrackingClass(bindUniverse); 
             } 
this.Write("\r\n/// <summary>\r\n/// Auto generated class for compiled bindings.\r\n/// </summary>\r" +
        "\nclass ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingFullClassName(bindUniverse, Model.CodeInfo)));

this.Write(" \r\n    : public ::XamlBindingInfo::");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType.UnderlyingType.IsValueType ? "ValueTypeXamlBindings" : "ReferenceTypeXamlBindings"));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType.CppCXName(false)));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingFullClassName(bindUniverse, Model.CodeInfo)));

this.Write(">\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("    , public ::XamlBindingInfo::IXamlBindingTracking\r\n");

             }
this.Write("{\r\n");

             if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::ResourceDictionary^ localResources;\r\n");

                 if (!Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            ::Platform::WeakReference converterLookupRoot;\r\n");

                 }
             }
this.Write("public:\r\n    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("()\r\n    {\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("        InitializeTracking(this);\r\n");

             }
this.Write("    }\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\nprivate:\r\n    ~");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("()\r\n    {\r\n        ReleaseAllListeners();\r\n    }\r\n\r\npublic:\r\n");

             }
             if (bindUniverse.NeededForOuterScopeElement) 
             { 
this.Write("private:\r\n    ::Platform::WeakReference rootWeakRef;\r\npublic:\r\n");

                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("    void SetRootWeakReference(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::ResourceDictionary^ root)\r\n    {\r\n        rootWeakRef = root;\r\n    }\r\n\r\n    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::ResourceDictionary^ GetRootWeakReference()\r\n    {\r\n        return rootWeakRef.R" +
        "esolve<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::ResourceDictionary>();\r\n    }\r\n\r\n");

                 }
                 else
                 {
this.Write("    void SetRootWeakReference(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement^ root)\r\n    {\r\n        rootWeakRef = root;\r\n    }\r\n\r\n    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement^ GetRootWeakReference()\r\n    {\r\n        return rootWeakRef.Res" +
        "olve<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement>();\r\n    }\r\n\r\n");

                 }
             } 
this.Write("\r\n    void Connect(int __connectionId, ::Platform::Object^ __target)\r\n    {\r\n");

 if (!bindUniverse.ElementsWithConnectCase.Any()) 
 { 
this.Write("                __connectionId;\r\n                __target;\r\n                retur" +
        "n;\r\n");

 } 
 else 
 { 
this.Write("        switch(__connectionId)\r\n        {\r\n");

 foreach (var element in bindUniverse.ElementsWithConnectCase)
 {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

     if (element.Type.IsDerivedFromControlTemplate())
     {
this.Write("                this->Update(); // Template children have been connected, initial" +
        "ize bindings\r\n");

     } else {
     if (bindUniverse.BoundElements.Contains(element)) { 
     Output_ApiInformationCall_Push(element.ApiInformation, Indent.ThreeTabs); 
this.Write("                this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(__target);\r\n");

         if (element.IsUsedByOtherScopes) 
         { 
this.Write("                elementWeakRefs->Insert(__connectionId, ref new ::XamlBindingInfo" +
        "::WeakRefWrapper(__target));\r\n                NotifyDependentScopes(__connection" +
        "Id);\r\n");

         } 
     foreach (BoundEventAssignment evt in element.BoundEventAssignments)
     {
         Output_ApiInformationCall_Push(evt.ApiInformation, Indent.ThreeTabs); 
this.Write("                this->");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(" = (safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(">(__target))->");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" += ref new ");

this.Write(this.ToStringHelper.ToStringWithCulture(ColonizeRef(evt)));

this.Write("([this] (");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.Declaration()));

this.Write(")\r\n                {\r\n");

         if (!evt.PathStep.ValueType.IsDelegate())
         {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write(";\r\n");

         }
         else
         {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.ForCall()));

this.Write(");\r\n");

         }
this.Write("                });\r\n");

         Output_ApiInformationCall_Pop(evt.ApiInformation, Indent.ThreeTabs); 
     }
     if (element.CanBeInstantiatedLater && (element.HasBindAssignments || element.HasBoundEventAssignments))
     {
         // In Connect() we update non-load assignments first, 
         foreach (var ba in element.BindAssignments.Where(ba => !(ba is BoundLoadAssignment))) 
         { 
             PushIndent(Indent.TwoTabs); 
             Output_Binding_SetValue_Non_Function_Call(ba, "this->" + ba.ObjectDeferredAssignmentCodeName.CppCXName(), false); 
             PopIndent(); 
         } 
     }
     foreach (var ba in element.BindAssignments.Where(bindAssignment => bindAssignment.IsTrackingTarget)) { 
         PushIndent();
         Output_Connect_TwoWayBinding(ba);
         PopIndent();
     }
     Output_ApiInformationCall_Pop(element.ApiInformation, Indent.ThreeTabs); 
     } 
     if (!element.IsBindingRoot) 
     { 
         // Queue load assignments to be updated later, because they're not available yet. 
         foreach (var childElem in element.Children.Intersect(bindUniverse.ElementsWithBoundLoadAssignments)) 
         { 
this.Write("            if (std::find(this->UnloadedElementsToUpdate.begin(), this->UnloadedE" +
        "lementsToUpdate.end(), ");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(") == this->UnloadedElementsToUpdate.end())\r\n            {\r\n                this->" +
        "UnloadedElementsToUpdate.push_back(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n            }\r\n");

         } 
     } 
     if (element.CanBeInstantiatedLater && element.HasRootNamedElementStep) { 
this.Write("                this->UnloadableBindingSourcesToUpdate.push_back([this]()\r\n      " +
        "          {\r\n");

         PushIndent(Indent.TwoTabs); 
         Output_Custom_Update_Call(element.RootNamedElementStep, element.RootNamedElementStep.CodeGen().PathExpression.CppCXName(), KnownStrings.NotPhased);
         PopIndent(); 
this.Write("                });\r\n");

     } 
    if (element.TryGetValidationContextStep(out PropertyStep validationStep) && ProjectInfo.IsInputValidationEnabled && ProjectInfo.EnableDefaultValidationContextGeneration) 
    { 
        Output_ApiInformationCall_Push(validationStep.ApiInformation, Indent.ThreeTabs); 
this.Write("            safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::IInputValidationControl^>(__target)->ValidationContext = ref new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::InputValidationContext(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.PropertyName));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.IsValueRequired));

this.Write(");\r\n");

        Output_ApiInformationCall_Pop(validationStep.ApiInformation, Indent.ThreeTabs); 
    }
     } 
this.Write("                break;\r\n");

 }
this.Write("        }\r\n");

 } 
this.Write("    }\r\n");

     if (ProjectInfo.ShouldGenerateDisableXBind) 
     {
this.Write("\r\n    void Disable(int lineNumber, int columnNumber)\r\n    {\r\n");

         bool firstIfInDisable = true; 
         foreach (var element in bindUniverse.ElementsWithConnectCaseInLocalScope)
         {
             foreach (BindAssignment ba in element.BindAssignments)
             {
                 if (firstIfInDisable)
                 {
                     firstIfInDisable = false; 
this.Write("        if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(")\r\n");

                 } else {
this.Write("        else if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(")\r\n");

                 }
this.Write("        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" = true;\r\n        }\r\n");

             }
             foreach (BoundEventAssignment evt in element.BoundEventAssignments)
             {
                 if (firstIfInDisable)
                 {
                 firstIfInDisable = false; 
this.Write("        if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(")\r\n");

                  } else {
this.Write("        else if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(")\r\n");

                 }
this.Write("        {\r\n");

                 if (element.IsWeakRef)
                 {
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(" != nullptr)\r\n            {\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write("->");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n            }\r\n");

                 } else {
this.Write("            this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write("->");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n");

                 }
this.Write("        }\r\n");

             }
         }
this.Write("    }\r\n");

     }
this.Write("\r\n    void DisconnectUnloadedObject(int connectionId)\r\n    {\r\n");

         if(bindUniverse.ElementsWithDisconnectCase.Count() == 0) { 
this.Write("        throw ref new ::Platform::InvalidArgumentException(\"No unloadable element" +
        "s to disconnect.\");\r\n");

         } else { 
this.Write("        switch (connectionId)\r\n        {\r\n");

             foreach (var element in bindUniverse.ElementsWithDisconnectCase)
             {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n            {\r\n");

                         if (bindUniverse.BoundElements.Contains(element)) { 
                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("                if (this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" != nullptr)\r\n                {\r\n");

                 foreach (BindAssignment bindAssignment in element.BindAssignments.Where(ba => ba.HasDeferredValueProxy))
                 {
this.Write("                    this->");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.GetMemberGetExpression(bindAssignment)));

this.Write(";\r\n");

                 }
this.Write("                    this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = nullptr;\r\n                }\r\n");

                 foreach (var childElem in element.Children.Where(c => bindUniverse.ElementsWithDisconnectCase.Contains(c))) {
this.Write("                this->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                 }
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
                 } 
                 if (element.HasRootNamedElementStep) { 
this.Write("                this->UnloadableBindingSourcesToUpdate.push_back([this]()\r\n      " +
        "          {\r\n");

                     PushIndent(Indent.TwoTabs); 
                     Output_Custom_Update_Call(element.RootNamedElementStep, "nullptr", KnownStrings.NotPhased);
                     PopIndent(); 
this.Write("                        });\r\n");

                 } 
this.Write("                break;\r\n            }\r\n");

             }
this.Write("            default:\r\n            {\r\n                throw ref new ::Platform::In" +
        "validArgumentException(\"Invalid connectionId.\");\r\n            }\r\n        }\r\n");

         } 
this.Write("    }\r\n");

         if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) 
         { 
this.Write("\r\n    void UpdateUnloadedElement(int connectionId)\r\n    {\r\n        switch (connec" +
        "tionId)\r\n        {\r\n");

             foreach (var element in bindUniverse.ElementsWithBoundLoadAssignments)
             {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n            {\r\n");

                 foreach (var ba in element.BindAssignments.OfType<BoundLoadAssignment>()) 
                 { 
                     PushIndent(Indent.TwoTabs); 
                     Output_Binding_SetValue_Non_Function_Call(ba, "this->" + ba.ObjectDeferredAssignmentCodeName.CppCXName(), false); 
                     PopIndent(); 
                 } 
this.Write("                break;\r\n            }\r\n");

             }
this.Write("            default:\r\n            {\r\n                throw ref new ::Platform::In" +
        "validArgumentException(\"Invalid connectionId.\");\r\n            }\r\n        }\r\n    " +
        "}\r\n");

         }
         if (bindUniverse.NeededForOuterScopeElement) { 
this.Write("    virtual ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::IComponentConnector^ GetBindingConnector(int __connectionId, ::Platform::Object" +
        "^ __target) override\r\n    {\r\n");

             if (bindUniverse.Children.Any()) 
             { 
this.Write("        ::XamlBindingInfo::XamlBindings^ bindings = nullptr;\r\n        switch (__c" +
        "onnectionId)\r\n        {\r\n");

                 foreach (BindUniverse childUniverse in bindUniverse.Children)
                 {
                     ConnectionIdElement element = childUniverse.RootElement;
                     if (element.IsBindingRoot)
                     {
                         PushIndent(Indent.OneTab); 
                         Output_GetBindingConnectorCase(element, false); 
                         PopIndent(); 
                     }
                 }
this.Write("        }\r\n        return bindings;\r\n");

             } 
             else 
             { 
this.Write("        __connectionId;         // unreferenced\r\n        __target;               " +
        "// unreferenced\r\n        return nullptr;\r\n");

             } 
this.Write(@"    }

    virtual void SetParent(::XamlBindingInfo::XamlBindings^ __parent) override
    {
        if (__parent != nullptr && GetParent() != __parent)
        {
            _parent = __parent;
            RegisterDependenciesOnParents();
        }
    }

    virtual ::XamlBindingInfo::XamlBindings^ GetParent() override
    {
        return _parent.Resolve<::XamlBindingInfo::XamlBindings>();
    }

private:
   ::Platform::Collections::Map<int, ::Windows::Foundation::Collections::IVector<::XamlBindingInfo::WeakRefWrapper^>^>^ dependentBindings =
                ref new ::Platform::Collections::Map<int, ::Windows::Foundation::Collections::IVector<::XamlBindingInfo::WeakRefWrapper^>^>();
   ::Platform::Collections::Map<int, ::XamlBindingInfo::WeakRefWrapper^>^ elementWeakRefs =
                ref new ::Platform::Collections::Map<int, ::XamlBindingInfo::WeakRefWrapper^>();

    ::Platform::WeakReference _parent;

    void NotifyDependentScopes(int __connectionId)
    {
        if (dependentBindings->HasKey(__connectionId))
        {
            auto dependentsList = dependentBindings->Lookup(__connectionId);
            for (auto iter = dependentsList->First(); iter->HasCurrent; iter->MoveNext())
            {
                ::XamlBindingInfo::WeakRefWrapper^ refWrapper = iter->Current;
                auto obj = refWrapper->Resolve();
                if (obj != nullptr)
                {
                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::IComponentConnector^ connector = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::IComponentConnector^>(obj);\r\n                    NotifyDependentScope(__connect" +
        "ionId, connector);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    vo" +
        "id NotifyDependentScope(int __connectionId, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write(@"::IComponentConnector^ __connector)
    {
        if (elementWeakRefs->HasKey(__connectionId) && elementWeakRefs->Lookup(__connectionId)->Resolve() != nullptr)
        {
            __connector->Connect(__connectionId, elementWeakRefs->Lookup(__connectionId)->Resolve());
        }
    }

    void RegisterDependenciesOnParents()
    {
        ::XamlBindingInfo::XamlBindings^ currentParent = GetParent();
        ::Platform::Collections::Vector<int>^ unresolvedDependencies = ref new ::Platform::Collections::Vector<int>;
");

                 foreach (var element in bindUniverse.OuterScopeBoundElements)
                 {
this.Write("        unresolvedDependencies->Append(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

                 }
this.Write(@"
        while (unresolvedDependencies->Size > 0 && currentParent != nullptr)
        {
            for (unsigned int i = unresolvedDependencies->Size; i >= 1; i--)
            {
                int unresolvedDependency = unresolvedDependencies->GetAt(i - 1);
                if (currentParent->ContainsElement(unresolvedDependency))
                {
                    currentParent->RegisterForElementConnection(unresolvedDependency, owningXamlBindings.Resolve<::XamlBindingInfo::XamlBindings>());
                    unresolvedDependencies->RemoveAt(i - 1);
                }
            }

            currentParent = currentParent->GetParent();
        }
    }
public:

    virtual bool ContainsElement(int connectionId) override
    {
");

             var localElements = bindUniverse.ElementsWithConnectCaseInLocalScope.Where(c => c.IsUsedByOtherScopes); 
             if (!localElements.Any()) {
this.Write("        return false;\r\n");

             } else { 
this.Write("        switch (connectionId)\r\n        {\r\n");

                 foreach (var element in localElements)
                 {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(":\r\n                return true;\r\n");

                 }
this.Write("            default:\r\n                return false;\r\n        }\r\n");

             } 
this.Write(@"    }

    virtual void RegisterForElementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector) override
    {
        ::Windows::Foundation::Collections::IVector<::XamlBindingInfo::WeakRefWrapper^>^ dependentsList;
        if (!dependentBindings->HasKey(connectionId))
        {
            dependentsList = ref new ::Platform::Collections::Vector<::XamlBindingInfo::WeakRefWrapper^>();
            dependentBindings->Insert(connectionId, dependentsList);
        }
        else
        {
            dependentsList = dependentBindings->Lookup(connectionId);
        }

        dependentsList->Append(ref new ::XamlBindingInfo::WeakRefWrapper(connector));

        NotifyDependentScope(connectionId, connector);
    }
");

         } 
 if (bindUniverse.NeedsIDataTemplateExtension) 
 {
this.Write("\r\n    void Recycle()\r\n    {\r\n");

    if (bindUniverse.NeedsBindingsTracking)
    {
this.Write("        ReleaseAllListeners();\r\n");

    } 
 foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
 { 
     foreach(PhaseAssignment phase in kvp.Value) 
     { 
         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" != nullptr)\r\n        {\r\n");

             PushIndent();
         }
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlBindingHelper::SuspendRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(");\r\n");

         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
             PopIndent();
this.Write("        }\r\n");

         }
     } 
 } 
this.Write("    }\r\n\r\n    void ProcessBindings(::Platform::Object^ item, int itemIndex, int ph" +
        "ase, int* nextPhase)\r\n    {\r\n        switch (phase)\r\n        {\r\n            case" +
        " 0:\r\n                *nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(0)));

this.Write(";\r\n                this->SetDataRoot(static_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType));

this.Write(">(item));\r\n                if (this->_dataContextChangedToken.Value != 0)\r\n      " +
        "          {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootElement.ReferenceExpression));

this.Write("->DataContextChanged -= this->_dataContextChangedToken;\r\n                    this" +
        "->_dataContextChangedToken.Value = 0;\r\n                }\r\n                this->" +
        "_isInitialized = true;\r\n                break;\r\n");

     foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
     { 
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));

this.Write(":\r\n");

             foreach(PhaseAssignment phase in kvp.Value) 
             { 
                 if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                 {
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" != nullptr)\r\n                {\r\n");

                     PushIndent();
                 }
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlBindingHelper::ResumeRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(");\r\n");

             if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                 {
                     PopIndent();
this.Write("                }\r\n");

         }
             } 
this.Write("                *nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(kvp.Key)));

this.Write(";\r\n                break;\r\n");

     } 
this.Write("            default:\r\n                *nextPhase = -1;\r\n                break;\r\n " +
        "       }\r\n        this->Update_((");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootStep.ValueType));

this.Write(") item, 1 << phase);\r\n    }\r\n");

 } else if (bindUniverse.NeedsIDataTemplateComponent || ProjectInfo.ShouldGenerateDisableXBind)
 {
this.Write("\r\n    void Recycle()\r\n    {\r\n        return;\r\n    }\r\n\r\n    void ProcessBindings(:" +
        ":Platform::Object^ item, int itemIndex, int phase, int* nextPhase)\r\n    {\r\n     " +
        "   *nextPhase = -1;\r\n    }\r\n");

 }
 if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
 {
     if (Model.CodeInfo.IsResourceDictionary)
     {
this.Write("\r\n    void SetConverterLookupRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::ResourceDictionary^ resources)\r\n    {\r\n        this->localResources = resources" +
        ";\r\n    }\r\n");

     }
     else
     {
this.Write("\r\n    void SetConverterLookupRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement^ rootElement)\r\n    {\r\n        this->converterLookupRoot = root" +
        "Element;\r\n    }\r\n");

     }
this.Write("\r\n    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::IValueConverter^ LookupConverter(::Platform::String^ key)\r\n    {\r\n");

     if (!Model.CodeInfo.IsResourceDictionary)
     {
this.Write("        if (this->localResources == nullptr)\r\n        {\r\n            this->localR" +
        "esources = this->converterLookupRoot.Resolve<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::FrameworkElement>()->Resources;\r\n            this->converterLookupRoot = nullpt" +
        "r;\r\n            }\r\n");

     }
this.Write("        return safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Loo" +
        "kup(key) : ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::Application::Current->Resources->Lookup(key));\r\n    }\r\n");

 }
this.Write("\r\nprivate:\r\n");

             if (bindUniverse.BoundElements != null && bindUniverse.BoundElements.Count > 0)
             {
this.Write("    // Fields for each control that has bindings.\r\n");

             }
             foreach (ConnectionIdElement bindElement in bindUniverse.BoundElements)
             {
                 if (bindElement.IsWeakRef) 
                 {
this.Write("    ::Platform::WeakReference ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(";\r\n");

                 }
                 else if (!bindElement.Type.IsDerivedFromControlTemplate()) 
                 {
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.Type));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(";\r\n");

                 }
                 if (bindElement.CanBeInstantiatedLater)
                 {
                     foreach (var bindAssignment in bindElement.BindAssignments)
                     {
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(";\r\n");

                     }
                 }
             }
             if (bindUniverse.UnloadableBindingSourceElements.Any()) { 
this.Write("    std::list<std::function<void ()>> UnloadableBindingSourcesToUpdate;\r\n");

             } 
             if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
this.Write("    std::list<int> UnloadedElementsToUpdate;\r\n");

             } 
         if (bindUniverse.ElementsWithConnectCase.Where(e => e.BoundEventAssignments.Count > 0).Count() > 0)
             {
this.Write("\r\n            // Fields for each event bindings event handler.\r\n");

             }
             foreach (var element in bindUniverse.ElementsWithConnectCase)
             {
                 foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                 {
this.Write("    ::Windows::Foundation::EventRegistrationToken ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n");

                 }
             }
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("\r\n    // Static fields for each binding\'s enabled/disabled state\r\n");

                 foreach (ConnectionIdElement bindElement in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in bindElement.BindAssignments)
                     {
this.Write("    static bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(";\r\n");

                     }
                 }
             }
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("    \r\n    // Fields for binding tracking.\r\n");

             Output_Listener_Tracking_Fields(bindUniverse);
             }
             if (bindUniverse.HasBindings)
             {
                 if (bindUniverse.HasFunctionBindings) {
                     Output_TryGetValueFunctions(bindUniverse);
                     Output_FunctionBindings(bindUniverse);
                 }
                 if (bindUniverse.NeedsCompleteUpdate)
                 {
                     Output_CompleteUpdate(bindUniverse);
                 }
this.Write("\r\n    // Update methods for each path node used in binding steps.\r\n");

             }
             // Update generators 
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
this.Write("    void Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(GetUpdateParams(bindStep)));

this.Write(")\r\n    {\r\n");

                 Output_UpdateChildListeners_Call(bindStep, "obj");
                 Output_Update_Steps(bindStep.ValueType.IsNullable, bindStep.Children, true, "phase");
                 Output_Update_Steps(bindStep.ValueType.IsNullable, bindStep.Dependents, false, "phase");
                 foreach (int distinctPhase in bindStep.DistinctPhases)
                 {
                     Output_Binding_Phased_SetValue(distinctPhase, true, bindStep, false);
                     Output_Binding_Phased_SetValue(distinctPhase, false, bindStep, false);
                 }
                 if (bindStep is RootStep) { 
                     Output_Update_Steps(false, bindUniverse.BindPathSteps.Values.Where(s => s.Parent is StaticRootStep), false, "phase");
                     if (bindUniverse.ElementRootStep != null) 
                     { 
                         Output_Update_Steps(false, bindUniverse.BindPathSteps.Values.Where(s => s.Parent == bindUniverse.ElementRootStep), false, "phase");
                     } 
                     if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("        this->CompleteUpdate(phase);\r\n");

                     }
                 }
this.Write("    }\r\n");

             }
             // UpdateFallback generators 
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
                 if (bindStep.Parent != null && bindStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                 {
this.Write("\r\n    void UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(int phase)\r\n    {\r\n");

                     foreach (BindPathStep childStep in bindStep.Children.Concat(bindStep.Dependents))
                     {
                         if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                         {
this.Write("        this->UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(phase);\r\n");

                         }
                     }
                     foreach (int distinctPhase in bindStep.DistinctPhases) 
                     {
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, true, bindStep);
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, false, bindStep);
                     }
this.Write("    }\r\n");

                 }
             }
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\n    virtual void ReleaseAllListeners() override\r\n    {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.NeedsUpdateChildListeners))
                 {
                     Output_UpdateChildListeners_Call(step, "nullptr");
                 }
this.Write("    }\r\n\r\n    virtual void PropertyChanged(Platform::Object^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::PropertyChangedEventArgs^ e) override\r\n    {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
                 {
                     if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep || step is ArrayIndexStep || step is MapIndexStep) && step.ImplementsINPC)
                     {
                         string cacheName = "this->GetDataRoot()";
                         if (step.RequiresChildNotification && !(step is RootStep))
                         {
                             cacheName="cachePC_" + step.CodeName;
                         }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != nullptr && ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write("->Equals(sender))\r\n        {\r\n            ::Platform::String^ propName = e->Prope" +
        "rtyName;\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(">(sender);\r\n            if (propName == nullptr || propName->IsEmpty())\r\n        " +
        "    {\r\n");

                         PushIndent(Indent.TwoTabs);
                         Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("            }\r\n");

                         foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
                         {
this.Write("            else if (propName == \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\")\r\n            {\r\n");

             PushIndent(Indent.TwoTabs);
             foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                 Output_Update_DataChanged_Step(child);
             } 
             PopIndent();
this.Write("            }\r\n");

                         }
                         foreach (string functionName in step.TrackingSteps.OfType<FunctionStep>().Select(p => p.Method.MethodName).Distinct())
                         {
this.Write("            else if (propName == \"");

this.Write(this.ToStringHelper.ToStringWithCulture(functionName));

this.Write("\")\r\n            {\r\n");

                             PushIndent(Indent.TwoTabs);
                             Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps.OfType<FunctionStep>().Where(p => p.Method.MethodName == functionName), false, "DATA_CHANGED");
                             PopIndent();
this.Write("            }\r\n");

                         }
this.Write("        }\r\n");

                     }
                 }
                 if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("        this->CompleteUpdate(DATA_CHANGED);\r\n");

                 }
this.Write("    }\r\n\r\n    void CollectionChanged(::Platform::Object^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));

this.Write("::NotifyCollectionChangedEventArgs^ e)\r\n    {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
                 {
                     if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep) && step.ImplementsINCC && !step.ImplementsIObservableVector && !step.ImplementsIObservableMap)
                     {
                         string cacheName = "this->GetDataRoot()";
                         if (step.RequiresChildNotification && !(step is RootStep))
                         {
                             cacheName="cacheCC_" + step.CodeName;
                         }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != nullptr && ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write("->Equals(sender))\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(">(sender);\r\n");

                         PushIndent();
                         Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("        }\r\n");

                     }
                 }
                 if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("        this->CompleteUpdate(DATA_CHANGED);\r\n");

                 }
this.Write("    }\r\n\r\n    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation" +
        "::Collections::IVectorChangedEventArgs^ e)\r\n    {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
                 {
                     if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableVector)
                     {
                         string cacheName = "this->GetDataRoot()";
                         if (step.RequiresChildNotification && !(step is RootStep))
                         {
                             cacheName="cacheVC_" + step.CodeName;
                         }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != nullptr && ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write("->Equals(sender))\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(">(sender);\r\n");

                         PushIndent();
                         Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("        }\r\n");

                     }
                 }
                 if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("        this->CompleteUpdate(DATA_CHANGED);\r\n");

                 }
this.Write("    }\r\n\r\n    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::C" +
        "ollections::IMapChangedEventArgs<::Platform::String^>^ e)\r\n    {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
                 {
                     if (step.RequiresChildNotification && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableMap)
                     {
                         string cacheName = "this->GetDataRoot()";
                         if (step.RequiresChildNotification && !(step is RootStep))
                         {
                             cacheName="cacheMC_" + step.CodeName;
                         }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != nullptr && ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write("->Equals(sender))\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(">(sender);\r\n");

                         PushIndent();
                         Output_Update_Steps(step.ValueType.IsNullable, step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("        }\r\n");

                     }
                 }
                 if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("        this->CompleteUpdate(DATA_CHANGED);\r\n");

                 }
this.Write("    }\r\n\r\n    void DependencyPropertyChanged(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyObject^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyProperty^ prop)\r\n    {\r\n        if (sender != nullptr)\r\n        {\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
                 {
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("            if (sender->Equals(");

this.Write(this.ToStringHelper.ToStringWithCulture(GetCacheResolveStatement(step, "cacheDPC_", child)));

this.Write(") && ");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType.CppCXName(false)));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property->Equals(prop))\r\n            {\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(">(sender);\r\n");

                         PushIndent(Indent.TwoTabs);
                         Output_Update_DataChanged_Step(child);
                         PopIndent();
this.Write("            }\r\n");

                     }
                 }
                 if (bindUniverse.HasFunctionBindings) { 
this.Write("            this->CompleteUpdate(DATA_CHANGED);\r\n");

                 }
this.Write("        }\r\n    }\r\n\r\n");

 if (ProjectInfo.IsInputValidationEnabled) { 
this.Write("    void ErrorsChanged(::Platform::Object^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::DataErrorsChangedEventArgs^ e)\r\n    {\r\n");

     foreach (BindPathStep step in bindUniverse.INDEIPathSteps)
     {
         string cacheName = "this->GetDataRoot()";
         if (!(step is RootStep))
         {
             cacheName="cacheEC_" + step.CodeName;
         }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != nullptr && ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write("->Equals(sender))\r\n        {\r\n            ::Platform::String^ propertyName = e->P" +
        "ropertyName;\r\n            auto errorInfo = safe_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::INotifyDataErrorInfo^>(sender);\r\n            if (propertyName == nullptr || pro" +
        "pertyName->IsEmpty())\r\n            {\r\n");

           foreach(var child in step.TrackingSteps.OfType<PropertyStep>()) {
              Output_UpdateErrorsCall(child);
           } 
this.Write("            }\r\n");

       foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
       {
this.Write("            else if (propertyName == \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\")\r\n            {\r\n");

           foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) 
           { 
              Output_UpdateErrorsCall(child);
           } 
this.Write("            }\r\n");

       } 
this.Write("        }\r\n");

 }
this.Write("    }\r\n\r\n");

 void Output_UpdateErrorsCall(PropertyStep step) 
 { 
  foreach (var ba in step.AssociatedBindAssignments.Where(ba => ba.IsTrackingTarget)) {
this.Write("                UpdateErrors(");

this.Write(this.ToStringHelper.ToStringWithCulture((ba as BindAssignmentBase).ConnectionIdElement.ObjectCodeName));

this.Write(", errorInfo, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(step.PropertyName));

this.Write("\");\r\n");

  }
  }
 if (bindUniverse.INDEIPathSteps.Any()) { 
this.Write("    void UpdateErrors(");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::Control^ control, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));

this.Write("::INotifyDataErrorInfo^ sender, ::Platform::String^ propertyName)\r\n    {\r\n       " +
        " if (auto validationControl = dynamic_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write(@"::IInputValidationControl^>(control))
        {
            auto validationErrors =  validationControl->ValidationErrors;
            validationErrors->Clear();
            for (auto error : sender->GetErrors(propertyName))
            {
                auto inputValidationError = dynamic_cast<");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::InputValidationError^>(error);\r\n                if (inputValidationError == nul" +
        "lptr)\r\n                {\r\n                    inputValidationError = ref new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));

this.Write("::InputValidationError(error->ToString());\r\n                }\r\n                va" +
        "lidationErrors->Append(inputValidationError);\r\n            }\r\n        }\r\n    }\r\n" +
        "\r\n");

 }
} 
             }
 Output_BindingSetters(bindUniverse); 
 //End of bindings class 
this.Write("};\r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("\r\n    // Initializing static fields for each binding\'s enabled/disabled state\r\n");

                 foreach (ConnectionIdElement bindElement in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in bindElement.BindAssignments)
                     {
this.Write("bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingFullClassName(bindUniverse, Model.CodeInfo)));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" = false;\r\n");

                     }
                 }
             }
         }
     }
     private string GetCacheArgumentStatement(BindPathStep step, string prefix, BindPathStep child)
     {
         return String.Format("{0}this->{1}{2}", step is RootStep ? "" : "&", prefix, child.CodeName);
     }
     private string GetCacheResolveStatement(BindPathStep step, string prefix, BindPathStep child)
     {
         if (step is RootStep)
         {
             Debug.Assert(child is DependencyPropertyStep);
             string resolveAs = child is DependencyPropertyStep ? $"{Projection(KnownNamespaces.Xaml)}::DependencyObject" : "error";
             return String.Format("this->{0}{1}.Resolve<{2}>()", prefix, child.CodeName, resolveAs);
         }
         else
         {
             return String.Format("this->{0}{1}", prefix, child.CodeName);
         }
     }
 
     private void Output_Listener_Tracking_Fields(BindUniverse bindUniverse)
     {
         Queue<string> cacheSteps = new Queue<string>();
         Queue<string> eventTokenSteps = new Queue<string>();
         Queue<string> dpTokenSteps = new Queue<string>();
         foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(step => step.IsIncludedInUpdate == true))
         {
             if (step.NeedsUpdateChildListeners)
             {
                if (step.ImplementsINPC)
                {
                     if (step.RequiresChildNotification)
                     {
                         if (step is RootStep)
                         {
                             cacheSteps.Enqueue("::Platform::WeakReference cachePC_" + step.CodeName + ";");
                         }
                         else
                         {
                             cacheSteps.Enqueue(Projection(KnownNamespaces.XamlData) + "::INotifyPropertyChanged^ cachePC_" + step.CodeName + " = nullptr;");
                         }
                     }
                     eventTokenSteps.Enqueue("::Windows::Foundation::EventRegistrationToken tokenPC_" + step.CodeName + ";");
                 }
                 if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                 {
                     if (step.RequiresChildNotification)
                     {
                         cacheSteps.Enqueue(Projection(KnownNamespaces.XamlData) + "::INotifyDataErrorInfo^ cacheEC_" + step.CodeName + " = nullptr;");
                     }
                     eventTokenSteps.Enqueue("::Windows::Foundation::EventRegistrationToken tokenEC_" + step.CodeName + ";");
                 }
                 if (step.ImplementsIObservableVector)
                 {
                     if (step.RequiresChildNotification)
                     {
                         cacheSteps.Enqueue(step.ValueType.CppCXName() + " cacheVC_" + step.CodeName + " = nullptr;");
                     }
                     eventTokenSteps.Enqueue("::Windows::Foundation::EventRegistrationToken tokenVC_" + step.CodeName + ";");
                 }
                 if (step.ImplementsIObservableMap)
                 {
                     if (step.RequiresChildNotification)
                     {
                         cacheSteps.Enqueue(step.ValueType.CppCXName() + " cacheMC_" + step.CodeName + " = nullptr;");
                     }
                     eventTokenSteps.Enqueue("::Windows::Foundation::EventRegistrationToken tokenMC_" + step.CodeName + ";");
                 }
                 else if (step.ImplementsINCC)
                 {
                     if (step.RequiresChildNotification)
                     {
                         cacheSteps.Enqueue(Projection(KnownNamespaces.XamlInterop) + "::INotifyCollectionChanged^ cacheCC_" + step.CodeName + " = nullptr;");
                     }
                     eventTokenSteps.Enqueue("::Windows::Foundation::EventRegistrationToken tokenCC_" + step.CodeName + ";");
                 }
                 foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                 {
                     if (step is RootStep)
                     {
                         cacheSteps.Enqueue("::Platform::WeakReference cacheDPC_" + child.CodeName + ";");
                     }
                     else
                     {
                         cacheSteps.Enqueue(Projection(KnownNamespaces.Xaml) + "::DependencyObject^ cacheDPC_" + child.CodeName + " = nullptr;");
                     }
                     dpTokenSteps.Enqueue("__int64 tokenDPC_" + child.CodeName + " = 0;");
                 }
             }
         }
         while (cacheSteps.Count > 0)
         {
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheSteps.Dequeue()));

this.Write("\r\n");

         }
         while (eventTokenSteps.Count > 0)
         {
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(eventTokenSteps.Dequeue()));

this.Write("\r\n");

         }
         while (dpTokenSteps.Count > 0)
         {
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(dpTokenSteps.Dequeue()));

this.Write("\r\n");

         }
     }
 private void Output_Connect_TwoWayBinding(BindAssignment ba)
 {
     Output_ApiInformationCall_Push(ba.ApiInformation, Indent.TwoTabs); 
     if (ba.NeedsLostFocusForTwoWay)
     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ReferenceExpression));

this.Write("->LostFocus += ref new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::RoutedEventHandler(\r\n                    [this] (::Platform::Object^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::RoutedEventArgs^ e)\r\n                    {\r\n");

     }
     else
     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ReferenceExpression));

this.Write("->RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.CppCXName(false)));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("Property,\r\n                ref new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyPropertyChangedCallback( \r\n                    [this] (");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyObject^ sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));

this.Write("::DependencyProperty^ prop)\r\n                    {\r\n");

     }
this.Write("                        if (this->IsInitialized())\r\n                        {\r\n  " +
        "                          // Update Two Way binding\r\n");

                     MethodStep bindBackStep = ba.BindBackStep as MethodStep; 
                     if (bindBackStep != null)
                     {
                         var param = bindBackStep.Parameters[0]; 
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ReverseAssignmentExpression));

this.Write(";\r\n");

                         Output_NullCheckedAssignment(bindBackStep, null);
                     }
                     else
                     {
                         Output_NullCheckedAssignment(ba.PathStep, ba.ReverseAssignmentExpression);
                     }
this.Write("                        }\r\n                    })");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.NeedsLostFocusForTwoWay ? ";" : ");"));

this.Write("\r\n");

     Output_ApiInformationCall_Pop(ba.ApiInformation, Indent.TwoTabs); 
 } 
 void  Output_NullCheckedAssignment(BindPathStep step, LanguageSpecificString value) 
 { 
     PushIndent(Indent.FourTabs);
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(parent.CodeGen().PathExpression));

this.Write(" != nullptr)\r\n            {\r\n");

         PushIndent(); 
     } 
     if (value != null) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathSetExpression(value)));

this.Write(";\r\n");

     } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n");

     } 
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
         PopIndent(); 
this.Write("            }\r\n");

     } 
     PopIndent();
 } 
     private void Output_UpdateChildListeners_Call(BindPathStep step, string parameter)
     {
         if (step.NeedsUpdateChildListeners)
         {
             Output_ApiInformationCall_Push(step.ApiInformation, Indent.OneTab); 
             if (step.ImplementsINPC)
             {
this.Write("        this->_bindingsTracking->UpdatePropertyChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetCacheArgumentStatement(step, "cachePC_", step)));

this.Write(", &tokenPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
             {
this.Write("        this->_bindingsTracking->UpdateErrorsChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetCacheArgumentStatement(step, "cacheEC_", step)));

this.Write(", &tokenEC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsIObservableVector)
             {
this.Write("        this->_bindingsTracking->UpdateVectorChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType.MemberFriendlyName()));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", &cacheVC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", &tokenVC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             if (step.ImplementsIObservableMap)
             {
this.Write("        this->_bindingsTracking->UpdateMapChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType.MemberFriendlyName()));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", &cacheMC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", &tokenMC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             else if (step.ImplementsINCC)
             {
this.Write("        this->_bindingsTracking->UpdateCollectionChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", &cacheCC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(", &tokenCC_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(");\r\n");

             }
             foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
             {
this.Write("        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(");

this.Write(this.ToStringHelper.ToStringWithCulture(parameter));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType.CppCXName(false)));

this.Write("::");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property, ");

this.Write(this.ToStringHelper.ToStringWithCulture(GetCacheArgumentStatement(step, "cacheDPC_", child)));

this.Write(", &this->tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(");\r\n");

             }
             Output_ApiInformationCall_Pop(step.ApiInformation, Indent.OneTab); 
         }
     }
 private void Output_Binding_Phased_SetValue(int phase, bool isTracking, BindPathStep bindStep, bool isFunctionResult)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n        {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue(bindAssignment, isFunctionResult);
         }
         PopIndent();
this.Write("        }\r\n");

     }
 }
 private void Output_Binding_Phased_Fallback_SetValue(int phase, bool isTracking, BindPathStep bindStep)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking && ba.BindStatus.HasFlag(BindStatus.HasFallbackValue) select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n        {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, bindAssignment.FallbackValueExpression.CppCXName(), true);
         }
         PopIndent();
this.Write("        }\r\n");

     }
 }
 private void Output_Binding_SetValue(BindAssignment bindAssignment, bool isFunctionResult)
 {
         if (bindAssignment.PathStep is FunctionStep && !isFunctionResult)
         {
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("        if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(")\r\n        {\r\n");

                 PushIndent();
             }
this.Write("        this->PendingFunctionBindings[\"");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write("\"] = std::bind(&");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingFullClassName(bindAssignment.BindUniverse, Model.CodeInfo)));

this.Write("::Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write(", this, std::placeholders::_1);\r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
                 PopIndent();
this.Write("        }\r\n");

             }
         }
         else
         {
             string value = bindAssignment.DirectAssignmentExpression(isFunctionResult ? "result" : "obj").CppCXName();
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, value, true);
         }
     }
 private void Output_Binding_SetValue_Non_Function_Call(BindAssignment bindAssignment, String value, bool includeDeferredSet)
 {
     var element = bindAssignment.ConnectionIdElement;
this.Write("        // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

     if (ProjectInfo.ShouldGenerateDisableXBind) 
     {
this.Write("        if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(")\r\n        {\r\n");

         PushIndent();
     }
     Output_ApiInformationCall_Push(bindAssignment.ApiInformation, Indent.OneTab); 
     if (bindAssignment is BoundLoadAssignment) { 
         if (includeDeferredSet) { 
this.Write("        this->");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n\r\n");

     }
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(")\r\n        {\r\n");

         if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("            this->GetDataRoot()->FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

         } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.BindUniverse.RootElement.ReferenceExpression));

this.Write("->FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

         }
this.Write("        }\r\n        else\r\n        {\r\n");

         if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("            this->GetDataRoot()->UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(");\r\n");

         } else { 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(" != nullptr) \r\n            {\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));

this.Write("::XamlMarkupHelper::UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(");\r\n            }\r\n            this->DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

         }
this.Write("        }\r\n");

     } else { 
         if (element.NeedsNullCheckBeforeSetValue) {
this.Write("        if (this->");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" != nullptr)\r\n        {\r\n");

             PushIndent();
         }
         if (bindAssignment.MemberType.IsNullable)
         {
this.Write("        Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.TargetNullValueExpression));

this.Write(");\r\n");

         } else {
this.Write("        Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(");\r\n");

         }
         if (element.NeedsNullCheckBeforeSetValue) {
             PopIndent();
this.Write("        }\r\n");

             if (includeDeferredSet && element.CanBeInstantiatedLater) { 
this.Write("        else\r\n        {\r\n            this->");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n        }\r\n");

             }
         }
     }
     Output_ApiInformationCall_Pop(bindAssignment.ApiInformation, Indent.OneTab); 
     if (ProjectInfo.ShouldGenerateDisableXBind) 
     {
         PopIndent();
this.Write("        }\r\n");

     }
 }
 private void Output_Update_DataChanged_Step( BindPathStep step)
 {
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("        if (obj != nullptr)\r\n        {\r\n");

     }
     Output_UpdateCall(step, KnownStrings.DataChanged); 
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("        }\r\n");

     }
     if (step.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
     {
this.Write("        else\r\n        {\r\n            this->UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(DATA_CHANGED);\r\n        }\r\n");

     }
 }
 private void Output_Update_Steps(bool checkForNull, IEnumerable<BindPathStep> steps, bool checkPhaseCondition, string phaseParam)
 {
     if (steps.Count() > 0) 
     {
         if (checkForNull) 
         {
this.Write("        if (obj != nullptr)\r\n        {\r\n");

         }
         List<BindPathStep> stepsWithFallback = new List<BindPathStep>();
         string lastCondition = null;
         foreach (BindPathStep childStep in (from step in steps where step.IsIncludedInUpdate orderby step.PhaseList select step))
         {
             if(checkPhaseCondition) 
             { 
                 string thisCondition = GetPhaseCondition(childStep);
                 if (thisCondition != lastCondition)
                 {
                     if (lastCondition != null)
                     {
this.Write("            }\r\n");

                     }
                     lastCondition = thisCondition;
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(thisCondition));

this.Write(")\r\n            {\r\n");

                 }
                 PushIndent();
                 Output_UpdateCall(childStep, phaseParam); 
                 PopIndent();
             }
             else
             {
                 if (lastCondition != null)
                 {
this.Write("            }\r\n");

                 }
                 lastCondition = null;
                 Output_UpdateCall(childStep, phaseParam); 
             } 
             if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
             {
               stepsWithFallback.Add(childStep);
             }
         }
                 if (lastCondition != null)
                 {
this.Write("            }\r\n");

                 }
         if (checkForNull) 
         {
this.Write("        }\r\n");

             if (stepsWithFallback.Count > 0) 
             {
this.Write("        else\r\n        {\r\n");

                 foreach (BindPathStep childStep in stepsWithFallback)
                 {
                     if(checkPhaseCondition) 
                     { 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(GetPhaseCondition(childStep)));

this.Write(")\r\n            {\r\n                this->UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n            }\r\n");

                     } 
                     else 
                     { 
this.Write("            this->UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

                     } 
                 }
this.Write("        }\r\n");

             }
         }
     }
 }
 private void Output_Custom_Update_Call(BindPathStep step, string firstArgument, string phaseParam)
 {
     if (string.IsNullOrEmpty(firstArgument))
     {
this.Write("            this->Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

     }
     else
     {
         Output_ApiInformationCall_Push(step.ApiInformation, Indent.TwoTabs);
this.Write("            this->Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(firstArgument));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.TwoTabs);
     }
 }
 private void Output_UpdateCall(BindPathStep step, string phaseParam)
 {
     string firstArgument = step.CodeGen().UpdateCallParam.CppCXName(); 
     Output_Custom_Update_Call(step, firstArgument, phaseParam); 
 }
 private string GetMemberAccessOperator(BindPathStep bindStep)
 {
     return bindStep.ValueType.UnderlyingType.IsValueType ? "." : "->"; 
 }
 private string GetUpdateParams(BindPathStep bindStep)
 {
     if (bindStep is FunctionStep)
     {
         return "int phase";
     }
     else
     {
         return bindStep.ValueType.CppCXName() + " obj, int phase";
     }
 }
 private void Output_CompleteUpdate(BindUniverse bindUniverse)
 {
     List<string> conditions = new List<string>();
     bool needsLoop = bindUniverse.UnloadableBindingSourceElements.Any(); 
this.Write("\r\n    void CompleteUpdate(int phase)\r\n    {\r\n");

     if (needsLoop) { 
this.Write("        do\r\n        {\r\n");

         PushIndent(); 
     } 
     if (bindUniverse.HasFunctionBindings) { 
this.Write(@"        auto copiedBindings = std::move(this->PendingFunctionBindings);
        this->PendingFunctionBindings = std::map<::Platform::String^, std::function<void (int)>>();

        for(auto& pair : copiedBindings)
        {
            pair.second(phase);
        }
");

         conditions.Add("!this->PendingFunctionBindings.empty()"); 
     } 
     if (bindUniverse.UnloadableBindingSourceElements.Any()) {
this.Write("        while (!this->UnloadableBindingSourcesToUpdate.empty())\r\n        {\r\n     " +
        "       this->UnloadableBindingSourcesToUpdate.front()();\r\n            this->Unlo" +
        "adableBindingSourcesToUpdate.pop_front();\r\n        }\r\n");

         conditions.Add("!this->UnloadableBindingSourcesToUpdate.empty()"); 
     } 
     if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
this.Write("        while (!this->UnloadedElementsToUpdate.empty())\r\n        {\r\n            t" +
        "his->UpdateUnloadedElement(this->UnloadedElementsToUpdate.front());\r\n           " +
        " this->UnloadedElementsToUpdate.pop_front();\r\n        }\r\n");

         conditions.Add("!this->UnloadedElementsToUpdate.empty()"); 
     } 
     if (needsLoop) { 
         PopIndent(); 
this.Write("        }\r\n        while (");

this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" || ", conditions)));

this.Write(");\r\n");

     } 
this.Write("    }\r\n");

 }
 private void Output_FunctionBindings(BindUniverse bindUniverse)
 {
this.Write("    std::map<::Platform::String^, std::function<void (int)>> PendingFunctionBindi" +
        "ngs;\r\n\r\n");

     foreach (FunctionStep functionStep in bindUniverse.BindPathSteps.Values.Where(s => s is FunctionStep))
     {
this.Write("\r\n    void Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeName));

this.Write("(int phase)\r\n    {\r\n");

         foreach (var param in functionStep.Parameters.OrderBy(p => p.HasTryGetValue)) {
             if (param.HasTryGetValue && functionStep.RequiresSafeParameterRetrieval) {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.AssignmentType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(";\r\n        if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(param.TryGetValueCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(")) { return; }\r\n");

             } else {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.ValueType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.CodeGen().PathExpression));

this.Write(";\r\n");

             }
         }
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.ValueType));

this.Write(" result = ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeGen().PathExpression));

this.Write(";\r\n");

         foreach (int distinctPhase in functionStep.DistinctPhases) {
             Output_Binding_Phased_SetValue(distinctPhase, true, functionStep, true);
             Output_Binding_Phased_SetValue(distinctPhase, false, functionStep, true);
         }
this.Write("    }\r\n");

     }
 }
 private void Output_TryGetValueFunctions(BindUniverse bindUniverse)
 {
     foreach (BindPathStep step in bindUniverse.TryGetValueSteps)
     {
this.Write("\r\n    bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.TryGetValueCodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write("& val)\r\n    {\r\n");

         if (step is RootStep || !step.Parent.IsIncludedInUpdate) {
this.Write("        val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n        return true;\r\n");

         }
         else {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.ValueType));

this.Write(" obj;\r\n");

             if (step.Parent.ValueType.IsNullable) {
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj) && obj != nullptr)\r\n");

             } else { 
this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(obj))\r\n");

             } 
this.Write("        {\r\n            val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().UpdateCallParam));

this.Write(";\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            retu" +
        "rn false;\r\n        }\r\n");

         }
this.Write("    }\r\n");

     }
 }
 private void Output_ApiInformationCall_Push(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PushIndent(indent); 
this.Write("    if (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(")\r\n    {\r\n");

         PopIndent(); 
         PushIndent(); 
     } 
 } 
 private void Output_ApiInformationCall_Pop(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PopIndent(); 
         PushIndent(indent); 
this.Write("    }\r\n");

         PopIndent(); 
     } 
 } 
 private void Output_ApiInformationDeclarations()
 {
     if (Model.ApiInformationDeclarations.Any()) { 
this.Write("\r\n");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.Namespace.AsNamespaceDeclarationBegin()));

this.Write("\r\n{\r\n    // Api Information for conditional namespace declarations\r\n");

     foreach (var apiInformation in Model.ApiInformationDeclarations) { 
this.Write("    bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(";\r\n");

     } 
this.Write("} ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.Namespace.AsNamespaceDeclarationEnd()));

this.Write("\r\n");

     } 
 } 
 private void Output_ApiInformationInit()
 {
     if (Model.ApiInformationDeclarations.Any()) { 
this.Write("\r\n    // Api Information for conditional namespace declarations\r\n");

         foreach (var apiInformation in Model.ApiInformationDeclarations) { 
this.Write("    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.CodeGen().CallExpression));

this.Write(";\r\n");

         } 
this.Write(" \r\n");

     } 
 } 
 private void Output_BindingSetValueFunction(BindAssignment ba)
 {
     if (ba.MemberType.IsNullable)
     {
this.Write("    static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" value, ::Platform::String^ targetNullValue)\r\n    {\r\n        if (value == nullptr" +
        " && targetNullValue != nullptr)\r\n        {\r\n");

             if (ba.MemberType.IsString())
             {
this.Write("            value = targetNullValue;\r\n");

             }
             else
             {
this.Write("            value = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType.GetStringToThing("targetNullValue")));

this.Write(";\r\n");

             }
this.Write("        }\r\n");

     }
     else
     {
this.Write("    static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" value)\r\n    {\r\n");

     }
         if (ba.IsAttachable)
         {
this.Write("        ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.CppCXName(false)));

this.Write("::Set");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj, value);\r\n");

         }
         else
         {
this.Write("        obj->");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write(" = value;\r\n");

         }
this.Write("    }\r\n");

 }
 private void Output_BindingSetters(BindUniverse bu)
{
    var distinctAsignmentsByMember = from ba in bu.BindAssignments.Where(ba => ba.HasSetValueHelper) group ba by ba.MemberFullName;
    foreach (var item in distinctAsignmentsByMember) {
        Output_BindingSetValueFunction(item.First());
    }
}
 private void Output_BindingTrackingClass(BindUniverse bu) { 
this.Write("/// <summary>\r\n/// Auto generated class for compiled bindings.\r\n/// </summary>\r\n");

  foreach(string ns in Model.CodeInfo.ClassName.Namespace.Split('.')) { 
this.Write("namespace ");

this.Write(this.ToStringHelper.ToStringWithCulture(ns));

this.Write(" {\r\n");

  }  
this.Write("    ref class ");

this.Write(this.ToStringHelper.ToStringWithCulture(bu.BindingsTrackingClassName));

this.Write(" sealed : ::XamlBindingInfo::XamlBindingTrackingBase\r\n    {\r\n    internal:\r\n     " +
        "   ");

this.Write(this.ToStringHelper.ToStringWithCulture(bu.BindingsTrackingClassName));

this.Write("()\r\n        {\r\n        }\r\n\r\n        // Event handlers\r\n");

 IEnumerable<XamlType>  observableVectorTypes = bu.BindPathSteps.Values.Where(s => s.ValueType.ImplementsIObservableVector()).Select(s => s.ValueType.ItemType).Distinct();
 IEnumerable<XamlType>  observableMapTypes = bu.BindPathSteps.Values.Where(s => s.ValueType.ImplementsIObservableMap()).Select(s => s.ValueType.ItemType).Distinct();
 foreach (XamlType type in observableVectorTypes)
 { 
this.Write("\r\n        void VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write("(::Windows::Foundation::Collections::IObservableVector<");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)\r\n     " +
        "   {\r\n            VectorChanged(sender, e);\r\n        }\r\n");

 } 
 
 foreach (XamlType type in observableMapTypes)
 { 
this.Write("\r\n        void MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write("(::Windows::Foundation::Collections::IObservableMap<::Platform::String^, ");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::S" +
        "tring^>^ e)\r\n        {\r\n            MapChanged(sender, e);\r\n        }\r\n");

 } 
this.Write("\r\n        // Listener update functions\r\n");

 
 foreach (XamlType type in observableVectorTypes)
 { 
this.Write("\r\n        void UpdateVectorChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write("(::Windows::Foundation::Collections::IObservableVector<");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">^ obj, ::Windows::Foundation::Collections::IObservableVector<");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(@">^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->VectorChanged -= *pToken;
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->VectorChanged += ref new ::Windows::Foundation::Collections::VectorChangedEventHandler<");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">(\r\n                    this, &");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingFullClassName(bu, Model.CodeInfo)));

this.Write("::VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write(");\r\n            }\r\n        }\r\n");

 } 
 
 foreach (XamlType type in observableMapTypes)
 { 
this.Write("\r\n        void UpdateMapChangedListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write("(::Windows::Foundation::Collections::IObservableMap<::Platform::String^, ");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">^ obj, ::Windows::Foundation::Collections::IObservableMap<::Platform::String^, ");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(@">^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->MapChanged -= *pToken;
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->MapChanged += ref new ::Windows::Foundation::Collections::MapChangedEventHandler<::Platform::String^, ");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write(">(\r\n                    this, &");

this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingFullClassName(bu, Model.CodeInfo)));

this.Write("::MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));

this.Write(");\r\n            }\r\n        }\r\n");

 } 
this.Write("    };\r\n");

  foreach(string ns in Model.CodeInfo.ClassName.Namespace.Split('.')) { 
this.Write("}\r\n");

  }  
 }
    }
}
