// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppTypeInfoPass1Impl : CppCX_CodeGenerator<TypeInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
            this.Write("#include <regex>\r\n#include \"XamlTypeInfo.g.h\"\r\n\r\n\r\n// XamlMetaDataProvider\r\n");
 OutputNamespaceBegin(ProjectInfo.XamlTypeInfoNamespace); 
            this.Write("[::Windows::Foundation::Metadata::WebHostHidden]\r\n");
 if (ProjectInfo.GenerateFullXamlMetadataProvider) { 
            this.Write("[");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::FullXamlMetadataProvider]\r\n");
 } 
            this.Write("public ref class XamlMetaDataProvider sealed : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider\r\n{\r\npublic:\r\n    [::Windows::Foundation::Metadata::Defaul" +
                    "tOverload]\r\n    virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName type);\r\n    virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlType(::Platform::String^ fullName);\r\n    virtual ::Platform::" +
                    "Array<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XmlnsDefinition>^ GetXmlnsDefinitions();\r\n");
  if(!ProjectInfo.GenerateProviderCode  && !ProjectInfo.EnableTypeInfoReflection)
  {
            this.Write("internal:\r\n    void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider);\r\n");
  }
            this.Write("    \r\nprivate:\r\n    ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider" +
                    ";\r\n    property ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ Provider\r\n  " +
                    "  {\r\n        ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ get();\r\n    }\r\n" +
                    "};\r\n");
 OutputNamespaceEnd(ProjectInfo.XamlTypeInfoNamespace); 
            this.Write("\r\n");
  if(!ProjectInfo.GenerateProviderCode  && !ProjectInfo.EnableTypeInfoReflection)
  {
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("::XamlMetaDataProvider::AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider)\r\n{\r\n    Provider->AddOtherProvider(otherP" +
                    "rovider);\r\n}\r\n\r\n");
  }
            this.Write("[::Windows::Foundation::Metadata::DefaultOverload]\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("::XamlMetaDataProvider::GetXamlType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName type)\r\n{\r\n    return Provider->GetXamlTypeByType(type);\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("::XamlMetaDataProvider::GetXamlType(Platform::String^ fullName)\r\n{\r\n    return Pr" +
                    "ovider->GetXamlTypeByName(fullName);\r\n}\r\n\r\nPlatform::Array<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XmlnsDefinition>^ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("::XamlMetaDataProvider::GetXmlnsDefinitions()\r\n{\r\n    return ref new Platform::Ar" +
                    "ray<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::XmlnsDefinition>(0);\r\n}\r\n\r\n::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoNamespace)));
            this.Write("::XamlMetaDataProvider::Provider::get()\r\n{\r\n    if (_provider == nullptr)\r\n    {\r" +
                    "\n        _provider = ref new ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider(" +
                    ");\r\n    }\r\n    return _provider;\r\n}\r\n\r\n");
 if(ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write("#pragma warning(push)\r\n#pragma warning(disable: 4691)\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write("::ReflectionXamlMetadataProvider^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvi" +
                    "der::ReflectionProvider::get()\r\n{\r\n    if (_ReflectionProvider == nullptr)\r\n    " +
                    "{\r\n        _ReflectionProvider = ref new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write("::ReflectionXamlMetadataProvider();\r\n    }\r\n    return _ReflectionProvider;\r\n}\r\n#" +
                    "pragma warning(pop)\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetCachedType(::" +
                    "Platform::String^ typeName)\r\n{\r\n    auto lock = _xamlTypesCriticalSection.Lock()" +
                    ";\r\n    auto val = _xamlTypes.find(typeName);\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ xamlType = nullptr;\r\n    if (val != _xamlTypes.end())\r\n    {\r\n      " +
                    "  xamlType = (val->second).Resolve<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType>();\r\n        if(xamlType != nullptr)\r\n        {\r\n            return x" +
                    "amlType;\r\n        }\r\n    }\r\n    return nullptr;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::AddCachedType(::" +
                    "Platform::String^ typeName, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ reflectionType)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ typeToCache = nullptr;
    auto activatableType = GetActivatableTypeForTypeName(typeName);
    if (activatableType != nullptr)
    {
        typeToCache = ref new ::XamlTypeInfo::InfoProvider::XamlConsolidatedType(reflectionType, activatableType);
    }
    else
    {
        typeToCache = reflectionType;
    }

    if (typeToCache != nullptr)
    {
        Platform::WeakReference wr(typeToCache);
        _xamlTypes[typeName] =  wr;
    }
    return typeToCache;
}

");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetXamlTypeByTyp" +
                    "e(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName type)\r\n{\r\n");
 if(ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write(@"        auto lock = _xamlTypesCriticalSection.Lock();
        auto cachedType = GetCachedType(type.Name);
        if (cachedType != nullptr)
        {
            return cachedType;
        }
#pragma warning(push)
#pragma warning(disable: 4691)
        return AddCachedType(type.Name, ReflectionProvider->GetXamlType(type));
#pragma warning(pop)
");
 } 
 else 
 { 
            this.Write("    auto xamlType = GetXamlTypeByName(type.Name);\r\n");
  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { 
            this.Write(@"    ::XamlTypeInfo::InfoProvider::XamlUserType^ userXamlType = dynamic_cast<::XamlTypeInfo::InfoProvider::XamlUserType^>(xamlType);
    if (xamlType == nullptr || (userXamlType != nullptr && userXamlType->IsReturnTypeStub && !userXamlType->IsLocalType))
    {
        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ libXamlType = CheckOtherMetadataProvidersForType(type);
        if (libXamlType != nullptr)
        {
            if(libXamlType->IsConstructible || xamlType == nullptr)
            {
                xamlType = libXamlType;
            }
        }
    }
");
  } 
            this.Write("    return xamlType;\r\n");
 } 
            this.Write("}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetXamlTypeByNam" +
                    "e(::Platform::String^ typeName)\r\n{\r\n");
 if(ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write(@"        auto cachedType = GetCachedType(typeName);
        if (cachedType != nullptr)
        {
            return cachedType;
        }
#pragma warning(push)
#pragma warning(disable: 4691)
        return AddCachedType(typeName, ReflectionProvider->GetXamlType(typeName));
#pragma warning(pop)
");
 } 
 else 
 { 
            this.Write("    if (typeName == nullptr || typeName->IsEmpty())\r\n    {\r\n        return nullpt" +
                    "r;\r\n    }\r\n\r\n    auto lock = _xamlTypesCriticalSection.Lock();\r\n    auto val = _" +
                    "xamlTypes.find(typeName);\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ xamlType = nullptr;\r\n    if (val != _xamlTypes.end())\r\n    {\r\n      " +
                    "  xamlType = (val->second).Resolve<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType>();\r\n        if(xamlType != nullptr)\r\n        {\r\n            return x" +
                    "amlType;\r\n        }\r\n    }\r\n\r\n    xamlType = CreateXamlType(typeName);\r\n");
  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { 
            this.Write(@"    ::XamlTypeInfo::InfoProvider::XamlUserType^ userXamlType = dynamic_cast<::XamlTypeInfo::InfoProvider::XamlUserType^>(xamlType);
    if (xamlType == nullptr || (userXamlType != nullptr && userXamlType->IsReturnTypeStub && !userXamlType->IsLocalType))
    {
        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ libXamlType  = CheckOtherMetadataProvidersForName(typeName);
        if (libXamlType != nullptr)
        {
            if(libXamlType->IsConstructible || xamlType == nullptr)
            {
                xamlType = libXamlType;
            }
        }
    }

");
  } 
            this.Write("    if (xamlType != nullptr)\r\n    {\r\n        Platform::WeakReference wr(xamlType)" +
                    ";\r\n        _xamlTypes[xamlType->FullName] =  wr;\r\n    }\r\n    return xamlType;\r\n");
 } 
            this.Write("}\r\n\r\n");
 if (!ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetMemberByLongName(::Platform::String^ longMemberName)
{
    if (longMemberName == nullptr || longMemberName->IsEmpty())
    {
        return nullptr;
    }

    auto lock = _xamlMembersCriticalSection.Lock();
    auto val = _xamlMembers.find(longMemberName);
    if (val != _xamlMembers.end())
    {
        return val->second;
    }

    auto xamlMember = CreateXamlMember(longMemberName);
    if (xamlMember != nullptr)
    {
        _xamlMembers[longMemberName] = xamlMember;
    }
    return xamlMember;
}
");
 } 
            this.Write("\r\n");
   if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
   {
            this.Write("\r\nvoid ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider)\r\n{\r\n    auto lock = _xamlTypesCriticalSec" +
                    "tion.Lock();\r\n    if(_otherProviders == nullptr)\r\n    {\r\n        auto otherProvi" +
                    "ders = ref new ::Platform::Collections::Vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^>();\r\n        _otherProviders = otherProviders;\r\n    }\r\n " +
                    "   _otherProviders->Append(otherProvider); \r\n}\r\n");
  }
  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { 
            this.Write("\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetada" +
                    "taProvidersForName(::Platform::String^ typeName)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ foundXamlType = nullptr;
    auto lock = _xamlTypesCriticalSection.Lock();
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetada" +
                    "taProvidersForType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName t)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ foundXamlType = nullptr;
    auto lock = _xamlTypesCriticalSection.Lock();
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}
");
  } 
            this.Write("\r\n");
 if (!ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write("// XamlSystemBaseType\r\n::XamlTypeInfo::InfoProvider::XamlSystemBaseType::XamlSyst" +
                    "emBaseType(::Platform::String^ name) :\r\n    _fullName(name)\r\n{\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::BaseType::get()\r\n{" +
                    "\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::ContentProperty:" +
                    ":get()\r\n{\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n::Platfo" +
                    "rm::String^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::FullName::get()\r\n{" +
                    "\r\n    return _fullName;\r\n}\r\n\r\n::Platform::String^ ::XamlTypeInfo::InfoProvider::" +
                    "XamlSystemBaseType::Name::get()\r\n{\r\n    const wchar_t* seperator = wcsrchr(_full" +
                    "Name->Data(), \'.\');\r\n    if (seperator == nullptr)\r\n    {\r\n        return _fullN" +
                    "ame;\r\n    }\r\n    return ref new ::Platform::String(seperator);\r\n}\r\n\r\nbool ::Xaml" +
                    "TypeInfo::InfoProvider::XamlSystemBaseType::IsArray::get()\r\n{\r\n    throw ref new" +
                    " ::Platform::NotImplementedException;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::X" +
                    "amlSystemBaseType::IsCollection::get()\r\n{\r\n    throw ref new ::Platform::NotImpl" +
                    "ementedException;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::I" +
                    "sConstructible::get()\r\n{\r\n    throw ref new ::Platform::NotImplementedException;" +
                    "\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsDictionary::get(" +
                    ")\r\n{\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\nbool ::XamlTy" +
                    "peInfo::InfoProvider::XamlSystemBaseType::IsMarkupExtension::get()\r\n{\r\n    throw" +
                    " ref new ::Platform::NotImplementedException;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoPro" +
                    "vider::XamlSystemBaseType::IsEnum::get()\r\n{\r\n    throw ref new ::Platform::NotIm" +
                    "plementedException;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType:" +
                    ":IsSystemType::get()\r\n{\r\n    throw ref new ::Platform::NotImplementedException;\r" +
                    "\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsBindable::get()\r\n" +
                    "{\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::ItemType::get()\r\n{" +
                    "\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::KeyType::get()\r\n{\r" +
                    "\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::BoxedType::get()\r\n" +
                    "{\r\n    throw ref new ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName (::XamlTypeInfo::InfoProvider::XamlSystemBaseType::UnderlyingType::get" +
                    ")()\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName typeName;\r\n\r\n    typeName.Name = _fullName;\r\n    typeName.Kind = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeKind::Primitive;\r\n\r\n    return typeName;\r\n}\r\n\r\n::Platform::Object^ ::XamlTy" +
                    "peInfo::InfoProvider::XamlSystemBaseType::ActivateInstance()\r\n{\r\n    throw ref n" +
                    "ew ::Platform::NotImplementedException;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::GetMember(::Platform::String^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::AddToVector(::Platform::Object^, ::Platform::Object^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::AddToMap(::Platform::Object^, ::Platform::Object^, ::Platform::Object^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::RunInitializer()
{
    throw ref new ::Platform::NotImplementedException;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::CreateFromString(::Platform::String^)
{
    throw ref new ::Platform::NotImplementedException;
}

//XamlUserType
::XamlTypeInfo::InfoProvider::XamlUserType::XamlUserType(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ fullName, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ baseType) :
    _isArray(false),
    _isMarkupExtension(false),
    _isEnum(false),
    _isBindable(false),
    _isReturnTypeStub(false),
    _isLocalType(false),
    _fullName(fullName),
    _provider(provider),
    _baseType(baseType)
{
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlUserType::FullName::get()
{
    return _fullName;
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlUserType::Name::get()
{
    const wchar_t *seperator = wcsrchr(_fullName->Data(), '.');
    if (seperator == nullptr)
    {
        return _fullName;
    }
    return ref new ::Platform::String(seperator);
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName (::XamlTypeInfo::InfoProvider::XamlUserType::UnderlyingType::get)()\r\n{" +
                    "\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName typeName;\r\n\r\n    typeName.Name = _fullName;\r\n    typeName.Kind = KindO" +
                    "fType;\r\n\r\n    return typeName;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUser" +
                    "Type::IsSystemType::get()\r\n{\r\n    return true;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::BaseType::get()\r\n{\r\n    " +
                    "return _baseType;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsArray" +
                    "::get()\r\n{\r\n    return _isArray;\r\n}\r\nvoid ::XamlTypeInfo::InfoProvider::XamlUser" +
                    "Type::IsArray::set(bool value)\r\n{\r\n    _isArray = value;\r\n}\r\n\r\nbool ::XamlTypeIn" +
                    "fo::InfoProvider::XamlUserType::IsCollection::get()\r\n{\r\n    return CollectionAdd" +
                    " != nullptr;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsConstructi" +
                    "ble::get()\r\n{\r\n    return Activator != nullptr;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoP" +
                    "rovider::XamlUserType::IsDictionary::get()\r\n{\r\n    return DictionaryAdd != nullp" +
                    "tr;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsMarkupExtension::ge" +
                    "t()\r\n{\r\n    return _isMarkupExtension;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::" +
                    "XamlUserType::IsMarkupExtension::set(bool value)\r\n{\r\n    _isMarkupExtension = va" +
                    "lue;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsEnum::get()\r\n{\r\n  " +
                    "  return _isEnum;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::XamlUserType::IsEnum:" +
                    ":set(bool value)\r\n{\r\n    _isEnum = value;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvide" +
                    "r::XamlUserType::IsBindable::get()\r\n{\r\n    return _isBindable;\r\n}\r\n\r\nvoid ::Xaml" +
                    "TypeInfo::InfoProvider::XamlUserType::IsBindable::set(bool value)\r\n{\r\n    _isBin" +
                    "dable = value;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsReturnTy" +
                    "peStub::get()\r\n{\r\n    return _isReturnTypeStub;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoP" +
                    "rovider::XamlUserType::IsReturnTypeStub::set(bool value)\r\n{\r\n    _isReturnTypeSt" +
                    "ub = value;\r\n}\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlUserType::IsLocalType::" +
                    "get()\r\n{\r\n    return _isLocalType;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::Xaml" +
                    "UserType::IsLocalType::set(bool value)\r\n{\r\n    _isLocalType = value;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlUserType::ContentProperty::get()
{
    return _provider->GetMemberByLongName(_contentPropertyName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::ContentPropertyName::set(::Platform::String^ value)
{
    _contentPropertyName = value;
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::ItemType::get()
{
    return _provider->GetXamlTypeByName(_itemTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::ItemTypeName::set(::Platform::String^ value)
{
    _itemTypeName = value;
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::KeyType::get()
{
    return _provider->GetXamlTypeByName(_keyTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::KeyTypeName::set(::Platform::String^ value)
{
    _keyTypeName = value;
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::BoxedType::get()\r\n{\r\n   " +
                    " return _boxedType;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlUserType::GetMember(::Platform::String^ name)
{
    auto val = _memberNames.find(name);
    if (val != _memberNames.end())
    {
        return _provider->GetMemberByLongName(val->second);
    }
    return nullptr;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlUserType::ActivateInstance()
{
    return Activator();
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    DictionaryAdd(instance, key, item);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddToVector(::Platform::Object^ instance, ::Platform::Object^ item)
{
    CollectionAdd(instance, item);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::RunInitializer()
{
    // The C++ runtime will have already run all the Static Initializers at start up.
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlUserType::CreateFromString(::Platform::String^ input)
{
    // For boxed types, run the boxed type's CreateFromString method and boxing
    if (BoxedType != nullptr)
    {
        return BoxedType->CreateFromString(input);
    }

    if (CreateFromStringMethod != nullptr)
    {
        return (*CreateFromStringMethod)(input);
    }
    else
    {
        return FromStringConverter(this, input);
    }
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::SetBoxedType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ boxedType)\r\n{\r\n    _boxedType = boxedType;\r\n}\r\n\r\nvoid ::XamlTypeInfo" +
                    "::InfoProvider::XamlUserType::AddMemberName(::Platform::String^ shortName)\r\n{\r\n " +
                    "   _memberNames[shortName] = FullName + \".\" + shortName;\r\n}\r\n\r\nvoid ::XamlTypeIn" +
                    "fo::InfoProvider::XamlUserType::AddEnumValue(::Platform::String^ name, ::Platfor" +
                    "m::Object^ value)\r\n{\r\n    _enumValues[name->Data()] = value;\r\n}\r\n\r\n::default::ui" +
                    "nt32 (::XamlTypeInfo::InfoProvider::XamlUserType::CreateEnumUIntFromString)(::Pl" +
                    "atform::String^ input)\r\n{\r\n    bool found = false;\r\n\r\n    const std::wregex regu" +
                    "larExpression(L\"^\\\\s+|\\\\s*,\\\\s*|\\\\s+$\");\r\n    uint32 val = 0;\r\n\r\n    for (std::w" +
                    "cregex_token_iterator it(input->Begin(), input->End(), regularExpression, -1), e" +
                    "nd; it != end; ++it)\r\n    {\r\n        const std::wcsub_match& subMatch = *it;\r\n\r\n" +
                    "        if (subMatch.length() == 0 )\r\n        {\r\n            continue;\r\n        " +
                    "}\r\n\r\n        std::wstring lookup(subMatch.first, (unsigned int)subMatch.length()" +
                    ");\r\n\r\n        try\r\n        {\r\n            auto entry = _enumValues.find(lookup);" +
                    "\r\n            if (entry != _enumValues.end())\r\n            {\r\n                co" +
                    "nst auto f = entry->second;\r\n                val |= safe_cast<int>(f);\r\n        " +
                    "    }\r\n            else\r\n            {\r\n                val |= std::stoi(subMatc" +
                    "h);\r\n            }\r\n            found=true;\r\n        }\r\n        catch (const std" +
                    "::invalid_argument& )\r\n        {\r\n            found = false;\r\n            break;" +
                    "\r\n        }\r\n    }\r\n\r\n    if(found)\r\n    {\r\n        return val;\r\n    }\r\n    thro" +
                    "w ref new ::Platform::InvalidArgumentException();\r\n}\r\n\r\n// XamlMember\r\n::XamlTyp" +
                    "eInfo::InfoProvider::XamlMember::XamlMember(::XamlTypeInfo::InfoProvider::XamlTy" +
                    "peInfoProvider^ provider, ::Platform::String^ name, ::Platform::String^ typeName" +
                    ") :\r\n    _isAttachable(false),\r\n    _isDependencyProperty(false),\r\n    _isReadOn" +
                    "ly(false),\r\n    _name(name),\r\n    _typeName(typeName),\r\n    _provider(provider)\r" +
                    "\n{\r\n}\r\n\r\n\r\nbool ::XamlTypeInfo::InfoProvider::XamlMember::IsAttachable::get()\r\n{" +
                    "\r\n    return _isAttachable;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::XamlMember:" +
                    ":IsAttachable::set(bool value)\r\n{\r\n    _isAttachable = value;\r\n}\r\n\r\nbool ::XamlT" +
                    "ypeInfo::InfoProvider::XamlMember::IsDependencyProperty::get()\r\n{\r\n    return _i" +
                    "sDependencyProperty;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::XamlMember::IsDepe" +
                    "ndencyProperty::set(bool value)\r\n{\r\n    _isDependencyProperty = value;\r\n}\r\n\r\nboo" +
                    "l ::XamlTypeInfo::InfoProvider::XamlMember::IsReadOnly::get()\r\n{\r\n    return _is" +
                    "ReadOnly;\r\n}\r\n\r\nvoid ::XamlTypeInfo::InfoProvider::XamlMember::IsReadOnly::set(b" +
                    "ool value)\r\n{\r\n    _isReadOnly = value;\r\n}\r\n\r\n::Platform::String^ ::XamlTypeInfo" +
                    "::InfoProvider::XamlMember::Name::get()\r\n{\r\n    return _name;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlMember::Type::get()\r\n{\r\n    return" +
                    " _provider->GetXamlTypeByName(_typeName);\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlMember::TargetType::get()
{
    return _provider->GetXamlTypeByName(_targetTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlMember::TargetTypeName::set(::Platform::String^ value)
{
    _targetTypeName = value;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlMember::GetValue(::Platform::Object^ instance)
{
    if (Getter != nullptr)
    {
        return Getter(instance);
    }
    throw ref new ::Platform::NullReferenceException();
}

void ::XamlTypeInfo::InfoProvider::XamlMember::SetValue(::Platform::Object^ instance, ::Platform::Object^ value)
{
    if (Setter != nullptr)
    {
        Setter(instance, value);
        return;
    }
    throw ref new ::Platform::NullReferenceException();
}
");
 } 
 else 
 { 
            this.Write("//XamlConsolidatedType\r\n::XamlTypeInfo::InfoProvider::XamlConsolidatedType::XamlC" +
                    "onsolidatedType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ reflectionType, ::XamlTypeInfo::InfoProvider::XamlActivatableType^ activatableType) :
    _reflectionType(reflectionType),
    _activatableType(activatableType)
{
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::FullName::get()
{
    return _reflectionType->FullName;
}


");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName (::XamlTypeInfo::InfoProvider::XamlConsolidatedType::UnderlyingType::g" +
                    "et)()\r\n{\r\n    return _reflectionType->UnderlyingType;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::BaseType::get()
{
    return _reflectionType->BaseType;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsArray::get()
{
    return _reflectionType->IsArray;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsCollection::get()
{
    return _reflectionType->IsCollection;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsConstructible::get()
{
    return _activatableType != nullptr;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsDictionary::get()
{
    return _reflectionType->IsDictionary;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsMarkupExtension::get()
{
    return _reflectionType->IsMarkupExtension;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsBindable::get()
{
    return _reflectionType->IsBindable;
}

");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ContentPropert" +
                    "y::get()\r\n{\r\n    return _reflectionType->ContentProperty;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ItemType::get()\r" +
                    "\n{\r\n    return _reflectionType->ItemType;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::KeyType::get()\r\n" +
                    "{\r\n    return _reflectionType->KeyType;\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::GetMember(::Platform::String^ name)
{
   return _reflectionType->GetMember(name);
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ActivateInstance()
{
    return _activatableType->ActivateInstance();
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    _reflectionType->AddToMap(instance, key, item);
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::AddToVector(::Platform::Object^ instance, ::Platform::Object^ item)
{
    _reflectionType->AddToVector(instance, item);
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::RunInitializer()
{
    _reflectionType->RunInitializer();
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::CreateFromString(::Platform::String^ input)
{
    return _reflectionType->CreateFromString(input);
}

//XamlActivatableType
::XamlTypeInfo::InfoProvider::XamlActivatableType::XamlActivatableType()
{
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlActivatableType::ActivateInstance()
{
    return Activator();
}
");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
