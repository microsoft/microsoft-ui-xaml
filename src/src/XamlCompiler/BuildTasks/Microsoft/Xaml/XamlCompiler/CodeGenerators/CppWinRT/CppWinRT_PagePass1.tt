<#@ template language="C#" inherits="CppWinRT_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>

//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#pragma once

#include <unknwn.h>

// Undefine GetCurrentTime macro to prevent
// conflict with Storyboard::GetCurrentTime
#undef GetCurrentTime

<#  foreach (var includeFile in Model.NeededCppWinRTProjectionHeaderFiles) { #>
#if __has_include(<<#=includeFile#>>)
#include <<#=includeFile#>>
#endif
<#  }#>

<#  if (Model.CodeInfo.BindStatus != BindStatus.None) { #>
#include "XamlBindingInfo.xaml.g.h"
<#  } #>

namespace winrt::<#=Colonize(Model.CodeInfo.ClassName.Namespace)#>::implementation
{
    using IInspectable = <#=Projection(KnownNamespaces.WindowsFoundation)#>::IInspectable;

    template <typename D, typename ... I>
    struct <#=Model.CodeInfo.ClassName.ShortName#>T : public ::winrt::<#=Colonize(Model.CodeInfo.ClassName.Namespace)#>::implementation::<#=Model.CodeInfo.ClassName.ShortName#>_base<D,
<#  if (Model.CodeInfo.HasInComponentBase) { #>
        <#=Projection(Model.CodeInfo.BaseTypeName).ToLocalCppWinRTTypeName()#>,
<#  } else { #>
        <#=Projection(KnownNamespaces.XamlMarkup)#>::IComponentConnector,
<#  } #>
        I...>
    {
        using base_type = typename <#=Model.CodeInfo.ClassName.ShortName#>T::base_type;
        using base_type::base_type;
        using class_type = typename <#=Model.CodeInfo.ClassName.ShortName#>T::class_type;

        void InitializeComponent();
<#  if (Model.CodeInfo.PerXamlFileInfo.Count > 1) { #>
        void InitializeComponent(<#=Projection(KnownNamespaces.WindowsFoundation)#>::Uri const& resourceLocator);
<#  }#>
        virtual void Connect(int32_t connectionId, IInspectable const& target);
        virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IComponentConnector GetBindingConnector(int32_t connectionId, IInspectable const& target);
        void UnloadObject(<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject const& dependencyObject);
        void DisconnectUnloadedObject(int32_t connectionId);
<#  foreach (var fieldData in Model.CodeInfo.FieldDeclarations) {
        if (fieldData.IsDeprecated) { #>
#pragma warning(push)
#pragma warning(disable : 4973)
<#      }#>

        <#=Projection(fieldData.FieldTypeName)#> <#=fieldData.FieldName#>()
        {
            return _<#=fieldData.FieldName#>;
        }
        void <#=fieldData.FieldName#>(<#=Projection(fieldData.FieldTypeName)#> value)
        {
            _<#=fieldData.FieldName#> = value;
        }
<#      if (fieldData.IsDeprecated) { #>
#pragma warning(pop)
<#      }#>
<#  }#>
        <#  if (Model.CodeInfo.BindStatus != BindStatus.None) { #>

         ::winrt::com_ptr<<#=Projection(ProjectInfo.RootNamespace)#>::implementation::XamlBindings> Bindings;
<#  } #>

    protected:
        bool _contentLoaded{false};

    private:
<#  foreach (BindUniverse bindUniverse in Model.CodeInfo.BindUniverses) { #>
        struct <#=bindUniverse.BindingsClassName#>;
<#  }#>

<#  foreach (var fieldData in Model.CodeInfo.FieldDeclarations) { #>
<#      if (fieldData.IsDeprecated) { #>
#pragma warning(push)
#pragma warning(disable : 4973)
<#      }#>
        <#=Projection(fieldData.FieldTypeName)#> _<#=fieldData.FieldName#>{nullptr};
<#      if (fieldData.IsDeprecated) { #>
#pragma warning(pop)
<#      }#>
<#  }#>
    };
}
