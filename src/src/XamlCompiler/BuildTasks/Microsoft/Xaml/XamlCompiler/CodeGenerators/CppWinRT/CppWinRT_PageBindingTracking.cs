// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Xaml;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_PageBindingTracking : CppWinRT_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

    BindUniverse bu = Arguments[0] as BindUniverse;

            this.Write("    struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bu.BindingsTrackingClassName));
            this.Write(" : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(ProjectInfo.RootNamespace)));
            this.Write("::implementation::XamlBindingTrackingBase\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(bu.BindingsTrackingClassName));
            this.Write("()\r\n        {}\r\n\r\n        // Event handlers\r\n");
 IEnumerable<XamlType>  observableVectorTypes = bu.BindPathSteps.Values.Where(s => s.ValueType.ImplementsIObservableVector()).Select(s => s.ValueType.ItemType).Distinct();
 IEnumerable<XamlType>  observableMapTypes = bu.BindPathSteps.Values.Where(s => s.ValueType.ImplementsIObservableMap()).Select(s => s.ValueType.ItemType).Distinct();
 foreach (XamlType type in observableVectorTypes)
 { 
            this.Write("\r\n        void VectorChanged_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("(\r\n            ::winrt::Windows::Foundation::Collections::IObservableVector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write("> const& sender,\r\n            ::winrt::Windows::Foundation::Collections::IVectorC" +
                    "hangedEventArgs const& e)\r\n        {\r\n            VectorChanged(sender, e);\r\n   " +
                    "     }\r\n");
 } 
 
 foreach (XamlType type in observableMapTypes)
 { 
            this.Write("\r\n        void MapChanged_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("(\r\n            ::winrt::Windows::Foundation::Collections::IObservableMap<::winrt:" +
                    ":hstring, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write("> const& sender,\r\n            ::winrt::Windows::Foundation::Collections::IMapChan" +
                    "gedEventArgs<::winrt::hstring> const& e)\r\n        {\r\n            MapChanged(send" +
                    "er, e);\r\n        }\r\n");
 } 
            this.Write("\r\n        // Listener update functions\r\n");
 
 foreach (XamlType type in observableVectorTypes)
 { 
            this.Write("\r\n        void UpdateVectorChangedListener_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("(\r\n            ::winrt::Windows::Foundation::Collections::IObservableVector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write("> const& obj,\r\n            ::winrt::Windows::Foundation::Collections::IObservable" +
                    "Vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write(@"> & cache,
            ::winrt::event_token & token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingClassName(bu, Model.CodeInfo)));
            this.Write("::VectorChanged_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("});\r\n            }\r\n        }\r\n");
 } 
 
 foreach (XamlType type in observableMapTypes)
 { 
            this.Write("\r\n        void UpdateMapChangedListener_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("(\r\n            ::winrt::Windows::Foundation::Collections::IObservableMap<::winrt:" +
                    ":hstring, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write("> const& obj,\r\n            ::winrt::Windows::Foundation::Collections::IObservable" +
                    "Map<::winrt::hstring, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write(@"> & cache,
            ::winrt::event_token & token)
        {
            if (cache && cache != obj)
            {
                cache.MapChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.MapChanged({this, &");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBindingTrackingClassName(bu, Model.CodeInfo)));
            this.Write("::MapChanged_");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.MemberFriendlyName()));
            this.Write("});\r\n            }\r\n        }\r\n");
 } 
            this.Write("    };\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
