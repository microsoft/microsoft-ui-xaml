// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System.Collections.Generic;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CSharpPagePass2 : CSharp_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#pragma checksum \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\"\r\n");
  }   
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.Namespace));
            this.Write("\r\n{\r\n");
 if (Model.CodeInfo.IsApplication) 
 {
            this.Write("    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.BaseTypeName)));
            this.Write("\r\n    {\r\n    }\r\n");
 }
 else 
 {
            this.Write("    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write(" : \r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.BaseTypeName)));
            this.Write(", \r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));
            this.Write("\r\n    {\r\n");
      if (Model.CodeInfo.HasBindingSetters) 
      { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n        private static class XamlBindingSetters\r\n        {\r\n");
      var bindingSetters = new HashSet<String>();
      foreach (ConnectionIdElement connectionId in Model.AllConnectionIdElements)
      {
          foreach (BindPathStep step in connectionId.BindUniverse.BindPathSteps.Values)
          {
              foreach (BindAssignment bindAssignment in step.BindAssignments.Where(ba => ba.HasSetValueHelper))
              {
                  if (!bindingSetters.Contains(bindAssignment.MemberFullName))
                  {
                      Output_Binding_SetValue_Function(bindAssignment);
                      bindingSetters.Add(bindAssignment.MemberFullName);
                  }
              }
          }
      }
 
            this.Write("        };\r\n");
      } 
      if (Model.CodeInfo.IsUsingCompiledBinding) 
      { 
          Output_BindingsClasses();  
      } 
      Output_ConnectMethod();  
      Output_UnloadObjectMethod(); 
            this.Write("\r\n");
      Output_GetBindingConnectorMethod();  
      Output_ApiInformationDeclarations();  
      Output_InitializeXProperties(); 
            this.Write("    }\r\n");
 }
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
     private void Output_InitializeXProperties() 
     { 
         if (Model.XProperties.Any()) 
         { 
this.Write("\r\n        /// <summary>\r\n        /// InitializeXProperties()\r\n        /// </summa" +
        "ry>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        partial void InitializeXProperties()\r\n        {\r\n");

             foreach (xProperty xProp in Model.XProperties) 
             { 
                 if (xProp.DefaultValueString != null) 
                 { 
this.Write("            _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.GetStringToThing($"\"{xProp.DefaultValueString}\"")));

this.Write(";\r\n");

                 } 
                 if (xProp.DefaultValueMarkup != null) 
                 { 
this.Write("            _");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.Name));

this.Write(" = (");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.PropertyType.CSharpName()));

this.Write(")(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlReader)));

this.Write(".Load(");

this.Write(this.ToStringHelper.ToStringWithCulture(xProp.DefaultValueMarkup));

this.Write("));\r\n");

                 } 
             } 
this.Write("        }\r\n");

         } 
     } 
     private void Output_ConnectMethod()
     {
this.Write("\r\n        /// <summary>\r\n        /// Connect()\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public void Connect(int connectionId, object target)\r\n        {\r\n");

         if(Model.ConnectableElements.Any()) 
         { 
this.Write("            switch(connectionId)\r\n            {\r\n");

             foreach (ConnectionIdElement element in Model.ConnectableElements)
             {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 FieldDefinition fieldInfo = element.FieldDefinition; 
                 string objectInitName; 
                 string objectName; 
                 if(fieldInfo == null) 
                 { 
                     objectInitName = element.Type.CSharpName() + " " + element.ElementCodeName; 
                     objectName = element.ElementCodeName; 
                 } 
                 else 
                 { 
                     objectInitName = "this." + fieldInfo.FieldName; 
                     objectName = "this." + fieldInfo.FieldName; 
                 } 
                 Output_PushDeprecated(element.Type.IsDeprecated()); 
this.Write("                {\r\n");

                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.TwoTabs); 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(objectInitName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(element.Type.ToString(), "target")));

this.Write(";\r\n");

                 foreach (EventAssignment ev in element.EventAssignments) 
                 { 
                     Output_ApiInformationCall_Push(ev.ApiInformation, Indent.TwoTabs); 
this.Write("                    ((");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")");

this.Write(this.ToStringHelper.ToStringWithCulture(objectName));

this.Write(").");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.EventName));

this.Write(" += this.");

this.Write(this.ToStringHelper.ToStringWithCulture(ev.HandlerName));

this.Write(";\r\n");

                     Output_ApiInformationCall_Pop(ev.ApiInformation, Indent.TwoTabs); 
                 }
                 Output_PopDeprecated(element.Type.IsDeprecated()); 
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.TwoTabs); 
this.Write("                }\r\n                break;\r\n");

             }
this.Write("            default:\r\n                break;\r\n            }\r\n");

         } 
this.Write("            this._contentLoaded = true;\r\n        }\r\n");

     }
     private void Output_UnloadObjectMethod()
     {
         if (Model.UnloadableFields.Count() > 0)
         {
this.Write("\r\n        /// <summary>\r\n        /// UnloadObject(DependencyObject)\r\n        /// " +
        "</summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        partial void UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DependencyObject)));

this.Write(" unloadableObject)\r\n        {\r\n            if (unloadableObject != null)\r\n       " +
        "     {\r\n");

             foreach (var element in Model.UnloadableFields) { 
this.Write("                // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

             Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("                if (unloadableObject == this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write(")\r\n                { \r\n                    this.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n                }\r\n");

             Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
             } 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlMarkupHelper)));

this.Write(".UnloadObject(unloadableObject);\r\n            }\r\n        }\r\n\r\n        /// <summar" +
        "y>\r\n        /// DisconnectUnloadedObject(int connectionId)\r\n        /// </summar" +
        "y>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        private void DisconnectUnloadedObject(int connectionId)\r\n        {\r\n   " +
        "         switch(connectionId)\r\n            {\r\n");

             foreach (var element in Model.DeferrableElements)
             {
this.Write("                case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n                {\r\n");

                 foreach (var childElem in element.Children) 
                 {
                     if (childElem.HasFieldDefinition) 
                     {
this.Write("                    this.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                     }
                     if (childElem.HasBindAssignments || element.HasRootNamedElementStep) 
                     {
this.Write("                    this.Bindings.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                     }
                 }
                 if (element.HasBindAssignments || element.HasRootNamedElementStep) 
                 {
this.Write("                    this.Bindings.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

                 }
                 FieldDefinition fieldInfo = element.FieldDefinition; 
                 if(fieldInfo != null) 
                 { 
                     Output_ApiInformationCall_Push(element.ApiInformation, Indent.TwoTabs); 
this.Write("                    this.");

this.Write(this.ToStringHelper.ToStringWithCulture(fieldInfo.FieldName));

this.Write(" = null;\r\n");

                     Output_ApiInformationCall_Pop(element.ApiInformation, Indent.TwoTabs); 
                 } 
this.Write("                    break;\r\n                }\r\n");

             }
this.Write("                default:\r\n                {\r\n                    throw new global" +
        "::System.ArgumentException(\"Invalid connectionId.\");\r\n                }\r\n       " +
        "     }\r\n        }\r\n");

         } 
     }
     private void Output_GetBindingConnectorCaseBindingPropertiesSet(ConnectionIdElement element, bool isPageRoot) 
     { 
         if (element.BindUniverse.NeededForOuterScopeElement) 
         { 
             if (isPageRoot) 
             { 
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("                    bindings.RootWeakReference = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ResourceDictionary)));

this.Write(">(this);\r\n");

                 }
                 else
                 {
this.Write("                    bindings.RootWeakReference = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(">(this);\r\n");

                 }
                 if (!element.BindUniverse.IsFileRoot) 
                 { 
this.Write("                    bindings.Parent = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("(this.Bindings);\r\n");

                 } 
             } 
             else 
             { 
this.Write("                    bindings.RootWeakReference = this.RootWeakReference;\r\n       " +
        "             bindings.Parent = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("(this);\r\n");

             } 
         } 
     } 
     private void Output_GetBindingConnectorCase(ConnectionIdElement element, bool isPageRoot)
     {
this.Write("            case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n                {                    \r\n");

                     Output_PushDeprecated(element.Type.IsDeprecated());
                     if (element.Type.IsDerivedFromControlTemplate())
                     {
this.Write("                    var ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(" = target as ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.TemplatedParentType));

this.Write(";\r\n                    if (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(" != null)\r\n                    {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write(" bindings = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("();\r\n                        returnValue = bindings;\r\n                        bin" +
        "dings.SetDataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(");\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlBindingHelper)));

this.Write(".SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementTemplatedParentCodeName));

this.Write(", bindings);\r\n");

                         PushIndent(Indent.OneTab); 
                         Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
                         PopIndent(); 
this.Write("                    }\r\n");

                     }
                     else
                     {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(" = (");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")target;\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write(" bindings = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.BindUniverse.BindingsClassName));

this.Write("();\r\n                    returnValue = bindings;\r\n                    bindings.Se" +
        "tDataRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.IsBindingFileRoot ? "this" : element.ElementCodeName + ".DataContext"));

this.Write(");\r\n");

                         if (element.BindUniverse.DistinctConvertersUsed.Count() > 0) 
                         {
                             if (isPageRoot) 
                             { 
this.Write("                    bindings.SetConverterLookupRoot(this);\r\n");

                             } 
                             else 
                             { 
                                 if (Model.CodeInfo.IsResourceDictionary)
                                 {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ResourceDictionary)));

this.Write(" rootReference;\r\n");

                                 }
                                 else
                                 {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(" rootReference;\r\n");

                                 }
this.Write("                    this.RootWeakReference.TryGetTarget(out rootReference);\r\n    " +
        "                bindings.SetConverterLookupRoot(rootReference);\r\n");

                             } 
                         }
                         if (element.IsBindingFileRoot)
                         { 
this.Write("                    this.Bindings = bindings;\r\n");

                             if (element.Type.IsDerivedFromWindow()) { 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(".Activated += bindings.Activated;\r\n");

                             } 
                             else { 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(".Loading += bindings.Loading;\r\n");

                             } 
                         }
                         else
                         {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(".DataContextChanged += bindings.DataContextChangedHandler;\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DataTemplate)));

this.Write(".SetExtensionInstance(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings);\r\n");

                         }
                         if (!element.Type.IsDerivedFromWindow() && (ProjectInfo.ShouldGenerateDisableXBind || !element.IsBindingFileRoot)) 
                         {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlBindingHelper)));

this.Write(".SetDataTemplateComponent(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementCodeName));

this.Write(", bindings);\r\n");

                         }
                         Output_GetBindingConnectorCaseBindingPropertiesSet(element, isPageRoot); 
                     }
                     Output_PopDeprecated(element.Type.IsDeprecated()); 
this.Write("                }\r\n                break;\r\n");

     }
     private void Output_GetBindingConnectorMethod()
     {
this.Write("        /// <summary>\r\n        /// GetBindingConnector(int connectionId, object t" +
        "arget)\r\n        /// </summary>\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" GetBindingConnector(int connectionId, object target)\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" returnValue = null;\r\n");

         if (Model.CodeInfo.BindStatus != BindStatus.None) 
         { 
this.Write("            switch(connectionId)\r\n            {\r\n");

             foreach (ConnectionIdElement element in Model.AllConnectionIdElements)
             {
                 if (element.IsBindingRoot)
                 {
                     Output_GetBindingConnectorCase(element, true); 
                 }
             }
this.Write("            }\r\n");

         } 
this.Write("            return returnValue;\r\n        }\r\n");

     }
 
     private void Output_PushDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#pragma warning disable 0618  //   Warning on Deprecated usage\r\n");

         } 
     }
     private void Output_PopDeprecated(bool isDeprecated)
     {
         if (isDeprecated) 
         { 
this.Write("#pragma warning restore 0618\r\n");

         } 
     }
     private void Output_BindingsClasses()
     {
         foreach (BindUniverse bindUniverse in Model.CodeInfo.BindUniverses)
         {
this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n        private class ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" :\r\n");

             if (bindUniverse.NeedsIDataTemplateExtension) 
             {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IDataTemplateExtension)));

this.Write(",\r\n");

             }
             if (bindUniverse.NeedsIDataTemplateComponent || ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IDataTemplateComponent)));

this.Write(",\r\n");

             }
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IXamlBindScopeDiagnostics)));

this.Write(",\r\n");

             }
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(",\r\n");

             if (bindUniverse.NeededForOuterScopeElement) { 
this.Write("            I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector,\r\n");

             }
this.Write("            I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_Bindings\r\n        {\r\n            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.DataRootType));

this.Write(" dataRoot;\r\n");

             if (bindUniverse.NeededForOuterScopeElement) 
             { 
this.Write("            #pragma warning disable 649\r\n");

                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ResourceDictionary)));

this.Write("> RootWeakReference { get; set; }\r\n");

                 }
                 else
                 {
this.Write("            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write("> RootWeakReference { get; set; }\r\n");

                 }
this.Write("            #pragma warning restore 649\r\n");

             } 
this.Write("            private bool initialized = false;\r\n            private const int NOT_" +
        "PHASED = (1 << 31);\r\n            private const int DATA_CHANGED = (1 << 30);\r\n");

             if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ResourceDictionary)));

this.Write(" localResources;\r\n");

                 if (!Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write("> converterLookupRoot;\r\n");

                 }
             }
             if (bindUniverse.NeedsIDataTemplateExtension) 
             { 
this.Write("            private bool removedDataContextHandler = false;\r\n");

             } 
this.Write("\r\n            // Fields for each control that has bindings.\r\n");

             foreach (ConnectionIdElement bindElement in bindUniverse.BoundElements)
             {
                 if (bindElement.IsWeakRef) 
                 {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(";\r\n");

                 }
                 else if (!bindElement.Type.IsDerivedFromControlTemplate()) 
                 {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.Type));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindElement.ObjectCodeName));

this.Write(";\r\n");

                 }
                 if (bindElement.CanBeInstantiatedLater)
                 {
                     foreach (var bindAssignment in bindElement.BindAssignments)
                     {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(";\r\n");

                     }
                 }
             }
         if (bindUniverse.ElementsWithConnectCase.Where(e => e.BoundEventAssignments.Count > 0).Count() > 0)
             {
this.Write("\r\n            // Fields for each event bindings event handler.\r\n");

             }
             foreach (var element in bindUniverse.ElementsWithConnectCase)
             {
                 foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                 {
this.Write("            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n");

                 }
             }
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("\r\n            // Static fields for each binding\'s enabled/disabled state\r\n");

                 foreach (ConnectionIdElement bindElement in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in bindElement.BindAssignments)
                     {
this.Write("            private static bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" = false;\r\n");

                     }
                 }
             }
             if (bindUniverse.UnloadableBindingSourceElements.Any()) { 
this.Write("            private global::System.Collections.Generic.Queue<global::System.Actio" +
        "n> UnloadableBindingSourcesToUpdate = new global::System.Collections.Generic.Que" +
        "ue<global::System.Action>();\r\n");

             } 
             if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) { 
this.Write("            private global::System.Collections.Generic.Queue<global::System.Int32" +
        "> UnloadedElementsToUpdate = new global::System.Collections.Generic.Queue<global" +
        "::System.Int32>();\r\n");

             } 
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\n            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking bindingsTracking;\r\n");

             }
this.Write("\r\n            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("()\r\n            {\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                this.bindingsTracking = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking(this);\r\n");

             }
this.Write("            }\r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("\r\n            public void Disable(int lineNumber, int columnNumber)\r\n            " +
        "{\r\n");

                 bool firstIfInDisable = true; 
                 foreach (var element in bindUniverse.ElementsWithConnectCaseInLocalScope)
                 {
                     foreach (BindAssignment ba in element.BindAssignments)
                     {
                         if (firstIfInDisable)
                         {
                         firstIfInDisable = false; 
this.Write("                if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(")\r\n");

                         } else {
this.Write("                else if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ColumnNumber));

this.Write(")\r\n");

                         }
this.Write("                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.DisableFlagName));

this.Write(" = true;\r\n                }\r\n");

                     }
                     foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                     {
                         if (firstIfInDisable)
                         {
                         firstIfInDisable = false; 
this.Write("                if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(")\r\n");

                         } else {
this.Write("                else if (lineNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.LineNumber));

this.Write(" && columnNumber == ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.ColumnNumber));

this.Write(")\r\n");

                         }
this.Write("                {\r\n");

                         if (element.IsWeakRef)
                         {
this.Write("                    if (this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".IsAlive)\r\n                    {\r\n                        ((");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(")this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".Target).");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n                    }\r\n");

                         } else {
this.Write("                    this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n");

                         }
this.Write("                }\r\n");

                     }
                 }
this.Write("            }\r\n");

             }
this.Write("\r\n            // IComponentConnector\r\n\r\n            public void Connect(int conne" +
        "ctionId, global::System.Object target)\r\n            {\r\n");

             if (!bindUniverse.ElementsWithConnectCase.Any()) 
             { 
this.Write("                return;\r\n");

             } 
             else 
             { 
this.Write("                switch(connectionId)\r\n                {\r\n");

             foreach (var element in bindUniverse.ElementsWithConnectCase)
             {
this.Write("                    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

                 if (bindUniverse.BoundElements.Contains(element)) { 
                 Output_ApiInformationCall_Push(element.ApiInformation, Indent.ThreeTabs); 
                 if (element.IsWeakRef)
                 {
this.Write("                        this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(element.Type.ToString(), "target")));

this.Write(");\r\n");

                 }
                 else if (element.Type.IsDerivedFromControlTemplate())
                 {
this.Write("                        this.Initialize(); // Template children have been connect" +
        "ed, initialize bindings\r\n");

                 }
                 else
                 {
this.Write("                        this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(element.Type.ToString(), "target")));

this.Write(";\r\n");

                 }
                 if (element.IsUsedByOtherScopes) 
                 { 
this.Write("                        elementWeakRefs[connectionId] = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("(target);\r\n                        NotifyDependentScopes(connectionId);\r\n");

                 } 
                 foreach (BoundEventAssignment evt in element.BoundEventAssignments)
                 {
                     Output_ApiInformationCall_Push(evt.ApiInformation, Indent.ThreeTabs); 
this.Write("                        this.");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(" = (");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.Declaration()));

this.Write(") =>\r\n                        {\r\n");

                     PushIndent();
                     if (!evt.PathStep.ValueType.IsDelegate())
                     {
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write(";\r\n");

                     }
                     else
                     {
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.PathStep.CodeGen().PathExpression));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.Parameters.ForCall()));

this.Write(");\r\n");

                     }
                     PopIndent();
this.Write("                        };\r\n                        (");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(element.Type.ToString(), "target")));

this.Write(").");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.MemberName));

this.Write(" += ");

this.Write(this.ToStringHelper.ToStringWithCulture(evt.EventHandlerCodeName));

this.Write(";\r\n");

                     Output_ApiInformationCall_Pop(evt.ApiInformation, Indent.ThreeTabs); 
                 }
                 if (element.CanBeInstantiatedLater && (element.HasBindAssignments || element.HasBoundEventAssignments))
                 {
                     // In Connect() we update non-load assignments first, 
                     foreach (var ba in element.BindAssignments.Where(ba => !(ba is BoundLoadAssignment))) 
                     { 
                         PushIndent(Indent.TwoTabs); 
                         Output_Binding_SetValue_Non_Function_Call(ba, "this." + ba.ObjectDeferredAssignmentCodeName.CSharpName(), false); 
                         PopIndent(); 
                     } 
                 }
                 if (element.TwoWayBindAssignments.Any()) { 
this.Write("                        this.bindingsTracking.RegisterTwoWayListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ReferenceExpression));

this.Write(");\r\n");

                 }
                 Output_ApiInformationCall_Pop(element.ApiInformation, Indent.ThreeTabs); 
                 } 
                 if (!element.IsBindingRoot) 
                 { 
                     // Queue load assignments to be updated later, because they're not available yet 
                     foreach (var childElem in element.Children.Intersect(bindUniverse.ElementsWithBoundLoadAssignments)) 
                     { 
this.Write("                        if (!this.UnloadedElementsToUpdate.Contains(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write("))\r\n                        {\r\n                            this.UnloadedElementsT" +
        "oUpdate.Enqueue(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n                        }\r\n");

                     } 
                 } 
                 if (element.CanBeInstantiatedLater && element.HasRootNamedElementStep) { 
this.Write("                        this.UnloadableBindingSourcesToUpdate.Enqueue(new global:" +
        ":System.Action(() =>\r\n                        {\r\n");

                     PushIndent(Indent.FourTabs); 
                     Output_Custom_Update_Call("this", element.RootNamedElementStep, element.RootNamedElementStep.CodeGen().PathExpression.CSharpName(), KnownStrings.NotPhased);
                     PopIndent(); 
this.Write("                        }));\r\n");

                 } 
                 if (element.TryGetValidationContextStep(out PropertyStep validationStep) && ProjectInfo.IsInputValidationEnabled && ProjectInfo.EnableDefaultValidationContextGeneration) 
                 { 
                     Output_ApiInformationCall_Push(validationStep.ApiInformation, Indent.ThreeTabs); 
this.Write("                        (");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(Globalize(KnownTypes.IInputValidationControl), "target")));

this.Write(").ValidationContext = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.InputValidationContext)));

this.Write("(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.PropertyName));

this.Write("\", ");

this.Write(this.ToStringHelper.ToStringWithCulture(validationStep.IsValueRequired));

this.Write(");\r\n");

                     Output_ApiInformationCall_Pop(validationStep.ApiInformation, Indent.ThreeTabs); 
                 }
this.Write("                        break;\r\n");

             }
this.Write("                    default:\r\n                        break;\r\n                }\r\n" +
        "");

             }
this.Write("            }\r\n");

         if (bindUniverse.NeededForOuterScopeElement) { 
this.Write("\r\n            // IComponentConnector\r\n\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" GetBindingConnector(int connectionId, object target)\r\n            {\r\n           " +
        "     ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" returnValue = null;\r\n");

             if (bindUniverse.Children.Any()) 
             { 
this.Write("                switch(connectionId)\r\n                {\r\n");

                 foreach (BindUniverse childUniverse in bindUniverse.Children)
                 {
                     ConnectionIdElement element = childUniverse.RootElement;
                     if (element.IsBindingRoot)
                     {
                         PushIndent(Indent.TwoTabs); 
                         Output_GetBindingConnectorCase(element, false); 
                         PopIndent(); 
                     }
                 }
this.Write("                }\r\n");

             } 
this.Write("                return returnValue;\r\n            }\r\n\r\n            private global:" +
        ":System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.L" +
        "ist<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(">> dependentBindings =\r\n                new global::System.Collections.Generic.Di" +
        "ctionary<int, global::System.Collections.Generic.List<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(">>();\r\n            private global::System.Collections.Generic.Dictionary<int, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("> elementWeakRefs =\r\n                new global::System.Collections.Generic.Dicti" +
        "onary<int, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(">();\r\n\r\n            // I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write("_BindingsScopeConnector\r\n\r\n            private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(" _parent;\r\n            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(@" Parent
            {
                get
                {
                    return _parent;
                }
                set
                {
                    if (_parent != value)
                    {
                        _parent = value;
                        RegisterDependenciesOnParents();
                    }
                }
            
            }
            public bool ContainsElement(int connectionId)
            {
                switch (connectionId)
                {
");

             foreach (var element in bindUniverse.ElementsWithConnectCaseInLocalScope)
             {
                 if (element.IsUsedByOtherScopes) 
                 {
this.Write("                    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(":\r\n                        return true;\r\n");

                 }
             }
this.Write("                    default:\r\n                        return false;\r\n            " +
        "    }\r\n            }\r\n\r\n            public void RegisterForElementConnection(int" +
        " connectionId, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" connector)\r\n            {\r\n                global::System.Collections.Generic.Li" +
        "st<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("> dependentsList;\r\n                if (!dependentBindings.TryGetValue(connectionI" +
        "d, out dependentsList))\r\n                {\r\n                    dependentsList =" +
        " new global::System.Collections.Generic.List<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(">();\r\n                    dependentBindings.Add(connectionId, dependentsList);\r\n " +
        "               }\r\n\r\n                dependentsList.Add(new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(@"(connector));

                NotifyDependentScope(connectionId, connector);
            }

            private void NotifyDependentScopes(int connectionId)
            {
                if (dependentBindings.ContainsKey(connectionId))
                {
                    var dependentsList = dependentBindings[connectionId];
                    foreach (");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(" dependent in dependentsList)\r\n                    {\r\n                        if " +
        "(dependent.IsAlive)\r\n                        {\r\n                            Noti" +
        "fyDependentScope(connectionId, (");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(")dependent.Target);\r\n                        }\r\n                    }\r\n          " +
        "      }\r\n            }\r\n\r\n            private void NotifyDependentScope(int conn" +
        "ectionId, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(@" connector)
            {
                if (elementWeakRefs.ContainsKey(connectionId) && elementWeakRefs[connectionId].IsAlive)
                {
                    connector.Connect(connectionId, elementWeakRefs[connectionId].Target);
                }
            }

            private void RegisterDependenciesOnParents()
            {
                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write(" currentParent = _parent;\r\n                global::System.Collections.Generic.Lis" +
        "t<int> unresolvedDependencies = new global::System.Collections.Generic.List<int>" +
        "();\r\n");

                 foreach (var element in bindUniverse.OuterScopeBoundElements)
                 {
this.Write("                unresolvedDependencies.Add(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

                 }
this.Write("\r\n                while (unresolvedDependencies.Count > 0 && currentParent != nul" +
        "l && currentParent.IsAlive)\r\n                {\r\n                    var parentBi" +
        "ndings = (I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(@"_BindingsScopeConnector)(currentParent.Target);
                    for (int i = unresolvedDependencies.Count - 1; i >= 0; i--)
                    {
                        int unresolvedDependency = unresolvedDependencies[i];
                        if (parentBindings.ContainsElement(unresolvedDependency))
                        {
                            parentBindings.RegisterForElementConnection(unresolvedDependency, this);
                            unresolvedDependencies.RemoveAt(i);
                        }
                    }

                    currentParent = parentBindings.Parent;
                }
            }
");

         } else { // if (bindUniverse.NeededForOuterScopeElement) 
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n                        public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IComponentConnector)));

this.Write(" GetBindingConnector(int connectionId, object target) \r\n                        {" +
        "\r\n                            return null;\r\n                        }\r\n");

                }
             if (bindUniverse.NeedsIDataTemplateExtension) 
             {
this.Write("\r\n            public void DataContextChangedHandler(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(" sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DataContextChangedEventArgs)));

this.Write(@" args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ContainerContentChangingEventArgs)));

this.Write(@" args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(0)));

this.Write(";\r\n                        this.SetDataRoot(item);\r\n                        if (!" +
        "removedDataContextHandler)\r\n                        {\r\n                         " +
        "   removedDataContextHandler = true;\r\n                            var rootElemen" +
        "t = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootElement.ReferenceExpression));

this.Write(@";
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
");

                     foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
                     { 
this.Write("                    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));

this.Write(":\r\n");

                         foreach(PhaseAssignment phase in kvp.Value) 
                         { 
                             if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                             {
this.Write("                        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" != null)\r\n                        {\r\n");

                             }
this.Write("                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlBindingHelper)));

this.Write(".ResumeRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(");\r\n");

                             if (phase.ConnectionIdElement.CanBeInstantiatedLater)
                             {
this.Write("                        }\r\n");

                             }
                         } 
this.Write("                        nextPhase = ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.GetNextPhase(kvp.Key)));

this.Write(";\r\n                        break;\r\n");

                     } 
this.Write("                }\r\n                this.Update_(");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(bindUniverse.RootStep.ValueType.ToString(), "item")));

this.Write(", 1 << phase);\r\n            }\r\n\r\n            public void Recycle()\r\n            {" +
        "\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                this.bindingsTracking.ReleaseAllListeners();\r\n");

             }
 foreach(KeyValuePair<int, List<PhaseAssignment>> kvp in bindUniverse.PhaseAssignments.Where(kvp => kvp.Key != 0).OrderBy(kvp => kvp.Key)) 
 { 
     foreach(PhaseAssignment phase in kvp.Value) 
     { 
         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(" !=null)\r\n                {\r\n");

                 PushIndent();
         }
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlBindingHelper)));

this.Write(".SuspendRendering(");

this.Write(this.ToStringHelper.ToStringWithCulture(phase.ConnectionIdElement.ReferenceExpression));

this.Write(");\r\n");

         if (phase.ConnectionIdElement.CanBeInstantiatedLater)
         {
             PopIndent();
this.Write("                }\r\n");

         }
     } 
 } 
this.Write("            }\r\n");

             } else if (bindUniverse.NeedsIDataTemplateComponent || ProjectInfo.ShouldGenerateDisableXBind){ //if (bindUniverse.NeedsIDataTemplateExtension)
this.Write(@"
            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }
");

             }
this.Write("\r\n            // I");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(@"_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
");

             if (bindUniverse.HasBindings)
             {
this.Write("                this.Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.RootStep.CodeName));

this.Write("(this.dataRoot, NOT_PHASED);\r\n");

             }
this.Write("                this.initialized = true;\r\n            }\r\n\r\n            public voi" +
        "d StopTracking()\r\n            {\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                this.bindingsTracking.ReleaseAllListeners();\r\n                thi" +
        "s.initialized = false;\r\n");

             }
this.Write("            }\r\n\r\n            public void DisconnectUnloadedObject(int connectionI" +
        "d)\r\n            {\r\n");

                 if(bindUniverse.ElementsWithDisconnectCase.Count() == 0) { 
this.Write("                throw new global::System.ArgumentException(\"No unloadable element" +
        "s to disconnect.\");\r\n");

                 } else { 
this.Write("                switch (connectionId)\r\n                {\r\n");

                     foreach (var element in bindUniverse.ElementsWithDisconnectCase)
                     {
this.Write("                    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n                    {\r\n");

                         if (bindUniverse.BoundElements.Contains(element)) { 
                         Output_ApiInformationCall_Push(element.ApiInformation, Indent.OneTab); 
this.Write("                        if (this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" != null)\r\n                        {\r\n");

                         foreach (BindAssignment bindAssignment in element.BindAssignments.Where(ba => ba.HasDeferredValueProxy))
                         {
this.Write("                            this.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.GetMemberGetExpression(bindAssignment)));

this.Write(";\r\n");

                         }
this.Write("                            this.");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ObjectCodeName));

this.Write(" = null;\r\n                        }\r\n");

                         foreach (var childElem in element.Children.Where(c => bindUniverse.ElementsWithDisconnectCase.Contains(c))) 
                         {
this.Write("                        this.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(childElem.ConnectionId));

this.Write(");\r\n");

                         }
                         Output_ApiInformationCall_Pop(element.ApiInformation, Indent.OneTab); 
                         } 
                         if (element.HasRootNamedElementStep) { 
this.Write("                        this.UnloadableBindingSourcesToUpdate.Enqueue(new global:" +
        ":System.Action(() =>\r\n                        {\r\n");

                             PushIndent(Indent.FourTabs); 
                             Output_Custom_Update_Call("this", element.RootNamedElementStep, "null", KnownStrings.NotPhased);
                             PopIndent(); 
this.Write("                        }));\r\n");

                         } 
this.Write("                        break;\r\n                    }\r\n");

                     }
this.Write("                    default:\r\n                    {\r\n                        thro" +
        "w new global::System.ArgumentException(\"Invalid connectionId.\");\r\n              " +
        "      }\r\n                }\r\n");

                 }
this.Write("            }\r\n");

         if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) 
         { 
this.Write("\r\n            private void UpdateUnloadedElement(int connectionId)\r\n            {" +
        "\r\n                switch (connectionId)\r\n                {\r\n");

             foreach (var element in bindUniverse.ElementsWithBoundLoadAssignments)
             {
this.Write("                    case ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(": // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n                    {\r\n");

                 foreach (var ba in element.BindAssignments.OfType<BoundLoadAssignment>()) 
                 { 
                     PushIndent(Indent.TwoTabs); 
                     Output_Binding_SetValue_Non_Function_Call(ba, "this." + ba.ObjectDeferredAssignmentCodeName.CSharpName(), false); 
                     PopIndent(); 
                 } 
this.Write("                        break;\r\n                    }\r\n");

             }
this.Write("                    default:\r\n                    {\r\n                        thro" +
        "w new global::System.ArgumentException(\"Invalid connectionId.\");\r\n              " +
        "      }\r\n                }\r\n            }\r\n");

         }
this.Write("\r\n            public bool SetDataRoot(global::System.Object newDataRoot)\r\n       " +
        "     {\r\n");

             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("                this.bindingsTracking.ReleaseAllListeners();\r\n");

             }
this.Write("                if (newDataRoot != null)\r\n                {\r\n                    " +
        "this.dataRoot = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ObjectCast(bindUniverse.DataRootType.ToString(), "newDataRoot")));

this.Write(";\r\n                    return true;\r\n                }\r\n                return fa" +
        "lse;\r\n            }\r\n");

             if (bindUniverse.RootElement.IsBindingFileRoot)
             {
this.Write("\r\n            public void Activated(object obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));

this.Write(".WindowActivatedEventArgs data)\r\n            {\r\n                this.Initialize()" +
        ";\r\n            }\r\n\r\n            public void Loading(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(" src, object data)\r\n            {\r\n                this.Initialize();\r\n          " +
        "  }\r\n");

             }
             if (bindUniverse.DistinctConvertersUsed.Count() > 0) 
             {
                 if (Model.CodeInfo.IsResourceDictionary)
                 {
this.Write("            public void SetConverterLookupRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.ResourceDictionary)));

this.Write(" resources)\r\n            {\r\n                this.localResources = resources;\r\n   " +
        "         }\r\n");

                 }
                 else
                 {
this.Write("            public void SetConverterLookupRoot(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(" rootElement)\r\n            {\r\n                this.converterLookupRoot = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(">(rootElement);\r\n            }\r\n");

                 }
this.Write("\r\n            public ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IValueConverter)));

this.Write(" LookupConverter(string key)\r\n            {\r\n");

             if (!Model.CodeInfo.IsResourceDictionary)
             {
this.Write("                if (this.localResources == null)\r\n                {\r\n            " +
        "        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.FrameworkElement)));

this.Write(" rootElement;\r\n                    this.converterLookupRoot.TryGetTarget(out root" +
        "Element);\r\n                    this.localResources = rootElement.Resources;\r\n   " +
        "                 this.converterLookupRoot = null;\r\n                }\r\n");

             }
this.Write("                return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IValueConverter)));

this.Write(") (this.localResources.ContainsKey(key) ? this.localResources[key] : ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Application)));

this.Write(".Current.Resources[key]);\r\n            }\r\n");

             }
             if (bindUniverse.HasBindings)
             {
                 if (bindUniverse.HasFunctionBindings)
                 {
                     Output_TryGetValueFunctions(bindUniverse);
                     Output_FunctionBindings(bindUniverse);
                 }
                 if (bindUniverse.NeedsCompleteUpdate)
                 {
                     Output_CompleteUpdate(bindUniverse);
                 }
this.Write("\r\n            // Update methods for each path node used in binding steps.\r\n");

             }
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
this.Write("            private void Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(GetUpdateParams(bindStep)));

this.Write(")\r\n            {\r\n");

                 if (bindStep.UpdateNeedsBindingsVariable || (bindStep is RootStep && bindUniverse.ElementRootStep != null)) { 
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = this;\r\n");

                 }
                 if (bindStep.RequiresChildNotification && (bindStep is PropertyStep || bindStep is CastStep || bindStep is RootStep || bindStep is RootNamedElementStep || bindStep is ArrayIndexStep || bindStep is MapIndexStep))
                 {
this.Write("                this.bindingsTracking.UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(obj);\r\n");

                 }
                 Output_Update_Steps(bindStep.ValueType.IsNullable, "this", bindStep.Children, true, "phase");
                 Output_Update_Steps(bindStep.ValueType.IsNullable, "this", bindStep.Dependents, false, "phase");
                 foreach (int distinctPhase in bindStep.DistinctPhases)
                 {
                     Output_Binding_Phased_SetValue(distinctPhase, true, bindStep, false);
                     Output_Binding_Phased_SetValue(distinctPhase, false, bindStep, false);
                 }
                 if (bindStep is RootStep) { 
                     Output_Update_Steps(false, "this", bindUniverse.BindPathSteps.Values.Where(s => s.Parent is StaticRootStep), false, "phase");
                     if (bindUniverse.ElementRootStep != null) 
                     { 
                         Output_Update_Steps(false, "this", bindUniverse.BindPathSteps.Values.Where(s => s.Parent == bindUniverse.ElementRootStep), false, "phase");
                     } 
                     if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                this.CompleteUpdate(phase);\r\n");

                     }
                 }
this.Write("            }\r\n");

             }
             // UpdateFallback generators 
             foreach (BindPathStep bindStep in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
             {
                 if (bindStep.Parent != null && bindStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                 {
this.Write("\r\n            private void UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindStep.CodeName));

this.Write("(int phase)\r\n            {\r\n");

                     foreach (BindPathStep childStep in bindStep.Children.Concat(bindStep.Dependents))
                     {
                         if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
                         {
this.Write("                this.UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(phase);\r\n");

                         }
                     }
                     foreach (int distinctPhase in bindStep.DistinctPhases) 
                     {
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, true, bindStep);
                         Output_Binding_Phased_Fallback_SetValue(distinctPhase, false, bindStep);
                     }
this.Write("            }\r\n");

                 }
             }
             // UpdateTwoWay generators 
             foreach (var ba in bindUniverse.BindAssignments.Where(ba => ba.IsTrackingTarget)) { 
                 Output_UpdateTwoWay(ba); 
             } 
         if (ProjectInfo.IsInputValidationEnabled) {
              Output_UpdateErrors(bindUniverse); 
         }
             if (bindUniverse.NeedsBindingsTracking)
             {
this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));

this.Write("\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));

this.Write("\r\n            private class ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking\r\n            {\r\n                private ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("> weakRefToBindingObj; \r\n\r\n                public ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write("Tracking(");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" obj)\r\n                {\r\n                    weakRefToBindingObj = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(WeakReferenceTypeName)));

this.Write("<");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(">(obj);\r\n                }\r\n\r\n                public ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" TryGetBindingObject()\r\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(@" bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
");

                 foreach (var step in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.NeedsUpdateChildListeners))
                 {
                     Output_ApiInformationCall_Push(step.ApiInformation, Indent.TwoTabs); 
this.Write("                    UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(null);\r\n");

                     Output_ApiInformationCall_Pop(step.ApiInformation, Indent.TwoTabs); 
                 }
this.Write("                }\r\n\r\n");

                 foreach (BindPathStep step in bindUniverse.BindPathSteps.Values.Where(bindStep => bindStep.IsIncludedInUpdate == true))
                 {
                     if (step.IsTrackingSource && step.ImplementsINPC && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep || step is ArrayIndexStep || step is MapIndexStep))
                     {
this.Write("                public void PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(object sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(PropertyChangedEventArgName(step)));

this.Write(" e)\r\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        string propName = e.PropertyName;\r\n" +
        "                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = sender as ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(";\r\n                        if (global::System.String.IsNullOrEmpty(propName))\r\n  " +
        "                      {\r\n");

                         PushIndent(Indent.ThreeTabs);
                         Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                         PopIndent();
this.Write("                        }\r\n                        else\r\n                        " +
        "{\r\n                            switch (propName)\r\n                            {\r" +
        "\n");

                         foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
                         {
this.Write("                                case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\":\r\n                                {\r\n");

                                 PushIndent(Indent.SevenTabs);
                                 foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                                     Output_Update_DataChanged_Step("bindings", child);
                                 } 
                                 PopIndent();
this.Write("                                    break;\r\n                                }\r\n");

                         }
                         foreach (string functionName in step.TrackingSteps.OfType<FunctionStep>().Select(p => p.Method.MethodName).Distinct())
                         {
this.Write("                                case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(functionName));

this.Write("\":\r\n                                {\r\n");

                                 PushIndent(Indent.FiveTabs);
                                 Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps.OfType<FunctionStep>().Where(p => p.Method.MethodName == functionName), false, "DATA_CHANGED");
                                 PopIndent();
this.Write("                                    break;\r\n                                }\r\n");

                         }
this.Write("                                default:\r\n                                    bre" +
        "ak;\r\n                            }\r\n                        }\r\n");

                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED);\r\n");

                         }
this.Write("                    }\r\n                }\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep || step is RootNamedElementStep) && step.ImplementsINCC && !step.ImplementsIObservableVector && !step.ImplementsIObservableMap)
                     {
this.Write("                public void CollectionChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(object sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(NotifyCollectionChangedEventArgName(step)));

this.Write(" e)\r\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = sender as ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(";\r\n");

                     Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                     if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED);\r\n");

                     }
this.Write("                    }\r\n                }\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableVector)
                     {
this.Write("                public void VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(global::Windows.Foundation.Collections.IObservableVector<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write("> sender, global::Windows.Foundation.Collections.IVectorChangedEventArgs e)\r\n    " +
        "            {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = sender as ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(";\r\n");

                         Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED);\r\n");

                         }
this.Write("                    }\r\n                }\r\n");

                     }
                     if (step.IsTrackingSource && (step is PropertyStep || step is CastStep || step is RootStep) && step.ImplementsIObservableMap)
                     {
this.Write("                public void MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(global::Windows.Foundation.Collections.IObservableMap<string, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write("> sender, global::Windows.Foundation.Collections.IMapChangedEventArgs<string> e)\r" +
        "\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = sender as ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(";\r\n");

                         Output_Update_Steps(step.ValueType.IsNullable, "bindings", step.TrackingSteps, false, "DATA_CHANGED");
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED);\r\n");

                         }
this.Write("                    }\r\n                }\r\n");

                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                public void DependencyPropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DependencyObject)));

this.Write(" sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.DependencyProperty)));

this.Write(" prop)\r\n                {\r\n                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj = sender as ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(";\r\n");

                         PushIndent(Indent.FourTabs);
                         Output_Update_DataChanged_Step("bindings", child);
                         PopIndent();
                         if (bindUniverse.NeedsCompleteUpdate) { 
this.Write("                        bindings.CompleteUpdate(DATA_CHANGED);\r\n");

                         }
this.Write("                    }\r\n                }\r\n");

                     }
                     if (step.IsTrackingSource && step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                     {
this.Write("\r\n                public void ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(object sender, ");

this.Write(this.ToStringHelper.ToStringWithCulture(DataErrorsEventArgName(step)));

this.Write(" e) \r\n                {\r\n                   ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(@" bindings = TryGetBindingObject();
                   if (bindings != null)
                   {
                        string propName = e.PropertyName;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
");

                 foreach (var propertyStep in step.TrackingSteps.OfType<PropertyStep>())
                 {
                         Output_ApiInformationCall_Push(propertyStep.ApiInformation, Indent.FourTabs);
this.Write("                            bindings.UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(")sender, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyStep.PropertyName));

this.Write("\");\r\n");

                         Output_ApiInformationCall_Pop(propertyStep.ApiInformation, Indent.FourTabs);
                 }
this.Write("                        }\r\n                        else\r\n                        " +
        "{\r\n");

                         Output_ApiInformationCall_Push(step.ApiInformation, Indent.FourTabs);
this.Write("                            bindings.UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(")sender, propName);\r\n");

                         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.FourTabs);
this.Write("                        }\r\n                    }\r\n                }\r\n");

                      }
                     // Register & unregister change notification generators 
                     Output_UpdateChildListeners(step, bindUniverse);
                 }
                 foreach (var e in bindUniverse.BoundElements.Where(e => e.TwoWayBindAssignments.Any())) { 
                     PushIndent(Indent.TwoTabs); 
                     Output_RegisterTwoWayListeners(e); 
                     PopIndent(); 
                 } 
 //End of _BindingsTracking class 
this.Write("            }\r\n");

             }
 //End of bindings class 
this.Write("        }\r\n");

         }
     }
 
     private void Output_UpdateChildListeners(BindPathStep step, BindUniverse bindUniverse)
     {
         if (step.NeedsUpdateChildListeners)
         {
             string cacheName = "bindings.dataRoot"; 
                     if (!(step is RootStep))
                     {
this.Write("                private ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" cache_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(" = null;\r\n");

                 cacheName="cache_" +step.CodeName;
                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                private long tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(" = 0;\r\n");

                     }
                     if (step.RequiresChildNotification)
                     {
this.Write("                public void UpdateChildListeners_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" obj)\r\n                {\r\n");

                 if (!(step is RootStep))
                 {
this.Write("                    if (obj != ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(")\r\n                    {\r\n                        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != null)\r\n");

                 }
                 else
                 {
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindUniverse.BindingsClassName));

this.Write(" bindings = TryGetBindingObject();\r\n                    if (bindings != null)\r\n  " +
        "                  {\r\n                        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" != null)\r\n");

                 }
this.Write("                        {\r\n");

                         if (step.ImplementsINPC)
                         {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INPCInterfaceName(step)));

this.Write(")");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").PropertyChanged -= PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                         }
                         if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                         {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(")");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").ErrorsChanged -= ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                         }
                         if (step.ImplementsIObservableVector)
                         {
this.Write("                            ((global::Windows.Foundation.Collections.IObservableV" +
        "ector<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(">)");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").VectorChanged -= VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                         }
                         if (step.ImplementsIObservableMap)
                         {
this.Write("                            ((global::Windows.Foundation.Collections.IObservableM" +
        "ap<string, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(">)");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").MapChanged -= MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                         }
                         else if (step.ImplementsINCC)
                         {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INCCInterfaceName(step)));

this.Write(")");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").CollectionChanged -= CollectionChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                         }
                         foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                         {
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(".UnregisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property, tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(");\r\n");

                         }
                     if (!(step is RootStep))
                     {
this.Write("                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" = null;\r\n");

                     }
this.Write("                        }\r\n                        if (obj != null)\r\n            " +
        "            {\r\n                            ");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(" = obj;\r\n");

                     if (step.ImplementsINPC)
                     {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INPCInterfaceName(step)));

this.Write(")obj).PropertyChanged += PropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                     }
                     if (step.ImplementsINDEI && ProjectInfo.IsInputValidationEnabled)
                     {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(")");

this.Write(this.ToStringHelper.ToStringWithCulture(cacheName));

this.Write(").ErrorsChanged += ErrorsChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                     }
                     if (step.ImplementsIObservableVector)
                     {
this.Write("                            ((global::Windows.Foundation.Collections.IObservableV" +
        "ector<");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(">)obj).VectorChanged += VectorChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                     }
                     if (step.ImplementsIObservableMap)
                     {
this.Write("                            ((global::Windows.Foundation.Collections.IObservableM" +
        "ap<string, ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType.ItemType));

this.Write(">)obj).MapChanged += MapChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                     }
                     else if (step.ImplementsINCC)
                     {
this.Write("                            ((");

this.Write(this.ToStringHelper.ToStringWithCulture(INCCInterfaceName(step)));

this.Write(")obj).CollectionChanged += CollectionChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write(";\r\n");

                     }
                     foreach (DependencyPropertyStep child in step.TrackingSteps.OfType<DependencyPropertyStep>())
                     {
this.Write("                            tokenDPC_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(" = obj.RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(child.OwnerType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(child.PropertyName));

this.Write("Property, DependencyPropertyChanged_");

this.Write(this.ToStringHelper.ToStringWithCulture(child.CodeName));

this.Write(");\r\n");

                     }
this.Write("                        }\r\n                    }\r\n                }\r\n");

                     }
         }
     }
 private void Output_RegisterTwoWayListeners(ConnectionIdElement element)
 {
this.Write("        public void RegisterTwoWayListener_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.Type));

this.Write(" sourceObject)\r\n        {\r\n");

     foreach (var ba in element.TwoWayBindAssignments) { 
         Output_ApiInformationCall_Push(ba.ApiInformation, Indent.None); 
         if (ba.NeedsLostFocusForTwoWay) { 
this.Write("            sourceObject.LostFocus += (sender, e) =>\r\n            {\r\n");

         } else { 
this.Write("            sourceObject.RegisterPropertyChangedCallback(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("Property, (sender, prop) =>\r\n            {\r\n");

         }
this.Write("                var bindingObj = this.TryGetBindingObject();\r\n                if " +
        "(bindingObj != null)\r\n                {\r\n                    bindingObj.UpdateTw" +
        "oWay_");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("();\r\n                }\r\n            }");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.NeedsLostFocusForTwoWay ? ";" : ");"));

this.Write("\r\n");

         Output_ApiInformationCall_Pop(ba.ApiInformation, Indent.None); 
     } 
this.Write("        }\r\n");

 } 
 private void Output_UpdateTwoWay(BindAssignment ba)
 {
this.Write("            private void UpdateTwoWay_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ConnectionIdElement.ConnectionId));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("()\r\n            {\r\n                if (this.initialized)\r\n                {\r\n");

             MethodStep bindBackStep = ba.BindBackStep as MethodStep; 
             if (bindBackStep != null)
             {
                 var param = bindBackStep.Parameters[0]; 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.ReverseAssignmentExpression));

this.Write(";\r\n");

                 Output_NullCheckedAssignment(bindBackStep, null);
             }
             else
             {
                 Output_NullCheckedAssignment(ba.PathStep, ba.ReverseAssignmentExpression);
             }
this.Write("                }\r\n            }\r\n");

 } 
 void  Output_NullCheckedAssignment(BindPathStep step, LanguageSpecificString value) 
 { 
     PushIndent(Indent.TwoTabs);
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(parent.CodeGen().PathExpression));

this.Write(" != null)\r\n            {\r\n");

         PushIndent(); 
     } 
     if (value != null) { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathSetExpression(value)));

this.Write(";\r\n");

     } else { 
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n");

     } 
     foreach (var parent in step.Parents.Where(parent => parent.NeedsCheckForNull)) { 
         PopIndent(); 
this.Write("            }\r\n");

     } 
     PopIndent();
 } 
 void Output_UpdateErrors(BindUniverse bindUniverse) 
 { 
     var twoWayWithIndeiSteps =  bindUniverse.INDEIPathSteps; 
     if (twoWayWithIndeiSteps.Any(step => step.ValueType.ImplementsXamlINotifyDataErrorInfo())) { 
     PushIndent(Indent.TwoTabs);
this.Write("    private void UpdateErrors_(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Control)));

this.Write(" control, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlINotifyDataErrorInfo)));

this.Write(" sender, string propertyName)\r\n    {\r\n        UpdateInputValidationErrors(control" +
        ", sender.GetErrors(propertyName));\r\n    }\r\n");

     PopIndent();
     }
this.Write(" \r\n");

     if (twoWayWithIndeiSteps.Any(step => step.ImplementsINDEI && !step.ValueType.ImplementsXamlINotifyDataErrorInfo())) { 
     PushIndent(Indent.TwoTabs);
this.Write("    private void UpdateErrors_(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Control)));

this.Write(" control, global::System.ComponentModel.INotifyDataErrorInfo sender, string prope" +
        "rtyName)\r\n    {\r\n        UpdateInputValidationErrors(control, sender.GetErrors(p" +
        "ropertyName));\r\n    }\r\n");

     PopIndent();
     }
     if (twoWayWithIndeiSteps.Any()) { 
     PushIndent(Indent.TwoTabs);
this.Write("    private void UpdateInputValidationErrors(");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.Control)));

this.Write(" control, global::System.Collections.IEnumerable modelErrors)\r\n    {\r\n        var" +
        " validationControl = control as ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.IInputValidationControl)));

this.Write(@";
        if (validationControl != null)
        {
            var inputValidationErrors = validationControl.ValidationErrors;
			inputValidationErrors.Clear();

            foreach (var error in modelErrors)
            {
                var validationError = error as ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.InputValidationError)));

this.Write(";\r\n                if (validationError == null)\r\n                {\r\n             " +
        "       validationError = new ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.InputValidationError)));

this.Write("(error.ToString());\r\n                }\r\n                inputValidationErrors.Add" +
        "(validationError);\r\n            }\r\n        }\r\n\r\n    }\r\n");

     PopIndent();
     PushIndent(Indent.TwoTabs);
     foreach (BindPathStep step in twoWayWithIndeiSteps)
     {
this.Write("    private void UpdateErrors_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(INDEIInterfaceName(step)));

this.Write(" sender, string propertyName)\r\n    {\r\n        if (this.initialized)\r\n        {\r\n " +
        "           switch (propertyName)\r\n            {\r\n");

         foreach (string propertyName in step.TrackingSteps.OfType<PropertyStep>().Select(p => p.PropertyName).Distinct())
         {
this.Write("                case \"");

this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

this.Write("\":\r\n                {\r\n");

                 PushIndent(Indent.ThreeTabs);
                 foreach (var child in step.TrackingSteps.OfType<PropertyStep>().Where(p => p.PropertyName == propertyName)) { 
                     Output_UpdateErrorsCall(child);
                 } 
                 PopIndent();
this.Write("                    break;\r\n                }\r\n");

         }
this.Write("                default:\r\n                    break;\r\n            }\r\n        }\r\n " +
        "   }\r\n");

     }
     PopIndent();
     } 
 } 
 void Output_UpdateErrorsCall(PropertyStep step) 
 { 
  foreach (var ba in step.AssociatedBindAssignments.Where(ba => ba.IsTrackingTarget)){
this.Write("        UpdateErrors_(");

this.Write(this.ToStringHelper.ToStringWithCulture((ba as BindAssignmentBase).ConnectionIdElement.ObjectCodeName));

this.Write(", sender, \"");

this.Write(this.ToStringHelper.ToStringWithCulture(step.PropertyName));

this.Write("\");\r\n");

  }
 }
     private void Output_Binding_SetValue_Function(BindAssignment ba)
     {
         if (ba.MemberType.IsNullable)
         {
this.Write("            public static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" value, string targetNullValue)\r\n            {\r\n                if (value == null" +
        " && targetNullValue != null)\r\n                {\r\n");

             if (ba.MemberType.IsString())
             {
this.Write("                    value = targetNullValue;\r\n");

             }
             else
             {
this.Write("                    value = ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType.GetStringToThing("targetNullValue")));

this.Write(";\r\n");

             }
this.Write("                }\r\n");

         }
         else
         {
this.Write("            public static void Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberTargetType));

this.Write(" obj, ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberType));

this.Write(" value)\r\n            {\r\n");

         }
         if (ba.IsAttachable)
         {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberDeclaringType));

this.Write(".Set");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write("(obj, value);\r\n");

         }
         else if (ba.MemberType.IsString())
         {
             // We cannot pass null .Net types to WinRT, so we decided to "fix" them to match what CX does. 
this.Write("                obj.");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write(" = value ?? global::System.String.Empty;\r\n");

         }
         else
         {
this.Write("                obj.");

this.Write(this.ToStringHelper.ToStringWithCulture(ba.MemberName));

this.Write(" = value;\r\n");

         }
this.Write("            }\r\n");

     }
 private void Output_Binding_Phased_SetValue(int phase, bool isTracking, BindPathStep bindStep, bool isFunctionResult)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n                {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue(bindAssignment, isFunctionResult);
         }
         PopIndent();
this.Write("                }\r\n");

     }
 }
 private void Output_Binding_Phased_Fallback_SetValue(int phase, bool isTracking, BindPathStep bindStep)
 {
     var matchingBindAssignments = from ba in bindStep.BindAssignments where ba.ComputedPhase == phase && ba.IsTrackingSource == isTracking && ba.BindStatus.HasFlag(BindStatus.HasFallbackValue) select ba;
     if (matchingBindAssignments.Count() > 0)
     {
         string condition =  GetDirectPhaseCondition(phase, isTracking); 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(condition));

this.Write(")\r\n                {\r\n");

         PushIndent();
         foreach (BindAssignment bindAssignment in matchingBindAssignments)
         {
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, bindAssignment.FallbackValueExpression.CSharpName(), true);
         }
         PopIndent();
this.Write("                }\r\n");

     }
 }
     private void Output_Binding_SetValue(BindAssignment bindAssignment, bool isFunctionResult)
     {
         if (bindAssignment.PathStep is FunctionStep && !isFunctionResult)
         {
             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
this.Write("                if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(")\r\n                {\r\n");

                 PushIndent();
             }
this.Write("                this.PendingFunctionBindings[\"");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write("\"] = new InvokeFunctionDelegate(this.Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.PathStep.CodeName));

this.Write("); \r\n");

             if (ProjectInfo.ShouldGenerateDisableXBind) 
             {
                 PopIndent();
this.Write("                }\r\n");

             }
         }
         else
         {
             string value = bindAssignment.DirectAssignmentExpression(isFunctionResult ? "result" : "obj").CSharpName();
             Output_Binding_SetValue_Non_Function_Call(bindAssignment, value, true);
         }
     }
     private void Output_Binding_SetValue_Non_Function_Call(BindAssignment bindAssignment, string value, bool includeDeferredSet)
     {
         ConnectionIdElement element = bindAssignment.ConnectionIdElement;
         string objRef = element.ReferenceExpression.CSharpName();
this.Write("                // ");

this.Write(this.ToStringHelper.ToStringWithCulture(element.LineNumberAndXamlFile));

this.Write("\r\n");

         if (ProjectInfo.ShouldGenerateDisableXBind) 
         {
this.Write("                if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.DisableFlagName));

this.Write(")\r\n                {\r\n");

             PushIndent();
         }
         Output_ApiInformationCall_Push(bindAssignment.ApiInformation, Indent.OneTab); 
         if (bindAssignment is BoundLoadAssignment) { 
             if (includeDeferredSet) { 
this.Write("                this.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n\r\n");

             }
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(")\r\n                {\r\n");

             if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("                    dataRoot.FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

             } else { 
this.Write("                    ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.BindUniverse.RootElement.ReferenceExpression));

this.Write(".FindName(\"");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ElementName));

this.Write("\");\r\n");

             }
this.Write("                }\r\n                else\r\n                {\r\n");

             if (bindAssignment.BindUniverse.IsFileRoot) { 
this.Write("                    dataRoot.UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(");\r\n");

             } else { 
this.Write("                    if (");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(" != null) \r\n                    {\r\n                        ");

this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownTypes.XamlMarkupHelper)));

this.Write(".UnloadObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(");\r\n                    }\r\n                    this.DisconnectUnloadedObject(");

this.Write(this.ToStringHelper.ToStringWithCulture(element.ConnectionId));

this.Write(");\r\n");

             }
this.Write("                }\r\n");

         } else { 
             if (element.NeedsNullCheckBeforeSetValue) { 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(" != null)\r\n                {\r\n");

                 PushIndent();
             }
             if (bindAssignment.MemberType.IsNullable) { 
this.Write("                XamlBindingSetters.Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.TargetNullValueExpression));

this.Write(");\r\n");

             } else {
this.Write("                XamlBindingSetters.Set_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberDeclaringType.MemberFriendlyName()));

this.Write("_");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.MemberName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(objRef));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(");\r\n");

             }
             if (element.NeedsNullCheckBeforeSetValue) { 
                 PopIndent();
this.Write("                }\r\n");

                 if (includeDeferredSet && element.CanBeInstantiatedLater) { 
this.Write("                else\r\n                {\r\n                    this.");

this.Write(this.ToStringHelper.ToStringWithCulture(bindAssignment.ObjectDeferredAssignmentCodeName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(value));

this.Write(";\r\n                }\r\n");

                 }
             }
         }
         Output_ApiInformationCall_Pop(bindAssignment.ApiInformation, Indent.OneTab); 
         if (ProjectInfo.ShouldGenerateDisableXBind) 
         {
             PopIndent();
this.Write("                }\r\n");

         }
     }
 private void Output_Update_DataChanged_Step(string context, BindPathStep step)
 {
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("        if (obj != null)\r\n        {\r\n");

     }
     Output_UpdateCall(context, step, KnownStrings.DataChanged);
     if (step.Parent.ValueType.IsNullable) 
     {
this.Write("        }\r\n");

     }
     if (step.BindStatus.HasFlag(BindStatus.HasFallbackValue)) 
     {
this.Write("        else\r\n        {\r\n            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(DATA_CHANGED);\r\n        }\r\n");

     }
 }
 private void Output_Update_Steps(bool checkForNull, string context, IEnumerable<BindPathStep> steps, bool checkPhaseCondition, string phaseParam)
 {
     if (steps.Count() > 0) 
     {
         PushIndent();
         if (checkForNull)
         {
             PushIndent();
this.Write("        if (obj != null)\r\n        {\r\n");

         }
         List<BindPathStep> stepsWithFallback = new List<BindPathStep>();
         string lastCondition = null;
         foreach (BindPathStep childStep in (from step in steps where step.IsIncludedInUpdate orderby step.PhaseList select step))
         {
             if(checkPhaseCondition)
             {
                 string thisCondition = GetPhaseCondition(childStep);
                 if (thisCondition != lastCondition)
                 {
                     if (lastCondition != null)
                     {
this.Write("            }\r\n");

                     }
                     lastCondition = thisCondition;
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(thisCondition));

this.Write(")\r\n            {\r\n");

                 }
                 PushIndent();
                 Output_UpdateCall(context, childStep, phaseParam);
                 PopIndent();
             }
             else
             {
                 if (lastCondition != null)
                 {
this.Write("            }\r\n");

                 }
                 lastCondition = null;
                 Output_UpdateCall(context, childStep, phaseParam);
             }
             if (childStep.BindStatus.HasFlag(BindStatus.HasFallbackValue))
             {
               stepsWithFallback.Add(childStep);
             }
         }
                 if (lastCondition != null)
                 {
this.Write("            }\r\n");

                 }
         if (checkForNull) 
         {
this.Write("        }\r\n");

             if (stepsWithFallback.Count > 0) 
             {
this.Write("        else\r\n        {\r\n");

                 foreach (BindPathStep childStep in stepsWithFallback)
                 {
                     if(checkPhaseCondition)
                     {
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(GetPhaseCondition(childStep)));

this.Write(")\r\n            {\r\n                ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n            }\r\n");

                     }
                     else
                     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".UpdateFallback_");

this.Write(this.ToStringHelper.ToStringWithCulture(childStep.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

                     }
                 }
this.Write("        }\r\n");

             }
             PopIndent();
         }
         PopIndent();
     }
 }
 private string GetUpdateParams(BindPathStep bindStep)
 {
     if (bindStep is FunctionStep)
     {
         return "int phase";
     }
     else
     {
         return bindStep.ValueType.CSharpName() + " obj, int phase";
     }
 }
 private void Output_Custom_Update_Call(string context, BindPathStep step, string firstArgument, string phaseParam)
 {
     if (string.IsNullOrEmpty(firstArgument))
     {
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

     }
     else
     {
         Output_ApiInformationCall_Push(step.ApiInformation, Indent.None);
this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(context));

this.Write(".Update_");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeName));

this.Write("(");

this.Write(this.ToStringHelper.ToStringWithCulture(firstArgument));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(phaseParam));

this.Write(");\r\n");

         Output_ApiInformationCall_Pop(step.ApiInformation, Indent.None);
     }
 }
 private void Output_UpdateCall(string context, BindPathStep step, string phaseParam)
 {
     string firstArgument = step.CodeGen().UpdateCallParam.CSharpName(); 
     Output_Custom_Update_Call(context, step, firstArgument, phaseParam); 
 }
 private void Output_CompleteUpdate(BindUniverse bindUniverse)
 {
     List<string> conditions = new List<string>();
     bool needsLoop = bindUniverse.UnloadableBindingSourceElements.Any(); 
this.Write("\r\n            private void CompleteUpdate(int phase)\r\n            {\r\n");

     if (needsLoop) { 
this.Write("                do\r\n                {\r\n");

         PushIndent(); 
     } 
     if (bindUniverse.HasFunctionBindings) {
this.Write(@"                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
");

         conditions.Add("this.PendingFunctionBindings.Count > 0"); 
     } 
     if (bindUniverse.UnloadableBindingSourceElements.Any()) {
this.Write("                while (this.UnloadableBindingSourcesToUpdate.Count > 0)\r\n        " +
        "        {\r\n                    this.UnloadableBindingSourcesToUpdate.Dequeue()()" +
        ";\r\n                }\r\n");

         conditions.Add("this.UnloadableBindingSourcesToUpdate.Count > 0"); 
     } 
     if (bindUniverse.ElementsWithBoundLoadAssignments.Any()) {
this.Write("                while (this.UnloadedElementsToUpdate.Count > 0)\r\n                " +
        "{\r\n                    this.UpdateUnloadedElement(this.UnloadedElementsToUpdate." +
        "Dequeue());\r\n                }\r\n");

         conditions.Add("this.UnloadedElementsToUpdate.Count > 0"); 
     } 
     if (needsLoop) { 
         PopIndent(); 
this.Write("                }\r\n                while (");

this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" || ", conditions)));

this.Write(");\r\n");

     } 
this.Write("            }\r\n");

 } 
 private void Output_FunctionBindings(BindUniverse bindUniverse)
 {
this.Write(@"
            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
");

     foreach (FunctionStep functionStep in bindUniverse.BindPathSteps.Values.Where(s => s is FunctionStep))
     {
this.Write("\r\n            private void Invoke_");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeName));

this.Write("(int phase)\r\n            {\r\n");

         foreach (var param in functionStep.Parameters.OrderBy(p => p.HasTryGetValue)) {
             if (param.HasTryGetValue && functionStep.RequiresSafeParameterRetrieval) {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.AssignmentType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(";\r\n                if (!");

this.Write(this.ToStringHelper.ToStringWithCulture(param.TryGetValueCodeName));

this.Write("(out ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(")) { return; }\r\n");

             } else {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.ValueType));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.Name));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(param.CodeGen().PathExpression));

this.Write(";\r\n");

             }
         }
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.ValueType));

this.Write(" result = ");

this.Write(this.ToStringHelper.ToStringWithCulture(functionStep.CodeGen().PathExpression));

this.Write(";\r\n");

         foreach (int distinctPhase in functionStep.DistinctPhases) {
             Output_Binding_Phased_SetValue(distinctPhase, true, functionStep, true);
             Output_Binding_Phased_SetValue(distinctPhase, false, functionStep, true);
         }
this.Write("            }\r\n");

     }
 }
 private void Output_TryGetValueFunctions(BindUniverse bindUniverse)
 {
     foreach (BindPathStep step in bindUniverse.TryGetValueSteps)
     {
this.Write("\r\n            private bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.TryGetValueCodeName));

this.Write("(out ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(" val)\r\n            {\r\n");

         if (step is RootStep || !step.Parent.IsIncludedInUpdate) {
this.Write("                val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().PathExpression));

this.Write(";\r\n                return true;\r\n");

         }
         else {
this.Write("                ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.ValueType));

this.Write(" obj;\r\n");

             if (step.Parent.ValueType.IsNullable) {
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(out obj) && obj != null)\r\n");

             } else { 
this.Write("                if (");

this.Write(this.ToStringHelper.ToStringWithCulture(step.Parent.TryGetValueCodeName));

this.Write("(out obj))\r\n");

             } 
this.Write("                {\r\n                    val = ");

this.Write(this.ToStringHelper.ToStringWithCulture(step.CodeGen().UpdateCallParam));

this.Write(";\r\n                    return true;\r\n                }\r\n                else\r\n   " +
        "             {\r\n                    val = default(");

this.Write(this.ToStringHelper.ToStringWithCulture(step.ValueType));

this.Write(");\r\n                    return false;\r\n                }\r\n");

         }
this.Write("            }\r\n");

     }
 }
 private void Output_ApiInformationCall_Push(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PushIndent(indent); 
this.Write("            if (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(")\r\n            {\r\n");

         PopIndent(); 
         PushIndent(); 
     } 
 } 
 private void Output_ApiInformationCall_Pop(ApiInformation apiInformation, Indent indent)
 {
     if (apiInformation != null) { 
         PopIndent(); 
         PushIndent(indent); 
this.Write("            }\r\n");

         PopIndent(); 
     } 
 } 
 private void Output_ApiInformationDeclarations()
 {
     if (Model.ApiInformationDeclarations.Any()) { 
this.Write("\r\n        // Api Information for conditional namespace declarations\r\n");

     } 
     foreach (var apiInformation in Model.ApiInformationDeclarations) { 
this.Write("        internal static bool ");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.MemberFriendlyName));

this.Write(" = ");

this.Write(this.ToStringHelper.ToStringWithCulture(apiInformation.CodeGen().CallExpression));

this.Write(";\r\n");

     } 
 } 
    }
}
