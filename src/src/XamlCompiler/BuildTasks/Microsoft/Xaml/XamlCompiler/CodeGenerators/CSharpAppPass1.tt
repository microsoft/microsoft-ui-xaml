<#@ template language="C#" inherits="CSharp_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
<#  foreach(var pair in Model.XamlFileFullPathAndCheckSums) #>
<#  {   #>
#pragma checksum "<#=pair.FileName#>" "<#=Model.ChecksumAlgorithmGuid#>" "<#=pair.Checksum#>"
<#  }   #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace <#=Model.CodeInfo.ClassName.Namespace#>
{
#if !DISABLE_XAML_GENERATED_MAIN
    /// <summary>
    /// Program class
    /// </summary>
    public static class Program
    {
<#  if (ProjectInfo.IsWin32App) { #>
        [global::System.Runtime.InteropServices.DllImport("Microsoft.ui.xaml.dll")]
        [global::System.Runtime.InteropServices.DefaultDllImportSearchPaths(global::System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)]
        private static extern void XamlCheckProcessRequirements();

<#  } #>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
<#  if (ProjectInfo.IsWin32App) { #>
        [global::System.STAThreadAttribute]
<#  } #>
        static void Main(string[] args)
        {
<#  if (ProjectInfo.IsWin32App) { #>
            XamlCheckProcessRequirements();
            
<#  } #>
<#  if (ProjectInfo.UsingCSWinRT) { #>
            global::WinRT.ComWrappersSupport.InitializeComWrappers();
<#  }#>
<#  if (ProjectInfo.UsingCSWinRT) { #>
            <#=Globalize(KnownTypes.Application)#>.Start((p) => {
                var context = new global::Microsoft.UI.Dispatching.DispatcherQueueSynchronizationContext(global::Microsoft.UI.Dispatching.DispatcherQueue.GetForCurrentThread());
                global::System.Threading.SynchronizationContext.SetSynchronizationContext(context);
                new <#=Model.CodeInfo.ClassName.ShortName#>();
            });
<#  } else { #>
            <#=Globalize(KnownTypes.Application)#>.Start((p) => new <#=Model.CodeInfo.ClassName.ShortName#>());
<#  } #>
        }
    }
#endif

    partial class <#=Model.CodeInfo.ClassName.ShortName#> : global::<#=Model.CodeInfo.BaseTypeName#>
    {
        <#=GeneratedCodeAttribute#>
        private bool _contentLoaded;
<# if((!ProjectInfo.GenerateProviderCode) && (!ProjectInfo.EnableTypeInfoReflection))#>
<# {#>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public void AddOtherProvider(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> otherProvider)
        {
            _AddOtherProvider(otherProvider);
        }
        partial void _AddOtherProvider(<#=Globalize(KnownTypes.IXamlMetadataProvider)#> otherProvider);
<# }#>
        /// <summary>
        /// InitializeComponent()
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public void InitializeComponent()
        {
            if (_contentLoaded)
                return;

            _contentLoaded = true;

            global::System.Uri resourceLocator = new global::System.Uri("<#=Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)#>");
            <#=Globalize(KnownTypes.Application)#>.LoadComponent(this, resourceLocator);

#if DEBUG && !DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
            DebugSettings.BindingFailed += (sender, args) =>
            {
                global::System.Diagnostics.Debug.WriteLine(args.Message);
            };
#endif
#if DEBUG && !DISABLE_XAML_GENERATED_RESOURCE_REFERENCE_DEBUG_OUTPUT
            DebugSettings.XamlResourceReferenceFailed  += (sender, args) =>
            {
                global::System.Diagnostics.Debug.WriteLine(args.Message);
            };
#endif
#if DEBUG && !DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION
            UnhandledException += (sender, e) =>
            {
                if (global::System.Diagnostics.Debugger.IsAttached) global::System.Diagnostics.Debugger.Break();
            };
#endif
        }
    }
}
<#+ #>
