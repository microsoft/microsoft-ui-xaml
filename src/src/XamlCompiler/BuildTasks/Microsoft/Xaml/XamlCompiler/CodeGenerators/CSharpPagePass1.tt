<#@ template language="C#" inherits="CSharp_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#  foreach(var pair in Model.XamlFileFullPathAndCheckSums) #>
<#  {   #>
#pragma checksum "<#=pair.FileName#>" "<#=Model.ChecksumAlgorithmGuid#>" "<#=pair.Checksum#>"
<#  }   #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=Model.CodeInfo.ClassName.Namespace#>
{
    partial class <#=Model.CodeInfo.ClassName.ShortName#> : global::<#=Model.CodeInfo.BaseTypeName#>
    {

<# Output_xProperties(); #>

<# Output_FieldDefinitions(); #>
        <#=GeneratedCodeAttribute#>
        private bool _contentLoaded;

<# Output_InitializeComponent(); #>

<# if (Model.CodeInfo.BindStatus != BindStatus.None) #>
<# { #>
<#      Output_BindingsHeader(); #>
<# } #>
    }
}

<#+     private void Output_InitializeComponent() #>
<#+     { #>
<#+         string defaultUri = Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath); #>
        /// <summary>
        /// InitializeComponent()
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public void InitializeComponent()
        {
<#+         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) #>
<#+         { #>
            this.InitializeComponent(null);
        }

        /// <summary>
        /// InitializeComponent()
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public void InitializeComponent(global::System.Uri resourceLocator)
        {
<#+         } #>
            if (_contentLoaded)
                return;

            _contentLoaded = true;

<#+         if (Model.XProperties.Any()) #>
<#+         { #>
        InitializeXProperties();
<#+         } #>
<#+         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) #>
<#+         { #>
            if (resourceLocator == null)
            {
                resourceLocator = new global::System.Uri("<#=defaultUri#>");
            }
<#+         } #>
<#+         else #>
<#+         { #>
            global::System.Uri resourceLocator = new global::System.Uri("<#=defaultUri#>");
<#+         } #>
<#+         string loadType = (ProjectInfo.IsLibrary) ? "Nested" : "Application"; #>
<#+         if(!String.IsNullOrEmpty(Model.CodeInfo.XamlComponentResourceLocation)) #>
<#+         { #>
            <#=Globalize(KnownTypes.Application)#>.LoadComponent(this, resourceLocator, <#=Globalize(KnownTypes.ComponentResourceLocation)#>.<#=Model.CodeInfo.XamlComponentResourceLocation#>);
<#+         } #>
<#+         else#>
<#+         { #>
            <#=Globalize(KnownTypes.Application)#>.LoadComponent(this, resourceLocator, <#=Globalize(KnownTypes.ComponentResourceLocation)#>.<#=loadType#>);
<#+         } #>
        }

        partial void UnloadObject(<#=Globalize(KnownTypes.DependencyObject)#> unloadableObject);
<#+     } #>
<#+     private void Output_FieldDefinitions() #>
<#+     { #>
#pragma warning disable 0169    //  Proactively suppress unused/uninitialized field warning in case they aren't used, for things like x:Name
#pragma warning disable 0649
<#+         foreach (FieldDefinition fieldData in Model.CodeInfo.FieldDeclarations) #>
<#+         { #>
        <#=GeneratedCodeAttribute#>
<#+             if (fieldData.IsDeprecated) #>
<#+             { #>
#pragma warning disable 0618  //   Warning on Deprecated usage
<#+             } #>
        <#=fieldData.FieldModifier#> global::<#=fieldData.FieldTypeName#> <#=fieldData.FieldName#>; 
<#+             if (fieldData.IsDeprecated) #>
<#+             { #>
#pragma warning restore 0618
<#+             } #>
<#+         } #>
#pragma warning restore 0649
#pragma warning restore 0169
<#+     } #>

<#+     private void Output_BindingsHeader() #>
<#+     { #>
        <#=GeneratedCodeAttribute#>
        private interface I<#=Model.CodeInfo.ClassName.ShortName#>_Bindings
        {
            void Initialize();
            void Update();
            void StopTracking();
            void DisconnectUnloadedObject(int connectionId);
        }

        private interface I<#=Model.CodeInfo.ClassName.ShortName#>_BindingsScopeConnector
        {
            <#=Globalize(WeakReferenceTypeName)#> Parent { get; set; }
            bool ContainsElement(int connectionId);
            void RegisterForElementConnection(int connectionId, <#=Globalize(KnownTypes.IComponentConnector)#> connector);
        }
#pragma warning disable 0169    //  Proactively suppress unused field warning in case Bindings is not used.
#pragma warning disable 0649
        <#=GeneratedCodeAttribute#>
        private I<#=Model.CodeInfo.ClassName.ShortName#>_Bindings Bindings;
#pragma warning restore 0649
#pragma warning restore 0169
<#+     } #>

<#+     private void Output_xProperties() #>
<#+     { #>
<#+         if (Model.XProperties.Any()) #>
<#+         { #>
        partial void InitializeXProperties();

<#+         } #>
<#+         foreach (xProperty xProp in Model.XProperties) #>
<#+         { #>
        // <#=xProp.CodegenComment#>
        <#=GeneratedCodeAttribute#>
        private global::<#=xProp.FullTypeName#> _<#=xProp.Name#>;
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
        /// <summary>
        /// <#=xProp.ChangedHandler#> - changed handler for <#=xProp.Name#>
        /// </summary>
        <#=GeneratedCodeAttribute#>
        public event <#=PrependNamespace("PropertyChangedEventHandler")#> <#=xProp.ChangedHandler#>;
<#+             } #>
        /// <summary>
        /// <#=xProp.Name#>
        /// </summary>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        public global::<#=xProp.FullTypeName#> <#=xProp.Name#>
        {
            get { return _<#=xProp.Name#>; }
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
            set
            {
                if (_<#=xProp.Name#> != value)
                {
                    _<#=xProp.Name#> = value;
                    if (<#=xProp.ChangedHandler#> != null)
                    {
                        <#=xProp.ChangedHandler#>(this, new global::<#=PrependNamespace($"PropertyChangedEventArgs(\"{xProp.Name}\")")#>);
                       
                    }
                }
            }
<#+             } #>
        }

<#+         } #>
<#+     } #>