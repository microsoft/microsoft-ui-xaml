// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_MetadataDelegates : CppWinRT_CodeGenerator<TypeGenInfo>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 
    bool prototypeOnly = (bool)Arguments[0] == true;

            this.Write("\r\n");
  if (Model.HasActivator) { 
      if (prototypeOnly) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName));
            this.Write("();\r\n");
      } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ActivatorName));
            this.Write("()\r\n{\r\n");
  if (Model.IsLocalType) { 
            this.Write("    return ::winrt::make<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName.CppWinRTName().ToLocalCppWinRTTypeName()));
            this.Write(">();\r\n");
  } else { 
            this.Write("    return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write("();\r\n");
  } 
            this.Write("}\r\n");
      } 
  } 
  if (Model.IsCollection) { 
      if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CollectionAddName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& item);\r\n");
      } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CollectionAddName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& item)\r\n{\r\n    instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write(">().Append(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.FullName));
            this.Write(">(item));\r\n}\r\n");
      } 
  } 
  if (Model.IsDictionary) { 
      if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DictionaryAddName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& item);\r\n");
      } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DictionaryAddName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& item)\r\n{\r\n    instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write(">().Insert(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.KeyType.FullName));
            this.Write(">(key), ::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ItemType.FullName));
            this.Write(">(item));\r\n}\r\n");
      } 
  } 
  if (Model.HasEnumValues) { 
      if (prototypeOnly) { 
            this.Write("extern ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FromStringConverterName));
            this.Write("(XamlUserType const& userType, ::winrt::hstring const& input);\r\n");
      } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FromStringConverterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(ProjectInfo.RootNamespace)));
            this.Write("::implementation::XamlUserType const& userType, ::winrt::hstring const& input)\r\n{" +
                    "\r\n    return ::winrt::box_value((");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FullName));
            this.Write(")userType.CreateEnumUIntFromString(input));\r\n}\r\n");
      } 
  } 
 foreach(var member in Model.Members) { 
            this.Write("\r\n");
      if (member.HasGetAttachableMember) { 
          if (prototypeOnly) { 
            this.Write("extern ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetAttachableMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance);\r\n");
          } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetAttachableMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance)\r\n{\r\n    return ::winrt::box_value(");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("::Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.TargetType.FullName));
            this.Write(">()));\r\n}\r\n");
          } 
      } 
      if (member.HasSetAttachableMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetAttachableMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetAttachableMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value)\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write("::Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.TargetType.FullName));
            this.Write(">(), ::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(value));\r\n}\r\n");
          } 
      } 
      if (member.HasGetValueTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetValueTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance);\r\n");
          } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetValueTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance)\r\n{\r\n    return ::winrt::box_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write(">().");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("());\r\n}\r\n");
          } 
      } 
      if (member.HasSetValueTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetValueTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetValueTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value)\r\n{\r\n    instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write(">().");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(value));\r\n}\r\n");
          } 
      } 
      if (member.HasSetEnumMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetEnumMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetEnumMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value)\r\n{\r\n    instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write(">().");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(value));\r\n}\r\n");
          } 
      } 
      if (member.HasGetReferenceTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetReferenceTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance);\r\n");
          } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetReferenceTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance)\r\n{\r\n    return ::winrt::box_value(instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write(">().");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("());\r\n}\r\n");
          } 
      } 
      if (member.HasSetReferenceTypeMember) { 
          if (prototypeOnly) { 
            this.Write("extern void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetReferenceTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value);\r\n");
          } else { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.SetReferenceTypeMemberName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& instance, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable const& value)\r\n{\r\n    instance.as<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.DeclaringType.FullName));
            this.Write(">().");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            this.Write("(::winrt::unbox_value<");
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type.FullName));
            this.Write(">(value));\r\n}\r\n");
          } 
      } 
  } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
