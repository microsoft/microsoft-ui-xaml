<#@ template language="C#" inherits="VB_CodeGenerator<TypeInfoDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

<#  if(!Model.GenerateTypeInfo)  #>
<#  {                                       #>
' No local types .
<#  }                                       #>
<#  else                                    #>
<#  {                                       #>

<#  if (!ProjectInfo.IsLibrary) #>
<#  { #>
Namespace <#=Globalize(Model.AppMetadataProviderNamespace)#>

<#      Output_AppMetadataProvider();      #>

End Namespace

<#  } #>
Namespace <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
<#  if (ProjectInfo.GenerateFullXamlMetadataProvider) { #>
    <<#=Globalize(KnownNamespaces.XamlMarkup)#>.FullXamlMetadataProvider()>  _
<#  } #>
    Public NotInheritable Class XamlMetaDataProvider
        Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider
        Private _provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider
        Private ReadOnly Property Provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider
            Get
                If _provider Is Nothing
                    _provider = New <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider()
                End If
                Return _provider
            End Get
        End Property

<#      if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#      {#>
        Friend Sub AddOtherProvider(otherProvider as <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)
            Provider.AddOtherProvider(otherProvider)
        End Sub

<#      }#>
        <#=NotCLSCompliantAttribute#>Public Function GetXamlType(type as Global.System.Type) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXamlType
            Return Provider.GetXamlTypeByType(type)
        End Function

        <#=NotCLSCompliantAttribute#>Public Function GetXamlType(fullName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXamlType
            Return Provider.GetXamlTypeByName(fullName)
        End Function

        <#=NotCLSCompliantAttribute#>Public Function GetXmlnsDefinitions() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.XmlnsDefinition() Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXmlnsDefinitions
            Return New <#=Globalize(KnownNamespaces.XamlMarkup)#>.XmlnsDefinition() {}
        End Function
    End Class

<#    if(ProjectInfo.EnableTypeInfoReflection) #>
<#    { #>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    Friend Class XamlTypeInfoProvider
        Private _provider As <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider
        Private ReadOnly Property Provider As <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider
            Get
                If _provider Is Nothing
                    _provider = New <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>.ReflectionXamlMetadataProvider()
                End If
                Return _provider
            End Get
        End Property

        Public Function GetXamlTypeByType(ByVal type As Global.System.Type) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Return Provider.GetXamlType(type)
        End Function

        Public Function GetXamlTypeByName(ByVal typeName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Return Provider.GetXamlType(typeName)
        End Function
    End Class
<#    } #>
<#    else #>
<#    { #>
    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    Friend Class XamlTypeInfoProvider
        Public Function GetXamlTypeByType(ByVal type As Global.System.Type) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Dim xamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByType.TryGetValue(type, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByType(type)
                If typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
<#      if(SchemaInfo.OtherMetadataProviders.Count > 0)    #>
<#      {                                       #>
                Dim userXamlType As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType = TryCast(xamlType, <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType)
                If xamlType Is Nothing Or (userXamlType IsNot Nothing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType) Then
                    Dim libXamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType  = CheckOtherMetadataProvidersForType(type)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
<#      }                                       #>
                If xamlType IsNot Nothing Then
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetXamlTypeByName(ByVal typeName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            If String.IsNullOrEmpty(typeName) Then
                Return Nothing
            End If
            Dim xamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByName.TryGetValue(typeName, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByName(typeName)
                if typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
<#      if(SchemaInfo.OtherMetadataProviders.Count > 0)    #>
<#      {                                       #>
                Dim userXamlType As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType = TryCast(xamlType, <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType)
                If xamlType Is Nothing Or (userXamlType IsNot Nothing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType) Then
                    Dim libXamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = CheckOtherMetadataProvidersForName(typeName)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
<#      }                                       #>
                If xamlType IsNot Nothing
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetMemberByLongName(ByVal longMemberName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember
            If String.IsNullOrEmpty(longMemberName) Then
                Return Nothing
            End If
            Dim xamlMember As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember = Nothing
            SyncLock _xamlMembers
                If _xamlMembers.TryGetValue(longMemberName, xamlMember) Then
                    Return xamlMember
                End If
                xamlMember = CreateXamlMember(longMemberName)
                If xamlMember IsNot Nothing Then
                    _xamlMembers.Add(longMemberName, xamlMember)
                End If
            End SyncLock
            Return xamlMember
        End Function

        Private _xamlTypeCacheByName As New Global.System.Collections.Generic.Dictionary(Of String, <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType)()
        Private _xamlTypeCacheByType As New Global.System.Collections.Generic.Dictionary(Of Global.System.Type, <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType)()
        Private _xamlMembers As New Global.System.Collections.Generic.Dictionary(Of String, <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember)()

<#      Output_TypeTables();            #>

<#      Output_Activators();            #>
<#      Output_ListAndMapMethods();     #>

<#      Output_CreateXamlType();    #>

<#      Output_CheckOtherMetadataProviders();  #>

<#      Output_SettersAndGetters();     #>

<#      Output_CreateXamlMember();      #>

    End Class

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    Friend Class XamlSystemBaseType
        Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
        Private _fullName As String
        Private _underlyingType As Global.System.Type

        Public Sub New(ByVal fullName As String, ByVal underlyingType As Global.System.Type)
            _fullName = fullName
            _underlyingType = underlyingType
        End Sub

        Public ReadOnly Property UnderlyingType As Global.System.Type Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.UnderlyingType
            Get
                Return _underlyingType
            End Get
        End Property

        Public Overridable ReadOnly Property FullName() As String Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.FullName
            Get
                Return _fullName
            End Get
        End Property

        Public Overridable ReadOnly Property BaseType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.BaseType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property ContentProperty() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.ContentProperty
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable Function GetMember(ByVal name As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.GetMember
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable ReadOnly Property IsArray() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsArray
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsCollection() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsCollection
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property
        Public Overridable ReadOnly Property IsConstructible() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsConstructible
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsDictionary() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsDictionary
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsMarkupExtension() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsMarkupExtension
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable  ReadOnly Property IsBindable() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.IsBindable
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property ItemType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.ItemType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property KeyType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.KeyType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property BoxedType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.BoxedType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable Function ActivateInstance() As Global.System.Object Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.ActivateInstance
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable Sub AddToMap(ByVal instance As Global.System.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Object) Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.AddToMap
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Sub AddToVector(ByVal instance As Global.System.Object, ByVal item As Global.System.Object) Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.AddToVector
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Sub RunInitializer() Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.RunInitializer
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Function CreateFromString(ByVal input As String) As Global.System.Object Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.CreateFromString
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable  ReadOnly Property IsReturnTypeStub() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable  ReadOnly Property IsLocalType() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property
    End Class

    Friend Delegate Function Activator() As Global.System.Object
    Friend Delegate Sub AddToCollection(instance As Global.System.Object, item As Global.System.Object)
    Friend Delegate Sub AddToDictionary(instance As Global.System.Object, key As Global.System.Object, item As Global.System.Object)
    Friend Delegate Function CreateFromStringMethod(input As String) As Global.System.Object
    Friend Delegate Function BoxInstanceMethod(input As Global.System.Object) As Global.System.Object

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    Friend Class XamlUserType
        Inherits <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType
        Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
        Private _provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider
        Private _baseType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
        Private _isArray As Boolean
        Private _isMarkupExtension As Boolean
        Private _isBindable As Boolean
        Private _isReturnTypeStub As Boolean
        Private _isLocalType As Boolean
        Private _boxedType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType

        Private _contentPropertyName As String
        Private _itemTypeName As String
        Private _keyTypeName As String
        Private _memberNames As Dictionary(Of String, String)
        Private _enumValues As Dictionary(Of String, Global.System.Object)

        Public Sub New(ByVal provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider, ByVal fullName As String, ByVal fullType As Global.System.Type, ByVal baseType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType)
            MyBase.New(fullName, fullType)
            _provider = provider
            _baseType = baseType
        End Sub

        ' --- Interface methods ----

        Public Overrides ReadOnly Property BaseType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Get
                Return _baseType
            End Get
        End Property

        Public Overrides ReadOnly Property IsArray() As Boolean
            Get
                Return _isArray
            End Get
        End Property

        Public Overrides ReadOnly Property IsCollection() As Boolean
            Get
                Return CollectionAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsConstructible() As Boolean
            Get
                Return Activator <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsDictionary() As Boolean
            Get
                Return DictionaryAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsMarkupExtension() As Boolean
            Get
                Return _isMarkupExtension
            End Get
        End Property

        Public Overrides ReadOnly Property IsBindable() as Boolean
            Get
                Return _isBindable
            End Get
        End Property

        Public Overrides ReadOnly Property ContentProperty() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember
            Get
                Return _provider.GetMemberByLongName(_contentPropertyName)
            End Get
        End Property

        Public Overrides ReadOnly Property ItemType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Get
                Return _provider.GetXamlTypeByName(_itemTypeName)
            End Get
        End Property

        Public Overrides ReadOnly Property KeyType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Get
                Return _provider.GetXamlTypeByName(_keyTypeName)
            End Get
        End Property

        Public Overrides Function GetMember(ByVal name As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember
            If _memberNames Is Nothing Then
                Return Nothing
            End If
            Dim longName As String = Nothing
            If _memberNames.TryGetValue(name, longName) Then
                Return _provider.GetMemberByLongName(longName)
            End If
            Return Nothing
        End Function

        Public Overrides Function ActivateInstance() As Global.System.Object
            Return Activator.Invoke()
        End Function

        Public Overrides Sub AddToMap(ByVal instance As Global.System.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Object)
            DictionaryAdd.Invoke(instance, key, item)
        End Sub

        Public Overrides Sub AddToVector(ByVal instance As Global.System.Object, ByVal item As Global.System.Object)
            CollectionAdd.Invoke(instance, item)
        End Sub

        Public Overrides Sub RunInitializer()
            Global.System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle)
        End Sub

        Public Overrides Function CreateFromString(ByVal input As String) As Global.System.Object
            If BoxedType IsNot Nothing Then
                Return BoxInstance(BoxedType.CreateFromString(input))
            End If

            If CreateFromStringMethod IsNot Nothing Then
                Return CreateFromStringMethod.Invoke(input)
            ElseIf  Not _enumValues Is Nothing Then
                Dim returnValue As Int32 = 0

                Dim valueParts As String() = input.Split(New [Char]() {","c})

                For Each valuePart As String In valueParts
                    Dim partValue As Global.System.Object = Nothing
                    Dim enumFieldValue As Int32 = 0
                    Try
                        If _enumValues.TryGetValue(valuePart.Trim(), partValue) Then
                            enumFieldValue = Convert.ToInt32(partValue)
                        Else
                            Try
                                enumFieldValue = Convert.ToInt32(valuePart.Trim())
                            Catch ex As FormatException
                                For Each key As String In _enumValues.Keys
                                    If String.Compare(valuePart.Trim(), key, Global.System.StringComparison.OrdinalIgnoreCase) = 0 Then
                                        If _enumValues.TryGetValue(key.Trim(), partValue) Then
                                            enumFieldValue = Convert.ToInt32(partValue)
                                        End If
                                        Exit For
                                    End If
                                Next
                            End Try
                        End If

                        returnValue = returnValue Or enumFieldValue

                    Catch ex As Exception
                        Throw New ArgumentException(input, FullName)
                    End Try
                Next valuePart

                Return returnValue

            End If
            Throw New ArgumentException(input, FullName)
        End Function

        ' ---- End of Interface Methods

        Public Overrides ReadOnly Property IsReturnTypeStub() As Boolean
            Get
                Return _isReturnTypeStub
            End Get
        End Property

        Public Overrides ReadOnly Property IsLocalType() As Boolean
            Get
                Return _isLocalType
            End Get
        End Property

        Public ReadOnly Property BoxedType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType.BoxedType
            Get
                Return _boxedType
            End Get
        End Property

        Public Property Activator() As Activator
        Public Property CollectionAdd() As AddToCollection
        Public Property DictionaryAdd() As AddToDictionary
        Public Property CreateFromStringMethod() As CreateFromStringMethod
        Public Property BoxInstance As BoxInstanceMethod

        Public Sub SetContentPropertyName(ByVal contentPropertyName As String)
            _contentPropertyName = contentPropertyName
        End Sub

        Public Sub SetIsArray()
            _isArray = True
        End Sub

        Public Sub SetIsMarkupExtension()
            _isMarkupExtension = True
        End Sub

        Public Sub SetIsBindable()
            _isBindable = True
        End Sub

        Public Sub SetIsReturnTypeStub()
            _isReturnTypeStub = True
        End Sub

        Public Sub SetIsLocalType()
            _isLocalType = True
        End Sub

        Public Sub SetItemTypeName(ByVal itemTypeName As String)
            _itemTypeName = itemTypeName
        End Sub

        Public Sub SetKeyTypeName(ByVal keyTypeName As String)
            _keyTypeName = keyTypeName
        End Sub

        Public Sub SetBoxedType(ByVal boxedType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType)
            _boxedType = boxedType
        End Sub

        Public Function BoxType (Of t As Structure)(ByVal instance As Global.System.Object) As Global.System.Object
            Dim unwrapped As t= CType(instance, t)
            Return New Global.System.Nullable(Of t)(unwrapped)
        End Function

        Public Sub AddMemberName(ByVal shortName As String)
            If _memberNames Is Nothing Then
                _memberNames = New Global.System.Collections.Generic.Dictionary(Of String,String)()
            End If
            _memberNames.Add(shortName, FullName + "." +shortName)
        End Sub

        Public Sub AddEnumValue(ByVal name As String, ByVal value As Global.System.Object)
            If _enumValues Is Nothing Then
                _enumValues = New Global.System.Collections.Generic.Dictionary(Of String,Global.System.Object)()
            End If
            _enumValues.Add(name, value)
        End Sub
    End Class

    Friend Delegate Function Getter(ByVal instance As Global.System.Object) As Global.System.Object
    Friend Delegate Sub Setter(ByVal instance As Global.System.Object, ByVal value As Global.System.Object)

    <#=GeneratedCodeAttribute#>
    <#=DebuggerNonUserCodeAttribute#>
    Friend Class XamlMember
        Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember
        Private _provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider
        Private _name As String
        Private _isAttachable As Boolean
        Private _isDependencyProperty As Boolean
        Private _isReadOnly As Boolean

        Private _typeName As String
        Private _targetTypeName As String

        Public Sub New(ByVal provider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlTypeInfoProvider, ByVal name As String, ByVal typeName As String)
            _name = name
            _typeName = typeName
            _provider = provider
        End Sub

        Public ReadOnly Property Name() As String Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.Name
            Get
                Return _name
            End Get
        End Property

        Public ReadOnly Property Type() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.Type
            Get
                Return _provider.GetXamlTypeByName(_typeName)
            End Get
        End Property

        Public Sub SetTargetTypeName(targetTypeName as String)
            _targetTypeName = targetTypeName
        End Sub
        Public ReadOnly Property TargetType() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.TargetType
            Get
                Return _provider.GetXamlTypeByName(_targetTypeName)
            End Get
        End Property

        Public Sub SetIsAttachable()
            _isAttachable = True
        End Sub
        Public ReadOnly Property IsAttachable() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.IsAttachable
            Get
                Return _isAttachable
            End Get
        End Property

        Public Sub SetIsDependencyProperty()
            _isDependencyProperty = True
        End Sub

        Public ReadOnly Property IsDependencyProperty() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.IsDependencyProperty
            Get
                Return _isDependencyProperty
            End Get
        End Property

        Public Sub SetIsReadOnly()
            _isReadOnly = True
        End Sub

        Public ReadOnly Property IsReadOnly() As Boolean Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.IsReadOnly
            Get
                Return _isReadOnly
            End Get
        End Property

        Public Property Getter() As Getter
        Public Function GetValue(ByVal instance As Global.System.Object) As Global.System.Object Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.GetValue
            If Getter IsNot Nothing Then
                Return Getter.Invoke(instance)
            Else
                Throw New Global.System.InvalidOperationException("GetValue")
            End If
        End Function

        Public Property Setter() As Setter
        Public Sub SetValue(ByVal instance As Global.System.Object, ByVal value As Global.System.Object) Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMember.SetValue
            If Setter IsNot Nothing Then
                Setter.Invoke(instance, value)
            Else
                Throw New Global.System.InvalidOperationException("SetValue")
            End If
        End Sub
    End Class
<#    } #>
End Namespace
<#  }                                       #>
<#+ #>


<#+         private void Output_CheckOtherMetadataProviders()   #>
<#+         {                                                   #>
<#+             if(SchemaInfo.OtherMetadataProviders.Count > 0)            #>
<#+             {                                               #>
<#+                 if (!ProjectInfo.GenerateProviderCode) #>
<#+                 {#>
        Public Sub AddOtherProvider(otherProvider As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)
            If _otherProviders Is Nothing
                Dim otherProvidersTmp As List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider) = New List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)()
                _otherProviders = otherProvidersTmp
            End If
            _otherProviders.Add(otherProvider)
        End Sub
<#+                 }#>

        Private Dim _otherProviders As List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)
        Private ReadOnly Property OtherProviders As List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)
            Get
                If _otherProviders Is Nothing
                    Dim otherProvidersTmp As List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider) = New List(Of <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)()
<#+                 if (ProjectInfo.GenerateProviderCode && (SchemaInfo.OtherMetadataProviders.Count > 0)) #>
<#+                 {#>
                    Dim provider As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider
<#+                     foreach(var xmp in SchemaInfo.OtherMetadataProviders) #>
<#+                     {                                           #>
                    provider = New <#=xmp.FullName#>()
                    otherProvidersTmp.Add(provider)
<#+                     }                                           #>
<#+                 }#>
                    _otherProviders = otherProvidersTmp
                End If
                Return _otherProviders
            End Get
        End Property

        Private Function CheckOtherMetadataProvidersForName(typeName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Dim xamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            Dim foundXamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            For Each xmp As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(typeName)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function

        Private Function CheckOtherMetadataProvidersForType(type As Global.System.Type) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Dim xamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            Dim foundXamlType As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType = Nothing
            For Each xmp As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(type)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function
<#+             }                           #>
<#+         }                               #>


<#+         private void Output_TypeTables()     #>
<#+         {                                       #>
        Private _typeNameTable(<#=SchemaInfo.TypeTableFromAllAssemblies.Count - 1#>) As String
        Private _typeTable(<#=SchemaInfo.TypeTableFromAllAssemblies.Count - 1#>) As Global.System.Type

        Private Sub InitTypeTables()
<#+         for(int i=0; i<SchemaInfo.TypeTable.Count; i++) #>
<#+         {                                                           #>
<#+             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      #>
            _typeNameTable(<#=entry.TypeIndex#>) = "<#=entry.StandardName#>"
<#+         }                                                           #>

<#+         for(int i=0; i<SchemaInfo.TypeTable.Count; i++) #>
<#+         {                                                           #>
<#+             InternalTypeEntry entry = SchemaInfo.TypeTable[i];      #>
            _typeTable(<#=entry.TypeIndex#>) = GetType(<#=entry.FullName#>)
<#+         }                                                           #>
        End Sub

        Private Function LookupTypeIndexByName(ByVal typeName As String) As Integer
            If _typeNameTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeNameTable.Length - 1
                If 0 = String.CompareOrdinal(_typeNameTable(i), typeName) Then
                    Return i
                End If
            Next i
            Return -1
        End Function

        Private Function LookupTypeIndexByType(ByVal type As Global.System.Type) As Integer
            If _typeTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeTable.Length - 1
                If Global.System.Type.Equals(type, _typeTable(i)) Then
                    Return i
                End If
            Next
            Return -1
        End Function
<#+         }                                       #>


<#+         private void Output_CreateXamlType()     #>
<#+         {                                        #>
        Private Function CreateXamlType(ByVal typeIndex As Integer) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType
            Dim xamlType As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType = Nothing
<#+             if(SchemaInfo.TypeTable.Count == 0) #>
<#+             {                                   #>
            ' No Local Types
<#+             }                                   #>
<#+             else                                #>
<#+             {                                   #>
            Dim userType As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType
            Dim typeName As String = _typeNameTable(typeIndex)
            Dim type As Global.System.Type = _typeTable(typeIndex)

            Select Case typeIndex
<#+                 foreach(InternalTypeEntry entry in SchemaInfo.TypeTable)    #>
<#+                 {                                                           #>
            Case <#=entry.TypeIndex#>     ' <#=entry.StandardName#>
<#+                     if(entry.IsSystemType)                                  #>
<#+                     {                                                       #>
                xamlType = New <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlSystemBaseType(typeName, type)

<#+                     }           #>
<#+                     else        #>
<#+                     {           #>
<#+                         InternalXamlUserTypeInfo uentry = entry.UserTypeInfo;    #>
<#+                         if(uentry.BaseType == null)         #>
<#+                         {                                   #>
                userType = New <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType(Me, typeName, type, Nothing)
<#+                         }                                   #>
<#+                         else                                #>
<#+                         {                                   #>
                userType = New <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType(Me, typeName, type, GetXamlTypeByName("<#=uentry.BaseType.StandardName#>"))
<#+                         }                                   #>
<#+                         if (uentry.BoxedType != null) #>
<#+                         { #>
                userType.SetBoxedType(GetXamlTypeByName("<#=uentry.BoxedType.StandardName#>"))
                userType.BoxInstance = AddressOf userType.BoxType(Of <#=uentry.BoxedType.FullName#>)
<#+                         }#>
<#+                         if(uentry.IsConstructible && !uentry.IsReturnTypeStub)  #>
<#+                         {                                   #>
                userType.Activator = AddressOf <#=Model.ActivatorName(uentry)#>
<#+                         }                                   #>
<#+                         if (uentry.ContentProperty != null) #>
<#+                         {                                   #>
                userType.SetContentPropertyName("<#=uentry.ContentProperty.DeclaringType.StandardName#>.<#=uentry.ContentProperty.Name#>")
<#+                         }                                   #>
<#+                         if(uentry.IsCollection)             #>
<#+                         {                                   #>
                userType.CollectionAdd = AddressOf <#=Model.VectorAddName(uentry)#>
<#+                         }                                   #>
<#+                         if(uentry.IsDictionary)             #>
<#+                         {                                   #>
                userType.DictionaryAdd = AddressOf <#=Model.MapAddName(uentry)#>
<#+                         }                                   #>
<#+                         foreach(InternalXamlUserMemberInfo mem in uentry.Members)   #>
<#+                         {                                                           #>
                userType.AddMemberName("<#=mem.Name#>")
<#+                         }                                                           #>
<#+                         if(uentry.HasEnumValues)            #>
<#+                         {                                   #>
<#+                             foreach(String eValue in uentry.EnumValues)    #>
<#+                             {                                                           #>
                userType.AddEnumValue("<#=eValue#>", <#=uentry.FullName#>.<#=eValue#>)
<#+                             }                                                           #>
<#+                         }                                   #>
<#+                         if(uentry.IsBindable)               #>
<#+                         {                                   #>
                userType.SetIsBindable()
<#+                         }                                   #>
<#+                         if (uentry.HasCreateFromStringMethod) #>
<#+                         {                                   #>
<#+                             if (uentry.TypeEntry.UnderlyingType.IsValueType)#>
<#+                             {#>
                userType.CreateFromStringMethod = Function(x) DirectCast(<#=uentry.CreateFromStringMethod.ResolvedName.VBName()#>(x), Object)
<#+                             }#>
<#+                             else#>
<#+                             {#>
                userType.CreateFromStringMethod = AddressOf <#=uentry.CreateFromStringMethod.ResolvedName.VBName()#>
<#+                             }#>
<#+                         }                                   #>
<#+                         if(uentry.IsMarkupExtension)    #>
<#+                         {                               #>
                userType.SetIsMarkupExtension()
<#+                         }                               #>
<#+                         if(uentry.IsReturnTypeStub)         #>
<#+                         {                                   #>
                userType.SetIsReturnTypeStub()
<#+                         }                                   #>
<#+                         if(uentry.IsLocalType)              #>
<#+                         {                                   #>
                userType.SetIsLocalType()
<#+                         }                                   #>
                xamlType = userType

<#+                     }   #>
<#+                 }       #>
            End Select
<#+             }            #>
            Return xamlType
        End Function
<#+         }                #>

<#+         private void Output_Activators()                                        #>
<#+         {                                                                       #>
<#+             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  #>
<#+             {                                                                   #>
<#+                 if(entry.IsConstructible)                                       #>
<#+                 {                                                               #>
        Private Function <#=Model.ActivatorName(entry)#>() As Global.System.Object
            Return New <#=entry.FullName#>()
        End Function

<#+                 }           #>
<#+             }               #>
<#+         }                   #>



<#+         private void Output_ListAndMapMethods()                                 #>
<#+         {                                                                       #>
<#+             foreach(InternalXamlUserTypeInfo entry in SchemaInfo.UserTypeInfo)  #>
<#+             {                                                                   #>
<#+                 if(entry.IsCollection)                                          #>
<#+                 {                                                               #>
        Private Sub <#=Model.VectorAddName(entry)#>(instance As Global.System.Object, item As Global.System.Object)
            Dim collection As Global.System.Collections.Generic.ICollection(Of <#=entry.ItemType.FullName#>) = CType(instance, Global.System.Collections.Generic.ICollection(Of <#=entry.ItemType.FullName#>))
            Dim newItem As <#=entry.ItemType.FullName#> = CType(item, <#=entry.ItemType.FullName#>)
            collection.Add(newItem)
        End Sub

<#+                 }                       #>
<#+                 if(entry.IsDictionary)  #>
<#+                 {                       #>
        Private Sub <#=Model.MapAddName(entry)#>(instance As Global.System.Object, key As Global.System.Object, item As Global.System.Object)
            Dim collection As Global.System.Collections.Generic.IDictionary(Of <#=entry.KeyType.FullName#>, <#=entry.ItemType.FullName#>) = CType(instance, Global.System.Collections.Generic.IDictionary(Of <#=entry.KeyType.FullName#>, <#=entry.ItemType.FullName#>))
            Dim newKey As <#=entry.KeyType.FullName#> = CType(key, <#=entry.KeyType.FullName#>)
            Dim newItem As <#=entry.ItemType.FullName#> = CType(item, <#=entry.ItemType.FullName#>)
            collection.Add(newKey, newItem)
        End Sub

<#+                 }           #>
<#+             }               #>
<#+         }                   #>



<#+         private void Output_CreateXamlMember()          #>
<#+         {                                               #>
        Private Function CreateXamlMember(ByVal longMemberName As String) As XamlMember
            Dim xamlMember As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMember = Nothing
<#+             if(SchemaInfo.UserMemberInfo.Count == 0)    #>
<#+             {                                           #>
            ' No Local Properties
<#+             }                                           #>
<#+             else                                        #>
<#+             {                                           #>
            Dim userType As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType

            Select Case longMemberName
<#+                 for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    #>
<#+                 {                                                                       #>
<#+                     InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    #>
            Case "<#=entry.DeclaringType.StandardName#>.<#=entry.Name#>"
                userType = CType(GetXamlTypeByName("<#=entry.DeclaringType.StandardName#>"), <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlUserType)
                xamlMember = new <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMember(Me, "<#=entry.Name#>", "<#=entry.Type.StandardName#>")
<#+                     if(entry.TargetType != null)    #>
<#+                     {                               #>
                xamlMember.SetTargetTypeName("<#=entry.TargetType.StandardName#>")
<#+                     }                               #>
<#+                     if(entry.IsDependencyProperty)  #>
<#+                     {                               #>
                xamlMember.SetIsDependencyProperty()
<#+                     }                               #>
<#+                     if(entry.IsAttachable )         #>
<#+                     {                               #>
                xamlMember.SetIsAttachable()
<#+                     }                               #>
<#+                     if (entry.HasPublicGetter)      #>
<#+                     {                               #>
                xamlMember.Getter = AddressOf <#=Model.GetterName(i)  #>
<#+                     }                               #>
<#+                     if(entry.HasPublicGetter && !entry.HasPublicSetter) #>
<#+                     {                               #>
                xamlMember.SetIsReadOnly()
<#+                     }                               #>
<#+                     else if (entry.HasPublicSetter) #>
<#+                     {               #>
                xamlMember.Setter = AddressOf <#=Model.SetterName(i)  #>
<#+                     }               #>
<#+                 }                   #>
            End Select
<#+             }                       #>
            Return xamlMember
        End Function
<#+         }                           #>



<#+         private void Output_SettersAndGetters()                                     #>
<#+         {                                                                           #>
<#+             for(int i=0; i<SchemaInfo.UserMemberInfo.Count; i++)                    #>
<#+             {                                                                       #>
<#+                 InternalXamlUserMemberInfo entry = SchemaInfo.UserMemberInfo[i];    #>
<#+                 if (entry.IsEvent)          #>
<#+                     continue;               #>
<#+                 if(entry.HasPublicGetter)   #>
<#+                 {                           #>
        Private Function <#=Model.GetterName(i)#>(ByVal instance As Global.System.Object) As Global.System.Object
<#+                     if(entry.IsAttachable)              #>
<#+                     {                                   #>
<#+                         if (entry.TargetType != null)   #>
<#+                         {                               #>
            return <#=entry.DeclaringType.FullName#>.Get<#=entry.Name#>(CType(instance, <#=entry.TargetType.FullName#>))
<#+                         }       #>
<#+                         else    #>
<#+                         {       #>
            return <#=entry.DeclaringType.FullName#>.Get<#=entry.Name#>(instance)
<#+                         }       #>
<#+                     }           #>
<#+                     else        #>
<#+                     {           #>
            Dim that As <#=entry.DeclaringType.FullName#> = CType(instance, <#=entry.DeclaringType.FullName#>)
            Return that.<#=entry.Name#>
<#+                     }           #>
        End Function
<#+                 }                           #>
<#+                 if(entry.HasPublicSetter)   #>
<#+                 {                           #>
        Private Sub <#=Model.SetterName(i)#>(ByVal instance As Global.System.Object, ByVal Value As Global.System.Object)
<#+                     if(entry.IsAttachable)  #>
<#+                     {                       #>
<#+                         if (entry.TargetType != null) #>
<#+                         {                                        #>
            <#=entry.DeclaringType.FullName#>.Set<#=entry.Name#>(CType(instance, <#=entry.TargetType.FullName#>), CType(Value, <#=entry.Type.FullName#>))
<#+                         }                                        #>
<#+                         else                                    #>
<#+                         {                                        #>
            <#=entry.DeclaringType.FullName#>.Set<#=entry.Name#>(instance, CType(Value, <#=entry.Type.FullName#>))
<#+                         }                                        #>
<#+                     }                       #>
<#+                     else                    #>
<#+                     {                       #>
            Dim that As <#=entry.DeclaringType.FullName#> = CType(instance, <#=entry.DeclaringType.FullName#>)
            that.<#=entry.Name#> = CType(Value, <#=entry.Type.FullName#>)
<#+                     }                       #>
        End Sub
<#+                 }    #>
<#+             }        #>
<#+         }            #>

<#+         private void Output_AppMetadataProvider()  #>
<#+         {                                       #>
    Partial Public Class <#=Model.AppXamlInfo.ShortName#>
        Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider
        
        <#=GeneratedCodeAttribute#>
        Private __appProvider As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Private ReadOnly Property _AppProvider() As <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider
            Get
                If __appProvider Is Nothing
                    __appProvider = New <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>.XamlMetaDataProvider()
                End If
                Return __appProvider
            End Get
        End Property
<#+             if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#+             {#>

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Private Sub _AddOtherProvider(otherProvider as <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider)
            _AppProvider.AddOtherProvider(otherProvider)
        End Sub
<#+             }#>

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Function GetXamlType(type as Global.System.Type) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXamlType
            Return _AppProvider.GetXamlType(type)
        End Function

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Function GetXamlType(fullName As String) As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlType Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXamlType
            return _AppProvider.GetXamlType(fullName)
        End Function

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Function GetXmlnsDefinitions() As <#=Globalize(KnownNamespaces.XamlMarkup)#>.XmlnsDefinition() Implements <#=Globalize(KnownNamespaces.XamlMarkup)#>.IXamlMetadataProvider.GetXmlnsDefinitions
            Return _AppProvider.GetXmlnsDefinitions()
        End Function
    End Class
<#+         }           #>
