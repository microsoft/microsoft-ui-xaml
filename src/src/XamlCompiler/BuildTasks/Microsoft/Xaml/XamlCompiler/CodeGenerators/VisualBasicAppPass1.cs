// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class VisualBasicAppPass1 : VB_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
  foreach(var pair in Model.XamlFileFullPathAndCheckSums) 
  {   
            this.Write("#ExternalChecksum(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.FileName));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.ChecksumAlgorithmGuid));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pair.Checksum));
            this.Write("\")\r\n");
  }   
            this.Write(@"'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(Model.CodeInfo.ClassName.Namespace)));
            this.Write("\r\n\r\n#If Not DISABLE_XAML_GENERATED_MAIN Then\r\nPublic Class Program\r\n\r\n    <MTAThr" +
                    "ead()> _\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Shared Sub Main(ByVal args() As String)\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));
            this.Write(".Application.Start(Function(p) New Global.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.FullName));
            this.Write("())\r\n    End Sub\r\n\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Sub Program\r\n    End Sub\r\n\r\nEnd Class\r\n#End If\r\n\r\n\r\n<Global.Microsoft.Visua" +
                    "lBasic.CompilerServices.DesignerGenerated()>  _\r\nPartial Class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write("\r\n    Inherits Global.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.BaseTypeName));
            this.Write("\r\n\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    Private _contentLoaded As Boolean\r\n");
 if((!ProjectInfo.GenerateProviderCode) && (!ProjectInfo.EnableTypeInfoReflection))
 {
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Public Sub AddOtherProvider(otherProvider as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider)\r\n        _AddOtherProvider(otherProvider)\r\n    End Sub\r\n " +
                    "   Private Partial Sub _AddOtherProvider(otherProvider as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.XamlMarkup)));
            this.Write(".IXamlMetadataProvider)\r\n    End Sub\r\n\r\n");
 }
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedCodeAttribute));
            this.Write("\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DebuggerNonUserCodeAttribute));
            this.Write("\r\n    Public Sub InitializeComponent()\r\n        If _contentLoaded Then\r\n         " +
                    "   Return\r\n        End If\r\n        _contentLoaded = true\r\n\r\n        Dim resource" +
                    "Locator As New Global.System.Uri(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath)));
            this.Write("\")\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));
            this.Write(".Application.LoadComponent(Me, resourceLocator)\r\n\r\n#If Debug AndAlso Not DISABLE_" +
                    "XAML_GENERATED_BINDING_DEBUG_OUTPUT Then\r\n        AddHandler Me.DebugSettings.Bi" +
                    "ndingFailed,\r\n            Sub(Sender As Global.System.Object, bindingFailedArgs " +
                    "As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));
            this.Write(@".BindingFailedEventArgs)
                Global.System.Diagnostics.Debug.WriteLine(bindingFailedArgs.Message)
            End Sub
#End If

#If Debug AndAlso Not DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPTION Then
        AddHandler Me.UnhandledException,
            Sub(sender As Global.System.Object, unhandledExceptionArgs As ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(KnownNamespaces.Xaml)));
            this.Write(@".UnhandledExceptionEventArgs)
                If Global.System.Diagnostics.Debugger.IsAttached Then
                    Global.System.Diagnostics.Debugger.Break()
                End If
            End Sub
#End If
    End Sub

End Class

End Namespace
");
            return this.GenerationEnvironment.ToString();
        }
 
    }
}
