// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppTypeInfoPass1 : CppCX_CodeGenerator<TypeInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <collection.h>

namespace XamlTypeInfo
{
    namespace InfoProvider
    {
");
 if (ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write(@"        ref class XamlActivatableType sealed
        {
        internal:
            typedef ::Platform::Object^ (*ActivatorFn)();
            property ActivatorFn Activator;
            XamlActivatableType();            

        public:
            ::Platform::Object^ ActivateInstance();
        };

");
 } 
            this.Write(@"        ref class XamlTypeInfoProvider sealed
        {
            struct CriticalSection
            {
                CriticalSection()
                {
                    InitializeCriticalSection(&criticalSection);
                }

                ~CriticalSection()
                {
                    DeleteCriticalSection(&criticalSection);
                }

                struct AutoLock
                {
                    AutoLock(LPCRITICAL_SECTION criticalSection)
                        : pCriticalSection(criticalSection)
                    {
                        EnterCriticalSection(criticalSection);
                    }

                    ~AutoLock()
                    {
                        LeaveCriticalSection(pCriticalSection);
                    }

                private:
                    LPCRITICAL_SECTION pCriticalSection{ nullptr };
                };

                AutoLock Lock()
                {
                    return AutoLock(&criticalSection);
                }

            private:
                CRITICAL_SECTION criticalSection;
            };

        public:
            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlTypeByName(::Platform::String^ typeName);\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlTypeByType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName t);\r\n");
 if (!ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ GetMemberByLongName(::Platform::String^ longMemberName);\r\n");
 } 
  if (!ProjectInfo.GenerateProviderCode  || !ProjectInfo.GenerateProviderCode) { 
            this.Write("            void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider);\r\n");
  } 
            this.Write(@"
        private:
            CriticalSection _xamlTypesCriticalSection;
            CriticalSection _xamlMembersCriticalSection;
            std::map<::Platform::String^, ::Platform::WeakReference> _xamlTypes;
            std::map<::Platform::String^, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^> _xamlMembers;\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ CreateXamlType(::Platform::String^ typeName);\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ CreateXamlMember(::Platform::String^ longMemberName);\r\n");
  if (ProjectInfo.GenerateOtherProvidersForCX) { 
            this.Write("\r\n            ::Platform::Collections::Vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^>^ _otherProviders;\r\n            property ::Platform::Col" +
                    "lections::Vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^>^ OtherProviders\r\n            {\r\n                ::Platf" +
                    "orm::Collections::Vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^>^ get();\r\n            }\r\n\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ CheckOtherMetadataProvidersForName(::Platform::String^ typeName);\r\n " +
                    "           ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ CheckOtherMetadataProvidersForType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName t);\r\n");
  } 
 if(ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write("\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write("::ReflectionXamlMetadataProvider^ _ReflectionProvider;\r\n            property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write("::ReflectionXamlMetadataProvider^ ReflectionProvider\r\n            {\r\n            " +
                    "    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)));
            this.Write("::ReflectionXamlMetadataProvider^ get();\r\n            }\r\n\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetCachedType(::Platform::String^ typeName);\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ AddCachedType(::Platform::String^ typeName, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ reflectionType);\r\n\r\n        internal:\r\n            XamlActivatableTy" +
                    "pe^ GetActivatableTypeForTypeName(::Platform::String^ typeName);\r\n");
 } 
            this.Write("        };\r\n\r\n");
 if (!ProjectInfo.EnableTypeInfoReflection) 
 { 
            this.Write("        ref class XamlSystemBaseType sealed : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType\r\n        {\r\n        internal:\r\n            XamlSystemBaseType(::Platf" +
                    "orm::String^ name);\r\n\r\n        public:\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ BaseType \r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ ContentProperty \r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ get();
            }

            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property ::Platform::String^ Name
            {
                ::Platform::String^ get();
            }

            virtual property bool IsArray
            {
                bool get();
            }

            virtual property bool IsCollection
            {
                bool get();
            }

            virtual property bool IsConstructible
            {
                bool get();
            }

            virtual property bool IsDictionary
            {
                bool get();
            }

            virtual property bool IsMarkupExtension
            {
                bool get();
            }

            virtual property bool IsEnum
            {
                bool get();
            }

            virtual property bool IsSystemType
            {
                bool get();
            }

            virtual property bool IsBindable
            {
                bool get();
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ItemType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ KeyType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ BoxedType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName UnderlyingType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName get();\r\n            }\r\n\r\n            virtual ::Platform::Object^ Activ" +
                    "ateInstance();\r\n            virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ GetMember(::Platform::String^ name);
            virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ value);
            virtual void AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ value);
            virtual void RunInitializer();
            virtual ::Platform::Object^ CreateFromString(::Platform::String^ value);

        private:
            ::Platform::String^ _fullName;
        };

");
 string baseFullName = $"{Projection(KnownNamespaces.XamlMarkup)}::IXamlType"; 
            this.Write("        ref class XamlUserType sealed : public [::Platform::Metadata::RuntimeClas" +
                    "sName] ");
            this.Write(this.ToStringHelper.ToStringWithCulture(baseFullName));
            this.Write("\r\n        {\r\n        internal:\r\n            XamlUserType(::XamlTypeInfo::InfoProv" +
                    "ider::XamlTypeInfoProvider^ provider, ::Platform::String^ fullName, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ baseType);            

        public:
            // --- Interface methods ----
            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property ::Platform::String^ Name
            {
                ::Platform::String^ get();
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName UnderlyingType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName get();\r\n            }\r\n\r\n            virtual property bool IsSystemTyp" +
                    "e\r\n            {\r\n                bool get();\r\n            }\r\n\r\n            virt" +
                    "ual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ BaseType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ get();
            }

            virtual property bool IsArray 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsCollection 
            { 
                bool get();
            }

            virtual property bool IsConstructible 
            { 
                bool get();
            }

            virtual property bool IsDictionary 
            { 
                bool get();
            }

            virtual property bool IsMarkupExtension 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsEnum 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsBindable
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ ContentProperty \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ItemType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ KeyType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ BoxedType\r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ GetMember(::Platform::String^ name);\r\n            virtual ::Platfo" +
                    "rm::Object^ ActivateInstance();\r\n            virtual void AddToMap(::Platform::O" +
                    "bject^ instance, ::Platform::Object^ key, ::Platform::Object^ value);\r\n         " +
                    "   virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ va" +
                    "lue);\r\n            virtual void RunInitializer();\r\n            virtual ::Platfor" +
                    "m::Object^ CreateFromString(::Platform::String^ value);\r\n            // --- End " +
                    "of Interface methods\r\n\r\n            property bool IsReturnTypeStub\r\n            " +
                    "{ \r\n                bool get();\r\n                internal: void set(bool value);" +
                    "\r\n            }\r\n\r\n            property bool IsLocalType\r\n            {\r\n       " +
                    "         bool get();\r\n                internal:  void set(bool value);\r\n        " +
                    "    }\r\n\r\n        internal:\r\n            typedef ::Platform::Object^ (*ActivatorF" +
                    "n)();\r\n            typedef void (*AddToCollectionFn)(::Platform::Object^ instanc" +
                    "e, ::Platform::Object^ item);\r\n            typedef void (*AddToDictionaryFn)(::P" +
                    "latform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item);\r\n" +
                    "            typedef ::Platform::Object^ (*CreateFromStringFn)(::Platform::String" +
                    "^);\r\n            typedef ::Platform::Object^ (*StringConverterFn)(::XamlTypeInfo" +
                    "::InfoProvider::XamlUserType^ userType, ::Platform::String^ input);\r\n\r\n         " +
                    "   property ActivatorFn Activator;\r\n            property AddToCollectionFn Colle" +
                    "ctionAdd;\r\n            property AddToDictionaryFn DictionaryAdd;\r\n            pr" +
                    "operty CreateFromStringFn CreateFromStringMethod;\r\n            property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write(@"::TypeKind KindOfType;
            property StringConverterFn FromStringConverter;

            property ::Platform::String^ ContentPropertyName
            {
                void set(::Platform::String^ value);
            }

            property ::Platform::String^ ItemTypeName
            {
                void set(::Platform::String^ value);
            }

            property ::Platform::String^ KeyTypeName
            {
                void set(::Platform::String^ value);
            }

            void SetBoxedType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ boxedType);
            void AddMemberName(::Platform::String^ shortName);
            void AddEnumValue(::Platform::String^ name, ::Platform::Object^ value);
            uint32 CreateEnumUIntFromString(::Platform::String^ input);

        private:
            ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider;
            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ _baseType;
            ::Platform::String^ _contentPropertyName;
            ::Platform::String^ _itemTypeName;
            ::Platform::String^ _keyTypeName;
            ::Platform::String^ _fullName;
            std::map<::Platform::String^, ::Platform::String^> _memberNames;
            std::map<std::wstring, ::Platform::Object^> _enumValues;
            bool _isArray = false;
            bool _isMarkupExtension = false;
            bool _isEnum = false;
            bool _isBindable = false;
            bool _isReturnTypeStub = false;
            bool _isLocalType = false;
            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ _boxedType;\r\n        };\r\n\r\n        ref class XamlMember sealed : pub" +
                    "lic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember
        {
        internal:
            XamlMember(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ name, ::Platform::String^ typeName);

            typedef ::Platform::Object^ (*PropertyGetterFn)(::Platform::Object^ instance);
            typedef void (*PropertySetterFn)(::Platform::Object^ instance, ::Platform::Object^ value);

            property PropertyGetterFn Getter;
            property PropertySetterFn Setter;

        public:
            virtual property bool IsAttachable
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsDependencyProperty 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsReadOnly
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property ::Platform::String^ Name
            { 
                ::Platform::String^ get();
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ Type\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ TargetType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ get();
            }

            virtual ::Platform::Object^ GetValue(::Platform::Object^ instance);
            virtual void SetValue(::Platform::Object^ instance, ::Platform::Object^ value);

        internal:
            virtual property ::Platform::String^ TargetTypeName
            {
                void set(::Platform::String^ value);
            }

        private:
            bool _isAttachable;
            bool _isDependencyProperty;
            bool _isReadOnly; 
            ::Platform::String^ _name;
            ::Platform::String^ _targetTypeName;
            ::Platform::String^ _typeName;
            ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider;
        };
");
 } 
 else 
 { 
            this.Write("\r\n        ref class XamlConsolidatedType sealed : public [::Platform::Metadata::R" +
                    "untimeClassName] ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType\r\n        {\r\n        internal:\r\n            XamlConsolidatedType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ reflectionType, XamlActivatableType^ activatableType);            

        public:
            // --- Interface methods ----
            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName UnderlyingType\r\n            {\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ BaseType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType^ get();
            }

            virtual property bool IsArray 
            { 
                bool get();
            }

            virtual property bool IsCollection 
            { 
                bool get();
            }

            virtual property bool IsConstructible 
            { 
                bool get();
            }

            virtual property bool IsDictionary 
            { 
                bool get();
            }

            virtual property bool IsMarkupExtension 
            { 
                bool get();
            }

            virtual property bool IsBindable
            { 
                bool get();
            }

            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ ContentProperty \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ ItemType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual property ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ KeyType \r\n            { \r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ get();\r\n            }\r\n\r\n            virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember^ GetMember(::Platform::String^ name);
            virtual ::Platform::Object^ ActivateInstance();
            virtual void AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ value);
            virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ value);
            virtual void RunInitializer();
            virtual ::Platform::Object^ CreateFromString(::Platform::String^ value);
            // --- End of Interface methods

        private:
            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ _reflectionType;\r\n            XamlActivatableType^ _activatableType;" +
                    "\r\n        };\r\n");
 } 
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
