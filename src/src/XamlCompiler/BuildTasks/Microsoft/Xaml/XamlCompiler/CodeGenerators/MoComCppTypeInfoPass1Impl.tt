<#@ template language="C#" inherits="CppCX_CodeGenerator<TypeInfoDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { #>
#include "<#=ProjectInfo.PrecompiledHeaderFile#>"
<#  }#>
#include <regex>
#include "XamlTypeInfo.g.h"


// XamlMetaDataProvider
<# OutputNamespaceBegin(ProjectInfo.XamlTypeInfoNamespace); #>
[::Windows::Foundation::Metadata::WebHostHidden]
<# if (ProjectInfo.GenerateFullXamlMetadataProvider) { #>
[<#=Projection(KnownNamespaces.XamlMarkup)#>::FullXamlMetadataProvider]
<# } #>
public ref class XamlMetaDataProvider sealed : public <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider
{
public:
    [::Windows::Foundation::Metadata::DefaultOverload]
    virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName type);
    virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlType(::Platform::String^ fullName);
    virtual ::Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>^ GetXmlnsDefinitions();
<#  if(!ProjectInfo.GenerateProviderCode  && !ProjectInfo.EnableTypeInfoReflection)#>
<#  {#>
internal:
    void AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider);
<#  }#>    
private:
    ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider;
    property ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ Provider
    {
        ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ get();
    }
};
<# OutputNamespaceEnd(ProjectInfo.XamlTypeInfoNamespace); #>

<#  if(!ProjectInfo.GenerateProviderCode  && !ProjectInfo.EnableTypeInfoReflection)#>
<#  {#>
void <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>::XamlMetaDataProvider::AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider)
{
    Provider->AddOtherProvider(otherProvider);
}

<#  }#>
[::Windows::Foundation::Metadata::DefaultOverload]
<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>::XamlMetaDataProvider::GetXamlType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName type)
{
    return Provider->GetXamlTypeByType(type);
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>::XamlMetaDataProvider::GetXamlType(Platform::String^ fullName)
{
    return Provider->GetXamlTypeByName(fullName);
}

Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>^ <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>::XamlMetaDataProvider::GetXmlnsDefinitions()
{
    return ref new Platform::Array<<#=Projection(KnownNamespaces.XamlMarkup)#>::XmlnsDefinition>(0);
}

::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ <#=Globalize(ProjectInfo.XamlTypeInfoNamespace)#>::XamlMetaDataProvider::Provider::get()
{
    if (_provider == nullptr)
    {
        _provider = ref new ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider();
    }
    return _provider;
}

<# if(ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
#pragma warning(push)
#pragma warning(disable: 4691)
<#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>::ReflectionXamlMetadataProvider^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::ReflectionProvider::get()
{
    if (_ReflectionProvider == nullptr)
    {
        _ReflectionProvider = ref new <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>::ReflectionXamlMetadataProvider();
    }
    return _ReflectionProvider;
}
#pragma warning(pop)

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetCachedType(::Platform::String^ typeName)
{
    auto lock = _xamlTypesCriticalSection.Lock();
    auto val = _xamlTypes.find(typeName);
    <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ xamlType = nullptr;
    if (val != _xamlTypes.end())
    {
        xamlType = (val->second).Resolve<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType>();
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::AddCachedType(::Platform::String^ typeName, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ reflectionType)
{
    <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ typeToCache = nullptr;
    auto activatableType = GetActivatableTypeForTypeName(typeName);
    if (activatableType != nullptr)
    {
        typeToCache = ref new ::XamlTypeInfo::InfoProvider::XamlConsolidatedType(reflectionType, activatableType);
    }
    else
    {
        typeToCache = reflectionType;
    }

    if (typeToCache != nullptr)
    {
        Platform::WeakReference wr(typeToCache);
        _xamlTypes[typeName] =  wr;
    }
    return typeToCache;
}

<# } #>
<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetXamlTypeByType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName type)
{
<# if(ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
        auto lock = _xamlTypesCriticalSection.Lock();
        auto cachedType = GetCachedType(type.Name);
        if (cachedType != nullptr)
        {
            return cachedType;
        }
#pragma warning(push)
#pragma warning(disable: 4691)
        return AddCachedType(type.Name, ReflectionProvider->GetXamlType(type));
#pragma warning(pop)
<# } #>
<# else #>
<# { #>
    auto xamlType = GetXamlTypeByName(type.Name);
<#  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { #>
    ::XamlTypeInfo::InfoProvider::XamlUserType^ userXamlType = dynamic_cast<::XamlTypeInfo::InfoProvider::XamlUserType^>(xamlType);
    if (xamlType == nullptr || (userXamlType != nullptr && userXamlType->IsReturnTypeStub && !userXamlType->IsLocalType))
    {
        <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ libXamlType = CheckOtherMetadataProvidersForType(type);
        if (libXamlType != nullptr)
        {
            if(libXamlType->IsConstructible || xamlType == nullptr)
            {
                xamlType = libXamlType;
            }
        }
    }
<#  } #>
    return xamlType;
<# } #>
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetXamlTypeByName(::Platform::String^ typeName)
{
<# if(ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
        auto cachedType = GetCachedType(typeName);
        if (cachedType != nullptr)
        {
            return cachedType;
        }
#pragma warning(push)
#pragma warning(disable: 4691)
        return AddCachedType(typeName, ReflectionProvider->GetXamlType(typeName));
#pragma warning(pop)
<# } #>
<# else #>
<# { #>
    if (typeName == nullptr || typeName->IsEmpty())
    {
        return nullptr;
    }

    auto lock = _xamlTypesCriticalSection.Lock();
    auto val = _xamlTypes.find(typeName);
    <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ xamlType = nullptr;
    if (val != _xamlTypes.end())
    {
        xamlType = (val->second).Resolve<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType>();
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }

    xamlType = CreateXamlType(typeName);
<#  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { #>
    ::XamlTypeInfo::InfoProvider::XamlUserType^ userXamlType = dynamic_cast<::XamlTypeInfo::InfoProvider::XamlUserType^>(xamlType);
    if (xamlType == nullptr || (userXamlType != nullptr && userXamlType->IsReturnTypeStub && !userXamlType->IsLocalType))
    {
        <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ libXamlType  = CheckOtherMetadataProvidersForName(typeName);
        if (libXamlType != nullptr)
        {
            if(libXamlType->IsConstructible || xamlType == nullptr)
            {
                xamlType = libXamlType;
            }
        }
    }

<#  } #>
    if (xamlType != nullptr)
    {
        Platform::WeakReference wr(xamlType);
        _xamlTypes[xamlType->FullName] =  wr;
    }
    return xamlType;
<# } #>
}

<# if (!ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::GetMemberByLongName(::Platform::String^ longMemberName)
{
    if (longMemberName == nullptr || longMemberName->IsEmpty())
    {
        return nullptr;
    }

    auto lock = _xamlMembersCriticalSection.Lock();
    auto val = _xamlMembers.find(longMemberName);
    if (val != _xamlMembers.end())
    {
        return val->second;
    }

    auto xamlMember = CreateXamlMember(longMemberName);
    if (xamlMember != nullptr)
    {
        _xamlMembers[longMemberName] = xamlMember;
    }
    return xamlMember;
}
<# } #>

<#   if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)#>
<#   {#>

void ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider)
{
    auto lock = _xamlTypesCriticalSection.Lock();
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    _otherProviders->Append(otherProvider); 
}
<#  }#>
<#  if (ProjectInfo.GenerateOtherProvidersForCX  || !ProjectInfo.GenerateProviderCode) { #>

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ foundXamlType = nullptr;
    auto lock = _xamlTypesCriticalSection.Lock();
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName t)
{
    <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ foundXamlType = nullptr;
    auto lock = _xamlTypesCriticalSection.Lock();
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}
<#  } #>

<# if (!ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
// XamlSystemBaseType
::XamlTypeInfo::InfoProvider::XamlSystemBaseType::XamlSystemBaseType(::Platform::String^ name) :
    _fullName(name)
{
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::BaseType::get()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::ContentProperty::get()
{
    throw ref new ::Platform::NotImplementedException;
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::FullName::get()
{
    return _fullName;
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::Name::get()
{
    const wchar_t* seperator = wcsrchr(_fullName->Data(), '.');
    if (seperator == nullptr)
    {
        return _fullName;
    }
    return ref new ::Platform::String(seperator);
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsArray::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsCollection::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsConstructible::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsDictionary::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsMarkupExtension::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsEnum::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsSystemType::get()
{
    throw ref new ::Platform::NotImplementedException;
}

bool ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::IsBindable::get()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::ItemType::get()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::KeyType::get()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::BoxedType::get()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName (::XamlTypeInfo::InfoProvider::XamlSystemBaseType::UnderlyingType::get)()
{
    <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName typeName;

    typeName.Name = _fullName;
    typeName.Kind = <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeKind::Primitive;

    return typeName;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::ActivateInstance()
{
    throw ref new ::Platform::NotImplementedException;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::GetMember(::Platform::String^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::AddToVector(::Platform::Object^, ::Platform::Object^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::AddToMap(::Platform::Object^, ::Platform::Object^, ::Platform::Object^)
{
    throw ref new ::Platform::NotImplementedException;
}

void ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::RunInitializer()
{
    throw ref new ::Platform::NotImplementedException;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlSystemBaseType::CreateFromString(::Platform::String^)
{
    throw ref new ::Platform::NotImplementedException;
}

//XamlUserType
::XamlTypeInfo::InfoProvider::XamlUserType::XamlUserType(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ fullName, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ baseType) :
    _isArray(false),
    _isMarkupExtension(false),
    _isEnum(false),
    _isBindable(false),
    _isReturnTypeStub(false),
    _isLocalType(false),
    _fullName(fullName),
    _provider(provider),
    _baseType(baseType)
{
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlUserType::FullName::get()
{
    return _fullName;
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlUserType::Name::get()
{
    const wchar_t *seperator = wcsrchr(_fullName->Data(), '.');
    if (seperator == nullptr)
    {
        return _fullName;
    }
    return ref new ::Platform::String(seperator);
}

<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName (::XamlTypeInfo::InfoProvider::XamlUserType::UnderlyingType::get)()
{
    <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName typeName;

    typeName.Name = _fullName;
    typeName.Kind = KindOfType;

    return typeName;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsSystemType::get()
{
    return true;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::BaseType::get()
{
    return _baseType;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsArray::get()
{
    return _isArray;
}
void ::XamlTypeInfo::InfoProvider::XamlUserType::IsArray::set(bool value)
{
    _isArray = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsCollection::get()
{
    return CollectionAdd != nullptr;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsConstructible::get()
{
    return Activator != nullptr;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsDictionary::get()
{
    return DictionaryAdd != nullptr;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsMarkupExtension::get()
{
    return _isMarkupExtension;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::IsMarkupExtension::set(bool value)
{
    _isMarkupExtension = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsEnum::get()
{
    return _isEnum;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::IsEnum::set(bool value)
{
    _isEnum = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsBindable::get()
{
    return _isBindable;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::IsBindable::set(bool value)
{
    _isBindable = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsReturnTypeStub::get()
{
    return _isReturnTypeStub;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::IsReturnTypeStub::set(bool value)
{
    _isReturnTypeStub = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlUserType::IsLocalType::get()
{
    return _isLocalType;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::IsLocalType::set(bool value)
{
    _isLocalType = value;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlUserType::ContentProperty::get()
{
    return _provider->GetMemberByLongName(_contentPropertyName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::ContentPropertyName::set(::Platform::String^ value)
{
    _contentPropertyName = value;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::ItemType::get()
{
    return _provider->GetXamlTypeByName(_itemTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::ItemTypeName::set(::Platform::String^ value)
{
    _itemTypeName = value;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::KeyType::get()
{
    return _provider->GetXamlTypeByName(_keyTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::KeyTypeName::set(::Platform::String^ value)
{
    _keyTypeName = value;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlUserType::BoxedType::get()
{
    return _boxedType;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlUserType::GetMember(::Platform::String^ name)
{
    auto val = _memberNames.find(name);
    if (val != _memberNames.end())
    {
        return _provider->GetMemberByLongName(val->second);
    }
    return nullptr;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlUserType::ActivateInstance()
{
    return Activator();
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    DictionaryAdd(instance, key, item);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddToVector(::Platform::Object^ instance, ::Platform::Object^ item)
{
    CollectionAdd(instance, item);
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::RunInitializer()
{
    // The C++ runtime will have already run all the Static Initializers at start up.
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlUserType::CreateFromString(::Platform::String^ input)
{
    // For boxed types, run the boxed type's CreateFromString method and boxing
    if (BoxedType != nullptr)
    {
        return BoxedType->CreateFromString(input);
    }

    if (CreateFromStringMethod != nullptr)
    {
        return (*CreateFromStringMethod)(input);
    }
    else
    {
        return FromStringConverter(this, input);
    }
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::SetBoxedType(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ boxedType)
{
    _boxedType = boxedType;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddMemberName(::Platform::String^ shortName)
{
    _memberNames[shortName] = FullName + "." + shortName;
}

void ::XamlTypeInfo::InfoProvider::XamlUserType::AddEnumValue(::Platform::String^ name, ::Platform::Object^ value)
{
    _enumValues[name->Data()] = value;
}

::default::uint32 (::XamlTypeInfo::InfoProvider::XamlUserType::CreateEnumUIntFromString)(::Platform::String^ input)
{
    bool found = false;

    const std::wregex regularExpression(L"^\\s+|\\s*,\\s*|\\s+$");
    uint32 val = 0;

    for (std::wcregex_token_iterator it(input->Begin(), input->End(), regularExpression, -1), end; it != end; ++it)
    {
        const std::wcsub_match& subMatch = *it;

        if (subMatch.length() == 0 )
        {
            continue;
        }

        std::wstring lookup(subMatch.first, (unsigned int)subMatch.length());

        try
        {
            auto entry = _enumValues.find(lookup);
            if (entry != _enumValues.end())
            {
                const auto f = entry->second;
                val |= safe_cast<int>(f);
            }
            else
            {
                val |= std::stoi(subMatch);
            }
            found=true;
        }
        catch (const std::invalid_argument& )
        {
            found = false;
            break;
        }
    }

    if(found)
    {
        return val;
    }
    throw ref new ::Platform::InvalidArgumentException();
}

// XamlMember
::XamlTypeInfo::InfoProvider::XamlMember::XamlMember(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ name, ::Platform::String^ typeName) :
    _isAttachable(false),
    _isDependencyProperty(false),
    _isReadOnly(false),
    _name(name),
    _typeName(typeName),
    _provider(provider)
{
}


bool ::XamlTypeInfo::InfoProvider::XamlMember::IsAttachable::get()
{
    return _isAttachable;
}

void ::XamlTypeInfo::InfoProvider::XamlMember::IsAttachable::set(bool value)
{
    _isAttachable = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlMember::IsDependencyProperty::get()
{
    return _isDependencyProperty;
}

void ::XamlTypeInfo::InfoProvider::XamlMember::IsDependencyProperty::set(bool value)
{
    _isDependencyProperty = value;
}

bool ::XamlTypeInfo::InfoProvider::XamlMember::IsReadOnly::get()
{
    return _isReadOnly;
}

void ::XamlTypeInfo::InfoProvider::XamlMember::IsReadOnly::set(bool value)
{
    _isReadOnly = value;
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlMember::Name::get()
{
    return _name;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlMember::Type::get()
{
    return _provider->GetXamlTypeByName(_typeName);
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlMember::TargetType::get()
{
    return _provider->GetXamlTypeByName(_targetTypeName);
}

void ::XamlTypeInfo::InfoProvider::XamlMember::TargetTypeName::set(::Platform::String^ value)
{
    _targetTypeName = value;
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlMember::GetValue(::Platform::Object^ instance)
{
    if (Getter != nullptr)
    {
        return Getter(instance);
    }
    throw ref new ::Platform::NullReferenceException();
}

void ::XamlTypeInfo::InfoProvider::XamlMember::SetValue(::Platform::Object^ instance, ::Platform::Object^ value)
{
    if (Setter != nullptr)
    {
        Setter(instance, value);
        return;
    }
    throw ref new ::Platform::NullReferenceException();
}
<# } #>
<# else #>
<# { #>
//XamlConsolidatedType
::XamlTypeInfo::InfoProvider::XamlConsolidatedType::XamlConsolidatedType(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ reflectionType, ::XamlTypeInfo::InfoProvider::XamlActivatableType^ activatableType) :
    _reflectionType(reflectionType),
    _activatableType(activatableType)
{
}

::Platform::String^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::FullName::get()
{
    return _reflectionType->FullName;
}


<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName (::XamlTypeInfo::InfoProvider::XamlConsolidatedType::UnderlyingType::get)()
{
    return _reflectionType->UnderlyingType;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::BaseType::get()
{
    return _reflectionType->BaseType;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsArray::get()
{
    return _reflectionType->IsArray;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsCollection::get()
{
    return _reflectionType->IsCollection;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsConstructible::get()
{
    return _activatableType != nullptr;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsDictionary::get()
{
    return _reflectionType->IsDictionary;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsMarkupExtension::get()
{
    return _reflectionType->IsMarkupExtension;
}

bool ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::IsBindable::get()
{
    return _reflectionType->IsBindable;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ContentProperty::get()
{
    return _reflectionType->ContentProperty;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ItemType::get()
{
    return _reflectionType->ItemType;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::KeyType::get()
{
    return _reflectionType->KeyType;
}

<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::GetMember(::Platform::String^ name)
{
   return _reflectionType->GetMember(name);
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::ActivateInstance()
{
    return _activatableType->ActivateInstance();
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    _reflectionType->AddToMap(instance, key, item);
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::AddToVector(::Platform::Object^ instance, ::Platform::Object^ item)
{
    _reflectionType->AddToVector(instance, item);
}

void ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::RunInitializer()
{
    _reflectionType->RunInitializer();
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlConsolidatedType::CreateFromString(::Platform::String^ input)
{
    return _reflectionType->CreateFromString(input);
}

//XamlActivatableType
::XamlTypeInfo::InfoProvider::XamlActivatableType::XamlActivatableType()
{
}

::Platform::Object^ ::XamlTypeInfo::InfoProvider::XamlActivatableType::ActivateInstance()
{
    return Activator();
}
<# } #>