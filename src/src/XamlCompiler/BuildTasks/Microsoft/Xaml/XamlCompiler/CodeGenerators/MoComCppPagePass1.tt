<#@ template language="C#" inherits="CppCX_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
#pragma once
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

<# if (Model.CodeInfo.BindStatus != BindStatus.None) #>
<# { #>
#include "XamlBindingInfo.g.h"
<# } #>

<# Output_ForwardDeclarations(); #>

<# OutputNamespaceBegin(Model.CodeInfo.ClassName.Namespace); #>
[::Windows::Foundation::Metadata::WebHostHidden]
partial ref class <#=Model.CodeInfo.ClassName.ShortName#> : public ::<#=Colonize(Model.CodeInfo.BaseTypeName)#>, 
    public <#=Projection(KnownNamespaces.XamlMarkup)#>::IComponentConnector
{
public:
    void InitializeComponent();
<# if(Model.CodeInfo.PerXamlFileInfo.Count > 1)#>
<# {#>
    void InitializeComponent(::Windows::Foundation::Uri^ resourceLocator);
<# }#>
    virtual void Connect(int connectionId, ::Platform::Object^ target);
    virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IComponentConnector^ GetBindingConnector(int connectionId, ::Platform::Object^ target);

private:
    void UnloadObject(<#=Projection(KnownNamespaces.Xaml)#>::DependencyObject^ dependencyObject);
    void DisconnectUnloadedObject(int connectionId);

private:
    bool _contentLoaded;

<# foreach (BindUniverse bindUniverse in Model.CodeInfo.BindUniverses)#>
<# {#>
    class <#=bindUniverse.BindingsClassName#>;
<# }#>

<# if (Model.CodeInfo.BindStatus != BindStatus.None) #>
<# { #>
    ::XamlBindingInfo::XamlBindings^ Bindings;
<# } #>
<# Output_Cpp_FieldDefinitions(); #>
<# Output_xProperties(); #>
};
<# OutputNamespaceEnd(Model.CodeInfo.ClassName.Namespace); #>
<#+ #>

<#+     private void Output_ForwardDeclarations()#>
<#+     {#>
<#+         foreach (ForwardDeclaringNamespace typePath in Model.ForwardDeclarations)#>
<#+         {#>
<#+             int indentCount = 0;#>
<#+             foreach(String nsPart in typePath.Namespace.Split('.'))#>
<#+             {#>
namespace <#=nsPart#> {
<#+                 PushIndent();#>
<#+                 indentCount += 1;#>
<#+             }#>
<#+             foreach(String typeName in typePath.ShortNameTypes)#>
<#+             {#>
ref class <#=typeName#>;
<#+             }#>
<#+             while(indentCount-- > 0)#>
<#+             {#>
<#+                 PopIndent();#>
}
<#+             }#>
<#+         }#>
<#+     }#>


<#+     private void Output_Cpp_FieldDefinitions()#>
<#+     {#>
<#+         foreach (FieldDefinition fieldData in Model.CodeInfo.FieldDeclarations)#>
<#+         {#>
<#+             if (fieldData.IsDeprecated)#>
<#+             {#>
#pragma warning( push )
#pragma warning( disable : 4973 )
<#+             }#>
    <#=fieldData.FieldModifier#>: ::<#=Colonize(fieldData.FieldTypeName)#>^ <#=fieldData.FieldName#>;
<#+             if (fieldData.IsDeprecated)#>
<#+             {#>
#pragma warning( pop )
<#+             }#>
<#+         }#>
<#+     }#>

<#+     private void Output_xProperties() #>
<#+     { #>
<#+         if (Model.XProperties.Any()) #>
<#+         { #>
    private: void InitializeXProperties();

<#+         } #>
<#+         foreach (xProperty xProp in Model.XProperties) #>
<#+         { #>
    // <#=xProp.CodegenComment#>
    private: ::<#=Colonize(xProp.FullTypeName)#>^ _<#=xProp.Name#>;
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
    public: event <#=Projection(KnownNamespaces.XamlData)#>::PropertyChangedEventHandler^ <#=xProp.ChangedHandler#>;
<#+             } #>
    public: property ::<#=Colonize(xProp.FullTypeName)#>^ <#=xProp.Name#>
    {
        ::<#=Colonize(xProp.FullTypeName)#>^ get() { return _<#=xProp.Name#>; }
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
        void set(::<#=Colonize(xProp.FullTypeName)#>^ value)
        {
            if (_<#=xProp.Name#> != value)
            {
                _<#=xProp.Name#> = value;
                <#=xProp.ChangedHandler#>(this, ref new <#=Projection(KnownNamespaces.XamlData)#>::PropertyChangedEventArgs(L"<#=xProp.Name#>"));
            }
        }
<#+             } #>
    }

<#+         } #>
<#+     } #>