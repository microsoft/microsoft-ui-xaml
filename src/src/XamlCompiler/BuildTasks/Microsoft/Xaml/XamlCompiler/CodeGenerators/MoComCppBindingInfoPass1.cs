// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppBindingInfoPass1 : CppCX_CodeGenerator<BindingInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once

namespace XamlBindingInfo
{
    ref class XamlBindings;

    class IXamlBindings
    {
    public:
        virtual ~IXamlBindings() {};
        virtual bool IsInitialized() = 0;
        virtual void Update() = 0;
        virtual bool SetDataRoot(::Platform::Object^ data) = 0;
        virtual void StopTracking() = 0;
        virtual void Connect(int connectionId, ::Platform::Object^ target) = 0;
        virtual void Recycle() = 0;
        virtual void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase) = 0;
        virtual void SubscribeForDataContextChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^ object, ::XamlBindingInfo::XamlBindings^ handler) = 0;\r\n     " +
                    "   virtual void DisconnectUnloadedObject(int connectionId) = 0;\r\n");
  if (ProjectInfo.ShouldGenerateDisableXBind) 
  { 
            this.Write("        virtual void Disable(int lineNumber, int columnNumber) = 0;\r\n");
  } 
            this.Write("        virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IComponentConnector^ GetBindingConnector(int connectionId, ::Platform::Object^ target) = 0;
        virtual ::XamlBindingInfo::XamlBindings^ GetParent() = 0;
        virtual void SetParent(::XamlBindingInfo::XamlBindings^ parent) = 0;
        virtual bool ContainsElement(int connectionId) = 0;
        virtual void RegisterForElementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector) = 0;
        virtual void SetOwningBindingsClass(::XamlBindingInfo::XamlBindings^ owningBindings) = 0;
    };

    class IXamlBindingTracking
    {
    public:
        virtual void PropertyChanged(Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventArgs^ e) = 0;\r\n        virtual void CollectionChanged(::Pla" +
                    "tform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::NotifyCollectionChangedEventArgs^ e) = 0;\r\n        virtual void DependencyPrope" +
                    "rtyChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyProperty^ prop) = 0;
        virtual void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e) = 0;
        virtual void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e) = 0;
");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("        virtual void ErrorsChanged(::Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs^ e) = 0;\r\n");
 } 
            this.Write("    };\r\n\r\n    ref class XamlBindings sealed :\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::IDataTemplateExtension,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IComponentConnector,\r\n");
  if (ProjectInfo.ShouldGenerateDisableXBind) 
  { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlBindScopeDiagnostics,\r\n");
  } 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IDataTemplateComponent\r\n    {\r\n    internal:\r\n        XamlBindings(::XamlBindin" +
                    "gInfo::IXamlBindings* pBindings);\r\n        void Initialize();\r\n        void Upda" +
                    "te();\r\n        void StopTracking();\r\n        void Loading(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^ src, ::Platform::Object^ data);\r\n        void DataContextChan" +
                    "ged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DataContextChangedEventArgs^ args);\r\n        void SubscribeForDataContextChange" +
                    "d(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::FrameworkElement^ object);

    public:
        // IComponentConnector
        virtual void Connect(int connectionId, ::Platform::Object^ target);

        // IDataTemplateComponent
        virtual void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase);
        virtual void Recycle();

        // IDataTemplateExtension
        virtual bool ProcessBinding(unsigned int);
        virtual int ProcessBindings(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlControls)));
            this.Write("::ContainerContentChangingEventArgs^ args);\r\n        virtual void ResetTemplate()" +
                    ";\r\n\r\n        virtual void DisconnectUnloadedObject(int connectionId);\r\n");
  if (ProjectInfo.ShouldGenerateDisableXBind) 
  { 
            this.Write("        virtual void Disable(int lineNumber, int columnNumber);\r\n");
  } 
            this.Write("        // IComponentConnector\r\n        virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IComponentConnector^ GetBindingConnector(int connectionId, ::Platform::Object^ " +
                    "target);\r\n\r\n        virtual ::XamlBindingInfo::XamlBindings^ GetParent();\r\n     " +
                    "   virtual void SetParent(::XamlBindingInfo::XamlBindings^ parent);\r\n        vir" +
                    "tual bool ContainsElement(int connectionId);\r\n        virtual void RegisterForEl" +
                    "ementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector);\r\n" +
                    "    private:\r\n        ~XamlBindings();\r\n        ::XamlBindingInfo::IXamlBindings" +
                    "* _pBindings = nullptr;\r\n    };\r\n\r\n    ref class WeakRefWrapper sealed\r\n    {\r\n " +
                    "   private:\r\n        ::Platform::WeakReference weakRef;\r\n    public:\r\n\r\n        " +
                    "WeakRefWrapper(::Platform::Object^ obj)\r\n        {\r\n            weakRef = obj;\r\n" +
                    "        }\r\n\r\n        ::Platform::Object^ Resolve()\r\n        {\r\n            retur" +
                    "n weakRef.Resolve<::Platform::Object>();\r\n        }\r\n    };\r\n\r\n    template <cla" +
                    "ss TBindingsTracking>\r\n    class XamlBindingsBase : public IXamlBindings\r\n    {\r" +
                    "\n    protected:\r\n        bool _isInitialized;\r\n        TBindingsTracking^ _bindi" +
                    "ngsTracking;\r\n        ::Windows::Foundation::EventRegistrationToken _dataContext" +
                    "ChangedToken;\r\n        static const int NOT_PHASED = (1 << 31);\r\n        static " +
                    "const int DATA_CHANGED = (1 << 30);\r\n        ::Platform::WeakReference owningXam" +
                    "lBindings;\r\n\r\n    protected:\r\n        XamlBindingsBase()\r\n            : _isIniti" +
                    "alized(false)\r\n            , _bindingsTracking(nullptr)\r\n        {\r\n            " +
                    "_dataContextChangedToken.Value = 0;\r\n        }\r\n\r\n        virtual ~XamlBindingsB" +
                    "ase()\r\n        {\r\n            if (_bindingsTracking != nullptr)\r\n            {\r\n" +
                    "                _bindingsTracking->SetListener(nullptr);\r\n                _bindi" +
                    "ngsTracking = nullptr;\r\n            }\r\n        }\r\n\r\n        virtual void Release" +
                    "AllListeners()\r\n        {\r\n            // Overridden in the binding class as nee" +
                    "ded.\r\n        }\r\n\r\n    public:\r\n        void InitializeTracking(::XamlBindingInf" +
                    "o::IXamlBindingTracking* pBindingsTracking)\r\n        {\r\n            _bindingsTra" +
                    "cking = ref new TBindingsTracking();\r\n            _bindingsTracking->SetListener" +
                    "(pBindingsTracking);\r\n        }\r\n\r\n        virtual void StopTracking() override\r" +
                    "\n        {\r\n            ReleaseAllListeners();\r\n            this->_isInitialized" +
                    " = false;\r\n        }\r\n\r\n        virtual bool IsInitialized() override\r\n        {" +
                    "\r\n            return this->_isInitialized;\r\n        }\r\n\r\n        virtual void Up" +
                    "date() = 0;\r\n\r\n        void SubscribeForDataContextChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^ object, ::XamlBindingInfo::XamlBindings^ handler)\r\n        {\r" +
                    "\n            this->_dataContextChangedToken = object->DataContextChanged += \r\n  " +
                    "              ref new ::Windows::Foundation::TypedEventHandler<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::FrameworkElement^, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DataContextChangedEventArgs^>(
                    handler, &::XamlBindingInfo::XamlBindings::DataContextChanged);
        }

        virtual void Connect(int connectionId, ::Platform::Object^ target) = 0;

        virtual void Recycle()
        {
            // Overridden in the binding class as needed.
        }

        virtual void ProcessBindings(::Platform::Object^, int, int, int* nextPhase)
        {
            // Overridden in the binding class as needed.
            *nextPhase = -1;
        }
");
  if (ProjectInfo.ShouldGenerateDisableXBind) 
  { 
            this.Write("\r\n        virtual void Disable(int lineNumber, int columnNumber) = 0;\r\n");
  } 
            this.Write("        virtual void SetOwningBindingsClass(::XamlBindingInfo::XamlBindings^ owni" +
                    "ngBindings) override\r\n        {\r\n            owningXamlBindings = owningBindings" +
                    ";\r\n        }\r\n\r\n        virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IComponentConnector^ GetBindingConnector(int connectionId, ::Platform::Object^ target)
        {
            // Overridden in the bindings class as needed.
            connectionId;
            target;
            return nullptr;
        }

        virtual ::XamlBindingInfo::XamlBindings^ GetParent()
        {
            return nullptr;
        }

        virtual void SetParent(::XamlBindingInfo::XamlBindings^ parent)
        {
            parent;
        }

        virtual bool ContainsElement(int connectionId)
        {
            connectionId;
            return false;
        }

        virtual void RegisterForElementConnection(int connectionId, ::XamlBindingInfo::XamlBindings^ connector)
        {
            connectionId;
            connector;
        }
    };

    ref class XamlBindingTrackingBase
    {
    internal:
        XamlBindingTrackingBase();
        void SetListener(::XamlBindingInfo::IXamlBindingTracking* pBindings);
        
        // Event handlers
        void PropertyChanged(Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::PropertyChangedEventArgs^ e);\r\n        void CollectionChanged(::Platform::Objec" +
                    "t^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::NotifyCollectionChangedEventArgs^ e);\r\n        void DependencyPropertyChanged(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write(@"::DependencyProperty^ prop);
        void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e);
        void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e);
");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("        void ErrorsChanged(::Platform::Object^ sender, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::DataErrorsChangedEventArgs^ e);\r\n");
 } 
            this.Write("\r\n        // Listener update functions\r\n        void UpdatePropertyChangedListene" +
                    "r(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^* pCache, ::Windows::Foundation::EventRegistrationToken*" +
                    " pToken);\r\n        void UpdatePropertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyPropertyChanged^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Fo" +
                    "undation::EventRegistrationToken* pToken);\r\n        void UpdateCollectionChanged" +
                    "Listener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::INotifyCollectionChanged^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlInterop)));
            this.Write("::INotifyCollectionChanged^* pCache, ::Windows::Foundation::EventRegistrationToke" +
                    "n* pToken);\r\n        void UpdateDependencyPropertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyProperty^ property, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^* pCache, __int64* pToken);\r\n        void UpdateDependencyProp" +
                    "ertyChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyObject^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::DependencyProperty^ property, ::Platform::WeakReference& cacheRef, __int64* pTo" +
                    "ken);\r\n");
 if (ProjectInfo.IsInputValidationEnabled) {
            this.Write("        void UpdateErrorsChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^ obj, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^* pCache, ::Windows::Foundation::EventRegistrationToken* p" +
                    "Token);\r\n        void UpdateErrorsChangedListener(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlData)));
            this.Write("::INotifyDataErrorInfo^ obj, ::Platform::WeakReference& cacheRef, ::Windows::Foun" +
                    "dation::EventRegistrationToken* pToken);\r\n");
 } 
            this.Write("\r\n    private:\r\n        ::XamlBindingInfo::IXamlBindingTracking* _pBindingsTracki" +
                    "ngWeakRef = nullptr;\r\n    };\r\n\r\n    template <typename T>\r\n    struct ResolveHel" +
                    "per\r\n    {\r\n        static T^ Resolve(const ::Platform::WeakReference& wr)\r\n    " +
                    "    {\r\n            return wr.Resolve<T>();\r\n        }\r\n    };\r\n\r\n    template <>" +
                    "\r\n    struct ResolveHelper<::Platform::String>\r\n    {\r\n        typedef ::Platfor" +
                    "m::IBox<::Platform::String^> ResolveType;\r\n\r\n        static ::Platform::String^ " +
                    "Resolve(const ::Platform::WeakReference& wr)\r\n        {\r\n            return safe" +
                    "_cast<::Platform::String^>(wr.Resolve<ResolveType>());\r\n        }\r\n\r\n    };\r\n\r\n " +
                    "   template<class T, class TBindingsTracking> \r\n    class ReferenceTypeXamlBindi" +
                    "ngs : public XamlBindingsBase<TBindingsTracking>\r\n    {\r\n    private:\r\n        :" +
                    ":Platform::WeakReference _dataRoot;\r\n\r\n    protected:\r\n        ReferenceTypeXaml" +
                    "Bindings() {}\r\n\r\n        virtual void Update_(T^, int)\r\n        {\r\n            /" +
                    "/ Overridden in the binding class as needed.\r\n        }\r\n\r\n    public:\r\n        " +
                    "T^ GetDataRoot()\r\n        {\r\n            return ResolveHelper<T>::Resolve(this->" +
                    "_dataRoot);\r\n        }\r\n\r\n        bool SetDataRoot(::Platform::Object^ data)\r\n  " +
                    "      {\r\n            if (data != nullptr)\r\n            {\r\n                this->" +
                    "_dataRoot = data;\r\n                return true;\r\n            }\r\n            retu" +
                    "rn false;\r\n        }\r\n\r\n        virtual void Update() override\r\n        {\r\n     " +
                    "       this->Update_(this->GetDataRoot(), this->NOT_PHASED);\r\n            this->" +
                    "_isInitialized = true;\r\n        }\r\n    };\r\n\r\n    template<class T, class TBindin" +
                    "gsTracking> \r\n    class ValueTypeXamlBindings : public XamlBindingsBase<TBinding" +
                    "sTracking>\r\n    {\r\n    private:\r\n        T _dataRoot;\r\n\r\n    protected:\r\n       " +
                    " ValueTypeXamlBindings() {}\r\n\r\n        virtual void Update_(T, int)\r\n        {\r\n" +
                    "            // Overridden in the binding class as needed.\r\n        }\r\n\r\n    publ" +
                    "ic:\r\n        T GetDataRoot()\r\n        {\r\n            return this->_dataRoot;\r\n  " +
                    "      }\r\n\r\n        bool SetDataRoot(::Platform::Object^ data)\r\n        {\r\n      " +
                    "      if (data != nullptr)\r\n            {\r\n                this->_dataRoot = saf" +
                    "e_cast<T>(data);\r\n                return true;\r\n            }\r\n            retur" +
                    "n false;\r\n        }\r\n\r\n        virtual void Update() override\r\n        {\r\n      " +
                    "      this->Update_(this->GetDataRoot(), this->NOT_PHASED);\r\n            this->_" +
                    "isInitialized = true;\r\n        }\r\n    };\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
