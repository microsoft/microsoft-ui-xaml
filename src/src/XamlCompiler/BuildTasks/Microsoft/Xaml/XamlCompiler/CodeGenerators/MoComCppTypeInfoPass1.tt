<#@ template language="C#" inherits="CppCX_CodeGenerator<TypeInfoDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <collection.h>

namespace XamlTypeInfo
{
    namespace InfoProvider
    {
<# if (ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
        ref class XamlActivatableType sealed
        {
        internal:
            typedef ::Platform::Object^ (*ActivatorFn)();
            property ActivatorFn Activator;
            XamlActivatableType();            

        public:
            ::Platform::Object^ ActivateInstance();
        };

<# } #>
        ref class XamlTypeInfoProvider sealed
        {
            struct CriticalSection
            {
                CriticalSection()
                {
                    InitializeCriticalSection(&criticalSection);
                }

                ~CriticalSection()
                {
                    DeleteCriticalSection(&criticalSection);
                }

                struct AutoLock
                {
                    AutoLock(LPCRITICAL_SECTION criticalSection)
                        : pCriticalSection(criticalSection)
                    {
                        EnterCriticalSection(criticalSection);
                    }

                    ~AutoLock()
                    {
                        LeaveCriticalSection(pCriticalSection);
                    }

                private:
                    LPCRITICAL_SECTION pCriticalSection{ nullptr };
                };

                AutoLock Lock()
                {
                    return AutoLock(&criticalSection);
                }

            private:
                CRITICAL_SECTION criticalSection;
            };

        public:
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlTypeByName(::Platform::String^ typeName);
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetXamlTypeByType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName t);
<# if (!ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ GetMemberByLongName(::Platform::String^ longMemberName);
<# } #>
<#  if (!ProjectInfo.GenerateProviderCode  || !ProjectInfo.GenerateProviderCode) { #>
            void AddOtherProvider(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^ otherProvider);
<#  } #>

        private:
            CriticalSection _xamlTypesCriticalSection;
            CriticalSection _xamlMembersCriticalSection;
            std::map<::Platform::String^, ::Platform::WeakReference> _xamlTypes;
            std::map<::Platform::String^, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^> _xamlMembers;
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ CreateXamlType(::Platform::String^ typeName);
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ CreateXamlMember(::Platform::String^ longMemberName);
<#  if (ProjectInfo.GenerateOtherProvidersForCX) { #>

            ::Platform::Collections::Vector<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^>^ _otherProviders;
            property ::Platform::Collections::Vector<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^>^ OtherProviders
            {
                ::Platform::Collections::Vector<<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMetadataProvider^>^ get();
            }

            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ CheckOtherMetadataProvidersForName(::Platform::String^ typeName);
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ CheckOtherMetadataProvidersForType(<#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName t);
<#  } #>
<# if(ProjectInfo.EnableTypeInfoReflection) #>
<# { #>

            <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>::ReflectionXamlMetadataProvider^ _ReflectionProvider;
            property <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>::ReflectionXamlMetadataProvider^ ReflectionProvider
            {
                <#=Globalize(ProjectInfo.XamlTypeInfoReflectionNamespace)#>::ReflectionXamlMetadataProvider^ get();
            }

            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ GetCachedType(::Platform::String^ typeName);
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ AddCachedType(::Platform::String^ typeName, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ reflectionType);

        internal:
            XamlActivatableType^ GetActivatableTypeForTypeName(::Platform::String^ typeName);
<# } #>
        };

<# if (!ProjectInfo.EnableTypeInfoReflection) #>
<# { #>
        ref class XamlSystemBaseType sealed : public <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType
        {
        internal:
            XamlSystemBaseType(::Platform::String^ name);

        public:
            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ BaseType 
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ContentProperty 
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ get();
            }

            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property ::Platform::String^ Name
            {
                ::Platform::String^ get();
            }

            virtual property bool IsArray
            {
                bool get();
            }

            virtual property bool IsCollection
            {
                bool get();
            }

            virtual property bool IsConstructible
            {
                bool get();
            }

            virtual property bool IsDictionary
            {
                bool get();
            }

            virtual property bool IsMarkupExtension
            {
                bool get();
            }

            virtual property bool IsEnum
            {
                bool get();
            }

            virtual property bool IsSystemType
            {
                bool get();
            }

            virtual property bool IsBindable
            {
                bool get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ItemType
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ KeyType
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ BoxedType
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName UnderlyingType
            {
                <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName get();
            }

            virtual ::Platform::Object^ ActivateInstance();
            virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ GetMember(::Platform::String^ name);
            virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ value);
            virtual void AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ value);
            virtual void RunInitializer();
            virtual ::Platform::Object^ CreateFromString(::Platform::String^ value);

        private:
            ::Platform::String^ _fullName;
        };

<# string baseFullName = $"{Projection(KnownNamespaces.XamlMarkup)}::IXamlType"; #>
        ref class XamlUserType sealed : public [::Platform::Metadata::RuntimeClassName] <#=baseFullName#>
        {
        internal:
            XamlUserType(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ fullName, <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ baseType);            

        public:
            // --- Interface methods ----
            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property ::Platform::String^ Name
            {
                ::Platform::String^ get();
            }

            virtual property <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName UnderlyingType
            {
                <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName get();
            }

            virtual property bool IsSystemType
            {
                bool get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ BaseType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property bool IsArray 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsCollection 
            { 
                bool get();
            }

            virtual property bool IsConstructible 
            { 
                bool get();
            }

            virtual property bool IsDictionary 
            { 
                bool get();
            }

            virtual property bool IsMarkupExtension 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsEnum 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsBindable
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ContentProperty 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ItemType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ KeyType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ BoxedType
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ GetMember(::Platform::String^ name);
            virtual ::Platform::Object^ ActivateInstance();
            virtual void AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ value);
            virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ value);
            virtual void RunInitializer();
            virtual ::Platform::Object^ CreateFromString(::Platform::String^ value);
            // --- End of Interface methods

            property bool IsReturnTypeStub
            { 
                bool get();
                internal: void set(bool value);
            }

            property bool IsLocalType
            {
                bool get();
                internal:  void set(bool value);
            }

        internal:
            typedef ::Platform::Object^ (*ActivatorFn)();
            typedef void (*AddToCollectionFn)(::Platform::Object^ instance, ::Platform::Object^ item);
            typedef void (*AddToDictionaryFn)(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item);
            typedef ::Platform::Object^ (*CreateFromStringFn)(::Platform::String^);
            typedef ::Platform::Object^ (*StringConverterFn)(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input);

            property ActivatorFn Activator;
            property AddToCollectionFn CollectionAdd;
            property AddToDictionaryFn DictionaryAdd;
            property CreateFromStringFn CreateFromStringMethod;
            property <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeKind KindOfType;
            property StringConverterFn FromStringConverter;

            property ::Platform::String^ ContentPropertyName
            {
                void set(::Platform::String^ value);
            }

            property ::Platform::String^ ItemTypeName
            {
                void set(::Platform::String^ value);
            }

            property ::Platform::String^ KeyTypeName
            {
                void set(::Platform::String^ value);
            }

            void SetBoxedType(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ boxedType);
            void AddMemberName(::Platform::String^ shortName);
            void AddEnumValue(::Platform::String^ name, ::Platform::Object^ value);
            uint32 CreateEnumUIntFromString(::Platform::String^ input);

        private:
            ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider;
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ _baseType;
            ::Platform::String^ _contentPropertyName;
            ::Platform::String^ _itemTypeName;
            ::Platform::String^ _keyTypeName;
            ::Platform::String^ _fullName;
            std::map<::Platform::String^, ::Platform::String^> _memberNames;
            std::map<std::wstring, ::Platform::Object^> _enumValues;
            bool _isArray = false;
            bool _isMarkupExtension = false;
            bool _isEnum = false;
            bool _isBindable = false;
            bool _isReturnTypeStub = false;
            bool _isLocalType = false;
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ _boxedType;
        };

        ref class XamlMember sealed : public <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember
        {
        internal:
            XamlMember(::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ provider, ::Platform::String^ name, ::Platform::String^ typeName);

            typedef ::Platform::Object^ (*PropertyGetterFn)(::Platform::Object^ instance);
            typedef void (*PropertySetterFn)(::Platform::Object^ instance, ::Platform::Object^ value);

            property PropertyGetterFn Getter;
            property PropertySetterFn Setter;

        public:
            virtual property bool IsAttachable
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsDependencyProperty 
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property bool IsReadOnly
            { 
                bool get();
                internal: void set(bool value);
            }

            virtual property ::Platform::String^ Name
            { 
                ::Platform::String^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ Type
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ TargetType
            {
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual ::Platform::Object^ GetValue(::Platform::Object^ instance);
            virtual void SetValue(::Platform::Object^ instance, ::Platform::Object^ value);

        internal:
            virtual property ::Platform::String^ TargetTypeName
            {
                void set(::Platform::String^ value);
            }

        private:
            bool _isAttachable;
            bool _isDependencyProperty;
            bool _isReadOnly; 
            ::Platform::String^ _name;
            ::Platform::String^ _targetTypeName;
            ::Platform::String^ _typeName;
            ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _provider;
        };
<# } #>
<# else #>
<# { #>

        ref class XamlConsolidatedType sealed : public [::Platform::Metadata::RuntimeClassName] <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType
        {
        internal:
            XamlConsolidatedType(<#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ reflectionType, XamlActivatableType^ activatableType);            

        public:
            // --- Interface methods ----
            virtual property ::Platform::String^ FullName
            {
                ::Platform::String^ get();
            }

            virtual property <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName UnderlyingType
            {
                <#=Projection(KnownNamespaces.WindowsXamlInterop)#>::TypeName get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ BaseType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property bool IsArray 
            { 
                bool get();
            }

            virtual property bool IsCollection 
            { 
                bool get();
            }

            virtual property bool IsConstructible 
            { 
                bool get();
            }

            virtual property bool IsDictionary 
            { 
                bool get();
            }

            virtual property bool IsMarkupExtension 
            { 
                bool get();
            }

            virtual property bool IsBindable
            { 
                bool get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ ContentProperty 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ ItemType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual property <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ KeyType 
            { 
                <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ get();
            }

            virtual <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlMember^ GetMember(::Platform::String^ name);
            virtual ::Platform::Object^ ActivateInstance();
            virtual void AddToMap(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ value);
            virtual void AddToVector(::Platform::Object^ instance, ::Platform::Object^ value);
            virtual void RunInitializer();
            virtual ::Platform::Object^ CreateFromString(::Platform::String^ value);
            // --- End of Interface methods

        private:
            <#=Projection(KnownNamespaces.XamlMarkup)#>::IXamlType^ _reflectionType;
            XamlActivatableType^ _activatableType;
        };
<# } #>
    }
}