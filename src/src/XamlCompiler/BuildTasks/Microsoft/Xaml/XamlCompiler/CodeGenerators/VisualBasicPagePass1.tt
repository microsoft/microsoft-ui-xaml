<#@ template language="C#" inherits="VB_CodeGenerator<PageDefinition>" visibility="internal" linePragmas="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#  foreach(var pair in Model.XamlFileFullPathAndCheckSums) #>
<#  {   #>
#ExternalChecksum("<#=pair.FileName#>", "<#=Model.ChecksumAlgorithmGuid#>", "<#=pair.Checksum#>")
<#  }   #>
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace <#=Globalize(Model.CodeInfo.ClassName.Namespace)#>

    <Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()>  _
    Partial Class <#=Model.CodeInfo.ClassName.ShortName#>
        Inherits <#=Globalize(Model.CodeInfo.BaseTypeName)#>

<# Output_xProperties(); #>

<# Output_FieldDefinitions(); #>

        Private _contentLoaded As Boolean

<# Output_InitializeComponent(); #>

<# if (Model.CodeInfo.BindStatus != BindStatus.None) #>
<# { #>
<# Output_BindingsHeader(); #>
<# } #>

    End Class

End Namespace

<#+     private void Output_InitializeComponent() #>
<#+     { #>
<#+         string defaultUri = Model.GetLoadComponentUri(Model.CodeInfo.PriIndexName, Model.CodeInfo.BaseApparentRelativePath); #>
        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Sub InitializeComponent()
<#+         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) #>
<#+         { #>
            Me.InitializeComponent(Nothing)
        End Sub

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Sub InitializeComponent(ByVal resourceLocator As Global.System.Uri)
<#+         } #>
            If _contentLoaded Then
                Return
            End If
            _contentLoaded = true

<#+         if (Model.XProperties.Any()) #>
<#+         { #>
        InitializeXProperties()
<#+         } #>
<#+         if(Model.CodeInfo.PerXamlFileInfo.Count > 1) #>
<#+         { #>
            if resourceLocator Is Nothing Then
                resourceLocator = new Global.System.Uri("<#=defaultUri#>")
            End If
<#+         } #>
<#+         else #>
<#+         { #>
            Dim resourceLocator As New Global.System.Uri("<#=defaultUri#>")
<#+         } #>
<#+         string loadType = (ProjectInfo.IsLibrary) ? "Nested" : "Application"; #>
<#+         if(!String.IsNullOrEmpty(Model.CodeInfo.XamlComponentResourceLocation)) #>
<#+         { #>
            <#=Globalize(KnownNamespaces.Xaml)#>.Application.LoadComponent(Me, resourceLocator, <#=Globalize(KnownNamespaces.XamlControlsPrimitives)#>.ComponentResourceLocation.<#=Model.CodeInfo.XamlComponentResourceLocation#>)
<#+         } #>
<#+         else #>
<#+         { #>
            <#=Globalize(KnownNamespaces.Xaml)#>.Application.LoadComponent(Me, resourceLocator, <#=Globalize(KnownNamespaces.XamlControlsPrimitives)#>.ComponentResourceLocation.<#=loadType#>)
<#+         } #>
        End Sub

        Partial Private Sub UnloadObject(unloadableObject As <#=Globalize(KnownNamespaces.Xaml)#>.DependencyObject)
        End Sub

<#+     } #>
<#+     private void Output_FieldDefinitions() #>
<#+     { #>
<#+         foreach (FieldDefinition fieldData in Model.CodeInfo.FieldDeclarations) #>
<#+         { #>
        <#=GeneratedCodeAttribute#>
        <#=fieldData.FieldModifier#> WithEvents <#=fieldData.FieldName#> As <#=Globalize(fieldData.FieldTypeName)#>
<#+         } #>
<#+     } #>

<#+     private void Output_BindingsHeader() #>
<#+     { #>
        <#=GeneratedCodeAttribute#>
        Private Interface I<#=Model.CodeInfo.ClassName.ShortName#>_Bindings
            Sub Initialize()
            Sub Update()
            Sub StopTracking()
            Sub DisconnectUnloadedObject(connectionId As Integer)
        End Interface

        Private Interface I<#=Model.CodeInfo.ClassName.ShortName#>_BindingsScopeConnector
            Property Parent() As Global.System.WeakReference
            Function ContainsElement(connectionId As Integer) As Boolean
            Sub RegisterForElementConnection(connectionId As Integer, connector As <#=Globalize(KnownNamespaces.XamlMarkup)#>.IComponentConnector)
        End Interface

        <#=GeneratedCodeAttribute#>
        Private Bindings As I<#=Model.CodeInfo.ClassName.ShortName#>_Bindings
<#+     } #>

<#+     private void Output_xProperties() #>
<#+     { #>
<#+         if (Model.XProperties.Any()) #>
<#+         { #>
        Partial Private Sub InitializeXProperties
        End Sub

<#+         } #>
<#+         foreach (xProperty xProp in Model.XProperties) #>
<#+         { #>
        ' <#=xProp.CodegenComment#>
        <#=GeneratedCodeAttribute#>
        Private  _<#=xProp.Name#> As Global.<#=xProp.FullTypeName#>
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
        <#=GeneratedCodeAttribute#>
        Public Event <#=xProp.ChangedHandler#> As <#=Globalize(KnownNamespaces.XamlData)#>.PropertyChangedEventHandler        

        <#=GeneratedCodeAttribute#>
        <#=DebuggerNonUserCodeAttribute#>
        Public Property <#=xProp.Name#>() As Global.<#=xProp.FullTypeName#>
<#+             } #>
<#+             else #>
<#+             { #>
        Public ReadOnly Property <#=xProp.Name#>() As Global.<#=xProp.FullTypeName#>
<#+             } #>
            Get
                Return _<#=xProp.Name#>
            End Get
<#+             if (!xProp.IsReadOnly) #>
<#+             { #>
            Set(ByVal Value As Global.<#=xProp.FullTypeName#>)
                If Not _<#=xProp.Name#> Is Value Then
                    _<#=xProp.Name#> = Value
                    RaiseEvent <#=xProp.ChangedHandler#>(Me, New <#=Globalize(KnownNamespaces.XamlData)#>.PropertyChangedEventArgs("<#=xProp.Name#>"))
                End If
            End Set
<#+             } #>
        End Property

<#+         } #>
<#+     } #>