// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MoComCppAppPass1 : CppCX_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"#pragma once
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

#include ""XamlTypeInfo.g.h""

");
 OutputNamespaceBegin(Model.CodeInfo.ClassName.Namespace); 
            this.Write("partial ref class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CodeInfo.ClassName.ShortName));
            this.Write(" :  public ::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(Model.CodeInfo.BaseTypeName)));
            this.Write(",\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider\r\n{\r\npublic:\r\n    void InitializeComponent();\r\n");
  if(!ProjectInfo.GenerateProviderCode && !ProjectInfo.EnableTypeInfoReflection)
  {
            this.Write("    void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider^ otherProvider);\r\n");
  }
            this.Write("    [::Windows::Foundation::Metadata::DefaultOverload]\r\n    virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName type);\r\n    virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType^ GetXamlType(::Platform::String^ fullName);\r\n    virtual ::Platform::" +
                    "Array<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::XmlnsDefinition>^ GetXmlnsDefinitions();
private:
    ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ __provider; 
    bool _contentLoaded;
    property ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ _AppProvider
    {
        ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider^ get();
    }
};
");
 OutputNamespaceEnd(Model.CodeInfo.ClassName.Namespace); 
            return this.GenerationEnvironment.ToString();
        }
 
    }
}
