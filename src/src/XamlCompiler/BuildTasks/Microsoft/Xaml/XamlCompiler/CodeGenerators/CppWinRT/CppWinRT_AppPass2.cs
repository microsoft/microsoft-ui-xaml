// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_AppPass2 : CppWinRT_CodeGenerator<PageDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

");
  if(!String.IsNullOrEmpty(ProjectInfo.PrecompiledHeaderFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectInfo.PrecompiledHeaderFile));
            this.Write("\"\r\n");
  }
            this.Write("#include <windows.h>\r\n");
  foreach (var includeFile in Model.NeededLocalXamlHeaderFiles) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(includeFile));
            this.Write("\"\r\n");
  }
            this.Write("\r\n#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BREAK_ON_UNHANDLED_EXCEPT" +
                    "ION\r\nextern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();\r\n#endif" +
                    "\r\n\r\n");
 if (ProjectInfo.VSDesignerDontLoadAsDll) { 
            this.Write("#define _VSDESIGNER_DONT_LOAD_AS_DLL\r\n");
 } 
            this.Write("\r\n#if (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM" +
                    "64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)\r\n#if defined(_M_IX86)\r\n#pragma co" +
                    "mment(linker, \"/EXPORT:DllGetActivationFactory=_VSDesignerDllGetActivationFactor" +
                    "y@8,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:DllCanUnloadNow=_VSDesignerCanUn" +
                    "loadNow@0,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:VSDesignerDllMain=_VSDesig" +
                    "nerDllMain@12,PRIVATE\")\r\n#elif defined(_M_AMD64) || defined(_M_ARM) || defined(_" +
                    "M_ARM64)\r\n#pragma comment(linker, \"/EXPORT:DllGetActivationFactory=VSDesignerDll" +
                    "GetActivationFactory,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:VSDesignerCanUn" +
                    "loadNow,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:VSDesignerDllMain,PRIVATE\")\r" +
                    "\n#endif\r\n\r\nextern \"C\"\r\n{\r\n    int __stdcall _DllMainCRTStartup(void* hinstDLL, u" +
                    "nsigned long fdwReason, void** lpvReserved);\r\n\r\n    int __stdcall VSDesignerDllG" +
                    "etActivationFactory(void* classId, void** factory)\r\n    {\r\n        return WINRT_" +
                    "GetActivationFactory(classId, factory);\r\n    }\r\n\r\n    int __stdcall VSDesignerCa" +
                    "nUnloadNow()\r\n    {\r\n        return WINRT_CanUnloadNow();\r\n    }\r\n\r\n    int __st" +
                    "dcall VSDesignerDllMain(void* hinstDLL, unsigned long fdwReason, void** lpvReser" +
                    "ved)\r\n    {\r\n        return _DllMainCRTStartup(hinstDLL, fdwReason, lpvReserved)" +
                    ";\r\n    }\r\n}\r\n\r\n#endif // (defined(_M_IX86) || defined(_M_AMD64) || defined(_M_AR" +
                    "M) || defined(_M_ARM64))) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)\r\n\r\n#ifndef D" +
                    "ISABLE_XAML_GENERATED_MAIN\r\nint __stdcall wWinMain(HINSTANCE, HINSTANCE, PWSTR, " +
                    "int)\r\n{\r\n");
  if (ProjectInfo.IsWin32App) { 
            this.Write(@"    {
        void (WINAPI *pfnXamlCheckProcessRequirements)();
        auto module = ::LoadLibrary(L""Microsoft.ui.xaml.dll"");
        if (module)
        {
            pfnXamlCheckProcessRequirements = reinterpret_cast<decltype(pfnXamlCheckProcessRequirements)>(GetProcAddress(module, ""XamlCheckProcessRequirements""));
            if (pfnXamlCheckProcessRequirements)
            {
                (*pfnXamlCheckProcessRequirements)();
            }

            ::FreeLibrary(module);
        }
    }

    winrt::init_apartment(winrt::apartment_type::single_threaded);
");
  } else { 
            this.Write("    winrt::init_apartment();\r\n");
  }
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.Xaml)));
            this.Write("::Application::Start(\r\n        [](auto&&)\r\n        {\r\n            ::winrt::make<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection($"{Model.CodeInfo.ClassName.Namespace}.implementation.{Model.CodeInfo.ClassName.ShortName}")));
            this.Write(">();\r\n        });\r\n\r\n    return 0;\r\n}\r\n#endif\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
