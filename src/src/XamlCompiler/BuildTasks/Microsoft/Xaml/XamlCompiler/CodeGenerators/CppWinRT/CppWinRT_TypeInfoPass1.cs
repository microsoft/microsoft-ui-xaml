// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.UI.Xaml.Markup.Compiler.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class CppWinRT_TypeInfoPass1 : CppWinRT_CodeGenerator<TypeInfoDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once

#include <functional>
#include <map>
#include <vector>
#include <unknwn.h>
#include <mutex>

// Undefine GetCurrentTime macro to prevent
// conflict with Storyboard::GetCurrentTime
#undef GetCurrentTime

#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include ""winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.Xaml));
            this.Write(".h\"\r\n#include \"winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.XamlData));
            this.Write(".h\"\r\n#include \"winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.XamlMarkup));
            this.Write(".h\"\r\n#include \"winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.XamlInterop));
            this.Write(".h\"\r\n#include \"winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.WindowsXamlInterop));
            this.Write(".h\"\r\n#include \"winrt/");
            this.Write(this.ToStringHelper.ToStringWithCulture(KnownNamespaces.XamlXamlTypeInfo));
            this.Write(".h\"\r\n\r\nnamespace winrt::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Colonize(ProjectInfo.RootNamespace)));
            this.Write("::implementation\r\n{\r\n    using IInspectable = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsFoundation)));
            this.Write("::IInspectable;\r\n    using IXamlMember = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMember;\r\n    using IXamlType = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlType;\r\n\r\n    struct XamlTypeInfoProvider : public std::enable_shared_from_" +
                    "this<XamlTypeInfoProvider>\r\n    {\r\n        IXamlType GetXamlTypeByName(::winrt::" +
                    "hstring const& typeName);\r\n        IXamlType GetXamlTypeByType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName const& t);\r\n        IXamlMember GetMemberByLongName(::winrt::hstring c" +
                    "onst& longMemberName);\r\n");
  if (!ProjectInfo.GenerateProviderCode) { 
            this.Write("        void AddOtherProvider(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider otherProvider);\r\n");
  } 
            this.Write(@"
    private:
        std::recursive_mutex _xamlTypesCriticalSection;
        std::recursive_mutex _xamlMembersCriticalSection;
        std::map<std::wstring, ::winrt::weak_ref<IXamlType>> _xamlTypes;
        std::map<std::wstring, IXamlMember> _xamlMembers;
        IXamlType CreateXamlType(::winrt::hstring const& typeName);
        IXamlMember CreateXamlMember(::winrt::hstring const& longMemberName);

        std::vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider> _otherProviders;\r\n        std::vector<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write("::IXamlMetadataProvider> const& OtherProviders();\r\n\r\n        IXamlType CheckOther" +
                    "MetadataProvidersForName(::winrt::hstring const& typeName);\r\n        IXamlType C" +
                    "heckOtherMetadataProvidersForType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write("::TypeName const& t);\r\n    };\r\n\r\n    struct XamlSystemBaseType : public ::winrt::" +
                    "implements<XamlSystemBaseType, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlType>
    {
        explicit XamlSystemBaseType(::winrt::hstring const& name);

        // IXamlType
        IXamlType BaseType() const;
        IXamlMember ContentProperty() const;
        ::winrt::hstring FullName() const;
        ::winrt::hstring Name() const;
        bool IsArray() const;
        bool IsCollection() const;
        bool IsConstructible() const;
        bool IsDictionary() const;
        bool IsMarkupExtension() const;
        bool IsEnum() const;
        bool IsSystemType() const;
        bool IsBindable() const;
        IXamlType ItemType() const;
        IXamlType KeyType() const;
        IXamlType BoxedType() const;

        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write(@"::TypeName UnderlyingType() const;
        IInspectable ActivateInstance() const;
        IInspectable CreateFromString(::winrt::hstring const& value) const;
        IXamlMember GetMember(::winrt::hstring const& name) const;
        void AddToVector(IInspectable const& instance, IInspectable const& value) const;
        void AddToMap(IInspectable const& instance, IInspectable const& key, IInspectable const& value) const;
        void RunInitializer() const;

    private:
        ::winrt::hstring _fullName;
    };

    struct __declspec(uuid(""63A5FDC1-874E-4D22-9BC7-A0E3488AD5B2"")) IXamlUserType : ::IUnknown
    {
        virtual bool IsReturnTypeStub() const = 0;
        virtual bool IsLocalType() const = 0;
    };

");
 string xamlTypeInterfaces = $"{Projection(KnownNamespaces.XamlMarkup)}::IXamlType"; 
            this.Write("    struct XamlUserType : public ::winrt::implements<XamlUserType, IXamlUserType," +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(xamlTypeInterfaces));
            this.Write(@">
    {
        explicit XamlUserType(
            std::shared_ptr<XamlTypeInfoProvider> const& provider, 
            ::winrt::hstring const& fullName, 
            IXamlType baseType);

        ::winrt::hstring GetRuntimeClassName() const;

        // IXamlType
        IXamlType BaseType() const;
        IXamlMember ContentProperty() const;
        ::winrt::hstring FullName() const;
        ::winrt::hstring Name() const;
        bool IsArray() const;
        bool IsCollection() const;
        bool IsConstructible() const;
        bool IsDictionary() const;
        bool IsMarkupExtension() const;
        bool IsEnum() const;
        bool IsSystemType() const;
        bool IsBindable() const;
        IXamlType ItemType() const;
        IXamlType KeyType() const;
        IXamlType BoxedType() const;
        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write(@"::TypeName UnderlyingType() const;
        IInspectable ActivateInstance() const;
        IInspectable CreateFromString(::winrt::hstring const& value) const;
        IXamlMember GetMember(::winrt::hstring const& name) const;
        void AddToVector(IInspectable const& instance, IInspectable const& value) const;
        void AddToMap(IInspectable const& instance, IInspectable const& key, IInspectable const& value) const;
        void RunInitializer() const;

        // Additional Setters
        void IsArray(bool value);
        void IsMarkupExtension(bool value);
        void IsEnum(bool value);
        void IsBindable(bool value);

        bool IsReturnTypeStub() const;
        void IsReturnTypeStub(bool value);

        bool IsLocalType() const;
        void IsLocalType(bool value);

        typedef IInspectable(*ActivatorFn)();
        typedef void(*AddToCollectionFn)(IInspectable const& instance, IInspectable const& item);
        typedef void(*AddToDictionaryFn)(IInspectable const& instance, IInspectable const& key, IInspectable const& item);
        typedef IInspectable (*CreateFromStringFn)(::winrt::hstring const& input);
        typedef IInspectable(*StringConverterFn)(XamlUserType const& userType, ::winrt::hstring const& input);

        ActivatorFn _activator{};
        AddToCollectionFn _collectionAdd{};
        AddToDictionaryFn _dictionaryAdd{};
        CreateFromStringFn _createFromStringMethod{};
        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.WindowsXamlInterop)));
            this.Write(@"::TypeKind _kindOfType{};
        StringConverterFn _fromStringConverter{};

        void ContentPropertyName(::winrt::hstring const& value);
        void ItemTypeName(::winrt::hstring const& value);
        void KeyTypeName(::winrt::hstring const& value);
        void SetBoxedType(IXamlType boxedType);
        void AddMemberName(::winrt::hstring const& shortName);
        void AddEnumValue(::winrt::hstring const& name, IInspectable value);
        uint32_t CreateEnumUIntFromString(::winrt::hstring const& input) const;

    private:
        std::shared_ptr<XamlTypeInfoProvider> _provider;
        IXamlType _baseType;
        IXamlType _boxedType;
        ::winrt::hstring _contentPropertyName;
        ::winrt::hstring _itemTypeName;
        ::winrt::hstring _keyTypeName;
        ::winrt::hstring _fullName;
        std::map<std::wstring, winrt::hstring> _memberNames;
        std::map<std::wstring, IInspectable> _enumValues;
        bool _isArray{ false };
        bool _isMarkupExtension{ false };
        bool _isEnum{ false };
        bool _isBindable{ false };
        bool _isReturnTypeStub{ false };
        bool _isLocalType{ false };
    };

    struct XamlMember : public ::winrt::implements<XamlMember, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Projection(KnownNamespaces.XamlMarkup)));
            this.Write(@"::IXamlMember>
    {
        explicit XamlMember(
            std::shared_ptr<XamlTypeInfoProvider> const& provider, 
            ::winrt::hstring const& name, 
            ::winrt::hstring const& typeName);

        typedef IInspectable(*PropertyGetterFn)(IInspectable const& instance);
        typedef void(*PropertySetterFn)(IInspectable const& instance, IInspectable const& value);

        PropertyGetterFn _getter{};
        PropertySetterFn _setter{};

        // IXamlMember
        bool IsAttachable() const;
        bool IsDependencyProperty() const;
        bool IsReadOnly() const;
        ::winrt::hstring Name() const;
        IXamlType TargetType() const;
        IXamlType Type() const;
        IInspectable GetValue(IInspectable const& instance) const;
        void SetValue(IInspectable const& instance, IInspectable const& value);

        // Additional Setters
        void TargetTypeName(::winrt::hstring const& value);
        void IsAttachable(bool value);
        void IsDependencyProperty(bool value);
        void IsReadOnly(bool value);

    private:
        bool _isAttachable{ false };
        bool _isDependencyProperty{ false };
        bool _isReadOnly{ false };
        ::winrt::hstring _name;
        ::winrt::hstring _targetTypeName;
        ::winrt::hstring _typeName;
        std::shared_ptr<XamlTypeInfoProvider> _provider;
    };
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
}
