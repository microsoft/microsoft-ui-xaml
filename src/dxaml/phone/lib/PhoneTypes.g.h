// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    DatePickedEventArgsRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>>
    DatePickerFlyoutRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem,
    ABI::Microsoft::UI::Xaml::Data::ICustomPropertyProvider,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    DatePickerFlyoutItemRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IControlFactory>>
    DatePickerFlyoutPresenterRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    ItemsPickedEventArgsRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>>
    ListPickerFlyoutRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IControlFactory>>
    ListPickerFlyoutPresenterRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    PickerConfirmedEventArgsRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>>
    PickerFlyoutRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter,
    ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IContentControlFactory>>
    PickerFlyoutPresenterRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IPivot,
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IItemsControlFactory>>
    PivotRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::IPivotItem,
    ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IContentControlFactory>>
    PivotItemRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    TimePickedEventArgsRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>>
    TimePickerFlyoutRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IControlFactory>>
    TimePickerFlyoutPresenterRuntimeClass;

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Controls
{
    // Forward declarations.
    class DatePickedEventArgs;
    class DatePickerFlyout;
    class DatePickerFlyoutItem;
    class DatePickerFlyoutPresenter;
    class ItemsPickedEventArgs;
    class ListPickerFlyout;
    class ListPickerFlyoutPresenter;
    class PickerConfirmedEventArgs;
    class PickerFlyout;
    class PickerFlyoutPresenter;
    class Pivot;
    class PivotItem;
    class TimePickedEventArgs;
    class TimePickerFlyout;
    class TimePickerFlyoutPresenter;

    // Classes.
    class DatePickedEventArgsFactory
        :
        public wrl::AgileActivationFactory<>
    {

    friend class DatePickedEventArgsGenerated;
    friend class DatePickedEventArgs;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_OldDateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_NewDateProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeOldDateProperty();
        _Check_return_ static HRESULT InitializeNewDateProperty();

    };
    
    class __declspec(novtable) DatePickedEventArgsGenerated
        : public DatePickedEventArgsRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgs;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickedEventArgs, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        DatePickedEventArgsGenerated() {};
        virtual ~DatePickedEventArgsGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_OldDate)(_Out_ ABI::Windows::Foundation::DateTime* pValue) ;
        virtual _Check_return_ HRESULT put_OldDate(_In_ ABI::Windows::Foundation::DateTime value);
        IFACEMETHOD(get_NewDate)(_Out_ ABI::Windows::Foundation::DateTime* pValue) ;
        virtual _Check_return_ HRESULT put_NewDate(_In_ ABI::Windows::Foundation::DateTime value);

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class DatePickerFlyoutFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics>
    {

    friend class DatePickerFlyoutGenerated;
    friend class DatePickerFlyout;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_CalendarIdentifierProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DayVisibleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_MonthVisibleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_YearVisibleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_MinYearProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_MaxYearProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DayFormatProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_MonthFormatProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_YearFormatProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_CalendarIdentifierProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DayVisibleProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_MonthVisibleProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_YearVisibleProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_MinYearProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_MaxYearProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DayFormatProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_MonthFormatProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_YearFormatProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeCalendarIdentifierProperty();
        _Check_return_ static HRESULT InitializeDateProperty();
        _Check_return_ static HRESULT InitializeDayVisibleProperty();
        _Check_return_ static HRESULT InitializeMonthVisibleProperty();
        _Check_return_ static HRESULT InitializeYearVisibleProperty();
        _Check_return_ static HRESULT InitializeMinYearProperty();
        _Check_return_ static HRESULT InitializeMaxYearProperty();
        _Check_return_ static HRESULT InitializeDayFormatProperty();
        _Check_return_ static HRESULT InitializeMonthFormatProperty();
        _Check_return_ static HRESULT InitializeYearFormatProperty();

    };
    
    class __declspec(novtable) DatePickerFlyoutGenerated
        : public DatePickerFlyoutRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyout;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        DatePickerFlyoutGenerated() {};
        virtual ~DatePickerFlyoutGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_CalendarIdentifier)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_CalendarIdentifier)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_Date)(_Out_ ABI::Windows::Foundation::DateTime* pValue) ;
        IFACEMETHOD(put_Date)(_In_ ABI::Windows::Foundation::DateTime value) ;
        IFACEMETHOD(get_DayVisible)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_DayVisible)(_In_ BOOLEAN value) ;
        IFACEMETHOD(get_MonthVisible)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_MonthVisible)(_In_ BOOLEAN value) ;
        IFACEMETHOD(get_YearVisible)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_YearVisible)(_In_ BOOLEAN value) ;
        IFACEMETHOD(get_MinYear)(_Out_ ABI::Windows::Foundation::DateTime* pValue) ;
        IFACEMETHOD(put_MinYear)(_In_ ABI::Windows::Foundation::DateTime value) ;
        IFACEMETHOD(get_MaxYear)(_Out_ ABI::Windows::Foundation::DateTime* pValue) ;
        IFACEMETHOD(put_MaxYear)(_In_ ABI::Windows::Foundation::DateTime value) ;
        IFACEMETHOD(get_DayFormat)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_DayFormat)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_MonthFormat)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_MonthFormat)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_YearFormat)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_YearFormat)(_In_opt_ HSTRING value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ShowAtAsync)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>*>** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_DatePicked)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_DatePicked)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IPickerFlyoutBaseOverrides
        IFACEMETHOD(OnConfirmed)();
        virtual _Check_return_ HRESULT OnConfirmedImpl();
        IFACEMETHOD(ShouldShowConfirmationButtons)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue);

        // IFlyoutBaseOverrides
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        virtual _Check_return_ HRESULT CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgs*>> m_DatePickedEventSource;
    };
    class DatePickerFlyoutItemFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
    {

    friend class DatePickerFlyoutItemGenerated;
    friend class DatePickerFlyoutItem;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_PrimaryTextProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SecondaryTextProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_PrimaryTextProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SecondaryTextProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializePrimaryTextProperty();
        _Check_return_ static HRESULT InitializeSecondaryTextProperty();

    };
    
    class __declspec(novtable) DatePickerFlyoutItemGenerated
        : public DatePickerFlyoutItemRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItem;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyoutItem, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        DatePickerFlyoutItemGenerated() {};
        virtual ~DatePickerFlyoutItemGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_PrimaryText)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_PrimaryText)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_SecondaryText)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_SecondaryText)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_Type)(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(GetCustomProperty)(_In_ HSTRING name, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue) override;
        IFACEMETHOD(GetIndexedProperty)(_In_ HSTRING name, _In_ ABI::Windows::UI::Xaml::Interop::TypeName type, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue) override;
        IFACEMETHOD(GetStringRepresentation)(_Out_ HSTRING* pReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_TypeImpl(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class DatePickerFlyoutPresenterFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics>
    {

    friend class DatePickerFlyoutPresenterGenerated;
    friend class DatePickerFlyoutPresenter;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_IsDefaultShadowEnabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_IsDefaultShadowEnabledProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeIsDefaultShadowEnabledProperty();

    };
    
    class __declspec(novtable) DatePickerFlyoutPresenterGenerated
        : public DatePickerFlyoutPresenterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyoutPresenter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        DatePickerFlyoutPresenterGenerated() {};
        virtual ~DatePickerFlyoutPresenterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_IsDefaultShadowEnabled)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_IsDefaultShadowEnabled)(_In_ BOOLEAN value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class ItemsPickedEventArgsFactory
        :
        public wrl::AgileActivationFactory<>
    {

    friend class ItemsPickedEventArgsGenerated;
    friend class ItemsPickedEventArgs;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_AddedItemsProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_RemovedItemsProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeAddedItemsProperty();
        _Check_return_ static HRESULT InitializeRemovedItemsProperty();

    };
    
    class __declspec(novtable) ItemsPickedEventArgsGenerated
        : public ItemsPickedEventArgsRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_ItemsPickedEventArgs, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        ItemsPickedEventArgsGenerated() {};
        virtual ~ItemsPickedEventArgsGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_AddedItems)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue) ;
        virtual _Check_return_ HRESULT put_AddedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue);
        IFACEMETHOD(get_RemovedItems)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue) ;
        virtual _Check_return_ HRESULT put_RemovedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue);

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class ListPickerFlyoutFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics>
    {

    friend class ListPickerFlyoutGenerated;
    friend class ListPickerFlyout;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_ItemsSourceProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ItemTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DisplayMemberPathProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectionModeProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedIndexProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedItemProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedValueProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedValuePathProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemsSourceProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemTemplateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DisplayMemberPathProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectionModeProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedIndexProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedItemProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedValueProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedValuePathProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedItemsProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeItemsSourceProperty();
        _Check_return_ static HRESULT InitializeItemTemplateProperty();
        _Check_return_ static HRESULT InitializeDisplayMemberPathProperty();
        _Check_return_ static HRESULT InitializeSelectionModeProperty();
        _Check_return_ static HRESULT InitializeSelectedIndexProperty();
        _Check_return_ static HRESULT InitializeSelectedItemProperty();
        _Check_return_ static HRESULT InitializeSelectedValueProperty();
        _Check_return_ static HRESULT InitializeSelectedValuePathProperty();
        _Check_return_ static HRESULT InitializeSelectedItemsProperty();

        // Property changed event handler.
        _Check_return_ static HRESULT OnPropertyChanged(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender, _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs);
    };
    
    class __declspec(novtable) ListPickerFlyoutGenerated
        : public ListPickerFlyoutRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyout;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        ListPickerFlyoutGenerated() {};
        virtual ~ListPickerFlyoutGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_ItemsSource)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_ItemsSource)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_ItemTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_ItemTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;
        IFACEMETHOD(get_DisplayMemberPath)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_DisplayMemberPath)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_SelectionMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode* pValue) ;
        IFACEMETHOD(put_SelectionMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) ;
        IFACEMETHOD(get_SelectedIndex)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_SelectedIndex)(_In_ INT value) ;
        IFACEMETHOD(get_SelectedItem)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_SelectedItem)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_SelectedValue)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_SelectedValue)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_SelectedValuePath)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_SelectedValuePath)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_SelectedItems)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ShowAtAsync)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::Collections::IVectorView<IInspectable*>*>** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_ItemsPicked)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_ItemsPicked)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IPickerFlyoutBaseOverrides
        IFACEMETHOD(OnConfirmed)();
        virtual _Check_return_ HRESULT OnConfirmedImpl();
        IFACEMETHOD(ShouldShowConfirmationButtons)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue);

        // IFlyoutBaseOverrides
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        virtual _Check_return_ HRESULT CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs*>> m_ItemsPickedEventSource;
    };
    class ListPickerFlyoutPresenterFactory
        :
        public wrl::AgileActivationFactory<>
    {

    friend class ListPickerFlyoutPresenterGenerated;
    friend class ListPickerFlyoutPresenter;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemsHostProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeItemsHostProperty();

    };
    
    class __declspec(novtable) ListPickerFlyoutPresenterGenerated
        : public ListPickerFlyoutPresenterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyoutPresenter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        ListPickerFlyoutPresenterGenerated() {};
        virtual ~ListPickerFlyoutPresenterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        virtual _Check_return_ HRESULT get_ItemsHost(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IListViewBase** ppValue);
        virtual _Check_return_ HRESULT put_ItemsHost(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IListViewBase* pValue);

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    
    class __declspec(novtable) PickerConfirmedEventArgsGenerated
        : public PickerConfirmedEventArgsRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_PickerConfirmedEventArgs, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PickerConfirmedEventArgsGenerated() {};
        virtual ~PickerConfirmedEventArgsGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class PickerFlyoutFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics>
    {

    friend class PickerFlyoutGenerated;
    friend class PickerFlyout;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_ContentProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ConfirmationButtonsVisibleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ContentProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ConfirmationButtonsVisibleProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeContentProperty();
        _Check_return_ static HRESULT InitializeConfirmationButtonsVisibleProperty();

    };
    
    class __declspec(novtable) PickerFlyoutGenerated
        : public PickerFlyoutRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::PickerFlyout;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_PickerFlyout, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PickerFlyoutGenerated() {};
        virtual ~PickerFlyoutGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_Content)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) ;
        IFACEMETHOD(put_Content)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) ;
        IFACEMETHOD(get_ConfirmationButtonsVisible)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_ConfirmationButtonsVisible)(_In_ BOOLEAN value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ShowAtAsync)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<bool>** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_Confirmed)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_Confirmed)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IPickerFlyoutBaseOverrides
        IFACEMETHOD(OnConfirmed)();
        virtual _Check_return_ HRESULT OnConfirmedImpl();
        IFACEMETHOD(ShouldShowConfirmationButtons)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue);

        // IFlyoutBaseOverrides
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        virtual _Check_return_ HRESULT CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs*>> m_ConfirmedEventSource;
    };
    
    class __declspec(novtable) PickerFlyoutPresenterGenerated
        : public PickerFlyoutPresenterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::PickerFlyoutPresenter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_PickerFlyoutPresenter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PickerFlyoutPresenterGenerated() {};
        virtual ~PickerFlyoutPresenterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IContentControlOverrides
        IFACEMETHOD(OnContentChanged)(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        virtual _Check_return_ HRESULT OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        IFACEMETHOD(OnContentTemplateChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        virtual _Check_return_ HRESULT OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        IFACEMETHOD(OnContentTemplateSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);
        virtual _Check_return_ HRESULT OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class PivotFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IPivotFactory, ABI::Microsoft::UI::Xaml::Controls::IPivotStatics>
    {

    friend class PivotGenerated;
    friend class Pivot;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPivot** ppInstance);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_TitleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_TitleTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_LeftHeaderProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_LeftHeaderTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_RightHeaderProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_RightHeaderTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_HeaderTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedIndexProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedItemProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_IsLockedProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_HeaderFocusVisualPlacementProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_IsHeaderItemsCarouselEnabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.
        IFACEMETHOD(get_SlideInAnimationGroupProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(GetSlideInAnimationGroup)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup* pValue);
        IFACEMETHOD(SetSlideInAnimationGroup)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup value);
        _Check_return_ static HRESULT GetSlideInAnimationGroupStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup* pValue);
        _Check_return_ static HRESULT SetSlideInAnimationGroupStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup value);
        _Check_return_ static HRESULT GetSlideInElementInformationStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ static HRESULT SetSlideInElementInformationStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ IInspectable* pValue);

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_TitleProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_TitleTemplateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_LeftHeaderProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_LeftHeaderTemplateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_RightHeaderProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_RightHeaderTemplateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_HeaderTemplateProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedIndexProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedItemProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_IsLockedProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_HeaderFocusVisualPlacementProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_IsHeaderItemsCarouselEnabledProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SlideInAnimationGroupProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SlideInElementInformationProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeTitleProperty();
        _Check_return_ static HRESULT InitializeTitleTemplateProperty();
        _Check_return_ static HRESULT InitializeLeftHeaderProperty();
        _Check_return_ static HRESULT InitializeLeftHeaderTemplateProperty();
        _Check_return_ static HRESULT InitializeRightHeaderProperty();
        _Check_return_ static HRESULT InitializeRightHeaderTemplateProperty();
        _Check_return_ static HRESULT InitializeHeaderTemplateProperty();
        _Check_return_ static HRESULT InitializeSelectedIndexProperty();
        _Check_return_ static HRESULT InitializeSelectedItemProperty();
        _Check_return_ static HRESULT InitializeIsLockedProperty();
        _Check_return_ static HRESULT InitializeHeaderFocusVisualPlacementProperty();
        _Check_return_ static HRESULT InitializeIsHeaderItemsCarouselEnabledProperty();
        _Check_return_ static HRESULT InitializeSlideInAnimationGroupProperty();
        _Check_return_ static HRESULT InitializeSlideInElementInformationProperty();

        // Property changed event handler.
        _Check_return_ static HRESULT OnPropertyChanged(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender, _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs);
    };
    
    class __declspec(novtable) PivotGenerated
        : public PivotRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Pivot;
        friend class pctl::AggregableComObject< 
            ABI::Microsoft::UI::Xaml::Controls::Pivot,
            ABI::Microsoft::UI::Xaml::Controls::IPivot>;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotGenerated() {};
        virtual ~PivotGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_Title)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_Title)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_TitleTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_TitleTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;
        IFACEMETHOD(get_LeftHeader)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_LeftHeader)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_LeftHeaderTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_LeftHeaderTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;
        IFACEMETHOD(get_RightHeader)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_RightHeader)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_RightHeaderTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_RightHeaderTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;
        IFACEMETHOD(get_HeaderTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_HeaderTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;
        IFACEMETHOD(get_SelectedIndex)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_SelectedIndex)(_In_ INT value) ;
        IFACEMETHOD(get_SelectedItem)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_SelectedItem)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_IsLocked)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_IsLocked)(_In_ BOOLEAN value) ;
        IFACEMETHOD(get_HeaderFocusVisualPlacement)(_Out_ ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement* pValue) ;
        IFACEMETHOD(put_HeaderFocusVisualPlacement)(_In_ ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) ;
        IFACEMETHOD(get_IsHeaderItemsCarouselEnabled)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_IsHeaderItemsCarouselEnabled)(_In_ BOOLEAN value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_SelectionChanged)(_In_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_SelectionChanged)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_PivotItemLoading)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_PivotItemLoading)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_PivotItemLoaded)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_PivotItemLoaded)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_PivotItemUnloading)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_PivotItemUnloading)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_PivotItemUnloaded)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_PivotItemUnloaded)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IItemsControlOverrides
        IFACEMETHOD(IsItemItsOwnContainerOverride)(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsItemItsOwnContainerOverrideImpl(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetContainerForItemOverride)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue);
        virtual _Check_return_ HRESULT GetContainerForItemOverrideImpl(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue);
        IFACEMETHOD(ClearContainerForItemOverride)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem);
        virtual _Check_return_ HRESULT ClearContainerForItemOverrideImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem);
        IFACEMETHOD(PrepareContainerForItemOverride)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem);
        virtual _Check_return_ HRESULT PrepareContainerForItemOverrideImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem);
        IFACEMETHOD(OnItemsChanged)(_In_ IInspectable* pE);
        virtual _Check_return_ HRESULT OnItemsChangedImpl(_In_ IInspectable* pE);
        IFACEMETHOD(OnItemContainerStyleChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle);
        virtual _Check_return_ HRESULT OnItemContainerStyleChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle);
        IFACEMETHOD(OnItemContainerStyleSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector);
        virtual _Check_return_ HRESULT OnItemContainerStyleSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector);
        IFACEMETHOD(OnItemTemplateChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate);
        virtual _Check_return_ HRESULT OnItemTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate);
        IFACEMETHOD(OnItemTemplateSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector);
        virtual _Check_return_ HRESULT OnItemTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector);
        IFACEMETHOD(OnGroupStyleSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector);
        virtual _Check_return_ HRESULT OnGroupStyleSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector);

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods required by AggregableComObject to make this an aggregable class.
        virtual _Check_return_ HRESULT InitializeImpl(_In_opt_ IInspectable* pOuter = nullptr);

        // Event Sources
        Private::TrackerEventSource<ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler> m_SelectionChangedEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>> m_PivotItemLoadingEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>> m_PivotItemLoadedEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>> m_PivotItemUnloadingEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>> m_PivotItemUnloadedEventSource;
    };
    class PivotItemFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::IPivotItemFactory, ABI::Microsoft::UI::Xaml::Controls::IPivotItemStatics>
    {

    friend class PivotItemGenerated;
    friend class PivotItem;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem** ppInstance);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_HeaderProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_HeaderProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeHeaderProperty();

    };
    
    class __declspec(novtable) PivotItemGenerated
        : public PivotItemRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::PivotItem;
        friend class pctl::AggregableComObject< 
            ABI::Microsoft::UI::Xaml::Controls::PivotItem,
            ABI::Microsoft::UI::Xaml::Controls::IPivotItem>;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_PivotItem, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotItemGenerated() {};
        virtual ~PivotItemGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_Header)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_Header)(_In_opt_ IInspectable* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IContentControlOverrides
        IFACEMETHOD(OnContentChanged)(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        virtual _Check_return_ HRESULT OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        IFACEMETHOD(OnContentTemplateChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        virtual _Check_return_ HRESULT OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        IFACEMETHOD(OnContentTemplateSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);
        virtual _Check_return_ HRESULT OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods required by AggregableComObject to make this an aggregable class.
        virtual _Check_return_ HRESULT InitializeImpl(_In_opt_ IInspectable* pOuter = nullptr);

        // Event Sources
    };
    class TimePickedEventArgsFactory
        :
        public wrl::AgileActivationFactory<>
    {

    friend class TimePickedEventArgsGenerated;
    friend class TimePickedEventArgs;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_OldTimeProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_NewTimeProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeOldTimeProperty();
        _Check_return_ static HRESULT InitializeNewTimeProperty();

    };
    
    class __declspec(novtable) TimePickedEventArgsGenerated
        : public TimePickedEventArgsRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgs;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickedEventArgs, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        TimePickedEventArgsGenerated() {};
        virtual ~TimePickedEventArgsGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_OldTime)(_Out_ ABI::Windows::Foundation::TimeSpan* pValue) ;
        virtual _Check_return_ HRESULT put_OldTime(_In_ ABI::Windows::Foundation::TimeSpan value);
        IFACEMETHOD(get_NewTime)(_Out_ ABI::Windows::Foundation::TimeSpan* pValue) ;
        virtual _Check_return_ HRESULT put_NewTime(_In_ ABI::Windows::Foundation::TimeSpan value);

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class TimePickerFlyoutFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics>
    {

    friend class TimePickerFlyoutGenerated;
    friend class TimePickerFlyout;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_ClockIdentifierProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_TimeProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_MinuteIncrementProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ClockIdentifierProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_TimeProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_MinuteIncrementProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeClockIdentifierProperty();
        _Check_return_ static HRESULT InitializeTimeProperty();
        _Check_return_ static HRESULT InitializeMinuteIncrementProperty();

    };
    
    class __declspec(novtable) TimePickerFlyoutGenerated
        : public TimePickerFlyoutRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyout;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyout, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        TimePickerFlyoutGenerated() {};
        virtual ~TimePickerFlyoutGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_ClockIdentifier)(_Out_ HSTRING* pValue) ;
        IFACEMETHOD(put_ClockIdentifier)(_In_opt_ HSTRING value) ;
        IFACEMETHOD(get_Time)(_Out_ ABI::Windows::Foundation::TimeSpan* pValue) ;
        IFACEMETHOD(put_Time)(_In_ ABI::Windows::Foundation::TimeSpan value) ;
        IFACEMETHOD(get_MinuteIncrement)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_MinuteIncrement)(_In_ INT value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ShowAtAsync)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::TimeSpan>*>** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_TimePicked)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_TimePicked)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IPickerFlyoutBaseOverrides
        IFACEMETHOD(OnConfirmed)();
        virtual _Check_return_ HRESULT OnConfirmedImpl();
        IFACEMETHOD(ShouldShowConfirmationButtons)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue);

        // IFlyoutBaseOverrides
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        virtual _Check_return_ HRESULT CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgs*>> m_TimePickedEventSource;
    };
    class TimePickerFlyoutPresenterFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics>
    {

    friend class TimePickerFlyoutPresenterGenerated;
    friend class TimePickerFlyoutPresenter;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_IsDefaultShadowEnabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_IsDefaultShadowEnabledProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeIsDefaultShadowEnabledProperty();

    };
    
    class __declspec(novtable) TimePickerFlyoutPresenterGenerated
        : public TimePickerFlyoutPresenterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyoutPresenter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        TimePickerFlyoutPresenterGenerated() {};
        virtual ~TimePickerFlyoutPresenterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_IsDefaultShadowEnabled)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_IsDefaultShadowEnabled)(_In_ BOOLEAN value) ;

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
}
}}}}

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter,
    ABI::Microsoft::UI::Xaml::Data::IValueConverter,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    JumpListItemBackgroundConverterRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter,
    ABI::Microsoft::UI::Xaml::Data::IValueConverter,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::IDependencyObjectFactory>>
    JumpListItemForegroundConverterRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IControlFactory>>
    LoopingSelectorRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem,
    ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IContentControlFactory>>
    LoopingSelectorItemRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::ICanvasFactory>>
    LoopingSelectorPanelRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>>
    PickerFlyoutBaseRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem,
    ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides,
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IContentControlFactory>>
    PivotHeaderItemRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::ICanvasFactory>>
    PivotHeaderPanelRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel,
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo,
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides,
    ABI::Microsoft::UI::Xaml::IUIElementOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Controls::IPanelFactory>>
    PivotPanelRuntimeClass;

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Controls { namespace Primitives
{
    // Forward declarations.
    class JumpListItemBackgroundConverter;
    class JumpListItemForegroundConverter;
    class LoopingSelector;
    class LoopingSelectorItem;
    class LoopingSelectorPanel;
    class PickerFlyoutBase;
    class PivotHeaderItem;
    class PivotHeaderPanel;
    class PivotPanel;

    // Classes.
    class JumpListItemBackgroundConverterFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics>
    {

    friend class JumpListItemBackgroundConverterGenerated;
    friend class JumpListItemBackgroundConverter;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_EnabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DisabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_EnabledProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DisabledProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeEnabledProperty();
        _Check_return_ static HRESULT InitializeDisabledProperty();

    };
    
    class __declspec(novtable) JumpListItemBackgroundConverterGenerated
        : public JumpListItemBackgroundConverterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        JumpListItemBackgroundConverterGenerated() {};
        virtual ~JumpListItemBackgroundConverterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_Enabled)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) ;
        IFACEMETHOD(put_Enabled)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) ;
        IFACEMETHOD(get_Disabled)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) ;
        IFACEMETHOD(put_Disabled)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(Convert)(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue) override;
        IFACEMETHOD(ConvertBack)(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class JumpListItemForegroundConverterFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics>
    {

    friend class JumpListItemForegroundConverterGenerated;
    friend class JumpListItemForegroundConverter;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(ActivateInstance)(
            _Outptr_ IInspectable** ppInspectable);

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_EnabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_DisabledProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_EnabledProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_DisabledProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeEnabledProperty();
        _Check_return_ static HRESULT InitializeDisabledProperty();

    };
    
    class __declspec(novtable) JumpListItemForegroundConverterGenerated
        : public JumpListItemForegroundConverterRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverter;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        JumpListItemForegroundConverterGenerated() {};
        virtual ~JumpListItemForegroundConverterGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_Enabled)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) ;
        IFACEMETHOD(put_Enabled)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) ;
        IFACEMETHOD(get_Disabled)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) ;
        IFACEMETHOD(put_Disabled)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(Convert)(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue) override;
        IFACEMETHOD(ConvertBack)(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    class LoopingSelectorFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics>
    {

    friend class LoopingSelectorGenerated;
    friend class LoopingSelector;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();

        // Properties.

        // Dependency properties.
        IFACEMETHOD(get_ShouldLoopProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ItemsProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedIndexProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_SelectedItemProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ItemWidthProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ItemHeightProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(get_ItemTemplateProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ShouldLoopProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemsProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedIndexProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_SelectedItemProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemWidthProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemHeightProperty;
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_ItemTemplateProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeShouldLoopProperty();
        _Check_return_ static HRESULT InitializeItemsProperty();
        _Check_return_ static HRESULT InitializeSelectedIndexProperty();
        _Check_return_ static HRESULT InitializeSelectedItemProperty();
        _Check_return_ static HRESULT InitializeItemWidthProperty();
        _Check_return_ static HRESULT InitializeItemHeightProperty();
        _Check_return_ static HRESULT InitializeItemTemplateProperty();

        // Property changed event handler.
        _Check_return_ static HRESULT OnPropertyChanged(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender, _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs);
    };
    
    class __declspec(novtable) LoopingSelectorGenerated
        : public LoopingSelectorRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorGenerated() {};
        virtual ~LoopingSelectorGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_ShouldLoop)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(put_ShouldLoop)(_In_ BOOLEAN value) ;
        IFACEMETHOD(get_Items)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue) ;
        IFACEMETHOD(put_Items)(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue) ;
        IFACEMETHOD(get_SelectedIndex)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_SelectedIndex)(_In_ INT value) ;
        IFACEMETHOD(get_SelectedItem)(_Outptr_result_maybenull_ IInspectable** ppValue) ;
        IFACEMETHOD(put_SelectedItem)(_In_opt_ IInspectable* pValue) ;
        IFACEMETHOD(get_ItemWidth)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_ItemWidth)(_In_ INT value) ;
        IFACEMETHOD(get_ItemHeight)(_Out_ INT* pValue) ;
        IFACEMETHOD(put_ItemHeight)(_In_ INT value) ;
        IFACEMETHOD(get_ItemTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) ;
        IFACEMETHOD(put_ItemTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_SelectionChanged)(_In_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_SelectionChanged)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler> m_SelectionChangedEventSource;
    };
    
    class __declspec(novtable) LoopingSelectorItemGenerated
        : public LoopingSelectorItemRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorItem;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelectorItem, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorItemGenerated() {};
        virtual ~LoopingSelectorItemGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IContentControlOverrides
        IFACEMETHOD(OnContentChanged)(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        virtual _Check_return_ HRESULT OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        IFACEMETHOD(OnContentTemplateChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        virtual _Check_return_ HRESULT OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        IFACEMETHOD(OnContentTemplateSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);
        virtual _Check_return_ HRESULT OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    
    class __declspec(novtable) LoopingSelectorPanelGenerated
        : public LoopingSelectorPanelRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorPanel;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelectorPanel, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorPanelGenerated() {};
        virtual ~LoopingSelectorPanelGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_AreHorizontalSnapPointsRegular)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_AreVerticalSnapPointsRegular)(_Out_ BOOLEAN* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(GetIrregularSnapPoints)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue) override;
        IFACEMETHOD(GetRegularSnapPoints)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_HorizontalSnapPointsChanged)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_HorizontalSnapPointsChanged)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_VerticalSnapPointsChanged)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_VerticalSnapPointsChanged)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_AreHorizontalSnapPointsRegularImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_AreVerticalSnapPointsRegularImpl(_Out_ BOOLEAN* pValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>> m_HorizontalSnapPointsChangedEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>> m_VerticalSnapPointsChangedEventSource;
    };
    class PickerFlyoutBaseFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics>
    {

    friend class PickerFlyoutBaseGenerated;
    friend class PickerFlyoutBase;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase** ppInstance);

        // Properties.

        // Dependency properties.

        // Attached properties.
        IFACEMETHOD(get_TitleProperty)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue);
        IFACEMETHOD(GetTitle)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ HSTRING* pValue);
        IFACEMETHOD(SetTitle)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ HSTRING value);
        _Check_return_ static HRESULT GetTitleStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ HSTRING* pValue);
        _Check_return_ static HRESULT SetTitleStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ HSTRING value);

        // Static methods.

    private:

        // Properties' statics.
        static wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> s_TitleProperty;

        // Properties' initializers.
        _Check_return_ static HRESULT InitializeTitleProperty();

    };
    
    class __declspec(novtable) PickerFlyoutBaseGenerated
        : public PickerFlyoutBaseRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase;
        friend class pctl::AggregableComObject< 
            ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase,
            ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_PickerFlyoutBase, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PickerFlyoutBaseGenerated() {};
        virtual ~PickerFlyoutBaseGenerated() {};


        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(OnConfirmed)() override;
        virtual _Check_return_ HRESULT OnConfirmedProtected();
        IFACEMETHOD(ShouldShowConfirmationButtons)(_Out_ BOOLEAN* pReturnValue) override;
        virtual _Check_return_ HRESULT ShouldShowConfirmationButtonsProtected(_Out_ BOOLEAN* pReturnValue);

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IFlyoutBaseOverrides
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        virtual _Check_return_ HRESULT CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods required by AggregableComObject to make this an aggregable class.
        virtual _Check_return_ HRESULT InitializeImpl(_In_opt_ IInspectable* pOuter = nullptr);

        // Event Sources
    };
    class PivotHeaderItemFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory>
    {

    friend class PivotHeaderItemGenerated;
    friend class PivotHeaderItem;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem** ppInstance);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:

        // Properties' statics.

        // Properties' initializers.

    };
    
    class __declspec(novtable) PivotHeaderItemGenerated
        : public PivotHeaderItemRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem;
        friend class pctl::AggregableComObject< 
            ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem,
            ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderItem, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotHeaderItemGenerated() {};
        virtual ~PivotHeaderItemGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IContentControlOverrides
        IFACEMETHOD(OnContentChanged)(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        virtual _Check_return_ HRESULT OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent);
        IFACEMETHOD(OnContentTemplateChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        virtual _Check_return_ HRESULT OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate);
        IFACEMETHOD(OnContentTemplateSelectorChanged)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);
        virtual _Check_return_ HRESULT OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector);

        // IControlOverrides
        IFACEMETHOD(OnPointerEntered)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerPressed)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerMoved)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerReleased)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerExited)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCaptureLost)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerCanceled)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnPointerWheelChanged)(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE);
        IFACEMETHOD(OnTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE);
        IFACEMETHOD(OnDoubleTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnHolding)(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE);
        IFACEMETHOD(OnRightTapped)(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationInertiaStarting)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationStarted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationDelta)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE);
        IFACEMETHOD(OnManipulationCompleted)(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyDown)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnPreviewKeyUp)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE);
        IFACEMETHOD(OnGotFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnLostFocus)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE);
        IFACEMETHOD(OnCharacterReceived)(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        virtual _Check_return_ HRESULT OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE);
        IFACEMETHOD(OnDragEnter)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragLeave)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDragOver)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        IFACEMETHOD(OnDrop)(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);
        virtual _Check_return_ HRESULT OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE);

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods required by AggregableComObject to make this an aggregable class.
        virtual _Check_return_ HRESULT InitializeImpl(_In_opt_ IInspectable* pOuter = nullptr);

        // Event Sources
    };
    
    class __declspec(novtable) PivotHeaderPanelGenerated
        : public PivotHeaderPanelRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderPanel;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_PivotHeaderPanel, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotHeaderPanelGenerated() {};
        virtual ~PivotHeaderPanelGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
    };
    
    class __declspec(novtable) PivotPanelGenerated
        : public PivotPanelRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotPanel;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_PivotPanel, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotPanelGenerated() {};
        virtual ~PivotPanelGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();

        // Properties.
        IFACEMETHOD(get_AreHorizontalSnapPointsRegular)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_AreVerticalSnapPointsRegular)(_Out_ BOOLEAN* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(GetIrregularSnapPoints)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue) override;
        IFACEMETHOD(GetRegularSnapPoints)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue) override;

        // Virtual methods.

        // Protected methods.

        // Events.
        IFACEMETHOD(add_HorizontalSnapPointsChanged)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_HorizontalSnapPointsChanged)(_In_ EventRegistrationToken token);
        IFACEMETHOD(add_VerticalSnapPointsChanged)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        IFACEMETHOD(remove_VerticalSnapPointsChanged)(_In_ EventRegistrationToken token);

    protected:

        // Override Interfaces

        // IFrameworkElementOverrides
        IFACEMETHOD(MeasureOverride)(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(ArrangeOverride)(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        virtual _Check_return_ HRESULT ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue);
        IFACEMETHOD(OnApplyTemplate)();
        virtual _Check_return_ HRESULT OnApplyTemplateImpl();
        IFACEMETHOD(GoToElementStateCore)(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue);

        // IUIElementOverrides
        IFACEMETHOD(OnCreateAutomationPeer)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(OnDisconnectVisualChildren)();
        virtual _Check_return_ HRESULT OnDisconnectVisualChildrenImpl();
        IFACEMETHOD(FindSubElementsForTouchTargeting)(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        virtual _Check_return_ HRESULT FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue);
        IFACEMETHOD(GetChildrenInTabFocusOrder)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue);
        IFACEMETHOD(OnKeyboardAcceleratorInvoked)(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs);
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        virtual _Check_return_ HRESULT OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(OnBringIntoViewRequested)(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        virtual _Check_return_ HRESULT OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE);
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
        virtual _Check_return_ HRESULT PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_AreHorizontalSnapPointsRegularImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_AreVerticalSnapPointsRegularImpl(_Out_ BOOLEAN* pValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();

        // Event Sources
        Private::TrackerEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>> m_HorizontalSnapPointsChangedEventSource;
        Private::TrackerEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>> m_VerticalSnapPointsChangedEventSource;
    };
}
}}}}}

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IDatePickerFlyoutPresenterAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    DatePickerFlyoutPresenterAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IListPickerFlyoutPresenterAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    ListPickerFlyoutPresenterAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IItemContainerProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::ISelectionProvider,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    LoopingSelectorAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorItemAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::ISelectionItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    LoopingSelectorItemAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorItemDataAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IVirtualizedItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerFactory>>
    LoopingSelectorItemDataAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IPickerFlyoutPresenterAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    PickerFlyoutPresenterAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::ISelectionProvider,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory>>
    PivotAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    PivotItemAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::ISelectionItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Provider::IVirtualizedItemProvider,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory>>
    PivotItemDataAutomationPeerRuntimeClass;

typedef Private::ReferenceTrackerRuntimeClass<
    ABI::Microsoft::UI::Xaml::Automation::Peers::ITimePickerFlyoutPresenterAutomationPeer,
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides,
    wrl::ComposableBase<ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>>
    TimePickerFlyoutPresenterAutomationPeerRuntimeClass;

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Automation { namespace Peers
{
    // Forward declarations.
    class DatePickerFlyoutPresenterAutomationPeer;
    class ListPickerFlyoutPresenterAutomationPeer;
    class LoopingSelectorAutomationPeer;
    class LoopingSelectorItemAutomationPeer;
    class LoopingSelectorItemDataAutomationPeer;
    class PickerFlyoutPresenterAutomationPeer;
    class PivotAutomationPeer;
    class PivotItemAutomationPeer;
    class PivotItemDataAutomationPeer;
    class TimePickerFlyoutPresenterAutomationPeer;

    // Classes.
    
    class __declspec(novtable) DatePickerFlyoutPresenterAutomationPeerGenerated
        : public DatePickerFlyoutPresenterAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::DatePickerFlyoutPresenterAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_DatePickerFlyoutPresenterAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        DatePickerFlyoutPresenterAutomationPeerGenerated() {};
        virtual ~DatePickerFlyoutPresenterAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter* pOwner);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter* pOwner);

        // Event Sources
    };
    
    class __declspec(novtable) ListPickerFlyoutPresenterAutomationPeerGenerated
        : public ListPickerFlyoutPresenterAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::ListPickerFlyoutPresenterAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_ListPickerFlyoutPresenterAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        ListPickerFlyoutPresenterAutomationPeerGenerated() {};
        virtual ~ListPickerFlyoutPresenterAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter* pOwner);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter* pOwner);

        // Event Sources
    };
    
    class __declspec(novtable) LoopingSelectorAutomationPeerGenerated
        : public LoopingSelectorAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::LoopingSelectorAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_LoopingSelectorAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorAutomationPeerGenerated() {};
        virtual ~LoopingSelectorAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector* pOwner);

        // Properties.
        IFACEMETHOD(get_CanSelectMultiple)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_IsSelectionRequired)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_HorizontallyScrollable)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_HorizontalScrollPercent)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_HorizontalViewSize)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_VerticallyScrollable)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_VerticalScrollPercent)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_VerticalViewSize)(_Out_ DOUBLE* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(GetSelection)(_Out_ UINT* pReturnValueCount, _Out_writes_to_ptr_(*pReturnValueCount) ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple*** ppReturnValue) override;
        IFACEMETHOD(FindItemByProperty)(_In_opt_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple* pStartAfter, _In_opt_ ABI::Microsoft::UI::Xaml::Automation::IAutomationProperty* pAutomationProperty, _In_opt_ IInspectable* pValue, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppReturnValue) override;
        IFACEMETHOD(Scroll)(_In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount horizontalAmount, _In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount verticalAmount) override;
        IFACEMETHOD(SetScrollPercent)(_In_ DOUBLE horizontalPercent, _In_ DOUBLE verticalPercent) override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_CanSelectMultipleImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_IsSelectionRequiredImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontallyScrollableImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontalScrollPercentImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontalViewSizeImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticallyScrollableImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticalScrollPercentImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticalViewSizeImpl(_Out_ DOUBLE* pValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector* pOwner);

        // Event Sources
    };
    
    class __declspec(novtable) LoopingSelectorItemAutomationPeerGenerated
        : public LoopingSelectorItemAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::LoopingSelectorItemAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_LoopingSelectorItemAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorItemAutomationPeerGenerated() {};
        virtual ~LoopingSelectorItemAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem* pOwner);

        // Properties.
        IFACEMETHOD(get_IsSelected)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_SelectionContainer)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ScrollIntoView)() override;
        IFACEMETHOD(AddToSelection)() override;
        IFACEMETHOD(RemoveFromSelection)() override;
        IFACEMETHOD(Select)() override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_IsSelectedImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_SelectionContainerImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem* pOwner);

        // Event Sources
    };
    
    class __declspec(novtable) LoopingSelectorItemDataAutomationPeerGenerated
        : public LoopingSelectorItemDataAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::LoopingSelectorItemDataAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_LoopingSelectorItemDataAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        LoopingSelectorItemDataAutomationPeerGenerated() {};
        virtual ~LoopingSelectorItemDataAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer* pParent);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(Realize)() override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer* pParent);

        // Event Sources
    };
    
    class __declspec(novtable) PickerFlyoutPresenterAutomationPeerGenerated
        : public PickerFlyoutPresenterAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::PickerFlyoutPresenterAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_PickerFlyoutPresenterAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PickerFlyoutPresenterAutomationPeerGenerated() {};
        virtual ~PickerFlyoutPresenterAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter* pOwner);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter* pOwner);

        // Event Sources
    };
    class PivotAutomationPeerFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeerFactory>
    {

    friend class PivotAutomationPeerGenerated;
    friend class PivotAutomationPeer;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstanceWithOwner)(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer** ppInstance);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:
        virtual _Check_return_ HRESULT CreateInstanceWithOwnerImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer** ppInstance);

        // Properties' statics.

        // Properties' initializers.

    };
    
    class __declspec(novtable) PivotAutomationPeerGenerated
        : public PivotAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::PivotAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_PivotAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotAutomationPeerGenerated() {};
        virtual ~PivotAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner);

        // Properties.
        IFACEMETHOD(get_CanSelectMultiple)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_IsSelectionRequired)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_HorizontallyScrollable)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_HorizontalScrollPercent)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_HorizontalViewSize)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_VerticallyScrollable)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_VerticalScrollPercent)(_Out_ DOUBLE* pValue) ;
        IFACEMETHOD(get_VerticalViewSize)(_Out_ DOUBLE* pValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(GetSelection)(_Out_ UINT* pReturnValueCount, _Out_writes_to_ptr_(*pReturnValueCount) ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple*** ppReturnValue) override;
        IFACEMETHOD(Scroll)(_In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount horizontalAmount, _In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount verticalAmount) override;
        IFACEMETHOD(SetScrollPercent)(_In_ DOUBLE horizontalPercent, _In_ DOUBLE verticalPercent) override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IItemsControlAutomationPeerOverrides
        IFACEMETHOD(OnCreateItemAutomationPeer)(_In_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IItemAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT OnCreateItemAutomationPeerImpl(_In_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IItemAutomationPeer** ppReturnValue);

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_CanSelectMultipleImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_IsSelectionRequiredImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontallyScrollableImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontalScrollPercentImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_HorizontalViewSizeImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticallyScrollableImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticalScrollPercentImpl(_Out_ DOUBLE* pValue) = 0;
        virtual _Check_return_ HRESULT get_VerticalViewSizeImpl(_Out_ DOUBLE* pValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner);

        // Event Sources
    };
    class PivotItemAutomationPeerFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemAutomationPeerFactory>
    {

    friend class PivotItemAutomationPeerGenerated;
    friend class PivotItemAutomationPeer;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstanceWithOwner)(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer** ppInstance);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:
        virtual _Check_return_ HRESULT CreateInstanceWithOwnerImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer** ppInstance);

        // Properties' statics.

        // Properties' initializers.

    };
    
    class __declspec(novtable) PivotItemAutomationPeerGenerated
        : public PivotItemAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::PivotItemAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_PivotItemAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotItemAutomationPeerGenerated() {};
        virtual ~PivotItemAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner);

        // Event Sources
    };
    class PivotItemDataAutomationPeerFactory
        :
        public wrl::AgileActivationFactory<ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeerFactory>
    {

    friend class PivotItemDataAutomationPeerGenerated;
    friend class PivotItemDataAutomationPeer;

    public:
         _Check_return_ HRESULT RuntimeClassInitialize();
         static _Check_return_ HRESULT EnsureProperties();
         static void ClearProperties();
        IFACEMETHOD(CreateInstanceWithParentAndItem)(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer** ppInstance);

        // Properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

    private:
        virtual _Check_return_ HRESULT CreateInstanceWithParentAndItemImpl(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer** ppInstance);

        // Properties' statics.

        // Properties' initializers.

    };
    
    class __declspec(novtable) PivotItemDataAutomationPeerGenerated
        : public PivotItemDataAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::PivotItemDataAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_PivotItemDataAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        PivotItemDataAutomationPeerGenerated() {};
        virtual ~PivotItemDataAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent);

        // Properties.
        IFACEMETHOD(get_IsSelected)(_Out_ BOOLEAN* pValue) ;
        IFACEMETHOD(get_SelectionContainer)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue) ;

        // Virtual properties.

        // Protected properties.

        // Methods.
        IFACEMETHOD(ScrollIntoView)() override;
        IFACEMETHOD(AddToSelection)() override;
        IFACEMETHOD(RemoveFromSelection)() override;
        IFACEMETHOD(Select)() override;
        IFACEMETHOD(Realize)() override;

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.
        virtual _Check_return_ HRESULT get_IsSelectedImpl(_Out_ BOOLEAN* pValue) = 0;
        virtual _Check_return_ HRESULT get_SelectionContainerImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue) = 0;

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent);

        // Event Sources
    };
    
    class __declspec(novtable) TimePickerFlyoutPresenterAutomationPeerGenerated
        : public TimePickerFlyoutPresenterAutomationPeerRuntimeClass
    {
        friend class ABI::Microsoft::UI::Xaml::Automation::Peers::TimePickerFlyoutPresenterAutomationPeer;
        WuxpInspectableClass(RuntimeClass_Microsoft_UI_Xaml_Automation_Peers_TimePickerFlyoutPresenterAutomationPeer, TrustLevel::BaseTrust);

    public:
        // Constructors/destructors.
        TimePickerFlyoutPresenterAutomationPeerGenerated() {};
        virtual ~TimePickerFlyoutPresenterAutomationPeerGenerated() {};

        _Check_return_ HRESULT RuntimeClassInitialize();
        _Check_return_ HRESULT RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter* pOwner);

        // Properties.

        // Virtual properties.

        // Protected properties.

        // Methods.

        // Virtual methods.

        // Protected methods.

        // Events.

    protected:

        // Override Interfaces

        // IAutomationPeerOverrides
        IFACEMETHOD(GetPatternCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetAcceleratorKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAccessKeyCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetAutomationControlTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue);
        IFACEMETHOD(GetAutomationIdCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetBoundingRectangleCore)(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        virtual _Check_return_ HRESULT GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue);
        IFACEMETHOD(GetChildrenCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(NavigateCore)(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetClassNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetClickablePointCore)(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        virtual _Check_return_ HRESULT GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue);
        IFACEMETHOD(GetHelpTextCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemStatusCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetItemTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetLabeledByCore)(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetLocalizedControlTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetNameCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetNameCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetOrientationCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        virtual _Check_return_ HRESULT GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue);
        IFACEMETHOD(HasKeyboardFocusCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsContentElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsControlElementCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsEnabledCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsKeyboardFocusableCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsOffscreenCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsPasswordCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsRequiredForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(SetFocusCore)();
        virtual _Check_return_ HRESULT SetFocusCoreImpl();
        IFACEMETHOD(GetPeerFromPointCore)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        virtual _Check_return_ HRESULT GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue);
        IFACEMETHOD(GetElementFromPointCore)(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetFocusedElementCore)(_Outptr_ IInspectable** ppReturnValue);
        virtual _Check_return_ HRESULT GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue);
        IFACEMETHOD(GetLiveSettingCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        virtual _Check_return_ HRESULT GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue);
        IFACEMETHOD(ShowContextMenuCore)();
        virtual _Check_return_ HRESULT ShowContextMenuCoreImpl();
        IFACEMETHOD(GetControlledPeersCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetAnnotationsCore)(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue);
        IFACEMETHOD(GetPositionInSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetPositionInSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetSizeOfSetCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLevelCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetLevelCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetLandmarkTypeCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        virtual _Check_return_ HRESULT GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue);
        IFACEMETHOD(GetLocalizedLandmarkTypeCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(IsPeripheralCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(IsDataValidForFormCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue);
        IFACEMETHOD(GetFullDescriptionCore)(_Out_ HSTRING* pReturnValue);
        virtual _Check_return_ HRESULT GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(GetDescribedByCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsToCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetFlowsFromCore)(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        virtual _Check_return_ HRESULT GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue);
        IFACEMETHOD(GetCultureCore)(_Out_ INT* pReturnValue);
        virtual _Check_return_ HRESULT GetCultureCoreImpl(_Out_ INT* pReturnValue);
        IFACEMETHOD(GetHeadingLevelCore)(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        virtual _Check_return_ HRESULT GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue);
        IFACEMETHOD(IsDialogCore)(_Out_ BOOLEAN* pReturnValue);
        virtual _Check_return_ HRESULT IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue);

    private:
        // Private Setters

        // Private properties.

        // Customized properties.

        // Initialization methods
        virtual _Check_return_ HRESULT InitializeImpl();
        virtual _Check_return_ HRESULT InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter* pOwner);

        // Event Sources
    };
}
}}}}}
