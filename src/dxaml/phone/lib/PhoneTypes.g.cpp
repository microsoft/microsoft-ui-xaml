// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"

#if DBG
const LPCWSTR DatePickedEventArgsRuntimeClass::s_typeName = L"DatePickedEventArgs";
const LPCWSTR DatePickerFlyoutRuntimeClass::s_typeName = L"DatePickerFlyout";
const LPCWSTR DatePickerFlyoutItemRuntimeClass::s_typeName = L"DatePickerFlyoutItem";
const LPCWSTR DatePickerFlyoutPresenterRuntimeClass::s_typeName = L"DatePickerFlyoutPresenter";
const LPCWSTR ItemsPickedEventArgsRuntimeClass::s_typeName = L"ItemsPickedEventArgs";
const LPCWSTR ListPickerFlyoutRuntimeClass::s_typeName = L"ListPickerFlyout";
const LPCWSTR ListPickerFlyoutPresenterRuntimeClass::s_typeName = L"ListPickerFlyoutPresenter";
const LPCWSTR PickerConfirmedEventArgsRuntimeClass::s_typeName = L"PickerConfirmedEventArgs";
const LPCWSTR PickerFlyoutRuntimeClass::s_typeName = L"PickerFlyout";
const LPCWSTR PickerFlyoutPresenterRuntimeClass::s_typeName = L"PickerFlyoutPresenter";
const LPCWSTR PivotRuntimeClass::s_typeName = L"Pivot";
const LPCWSTR PivotItemRuntimeClass::s_typeName = L"PivotItem";
const LPCWSTR TimePickedEventArgsRuntimeClass::s_typeName = L"TimePickedEventArgs";
const LPCWSTR TimePickerFlyoutRuntimeClass::s_typeName = L"TimePickerFlyout";
const LPCWSTR TimePickerFlyoutPresenterRuntimeClass::s_typeName = L"TimePickerFlyoutPresenter";
#endif

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Controls
{

_Check_return_ HRESULT 
DatePickedEventArgsGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
DatePickedEventArgsGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(DatePickedEventArgsFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP DatePickedEventArgsGenerated::get_OldDate(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickedEventArgsFactory::s_OldDateProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickedEventArgsGenerated::put_OldDate(_In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateDateTime(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickedEventArgsFactory::s_OldDateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickedEventArgsGenerated::get_NewDate(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickedEventArgsFactory::s_NewDateProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickedEventArgsGenerated::put_NewDate(_In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateDateTime(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickedEventArgsFactory::s_NewDateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickedEventArgsFactory::s_OldDateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickedEventArgsFactory::s_NewDateProperty;

// Initializers.
_Check_return_ HRESULT DatePickedEventArgsFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickedEventArgsFactory::EnsureProperties()
{
    IFC_RETURN(InitializeOldDateProperty());
    IFC_RETURN(InitializeNewDateProperty());

    return S_OK;
}

void DatePickedEventArgsFactory::ClearProperties()
{
        s_OldDateProperty.Reset();
        s_NewDateProperty.Reset();
}

IFACEMETHODIMP
DatePickedEventArgsFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs> datePickedEventArgs;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<DatePickedEventArgs>(&datePickedEventArgs));

    *ppInspectable = datePickedEventArgs.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
DatePickedEventArgsFactory::InitializeOldDateProperty()
{
    HRESULT hr = S_OK;

    if (!s_OldDateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"OldDate",
            L"Windows.Foundation.DateTime",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickedEventArgsFactory::s_OldDateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickedEventArgsFactory::InitializeNewDateProperty()
{
    HRESULT hr = S_OK;

    if (!s_NewDateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"NewDate",
            L"Windows.Foundation.DateTime",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickedEventArgsFactory::s_NewDateProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
DatePickerFlyoutGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
DatePickerFlyoutGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(DatePickerFlyoutFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_DatePickedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP DatePickerFlyoutGenerated::get_CalendarIdentifier(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_CalendarIdentifierProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_CalendarIdentifier(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_CalendarIdentifierProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_Date(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_DateProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_Date(_In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateDateTime(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_DateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_DayVisible(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_DayVisibleProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_DayVisible(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_DayVisibleProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_MonthVisible(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_MonthVisibleProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_MonthVisible(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_MonthVisibleProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_YearVisible(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_YearVisibleProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_YearVisible(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_YearVisibleProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_MinYear(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_MinYearProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_MinYear(_In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateDateTime(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_MinYearProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_MaxYear(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_MaxYearProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_MaxYear(_In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateDateTime(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_MaxYearProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_DayFormat(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_DayFormatProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_DayFormat(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_DayFormatProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_MonthFormat(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_MonthFormatProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_MonthFormat(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_MonthFormatProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::get_YearFormat(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutFactory::s_YearFormatProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::put_YearFormat(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutFactory::s_YearFormatProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP DatePickerFlyoutGenerated::add_DatePicked(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_DatePickedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::remove_DatePicked(_In_ EventRegistrationToken token)
{
    RRETURN(m_DatePickedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP DatePickerFlyoutGenerated::ShowAtAsync(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pTarget, "target");
    IFC(static_cast<DatePickerFlyout*>(this)->ShowAtAsyncImpl(pTarget, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP DatePickerFlyoutGenerated::OnConfirmed()
{
    HRESULT hr = S_OK;
    
    IFC(OnConfirmedImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutGenerated::OnConfirmedImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnConfirmed());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::ShouldShowConfirmationButtons(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ShouldShowConfirmationButtonsImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutGenerated::ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShouldShowConfirmationButtons(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CreatePresenterImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutGenerated::CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->CreatePresenter(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_CalendarIdentifierProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_DateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_DayVisibleProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_MonthVisibleProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_YearVisibleProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_MinYearProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_MaxYearProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_DayFormatProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_MonthFormatProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutFactory::s_YearFormatProperty;

// Initializers.
_Check_return_ HRESULT DatePickerFlyoutFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutFactory::EnsureProperties()
{
    IFC_RETURN(InitializeCalendarIdentifierProperty());
    IFC_RETURN(InitializeDateProperty());
    IFC_RETURN(InitializeDayVisibleProperty());
    IFC_RETURN(InitializeMonthVisibleProperty());
    IFC_RETURN(InitializeYearVisibleProperty());
    IFC_RETURN(InitializeMinYearProperty());
    IFC_RETURN(InitializeMaxYearProperty());
    IFC_RETURN(InitializeDayFormatProperty());
    IFC_RETURN(InitializeMonthFormatProperty());
    IFC_RETURN(InitializeYearFormatProperty());

    return S_OK;
}

void DatePickerFlyoutFactory::ClearProperties()
{
        s_CalendarIdentifierProperty.Reset();
        s_DateProperty.Reset();
        s_DayVisibleProperty.Reset();
        s_MonthVisibleProperty.Reset();
        s_YearVisibleProperty.Reset();
        s_MinYearProperty.Reset();
        s_MaxYearProperty.Reset();
        s_DayFormatProperty.Reset();
        s_MonthFormatProperty.Reset();
        s_YearFormatProperty.Reset();
}

IFACEMETHODIMP
DatePickerFlyoutFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> datePickerFlyout;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<DatePickerFlyout>(&datePickerFlyout));

    *ppInspectable = datePickerFlyout.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeCalendarIdentifierProperty()
{
    HRESULT hr = S_OK;

    if (!s_CalendarIdentifierProperty)
    {
        wrl::ComPtr<IInspectable> spCalendarIdentifierValue;
        IFC(DatePickerFlyout::GetDefaultCalendarIdentifier(&spCalendarIdentifierValue));

        IFC(Private::InitializeDependencyProperty(
            L"CalendarIdentifier",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spCalendarIdentifierValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_CalendarIdentifierProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeDateProperty()
{
    HRESULT hr = S_OK;

    if (!s_DateProperty)
    {
        wrl::ComPtr<IInspectable> spDateValue;
        IFC(DatePickerFlyout::GetDefaultDate(&spDateValue));

        IFC(Private::InitializeDependencyProperty(
            L"Date",
            L"Windows.Foundation.DateTime",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spDateValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_DateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeDayVisibleProperty()
{
    HRESULT hr = S_OK;

    if (!s_DayVisibleProperty)
    {
        wrl::ComPtr<IInspectable> spDayVisibleValue;
        IFC(DatePickerFlyout::GetDefaultDayVisible(&spDayVisibleValue));

        IFC(Private::InitializeDependencyProperty(
            L"DayVisible",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spDayVisibleValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_DayVisibleProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeMonthVisibleProperty()
{
    HRESULT hr = S_OK;

    if (!s_MonthVisibleProperty)
    {
        wrl::ComPtr<IInspectable> spMonthVisibleValue;
        IFC(DatePickerFlyout::GetDefaultMonthVisible(&spMonthVisibleValue));

        IFC(Private::InitializeDependencyProperty(
            L"MonthVisible",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spMonthVisibleValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_MonthVisibleProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeYearVisibleProperty()
{
    HRESULT hr = S_OK;

    if (!s_YearVisibleProperty)
    {
        wrl::ComPtr<IInspectable> spYearVisibleValue;
        IFC(DatePickerFlyout::GetDefaultYearVisible(&spYearVisibleValue));

        IFC(Private::InitializeDependencyProperty(
            L"YearVisible",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spYearVisibleValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_YearVisibleProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeMinYearProperty()
{
    HRESULT hr = S_OK;

    if (!s_MinYearProperty)
    {
        wrl::ComPtr<IInspectable> spMinYearValue;
        IFC(DatePickerFlyout::GetDefaultMinYear(&spMinYearValue));

        IFC(Private::InitializeDependencyProperty(
            L"MinYear",
            L"Windows.Foundation.DateTime",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spMinYearValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_MinYearProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeMaxYearProperty()
{
    HRESULT hr = S_OK;

    if (!s_MaxYearProperty)
    {
        wrl::ComPtr<IInspectable> spMaxYearValue;
        IFC(DatePickerFlyout::GetDefaultMaxYear(&spMaxYearValue));

        IFC(Private::InitializeDependencyProperty(
            L"MaxYear",
            L"Windows.Foundation.DateTime",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spMaxYearValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_MaxYearProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeDayFormatProperty()
{
    HRESULT hr = S_OK;

    if (!s_DayFormatProperty)
    {
        wrl::ComPtr<IInspectable> spDayFormatValue;
        IFC(DatePickerFlyout::GetDefaultDayFormat(&spDayFormatValue));

        IFC(Private::InitializeDependencyProperty(
            L"DayFormat",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spDayFormatValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_DayFormatProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeMonthFormatProperty()
{
    HRESULT hr = S_OK;

    if (!s_MonthFormatProperty)
    {
        wrl::ComPtr<IInspectable> spMonthFormatValue;
        IFC(DatePickerFlyout::GetDefaultMonthFormat(&spMonthFormatValue));

        IFC(Private::InitializeDependencyProperty(
            L"MonthFormat",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spMonthFormatValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_MonthFormatProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutFactory::InitializeYearFormatProperty()
{
    HRESULT hr = S_OK;

    if (!s_YearFormatProperty)
    {
        wrl::ComPtr<IInspectable> spYearFormatValue;
        IFC(DatePickerFlyout::GetDefaultYearFormat(&spYearFormatValue));

        IFC(Private::InitializeDependencyProperty(
            L"YearFormat",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyout,
            false, /* isAttached */
            spYearFormatValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutFactory::s_YearFormatProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP DatePickerFlyoutFactory::get_CalendarIdentifierProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_CalendarIdentifierProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_DateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_DayVisibleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DayVisibleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_MonthVisibleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_MonthVisibleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_YearVisibleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_YearVisibleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_MinYearProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_MinYearProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_MaxYearProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_MaxYearProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_DayFormatProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DayFormatProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_MonthFormatProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_MonthFormatProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutFactory::get_YearFormatProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_YearFormatProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
DatePickerFlyoutItemGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
DatePickerFlyoutItemGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(DatePickerFlyoutItemFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP DatePickerFlyoutItemGenerated::get_PrimaryText(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutItemFactory::s_PrimaryTextProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::put_PrimaryText(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutItemFactory::s_PrimaryTextProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::get_SecondaryText(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutItemFactory::s_SecondaryTextProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::put_SecondaryText(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutItemFactory::s_SecondaryTextProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::get_Type(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_TypeImpl(pValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP DatePickerFlyoutItemGenerated::GetCustomProperty(_In_ HSTRING name, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(name, "name");
    IFC(static_cast<DatePickerFlyoutItem*>(this)->GetCustomPropertyImpl(name, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::GetIndexedProperty(_In_ HSTRING name, _In_ ABI::Windows::UI::Xaml::Interop::TypeName type, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(name, "name");
    IFC(static_cast<DatePickerFlyoutItem*>(this)->GetIndexedPropertyImpl(name, type, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemGenerated::GetStringRepresentation(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(static_cast<DatePickerFlyoutItem*>(this)->GetStringRepresentationImpl(pReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutItemFactory::s_PrimaryTextProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutItemFactory::s_SecondaryTextProperty;

// Initializers.
_Check_return_ HRESULT DatePickerFlyoutItemFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutItemFactory::EnsureProperties()
{
    IFC_RETURN(InitializePrimaryTextProperty());
    IFC_RETURN(InitializeSecondaryTextProperty());

    return S_OK;
}

void DatePickerFlyoutItemFactory::ClearProperties()
{
        s_PrimaryTextProperty.Reset();
        s_SecondaryTextProperty.Reset();
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
DatePickerFlyoutItemFactory::InitializePrimaryTextProperty()
{
    HRESULT hr = S_OK;

    if (!s_PrimaryTextProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"PrimaryText",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyoutItem,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutItemFactory::s_PrimaryTextProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutItemFactory::InitializeSecondaryTextProperty()
{
    HRESULT hr = S_OK;

    if (!s_SecondaryTextProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SecondaryText",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyoutItem,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutItemFactory::s_SecondaryTextProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP DatePickerFlyoutItemFactory::get_PrimaryTextProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_PrimaryTextProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutItemFactory::get_SecondaryTextProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SecondaryTextProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
DatePickerFlyoutPresenterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
DatePickerFlyoutPresenterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(DatePickerFlyoutPresenterFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::get_IsDefaultShadowEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(DatePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::put_IsDefaultShadowEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(DatePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides
IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> DatePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty;

// Initializers.
_Check_return_ HRESULT DatePickerFlyoutPresenterFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterFactory::EnsureProperties()
{
    IFC_RETURN(InitializeIsDefaultShadowEnabledProperty());

    return S_OK;
}

void DatePickerFlyoutPresenterFactory::ClearProperties()
{
        s_IsDefaultShadowEnabledProperty.Reset();
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
DatePickerFlyoutPresenterFactory::InitializeIsDefaultShadowEnabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_IsDefaultShadowEnabledProperty)
    {
        wrl::ComPtr<IInspectable> spIsDefaultShadowEnabledValue;
        IFC(DatePickerFlyoutPresenter::GetDefaultIsDefaultShadowEnabled(&spIsDefaultShadowEnabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"IsDefaultShadowEnabled",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_DatePickerFlyoutPresenter,
            false, /* isAttached */
            spIsDefaultShadowEnabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &DatePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP DatePickerFlyoutPresenterFactory::get_IsDefaultShadowEnabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_IsDefaultShadowEnabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
ItemsPickedEventArgsGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
ItemsPickedEventArgsGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(ItemsPickedEventArgsFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP ItemsPickedEventArgsGenerated::get_AddedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ItemsPickedEventArgsFactory::s_AddedItemsProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ItemsPickedEventArgsGenerated::put_AddedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(ItemsPickedEventArgsFactory::s_AddedItemsProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ItemsPickedEventArgsGenerated::get_RemovedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ItemsPickedEventArgsFactory::s_RemovedItemsProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ItemsPickedEventArgsGenerated::put_RemovedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(ItemsPickedEventArgsFactory::s_RemovedItemsProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ItemsPickedEventArgsFactory::s_AddedItemsProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ItemsPickedEventArgsFactory::s_RemovedItemsProperty;

// Initializers.
_Check_return_ HRESULT ItemsPickedEventArgsFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ItemsPickedEventArgsFactory::EnsureProperties()
{
    IFC_RETURN(InitializeAddedItemsProperty());
    IFC_RETURN(InitializeRemovedItemsProperty());

    return S_OK;
}

void ItemsPickedEventArgsFactory::ClearProperties()
{
        s_AddedItemsProperty.Reset();
        s_RemovedItemsProperty.Reset();
}

IFACEMETHODIMP
ItemsPickedEventArgsFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs> itemsPickedEventArgs;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<ItemsPickedEventArgs>(&itemsPickedEventArgs));

    *ppInspectable = itemsPickedEventArgs.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
ItemsPickedEventArgsFactory::InitializeAddedItemsProperty()
{
    HRESULT hr = S_OK;

    if (!s_AddedItemsProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"AddedItems",
            L"Microsoft.UI.Xaml.Controls.ItemCollection",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ItemsPickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &ItemsPickedEventArgsFactory::s_AddedItemsProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ItemsPickedEventArgsFactory::InitializeRemovedItemsProperty()
{
    HRESULT hr = S_OK;

    if (!s_RemovedItemsProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"RemovedItems",
            L"Microsoft.UI.Xaml.Controls.ItemCollection",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ItemsPickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &ItemsPickedEventArgsFactory::s_RemovedItemsProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
ListPickerFlyoutGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
ListPickerFlyoutGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(ListPickerFlyoutFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_ItemsPickedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP ListPickerFlyoutGenerated::get_ItemsSource(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_ItemsSourceProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_ItemsSource(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_ItemsSourceProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_ItemTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_ItemTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_ItemTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_ItemTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_DisplayMemberPath(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_DisplayMemberPathProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_DisplayMemberPath(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_DisplayMemberPathProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectionMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectionModeProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_SelectionMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_SelectionModeProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectedIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectedIndexProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_SelectedIndex(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_SelectedIndexProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectedItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectedItemProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_SelectedItem(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_SelectedItemProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectedValue(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectedValueProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_SelectedValue(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_SelectedValueProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectedValuePath(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectedValuePathProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::put_SelectedValuePath(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(ListPickerFlyoutFactory::s_SelectedValuePathProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::get_SelectedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutFactory::s_SelectedItemsProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP ListPickerFlyoutGenerated::add_ItemsPicked(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_ItemsPickedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::remove_ItemsPicked(_In_ EventRegistrationToken token)
{
    RRETURN(m_ItemsPickedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP ListPickerFlyoutGenerated::ShowAtAsync(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::Collections::IVectorView<IInspectable*>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pTarget, "target");
    IFC(static_cast<ListPickerFlyout*>(this)->ShowAtAsyncImpl(pTarget, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP ListPickerFlyoutGenerated::OnConfirmed()
{
    HRESULT hr = S_OK;
    
    IFC(OnConfirmedImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutGenerated::OnConfirmedImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnConfirmed());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::ShouldShowConfirmationButtons(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ShouldShowConfirmationButtonsImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutGenerated::ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShouldShowConfirmationButtons(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CreatePresenterImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutGenerated::CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->CreatePresenter(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_ItemsSourceProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_ItemTemplateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_DisplayMemberPathProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectionModeProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectedIndexProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectedItemProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectedValueProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectedValuePathProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutFactory::s_SelectedItemsProperty;

// Initializers.
_Check_return_ HRESULT ListPickerFlyoutFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutFactory::EnsureProperties()
{
    IFC_RETURN(InitializeItemsSourceProperty());
    IFC_RETURN(InitializeItemTemplateProperty());
    IFC_RETURN(InitializeDisplayMemberPathProperty());
    IFC_RETURN(InitializeSelectionModeProperty());
    IFC_RETURN(InitializeSelectedIndexProperty());
    IFC_RETURN(InitializeSelectedItemProperty());
    IFC_RETURN(InitializeSelectedValueProperty());
    IFC_RETURN(InitializeSelectedValuePathProperty());
    IFC_RETURN(InitializeSelectedItemsProperty());

    return S_OK;
}

void ListPickerFlyoutFactory::ClearProperties()
{
        s_ItemsSourceProperty.Reset();
        s_ItemTemplateProperty.Reset();
        s_DisplayMemberPathProperty.Reset();
        s_SelectionModeProperty.Reset();
        s_SelectedIndexProperty.Reset();
        s_SelectedItemProperty.Reset();
        s_SelectedValueProperty.Reset();
        s_SelectedValuePathProperty.Reset();
        s_SelectedItemsProperty.Reset();
}

IFACEMETHODIMP
ListPickerFlyoutFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> listPickerFlyout;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<ListPickerFlyout>(&listPickerFlyout));

    *ppInspectable = listPickerFlyout.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeItemsSourceProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemsSourceProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemsSource",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_ItemsSourceProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeItemTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_ItemTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeDisplayMemberPathProperty()
{
    HRESULT hr = S_OK;

    if (!s_DisplayMemberPathProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"DisplayMemberPath",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_DisplayMemberPathProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectionModeProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectionModeProperty)
    {
        wrl::ComPtr<IInspectable> spSelectionModeValue;
        IFC(ListPickerFlyout::GetDefaultSelectionMode(&spSelectionModeValue));

        IFC(Private::InitializeDependencyProperty(
            L"SelectionMode",
            L"Microsoft.UI.Xaml.Controls.ListPickerFlyoutSelectionMode",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            spSelectionModeValue.Get(),  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectionModeProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectedIndexProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedIndexProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedIndex",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectedIndexProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectedItemProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedItemProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedItem",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectedItemProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectedValueProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedValueProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedValue",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectedValueProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectedValuePathProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedValuePathProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedValuePath",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectedValuePathProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutFactory::InitializeSelectedItemsProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedItemsProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedItems",
            L"Microsoft.UI.Xaml.Controls.ItemCollection",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&ListPickerFlyoutFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &ListPickerFlyoutFactory::s_SelectedItemsProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Property changed event handler
HRESULT ListPickerFlyoutFactory::OnPropertyChanged(
    _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender,
    _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spSenderAsDO(pSender);
    wrl::ComPtr<IListPickerFlyout> spListPickerFlyout;

    IFC(spSenderAsDO.As(&spListPickerFlyout));
    IFC(static_cast<ListPickerFlyout*>(spListPickerFlyout.Get())->OnPropertyChanged(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP ListPickerFlyoutFactory::get_ItemsSourceProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemsSourceProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_ItemTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_DisplayMemberPathProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DisplayMemberPathProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_SelectionModeProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectionModeProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_SelectedIndexProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedIndexProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_SelectedItemProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedItemProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_SelectedValueProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedValueProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutFactory::get_SelectedValuePathProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedValuePathProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
ListPickerFlyoutPresenterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
ListPickerFlyoutPresenterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(ListPickerFlyoutPresenterFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::get_ItemsHost(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IListViewBase** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(ListPickerFlyoutPresenterFactory::s_ItemsHostProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::put_ItemsHost(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IListViewBase* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(ListPickerFlyoutPresenterFactory::s_ItemsHostProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides
IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> ListPickerFlyoutPresenterFactory::s_ItemsHostProperty;

// Initializers.
_Check_return_ HRESULT ListPickerFlyoutPresenterFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterFactory::EnsureProperties()
{
    IFC_RETURN(InitializeItemsHostProperty());

    return S_OK;
}

void ListPickerFlyoutPresenterFactory::ClearProperties()
{
        s_ItemsHostProperty.Reset();
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
ListPickerFlyoutPresenterFactory::InitializeItemsHostProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemsHostProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemsHost",
            L"Microsoft.UI.Xaml.Controls.ListViewBase",
            RuntimeClass_Microsoft_UI_Xaml_Controls_ListPickerFlyoutPresenter,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &ListPickerFlyoutPresenterFactory::s_ItemsHostProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
PickerConfirmedEventArgsGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
PickerConfirmedEventArgsGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

// Properties.

// Events.

// Methods

// Overrides

_Check_return_ HRESULT 
PickerFlyoutGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
PickerFlyoutGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PickerFlyoutFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_ConfirmedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP PickerFlyoutGenerated::get_Content(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PickerFlyoutFactory::s_ContentProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::put_Content(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(PickerFlyoutFactory::s_ContentProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::get_ConfirmationButtonsVisible(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PickerFlyoutFactory::s_ConfirmationButtonsVisibleProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::put_ConfirmationButtonsVisible(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(PickerFlyoutFactory::s_ConfirmationButtonsVisibleProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP PickerFlyoutGenerated::add_Confirmed(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_ConfirmedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::remove_Confirmed(_In_ EventRegistrationToken token)
{
    RRETURN(m_ConfirmedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP PickerFlyoutGenerated::ShowAtAsync(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<bool>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pTarget, "target");
    IFC(static_cast<PickerFlyout*>(this)->ShowAtAsyncImpl(pTarget, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP PickerFlyoutGenerated::OnConfirmed()
{
    HRESULT hr = S_OK;
    
    IFC(OnConfirmedImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutGenerated::OnConfirmedImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnConfirmed());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::ShouldShowConfirmationButtons(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ShouldShowConfirmationButtonsImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutGenerated::ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShouldShowConfirmationButtons(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CreatePresenterImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutGenerated::CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->CreatePresenter(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PickerFlyoutFactory::s_ContentProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PickerFlyoutFactory::s_ConfirmationButtonsVisibleProperty;

// Initializers.
_Check_return_ HRESULT PickerFlyoutFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutFactory::EnsureProperties()
{
    IFC_RETURN(InitializeContentProperty());
    IFC_RETURN(InitializeConfirmationButtonsVisibleProperty());

    return S_OK;
}

void PickerFlyoutFactory::ClearProperties()
{
        s_ContentProperty.Reset();
        s_ConfirmationButtonsVisibleProperty.Reset();
}

IFACEMETHODIMP
PickerFlyoutFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout> pickerFlyout;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<PickerFlyout>(&pickerFlyout));

    *ppInspectable = pickerFlyout.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
PickerFlyoutFactory::InitializeContentProperty()
{
    HRESULT hr = S_OK;

    if (!s_ContentProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"Content",
            L"Microsoft.UI.Xaml.UIElement",
            RuntimeClass_Microsoft_UI_Xaml_Controls_PickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PickerFlyoutFactory::s_ContentProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PickerFlyoutFactory::InitializeConfirmationButtonsVisibleProperty()
{
    HRESULT hr = S_OK;

    if (!s_ConfirmationButtonsVisibleProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ConfirmationButtonsVisible",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_PickerFlyout,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PickerFlyoutFactory::s_ConfirmationButtonsVisibleProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP PickerFlyoutFactory::get_ContentProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ContentProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutFactory::get_ConfirmationButtonsVisibleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ConfirmationButtonsVisibleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
PickerFlyoutPresenterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
PickerFlyoutPresenterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentChangedImpl(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentChanged(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnContentTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateChangedImpl(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateChanged(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnContentTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateSelectorChangedImpl(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateSelectorChanged(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
PivotGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl(nullptr));
}

_Check_return_ HRESULT
PivotGenerated::InitializeImpl(_In_opt_ IInspectable* pOuter)
{
    HRESULT hr = S_OK;

    UNREFERENCED_PARAMETER(pOuter);

    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_SelectionChangedEventSource)); 
    IFC_RETURN(RegisterEventSource(m_PivotItemLoadingEventSource)); 
    IFC_RETURN(RegisterEventSource(m_PivotItemLoadedEventSource)); 
    IFC_RETURN(RegisterEventSource(m_PivotItemUnloadingEventSource)); 
    IFC_RETURN(RegisterEventSource(m_PivotItemUnloadedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP PivotGenerated::get_Title(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_TitleProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_Title(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_TitleProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_TitleTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_TitleTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_TitleTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(PivotFactory::s_TitleTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_LeftHeader(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_LeftHeaderProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_LeftHeader(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_LeftHeaderProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_LeftHeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_LeftHeaderTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_LeftHeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(PivotFactory::s_LeftHeaderTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_RightHeader(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_RightHeaderProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_RightHeader(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_RightHeaderProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_RightHeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_RightHeaderTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_RightHeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(PivotFactory::s_RightHeaderTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_HeaderTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(PivotFactory::s_HeaderTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_SelectedIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_SelectedIndexProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_SelectedIndex(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_SelectedIndexProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_SelectedItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_SelectedItemProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_SelectedItem(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_SelectedItemProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_IsLocked(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_IsLockedProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_IsLocked(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_IsLockedProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_HeaderFocusVisualPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_HeaderFocusVisualPlacementProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_HeaderFocusVisualPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_HeaderFocusVisualPlacementProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::get_IsHeaderItemsCarouselEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotFactory::s_IsHeaderItemsCarouselEnabledProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::put_IsHeaderItemsCarouselEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(PivotFactory::s_IsHeaderItemsCarouselEnabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP PivotGenerated::add_SelectionChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_SelectionChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::remove_SelectionChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_SelectionChangedEventSource.Remove(token));
}

IFACEMETHODIMP PivotGenerated::add_PivotItemLoading(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_PivotItemLoadingEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::remove_PivotItemLoading(_In_ EventRegistrationToken token)
{
    RRETURN(m_PivotItemLoadingEventSource.Remove(token));
}

IFACEMETHODIMP PivotGenerated::add_PivotItemLoaded(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_PivotItemLoadedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::remove_PivotItemLoaded(_In_ EventRegistrationToken token)
{
    RRETURN(m_PivotItemLoadedEventSource.Remove(token));
}

IFACEMETHODIMP PivotGenerated::add_PivotItemUnloading(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_PivotItemUnloadingEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::remove_PivotItemUnloading(_In_ EventRegistrationToken token)
{
    RRETURN(m_PivotItemUnloadingEventSource.Remove(token));
}

IFACEMETHODIMP PivotGenerated::add_PivotItemUnloaded(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Pivot*, ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_PivotItemUnloadedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::remove_PivotItemUnloaded(_In_ EventRegistrationToken token)
{
    RRETURN(m_PivotItemUnloadedEventSource.Remove(token));
}


// Methods

// Overrides
IFACEMETHODIMP PivotGenerated::IsItemItsOwnContainerOverride(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsItemItsOwnContainerOverrideImpl(pItem, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::IsItemItsOwnContainerOverrideImpl(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsItemItsOwnContainerOverride(pItem, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::GetContainerForItemOverride(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetContainerForItemOverrideImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::GetContainerForItemOverrideImpl(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetContainerForItemOverride(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::ClearContainerForItemOverride(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pElement, "pElement");
    
    IFC(ClearContainerForItemOverrideImpl(pElement, pItem));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::ClearContainerForItemOverrideImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ClearContainerForItemOverride(pElement, pItem));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::PrepareContainerForItemOverride(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pElement, "pElement");
    
    IFC(PrepareContainerForItemOverrideImpl(pElement, pItem));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::PrepareContainerForItemOverrideImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PrepareContainerForItemOverride(pElement, pItem));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnItemsChanged(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnItemsChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnItemsChangedImpl(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnItemsChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnItemContainerStyleChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle)
{
    HRESULT hr = S_OK;
    
    IFC(OnItemContainerStyleChangedImpl(pOldItemContainerStyle, pNewItemContainerStyle));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnItemContainerStyleChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnItemContainerStyleChanged(pOldItemContainerStyle, pNewItemContainerStyle));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnItemContainerStyleSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnItemContainerStyleSelectorChangedImpl(pOldItemContainerStyleSelector, pNewItemContainerStyleSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnItemContainerStyleSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnItemContainerStyleSelectorChanged(pOldItemContainerStyleSelector, pNewItemContainerStyleSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnItemTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate)
{
    HRESULT hr = S_OK;
    
    IFC(OnItemTemplateChangedImpl(pOldItemTemplate, pNewItemTemplate));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnItemTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnItemTemplateChanged(pOldItemTemplate, pNewItemTemplate));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnItemTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnItemTemplateSelectorChangedImpl(pOldItemTemplateSelector, pNewItemTemplateSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnItemTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnItemTemplateSelectorChanged(pOldItemTemplateSelector, pNewItemTemplateSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnGroupStyleSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnGroupStyleSelectorChangedImpl(pOldGroupStyleSelector, pNewGroupStyleSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnGroupStyleSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGroupStyleSelectorChanged(pOldGroupStyleSelector, pNewGroupStyleSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_TitleProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_TitleTemplateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_LeftHeaderProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_LeftHeaderTemplateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_RightHeaderProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_RightHeaderTemplateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_HeaderTemplateProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_SelectedIndexProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_SelectedItemProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_IsLockedProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_HeaderFocusVisualPlacementProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_IsHeaderItemsCarouselEnabledProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_SlideInAnimationGroupProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotFactory::s_SlideInElementInformationProperty;

// Initializers.
_Check_return_ HRESULT PivotFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotFactory::EnsureProperties()
{
    IFC_RETURN(InitializeTitleProperty());
    IFC_RETURN(InitializeTitleTemplateProperty());
    IFC_RETURN(InitializeLeftHeaderProperty());
    IFC_RETURN(InitializeLeftHeaderTemplateProperty());
    IFC_RETURN(InitializeRightHeaderProperty());
    IFC_RETURN(InitializeRightHeaderTemplateProperty());
    IFC_RETURN(InitializeHeaderTemplateProperty());
    IFC_RETURN(InitializeSelectedIndexProperty());
    IFC_RETURN(InitializeSelectedItemProperty());
    IFC_RETURN(InitializeIsLockedProperty());
    IFC_RETURN(InitializeHeaderFocusVisualPlacementProperty());
    IFC_RETURN(InitializeIsHeaderItemsCarouselEnabledProperty());
    IFC_RETURN(InitializeSlideInAnimationGroupProperty());
    IFC_RETURN(InitializeSlideInElementInformationProperty());

    return S_OK;
}

void PivotFactory::ClearProperties()
{
        s_TitleProperty.Reset();
        s_TitleTemplateProperty.Reset();
        s_LeftHeaderProperty.Reset();
        s_LeftHeaderTemplateProperty.Reset();
        s_RightHeaderProperty.Reset();
        s_RightHeaderTemplateProperty.Reset();
        s_HeaderTemplateProperty.Reset();
        s_SelectedIndexProperty.Reset();
        s_SelectedItemProperty.Reset();
        s_IsLockedProperty.Reset();
        s_HeaderFocusVisualPlacementProperty.Reset();
        s_IsHeaderItemsCarouselEnabledProperty.Reset();
        s_SlideInAnimationGroupProperty.Reset();
        s_SlideInElementInformationProperty.Reset();
}

IFACEMETHODIMP PivotFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPivot** ppInstance)
{
    HRESULT hr = S_OK;

    IFC((pctl::AggregableComObject<
            ABI::Microsoft::UI::Xaml::Controls::Pivot,
            ABI::Microsoft::UI::Xaml::Controls::IPivot>::CreateInstance(
            pOuter,
            ppInner,
            ppInstance)));

Cleanup:
    RRETURN(hr);
}
// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
PivotFactory::InitializeTitleProperty()
{
    HRESULT hr = S_OK;

    if (!s_TitleProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"Title",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_TitleProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeTitleTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_TitleTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"TitleTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_TitleTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeLeftHeaderProperty()
{
    HRESULT hr = S_OK;

    if (!s_LeftHeaderProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"LeftHeader",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_LeftHeaderProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeLeftHeaderTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_LeftHeaderTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"LeftHeaderTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_LeftHeaderTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeRightHeaderProperty()
{
    HRESULT hr = S_OK;

    if (!s_RightHeaderProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"RightHeader",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_RightHeaderProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeRightHeaderTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_RightHeaderTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"RightHeaderTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_RightHeaderTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeHeaderTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_HeaderTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"HeaderTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_HeaderTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeSelectedIndexProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedIndexProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedIndex",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_SelectedIndexProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeSelectedItemProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedItemProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedItem",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_SelectedItemProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeIsLockedProperty()
{
    HRESULT hr = S_OK;

    if (!s_IsLockedProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"IsLocked",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_IsLockedProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeHeaderFocusVisualPlacementProperty()
{
    HRESULT hr = S_OK;

    if (!s_HeaderFocusVisualPlacementProperty)
    {
        wrl::ComPtr<IInspectable> spHeaderFocusVisualPlacementValue;
        IFC(Pivot::GetDefaultHeaderFocusVisualPlacement(&spHeaderFocusVisualPlacementValue));

        IFC(Private::InitializeDependencyProperty(
            L"HeaderFocusVisualPlacement",
            L"Microsoft.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            spHeaderFocusVisualPlacementValue.Get(),  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_HeaderFocusVisualPlacementProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeIsHeaderItemsCarouselEnabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_IsHeaderItemsCarouselEnabledProperty)
    {
        wrl::ComPtr<IInspectable> spIsHeaderItemsCarouselEnabledValue;
        IFC(Pivot::GetDefaultIsHeaderItemsCarouselEnabled(&spIsHeaderItemsCarouselEnabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"IsHeaderItemsCarouselEnabled",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            false, /* isAttached */
            spIsHeaderItemsCarouselEnabledValue.Get(),  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&PivotFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_IsHeaderItemsCarouselEnabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Property changed event handler
HRESULT PivotFactory::OnPropertyChanged(
    _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender,
    _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spSenderAsDO(pSender);
    wrl::ComPtr<IPivot> spPivot;

    IFC(spSenderAsDO.As(&spPivot));
    IFC(static_cast<Pivot*>(spPivot.Get())->OnPropertyChanged(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP PivotFactory::get_TitleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_TitleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_TitleTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_TitleTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_LeftHeaderProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_LeftHeaderProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_LeftHeaderTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_LeftHeaderTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_RightHeaderProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_RightHeaderProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_RightHeaderTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_RightHeaderTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_HeaderTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_HeaderTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_SelectedIndexProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedIndexProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_SelectedItemProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedItemProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_IsLockedProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_IsLockedProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_HeaderFocusVisualPlacementProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_HeaderFocusVisualPlacementProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_IsHeaderItemsCarouselEnabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_IsHeaderItemsCarouselEnabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.
_Check_return_ HRESULT
PivotFactory::InitializeSlideInAnimationGroupProperty()
{
    HRESULT hr = S_OK;

    if (!s_SlideInAnimationGroupProperty)
    {
        wrl::ComPtr<IInspectable> spSlideInAnimationGroupValue;
        IFC(Pivot::GetDefaultSlideInAnimationGroup(&spSlideInAnimationGroupValue));

        IFC(Private::InitializeDependencyProperty(
            L"SlideInAnimationGroup",
            L"Microsoft.UI.Xaml.Controls.PivotSlideInAnimationGroup",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            true, /* isAttached */
            spSlideInAnimationGroupValue.Get(),  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&Pivot::OnAttachedPropertyChanged).Get(),  /* property changed callback */
            &PivotFactory::s_SlideInAnimationGroupProperty));
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::get_SlideInAnimationGroupProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(s_SlideInAnimationGroupProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotFactory::SetSlideInAnimationGroup(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup value)
{
    RRETURN(PivotFactory::SetSlideInAnimationGroupStatic(pElement, value));
}

IFACEMETHODIMP PivotFactory::GetSlideInAnimationGroup(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup* pValue)
{
    RRETURN(PivotFactory::GetSlideInAnimationGroupStatic(pElement, pValue));
}

_Check_return_ HRESULT
PivotFactory::SetSlideInAnimationGroupStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spElementAsDO;
    
    ARG_NOTNULL(pElement, "pElement");
    
    IFC(InitializeSlideInAnimationGroupProperty());
    
    IFC(pElement->QueryInterface(__uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject), &spElementAsDO));
    IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup>(value, &spValueAsII));
    IFC(spElementAsDO->SetValue(s_SlideInAnimationGroupProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::GetSlideInAnimationGroupStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spElementAsDO;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup>> spBoxedValueType;
    
    ARG_NOTNULL(pElement, "pElement");
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(InitializeSlideInAnimationGroupProperty());
    
    IFC(pElement->QueryInterface(__uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject), &spElementAsDO));
    IFC(spElementAsDO->GetValue(s_SlideInAnimationGroupProperty.Get(), &spValueAsII));
    IFCPTR(spValueAsII);
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::InitializeSlideInElementInformationProperty()
{
    HRESULT hr = S_OK;

    if (!s_SlideInElementInformationProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SlideInElementInformation",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Pivot,
            true, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotFactory::s_SlideInElementInformationProperty));
    }

Cleanup:
    RRETURN(hr);
}


_Check_return_ HRESULT
PivotFactory::SetSlideInElementInformationStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spElementAsDO;
    
    ARG_NOTNULL(pElement, "pElement");
    
    IFC(InitializeSlideInElementInformationProperty());
    
    IFC(pElement->QueryInterface(__uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject), &spElementAsDO));
    IFC(spElementAsDO->SetValue(s_SlideInElementInformationProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PivotFactory::GetSlideInElementInformationStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spElementAsDO;
    
    ARG_NOTNULL(pElement, "pElement");
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(InitializeSlideInElementInformationProperty());
    
    IFC(pElement->QueryInterface(__uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject), &spElementAsDO));
    IFC(spElementAsDO->GetValue(s_SlideInElementInformationProperty.Get(), ppValue));

Cleanup:
    RRETURN(hr);
}


// Static methods.

_Check_return_ HRESULT 
PivotItemGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl(nullptr));
}

_Check_return_ HRESULT
PivotItemGenerated::InitializeImpl(_In_opt_ IInspectable* pOuter)
{
    HRESULT hr = S_OK;

    UNREFERENCED_PARAMETER(pOuter);

    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotItemFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP PivotItemGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(PivotItemFactory::s_HeaderProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(PivotItemFactory::s_HeaderProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides
IFACEMETHODIMP PivotItemGenerated::OnContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentChangedImpl(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentChanged(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnContentTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateChangedImpl(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateChanged(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnContentTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateSelectorChangedImpl(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateSelectorChanged(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PivotItemFactory::s_HeaderProperty;

// Initializers.
_Check_return_ HRESULT PivotItemFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemFactory::EnsureProperties()
{
    IFC_RETURN(InitializeHeaderProperty());

    return S_OK;
}

void PivotItemFactory::ClearProperties()
{
        s_HeaderProperty.Reset();
}

IFACEMETHODIMP PivotItemFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem** ppInstance)
{
    HRESULT hr = S_OK;

    IFC((pctl::AggregableComObject<
            ABI::Microsoft::UI::Xaml::Controls::PivotItem,
            ABI::Microsoft::UI::Xaml::Controls::IPivotItem>::CreateInstance(
            pOuter,
            ppInner,
            ppInstance)));

Cleanup:
    RRETURN(hr);
}
// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
PivotItemFactory::InitializeHeaderProperty()
{
    HRESULT hr = S_OK;

    if (!s_HeaderProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"Header",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_PivotItem,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PivotItemFactory::s_HeaderProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP PivotItemFactory::get_HeaderProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_HeaderProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
TimePickedEventArgsGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
TimePickedEventArgsGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(TimePickedEventArgsFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP TimePickedEventArgsGenerated::get_OldTime(_Out_ ABI::Windows::Foundation::TimeSpan* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::TimeSpan>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickedEventArgsFactory::s_OldTimeProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickedEventArgsGenerated::put_OldTime(_In_ ABI::Windows::Foundation::TimeSpan value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateTimeSpan(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickedEventArgsFactory::s_OldTimeProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickedEventArgsGenerated::get_NewTime(_Out_ ABI::Windows::Foundation::TimeSpan* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::TimeSpan>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickedEventArgsFactory::s_NewTimeProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickedEventArgsGenerated::put_NewTime(_In_ ABI::Windows::Foundation::TimeSpan value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateTimeSpan(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickedEventArgsFactory::s_NewTimeProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickedEventArgsFactory::s_OldTimeProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickedEventArgsFactory::s_NewTimeProperty;

// Initializers.
_Check_return_ HRESULT TimePickedEventArgsFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickedEventArgsFactory::EnsureProperties()
{
    IFC_RETURN(InitializeOldTimeProperty());
    IFC_RETURN(InitializeNewTimeProperty());

    return S_OK;
}

void TimePickedEventArgsFactory::ClearProperties()
{
        s_OldTimeProperty.Reset();
        s_NewTimeProperty.Reset();
}

IFACEMETHODIMP
TimePickedEventArgsFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs> timePickedEventArgs;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<TimePickedEventArgs>(&timePickedEventArgs));

    *ppInspectable = timePickedEventArgs.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
TimePickedEventArgsFactory::InitializeOldTimeProperty()
{
    HRESULT hr = S_OK;

    if (!s_OldTimeProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"OldTime",
            L"Windows.Foundation.TimeSpan",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickedEventArgsFactory::s_OldTimeProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
TimePickedEventArgsFactory::InitializeNewTimeProperty()
{
    HRESULT hr = S_OK;

    if (!s_NewTimeProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"NewTime",
            L"Windows.Foundation.TimeSpan",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickedEventArgs,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickedEventArgsFactory::s_NewTimeProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
TimePickerFlyoutGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
TimePickerFlyoutGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(TimePickerFlyoutFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_TimePickedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP TimePickerFlyoutGenerated::get_ClockIdentifier(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickerFlyoutFactory::s_ClockIdentifierProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::put_ClockIdentifier(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickerFlyoutFactory::s_ClockIdentifierProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::get_Time(_Out_ ABI::Windows::Foundation::TimeSpan* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::TimeSpan>> spBoxedValueType;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickerFlyoutFactory::s_TimeProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spBoxedValueType));
    IFC(spBoxedValueType->get_Value(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::put_Time(_In_ ABI::Windows::Foundation::TimeSpan value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateTimeSpan(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickerFlyoutFactory::s_TimeProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::get_MinuteIncrement(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickerFlyoutFactory::s_MinuteIncrementProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::put_MinuteIncrement(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickerFlyoutFactory::s_MinuteIncrementProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP TimePickerFlyoutGenerated::add_TimePicked(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyout*, ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_TimePickedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::remove_TimePicked(_In_ EventRegistrationToken token)
{
    RRETURN(m_TimePickedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP TimePickerFlyoutGenerated::ShowAtAsync(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTarget, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::TimeSpan>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pTarget, "target");
    IFC(static_cast<TimePickerFlyout*>(this)->ShowAtAsyncImpl(pTarget, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP TimePickerFlyoutGenerated::OnConfirmed()
{
    HRESULT hr = S_OK;
    
    IFC(OnConfirmedImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutGenerated::OnConfirmedImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnConfirmed());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::ShouldShowConfirmationButtons(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ShouldShowConfirmationButtonsImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutGenerated::ShouldShowConfirmationButtonsImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShouldShowConfirmationButtons(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CreatePresenterImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutGenerated::CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->CreatePresenter(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickerFlyoutFactory::s_ClockIdentifierProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickerFlyoutFactory::s_TimeProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickerFlyoutFactory::s_MinuteIncrementProperty;

// Initializers.
_Check_return_ HRESULT TimePickerFlyoutFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutFactory::EnsureProperties()
{
    IFC_RETURN(InitializeClockIdentifierProperty());
    IFC_RETURN(InitializeTimeProperty());
    IFC_RETURN(InitializeMinuteIncrementProperty());

    return S_OK;
}

void TimePickerFlyoutFactory::ClearProperties()
{
        s_ClockIdentifierProperty.Reset();
        s_TimeProperty.Reset();
        s_MinuteIncrementProperty.Reset();
}

IFACEMETHODIMP
TimePickerFlyoutFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> timePickerFlyout;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<TimePickerFlyout>(&timePickerFlyout));

    *ppInspectable = timePickerFlyout.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
TimePickerFlyoutFactory::InitializeClockIdentifierProperty()
{
    HRESULT hr = S_OK;

    if (!s_ClockIdentifierProperty)
    {
        wrl::ComPtr<IInspectable> spClockIdentifierValue;
        IFC(TimePickerFlyout::GetDefaultClockIdentifier(&spClockIdentifierValue));

        IFC(Private::InitializeDependencyProperty(
            L"ClockIdentifier",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyout,
            false, /* isAttached */
            spClockIdentifierValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickerFlyoutFactory::s_ClockIdentifierProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
TimePickerFlyoutFactory::InitializeTimeProperty()
{
    HRESULT hr = S_OK;

    if (!s_TimeProperty)
    {
        wrl::ComPtr<IInspectable> spTimeValue;
        IFC(TimePickerFlyout::GetDefaultTime(&spTimeValue));

        IFC(Private::InitializeDependencyProperty(
            L"Time",
            L"Windows.Foundation.TimeSpan",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyout,
            false, /* isAttached */
            spTimeValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickerFlyoutFactory::s_TimeProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
TimePickerFlyoutFactory::InitializeMinuteIncrementProperty()
{
    HRESULT hr = S_OK;

    if (!s_MinuteIncrementProperty)
    {
        wrl::ComPtr<IInspectable> spMinuteIncrementValue;
        IFC(TimePickerFlyout::GetDefaultMinuteIncrement(&spMinuteIncrementValue));

        IFC(Private::InitializeDependencyProperty(
            L"MinuteIncrement",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyout,
            false, /* isAttached */
            spMinuteIncrementValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickerFlyoutFactory::s_MinuteIncrementProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP TimePickerFlyoutFactory::get_ClockIdentifierProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ClockIdentifierProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutFactory::get_TimeProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_TimeProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutFactory::get_MinuteIncrementProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_MinuteIncrementProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
TimePickerFlyoutPresenterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
TimePickerFlyoutPresenterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(TimePickerFlyoutPresenterFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::get_IsDefaultShadowEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(TimePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::put_IsDefaultShadowEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(TimePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods

// Overrides
IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> TimePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty;

// Initializers.
_Check_return_ HRESULT TimePickerFlyoutPresenterFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterFactory::EnsureProperties()
{
    IFC_RETURN(InitializeIsDefaultShadowEnabledProperty());

    return S_OK;
}

void TimePickerFlyoutPresenterFactory::ClearProperties()
{
        s_IsDefaultShadowEnabledProperty.Reset();
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
TimePickerFlyoutPresenterFactory::InitializeIsDefaultShadowEnabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_IsDefaultShadowEnabledProperty)
    {
        wrl::ComPtr<IInspectable> spIsDefaultShadowEnabledValue;
        IFC(TimePickerFlyoutPresenter::GetDefaultIsDefaultShadowEnabled(&spIsDefaultShadowEnabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"IsDefaultShadowEnabled",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_TimePickerFlyoutPresenter,
            false, /* isAttached */
            spIsDefaultShadowEnabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &TimePickerFlyoutPresenterFactory::s_IsDefaultShadowEnabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP TimePickerFlyoutPresenterFactory::get_IsDefaultShadowEnabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_IsDefaultShadowEnabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.
}
}}}}

#if DBG
const LPCWSTR JumpListItemBackgroundConverterRuntimeClass::s_typeName = L"JumpListItemBackgroundConverter";
const LPCWSTR JumpListItemForegroundConverterRuntimeClass::s_typeName = L"JumpListItemForegroundConverter";
const LPCWSTR LoopingSelectorRuntimeClass::s_typeName = L"LoopingSelector";
const LPCWSTR LoopingSelectorItemRuntimeClass::s_typeName = L"LoopingSelectorItem";
const LPCWSTR LoopingSelectorPanelRuntimeClass::s_typeName = L"LoopingSelectorPanel";
const LPCWSTR PickerFlyoutBaseRuntimeClass::s_typeName = L"PickerFlyoutBase";
const LPCWSTR PivotHeaderItemRuntimeClass::s_typeName = L"PivotHeaderItem";
const LPCWSTR PivotHeaderPanelRuntimeClass::s_typeName = L"PivotHeaderPanel";
const LPCWSTR PivotPanelRuntimeClass::s_typeName = L"PivotPanel";
#endif

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Controls { namespace Primitives
{

_Check_return_ HRESULT 
JumpListItemBackgroundConverterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
JumpListItemBackgroundConverterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(JumpListItemBackgroundConverterFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::get_Enabled(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(JumpListItemBackgroundConverterFactory::s_EnabledProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::put_Enabled(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(JumpListItemBackgroundConverterFactory::s_EnabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::get_Disabled(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(JumpListItemBackgroundConverterFactory::s_DisabledProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::put_Disabled(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(JumpListItemBackgroundConverterFactory::s_DisabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::Convert(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pValue, "value");
    IFC(static_cast<JumpListItemBackgroundConverter*>(this)->ConvertImpl(pValue, targetType, pParameter, language, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemBackgroundConverterGenerated::ConvertBack(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pValue, "value");
    IFC(static_cast<JumpListItemBackgroundConverter*>(this)->ConvertBackImpl(pValue, targetType, pParameter, language, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> JumpListItemBackgroundConverterFactory::s_EnabledProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> JumpListItemBackgroundConverterFactory::s_DisabledProperty;

// Initializers.
_Check_return_ HRESULT JumpListItemBackgroundConverterFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT JumpListItemBackgroundConverterFactory::EnsureProperties()
{
    IFC_RETURN(InitializeEnabledProperty());
    IFC_RETURN(InitializeDisabledProperty());

    return S_OK;
}

void JumpListItemBackgroundConverterFactory::ClearProperties()
{
        s_EnabledProperty.Reset();
        s_DisabledProperty.Reset();
}

IFACEMETHODIMP
JumpListItemBackgroundConverterFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> jumpListItemBackgroundConverter;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<JumpListItemBackgroundConverter>(&jumpListItemBackgroundConverter));

    *ppInspectable = jumpListItemBackgroundConverter.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
JumpListItemBackgroundConverterFactory::InitializeEnabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_EnabledProperty)
    {
        wrl::ComPtr<IInspectable> spEnabledValue;
        IFC(JumpListItemBackgroundConverter::GetDefaultEnabled(&spEnabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"Enabled",
            L"Microsoft.UI.Xaml.Media.Brush",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter,
            false, /* isAttached */
            spEnabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &JumpListItemBackgroundConverterFactory::s_EnabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
JumpListItemBackgroundConverterFactory::InitializeDisabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_DisabledProperty)
    {
        wrl::ComPtr<IInspectable> spDisabledValue;
        IFC(JumpListItemBackgroundConverter::GetDefaultDisabled(&spDisabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"Disabled",
            L"Microsoft.UI.Xaml.Media.Brush",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemBackgroundConverter,
            false, /* isAttached */
            spDisabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &JumpListItemBackgroundConverterFactory::s_DisabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP JumpListItemBackgroundConverterFactory::get_EnabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_EnabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemBackgroundConverterFactory::get_DisabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DisabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
JumpListItemForegroundConverterGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
JumpListItemForegroundConverterGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(JumpListItemForegroundConverterFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP JumpListItemForegroundConverterGenerated::get_Enabled(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(JumpListItemForegroundConverterFactory::s_EnabledProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemForegroundConverterGenerated::put_Enabled(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(JumpListItemForegroundConverterFactory::s_EnabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemForegroundConverterGenerated::get_Disabled(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(JumpListItemForegroundConverterFactory::s_DisabledProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemForegroundConverterGenerated::put_Disabled(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(JumpListItemForegroundConverterFactory::s_DisabledProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP JumpListItemForegroundConverterGenerated::Convert(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pValue, "value");
    IFC(static_cast<JumpListItemForegroundConverter*>(this)->ConvertImpl(pValue, targetType, pParameter, language, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemForegroundConverterGenerated::ConvertBack(_In_ IInspectable* pValue, _In_ ABI::Windows::UI::Xaml::Interop::TypeName targetType, _In_opt_ IInspectable* pParameter, _In_opt_ HSTRING language, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    ARG_NOTNULL(pValue, "value");
    IFC(static_cast<JumpListItemForegroundConverter*>(this)->ConvertBackImpl(pValue, targetType, pParameter, language, ppReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> JumpListItemForegroundConverterFactory::s_EnabledProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> JumpListItemForegroundConverterFactory::s_DisabledProperty;

// Initializers.
_Check_return_ HRESULT JumpListItemForegroundConverterFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT JumpListItemForegroundConverterFactory::EnsureProperties()
{
    IFC_RETURN(InitializeEnabledProperty());
    IFC_RETURN(InitializeDisabledProperty());

    return S_OK;
}

void JumpListItemForegroundConverterFactory::ClearProperties()
{
        s_EnabledProperty.Reset();
        s_DisabledProperty.Reset();
}

IFACEMETHODIMP
JumpListItemForegroundConverterFactory::ActivateInstance(
    _Outptr_ IInspectable** ppInspectable)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> jumpListItemForegroundConverter;

    IFCPTR(ppInspectable);
    IFC(wrl::MakeAndInitialize<JumpListItemForegroundConverter>(&jumpListItemForegroundConverter));

    *ppInspectable = jumpListItemForegroundConverter.Detach();

Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
JumpListItemForegroundConverterFactory::InitializeEnabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_EnabledProperty)
    {
        wrl::ComPtr<IInspectable> spEnabledValue;
        IFC(JumpListItemForegroundConverter::GetDefaultEnabled(&spEnabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"Enabled",
            L"Microsoft.UI.Xaml.Media.Brush",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter,
            false, /* isAttached */
            spEnabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &JumpListItemForegroundConverterFactory::s_EnabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
JumpListItemForegroundConverterFactory::InitializeDisabledProperty()
{
    HRESULT hr = S_OK;

    if (!s_DisabledProperty)
    {
        wrl::ComPtr<IInspectable> spDisabledValue;
        IFC(JumpListItemForegroundConverter::GetDefaultDisabled(&spDisabledValue));

        IFC(Private::InitializeDependencyProperty(
            L"Disabled",
            L"Microsoft.UI.Xaml.Media.Brush",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_JumpListItemForegroundConverter,
            false, /* isAttached */
            spDisabledValue.Get(),  /* defaultValue */
            nullptr,  /* property changed callback */
            &JumpListItemForegroundConverterFactory::s_DisabledProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP JumpListItemForegroundConverterFactory::get_EnabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_EnabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP JumpListItemForegroundConverterFactory::get_DisabledProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_DisabledProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
LoopingSelectorGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
LoopingSelectorGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(LoopingSelectorFactory::EnsureProperties());

    IFC_RETURN(RegisterEventSource(m_SelectionChangedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP LoopingSelectorGenerated::get_ShouldLoop(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_ShouldLoopProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetBoolean(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_ShouldLoop(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateBoolean(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_ShouldLoopProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_Items(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_ItemsProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_Items(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_ItemsProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_SelectedIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_SelectedIndexProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_SelectedIndex(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_SelectedIndexProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_SelectedItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_SelectedItemProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_SelectedItem(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_SelectedItemProperty.Get(), pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_ItemWidth(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_ItemWidthProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_ItemWidth(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_ItemWidthProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_ItemHeight(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> spPropertyValue;
    
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_ItemHeightProperty.Get(), &spValueAsII));
    
    IFC(spValueAsII.As(&spPropertyValue));
    IFC(spPropertyValue->GetInt32(pValue)); 

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_ItemHeight(_In_ INT value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    IFC(Private::ValueBoxer::CreateInt32(value, &spValueAsII));
    
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_ItemHeightProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::get_ItemTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(GetComposableBase().As(&spThisAsDO));
    IFC(spThisAsDO->GetValue(LoopingSelectorFactory::s_ItemTemplateProperty.Get(), &spValueAsII));
    
    if (spValueAsII) {
        IFC(spValueAsII.CopyTo(ppValue));
    }
    else {
        *ppValue = nullptr;
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::put_ItemTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spThisAsDO;
    wrl::ComPtr<IInspectable> spValueAsII;
    
    IFC(GetComposableBase().As(&spThisAsDO));
    
    if (pValue != nullptr)
    {
        IFC(pValue->QueryInterface(__uuidof(IInspectable), &spValueAsII));
    }
    IFC(spThisAsDO->SetValue(LoopingSelectorFactory::s_ItemTemplateProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP LoopingSelectorGenerated::add_SelectionChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_SelectionChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::remove_SelectionChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_SelectionChangedEventSource.Remove(token));
}


// Methods

// Overrides
IFACEMETHODIMP LoopingSelectorGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_ShouldLoopProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_ItemsProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_SelectedIndexProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_SelectedItemProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_ItemWidthProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_ItemHeightProperty;
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> LoopingSelectorFactory::s_ItemTemplateProperty;

// Initializers.
_Check_return_ HRESULT LoopingSelectorFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorFactory::EnsureProperties()
{
    IFC_RETURN(InitializeShouldLoopProperty());
    IFC_RETURN(InitializeItemsProperty());
    IFC_RETURN(InitializeSelectedIndexProperty());
    IFC_RETURN(InitializeSelectedItemProperty());
    IFC_RETURN(InitializeItemWidthProperty());
    IFC_RETURN(InitializeItemHeightProperty());
    IFC_RETURN(InitializeItemTemplateProperty());

    return S_OK;
}

void LoopingSelectorFactory::ClearProperties()
{
        s_ShouldLoopProperty.Reset();
        s_ItemsProperty.Reset();
        s_SelectedIndexProperty.Reset();
        s_SelectedItemProperty.Reset();
        s_ItemWidthProperty.Reset();
        s_ItemHeightProperty.Reset();
        s_ItemTemplateProperty.Reset();
}

// Static properties.

// Dependency properties initializing functions
_Check_return_ HRESULT
LoopingSelectorFactory::InitializeShouldLoopProperty()
{
    HRESULT hr = S_OK;

    if (!s_ShouldLoopProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ShouldLoop",
            L"Windows.Foundation.Boolean",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&LoopingSelectorFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &LoopingSelectorFactory::s_ShouldLoopProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeItemsProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemsProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"Items",
            L"Microsoft.UI.Xaml.Controls.ItemCollection",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&LoopingSelectorFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &LoopingSelectorFactory::s_ItemsProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeSelectedIndexProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedIndexProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedIndex",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&LoopingSelectorFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &LoopingSelectorFactory::s_SelectedIndexProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeSelectedItemProperty()
{
    HRESULT hr = S_OK;

    if (!s_SelectedItemProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"SelectedItem",
            L"Windows.Foundation.Object",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &LoopingSelectorFactory::s_SelectedItemProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeItemWidthProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemWidthProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemWidth",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &LoopingSelectorFactory::s_ItemWidthProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeItemHeightProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemHeightProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemHeight",
            L"Windows.Foundation.Int32",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            wrl::Callback<ABI::Microsoft::UI::Xaml::IPropertyChangedCallback>(&LoopingSelectorFactory::OnPropertyChanged).Get(),  /* property changed callback */
            &LoopingSelectorFactory::s_ItemHeightProperty));
    }

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorFactory::InitializeItemTemplateProperty()
{
    HRESULT hr = S_OK;

    if (!s_ItemTemplateProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"ItemTemplate",
            L"Microsoft.UI.Xaml.DataTemplate",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_LoopingSelector,
            false, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &LoopingSelectorFactory::s_ItemTemplateProperty));
    }

Cleanup:
    RRETURN(hr);
}

// Property changed event handler
HRESULT LoopingSelectorFactory::OnPropertyChanged(
    _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSender,
    _In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> spSenderAsDO(pSender);
    wrl::ComPtr<ILoopingSelector> spLoopingSelector;

    IFC(spSenderAsDO.As(&spLoopingSelector));
    IFC(static_cast<LoopingSelector*>(spLoopingSelector.Get())->OnPropertyChanged(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency properties.
IFACEMETHODIMP LoopingSelectorFactory::get_ShouldLoopProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ShouldLoopProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_ItemsProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemsProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_SelectedIndexProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedIndexProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_SelectedItemProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_SelectedItemProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_ItemWidthProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemWidthProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_ItemHeightProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemHeightProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorFactory::get_ItemTemplateProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(s_ItemTemplateProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}


// Attached properties.

// Static methods.

_Check_return_ HRESULT 
LoopingSelectorItemGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
LoopingSelectorItemGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP LoopingSelectorItemGenerated::OnContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentChangedImpl(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentChanged(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnContentTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateChangedImpl(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateChanged(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnContentTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateSelectorChangedImpl(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateSelectorChanged(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
LoopingSelectorPanelGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
LoopingSelectorPanelGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;

    IFC_RETURN(RegisterEventSource(m_HorizontalSnapPointsChangedEventSource)); 
    IFC_RETURN(RegisterEventSource(m_VerticalSnapPointsChangedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP LoopingSelectorPanelGenerated::get_AreHorizontalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_AreHorizontalSnapPointsRegularImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::get_AreVerticalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_AreVerticalSnapPointsRegularImpl(pValue));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP LoopingSelectorPanelGenerated::add_HorizontalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_HorizontalSnapPointsChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::remove_HorizontalSnapPointsChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_HorizontalSnapPointsChangedEventSource.Remove(token));
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::add_VerticalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_VerticalSnapPointsChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::remove_VerticalSnapPointsChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_VerticalSnapPointsChangedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP LoopingSelectorPanelGenerated::GetIrregularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(static_cast<LoopingSelectorPanel*>(this)->GetIrregularSnapPointsImpl(orientation, alignment, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::GetRegularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(static_cast<LoopingSelectorPanel*>(this)->GetRegularSnapPointsImpl(orientation, alignment, pOffset, pReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP LoopingSelectorPanelGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorPanelGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorPanelGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PickerFlyoutBaseGenerated::InitializeImpl(_In_opt_ IInspectable* pOuter)
{
    HRESULT hr = S_OK;

    UNREFERENCED_PARAMETER(pOuter);

    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PickerFlyoutBaseFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.

// Events.

// Methods
_Check_return_ HRESULT PickerFlyoutBaseGenerated::OnConfirmedProtected()
{
    HRESULT hr = S_OK;

    if (IsComposed())
    {
        wrl::ComPtr<IPickerFlyoutBaseOverrides> spOverrides;
        IFC(QueryInterface(__uuidof(IPickerFlyoutBaseOverrides), &spOverrides));
        IFC(spOverrides->OnConfirmed());
    }
    else
    {
        IFC(OnConfirmed());
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutBaseGenerated::OnConfirmed()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PickerFlyoutBase*>(this)->OnConfirmedImpl());
Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutBaseGenerated::ShouldShowConfirmationButtonsProtected(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    if (IsComposed())
    {
        wrl::ComPtr<IPickerFlyoutBaseOverrides> spOverrides;
        IFC(QueryInterface(__uuidof(IPickerFlyoutBaseOverrides), &spOverrides));
        IFC(spOverrides->ShouldShowConfirmationButtons(pReturnValue));
    }
    else
    {
        IFC(ShouldShowConfirmationButtons(pReturnValue));
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutBaseGenerated::ShouldShowConfirmationButtons(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(static_cast<PickerFlyoutBase*>(this)->ShouldShowConfirmationButtonsImpl(pReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP PickerFlyoutBaseGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CreatePresenterImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutBaseGenerated::CreatePresenterImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->CreatePresenter(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutBaseGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutBaseGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.
wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> PickerFlyoutBaseFactory::s_TitleProperty;

// Initializers.
_Check_return_ HRESULT PickerFlyoutBaseFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutBaseFactory::EnsureProperties()
{
    IFC_RETURN(InitializeTitleProperty());

    return S_OK;
}

void PickerFlyoutBaseFactory::ClearProperties()
{
        s_TitleProperty.Reset();
}

IFACEMETHODIMP PickerFlyoutBaseFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase** ppInstance)
{
    HRESULT hr = S_OK;

    IFC((pctl::AggregableComObject<
            ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase,
            ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>::CreateInstance(
            pOuter,
            ppInner,
            ppInstance)));

Cleanup:
    RRETURN(hr);
}
// Static properties.

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT
PickerFlyoutBaseFactory::InitializeTitleProperty()
{
    HRESULT hr = S_OK;

    if (!s_TitleProperty)
    {
        IFC(Private::InitializeDependencyProperty(
            L"Title",
            L"Windows.Foundation.String",
            RuntimeClass_Microsoft_UI_Xaml_Controls_Primitives_PickerFlyoutBase,
            true, /* isAttached */
            nullptr,  /* defaultValue */
            nullptr,  /* property changed callback */
            &PickerFlyoutBaseFactory::s_TitleProperty));
    }

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutBaseFactory::get_TitleProperty(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(s_TitleProperty.CopyTo(ppValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutBaseFactory::SetTitle(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ HSTRING value)
{
    RRETURN(PickerFlyoutBaseFactory::SetTitleStatic(pElement, value));
}

IFACEMETHODIMP PickerFlyoutBaseFactory::GetTitle(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ HSTRING* pValue)
{
    RRETURN(PickerFlyoutBaseFactory::GetTitleStatic(pElement, pValue));
}

_Check_return_ HRESULT
PickerFlyoutBaseFactory::SetTitleStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_NOTNULL(pElement, "pElement");
    
    IFC(InitializeTitleProperty());
    
    IFC(Private::ValueBoxer::CreateString(value, &spValueAsII));
    IFC(pElement->SetValue(s_TitleProperty.Get(), spValueAsII.Get()));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT
PickerFlyoutBaseFactory::GetTitleStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<IInspectable> spValueAsII;
    
    ARG_NOTNULL(pElement, "pElement");
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(InitializeTitleProperty());
    
    IFC(pElement->GetValue(s_TitleProperty.Get(), &spValueAsII));
    
    IFC(Private::ValueBoxer::UnboxString(spValueAsII.Get(), pValue));

Cleanup:
    RRETURN(hr);
}


// Static methods.

_Check_return_ HRESULT 
PivotHeaderItemGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl(nullptr));
}

_Check_return_ HRESULT
PivotHeaderItemGenerated::InitializeImpl(_In_opt_ IInspectable* pOuter)
{
    HRESULT hr = S_OK;

    UNREFERENCED_PARAMETER(pOuter);

    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotHeaderItemFactory::EnsureProperties());


    RRETURN(hr);
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP PivotHeaderItemGenerated::OnContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentChangedImpl(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnContentChangedImpl(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentChanged(pOldContent, pNewContent));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnContentTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateChangedImpl(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnContentTemplateChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldContentTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewContentTemplate)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateChanged(pOldContentTemplate, pNewContentTemplate));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnContentTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;
    
    IFC(OnContentTemplateSelectorChangedImpl(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnContentTemplateSelectorChangedImpl(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldContentTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewContentTemplateSelector)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IContentControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnContentTemplateSelectorChanged(pOldContentTemplateSelector, pNewContentTemplateSelector));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerEnteredImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerEnteredImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerEntered(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerPressedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerPressedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerPressed(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerMovedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerMovedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerMoved(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerReleasedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerReleasedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerReleased(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerExitedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerExitedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerExited(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCaptureLostImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerCaptureLostImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCaptureLost(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerCanceledImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerCanceledImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerCanceled(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPointerWheelChangedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPointerWheelChangedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPointerWheelChanged(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDoubleTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDoubleTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDoubleTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnHoldingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnHoldingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnHolding(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnRightTappedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnRightTappedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnRightTapped(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnManipulationStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationInertiaStartingImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnManipulationInertiaStartingImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationInertiaStarting(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationStartedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnManipulationStartedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationStarted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationDeltaImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnManipulationDeltaImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationDelta(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnManipulationCompletedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnManipulationCompletedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnManipulationCompleted(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyDownImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPreviewKeyDownImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyDown(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnPreviewKeyUpImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnPreviewKeyUpImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnPreviewKeyUp(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnGotFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnGotFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnGotFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnLostFocusImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnLostFocusImpl(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnLostFocus(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnCharacterReceivedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnCharacterReceivedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCharacterReceived(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragEnterImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDragEnterImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragEnter(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragLeaveImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDragLeaveImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragLeave(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDragOverImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDragOverImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDragOver(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnDropImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDropImpl(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDrop(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderItemGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.

// Initializers.
_Check_return_ HRESULT PivotHeaderItemFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderItemFactory::EnsureProperties()
{

    return S_OK;
}

void PivotHeaderItemFactory::ClearProperties()
{
}

IFACEMETHODIMP PivotHeaderItemFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem** ppInstance)
{
    HRESULT hr = S_OK;

    IFC((pctl::AggregableComObject<
            ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem,
            ABI::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>::CreateInstance(
            pOuter,
            ppInner,
            ppInstance)));

Cleanup:
    RRETURN(hr);
}
// Static properties.

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
PivotHeaderPanelGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
PivotHeaderPanelGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP PivotHeaderPanelGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotHeaderPanelGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotHeaderPanelGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
PivotPanelGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}

_Check_return_ HRESULT
PivotPanelGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;

    IFC_RETURN(RegisterEventSource(m_HorizontalSnapPointsChangedEventSource)); 
    IFC_RETURN(RegisterEventSource(m_VerticalSnapPointsChangedEventSource)); 

    RRETURN(hr);
}

// Properties.
IFACEMETHODIMP PivotPanelGenerated::get_AreHorizontalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_AreHorizontalSnapPointsRegularImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::get_AreVerticalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_AreVerticalSnapPointsRegularImpl(pValue));

Cleanup:
    RRETURN(hr);
}


// Events.
IFACEMETHODIMP PivotPanelGenerated::add_HorizontalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_HorizontalSnapPointsChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::remove_HorizontalSnapPointsChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_HorizontalSnapPointsChangedEventSource.Remove(token));
}

IFACEMETHODIMP PivotPanelGenerated::add_VerticalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pToken);
    ARG_NOTNULL(pValue, "value");

    IFC(m_VerticalSnapPointsChangedEventSource.Add(pValue, pToken));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::remove_VerticalSnapPointsChanged(_In_ EventRegistrationToken token)
{
    RRETURN(m_VerticalSnapPointsChangedEventSource.Remove(token));
}


// Methods
IFACEMETHODIMP PivotPanelGenerated::GetIrregularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(static_cast<PivotPanel*>(this)->GetIrregularSnapPointsImpl(orientation, alignment, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::GetRegularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(static_cast<PivotPanel*>(this)->GetRegularSnapPointsImpl(orientation, alignment, pOffset, pReturnValue));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP PivotPanelGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(MeasureOverrideImpl(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::MeasureOverrideImpl(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->MeasureOverride(availableSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(ArrangeOverrideImpl(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::ArrangeOverrideImpl(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ArrangeOverride(finalSize, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    
    IFC(OnApplyTemplateImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnApplyTemplateImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnApplyTemplate());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    ARG_NOTNULL(stateName, "stateName");
    
    IFC(GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::GoToElementStateCoreImpl(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GoToElementStateCore(stateName, useTransitions, pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(OnCreateAutomationPeerImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnCreateAutomationPeerImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateAutomationPeer(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    
    IFC(OnDisconnectVisualChildrenImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnDisconnectVisualChildrenImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnDisconnectVisualChildren());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::FindSubElementsForTouchTargeting(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(FindSubElementsForTouchTargetingImpl(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::FindSubElementsForTouchTargetingImpl(_In_ ABI::Windows::Foundation::Point point, _In_ ABI::Windows::Foundation::Rect boundingRect, _Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Point>*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->FindSubElementsForTouchTargeting(point, boundingRect, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::GetChildrenInTabFocusOrder(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenInTabFocusOrderImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::GetChildrenInTabFocusOrderImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::DependencyObject*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenInTabFocusOrder(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnKeyboardAcceleratorInvoked(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnKeyboardAcceleratorInvokedImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnKeyboardAcceleratorInvokedImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnKeyboardAcceleratorInvoked(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pArgs, "pArgs");
    
    IFC(OnProcessKeyboardAcceleratorsImpl(pArgs));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnProcessKeyboardAcceleratorsImpl(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnProcessKeyboardAccelerators(pArgs));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::OnBringIntoViewRequested(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(pE, "pE");
    
    IFC(OnBringIntoViewRequestedImpl(pE));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::OnBringIntoViewRequestedImpl(_In_ ABI::Microsoft::UI::Xaml::IBringIntoViewRequestedEventArgs* pE)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnBringIntoViewRequested(pE));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotPanelGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    
    ARG_NOTNULL(propertyName, "propertyName");
    
    ARG_NOTNULL(pAnimationPropertyInfo, "pAnimationPropertyInfo");
    
    IFC(PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotPanelGenerated::PopulatePropertyInfoOverrideImpl(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElementOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));

Cleanup:
    RRETURN(hr);
}
}
}}}}}

#if DBG
const LPCWSTR DatePickerFlyoutPresenterAutomationPeerRuntimeClass::s_typeName = L"DatePickerFlyoutPresenterAutomationPeer";
const LPCWSTR ListPickerFlyoutPresenterAutomationPeerRuntimeClass::s_typeName = L"ListPickerFlyoutPresenterAutomationPeer";
const LPCWSTR LoopingSelectorAutomationPeerRuntimeClass::s_typeName = L"LoopingSelectorAutomationPeer";
const LPCWSTR LoopingSelectorItemAutomationPeerRuntimeClass::s_typeName = L"LoopingSelectorItemAutomationPeer";
const LPCWSTR LoopingSelectorItemDataAutomationPeerRuntimeClass::s_typeName = L"LoopingSelectorItemDataAutomationPeer";
const LPCWSTR PickerFlyoutPresenterAutomationPeerRuntimeClass::s_typeName = L"PickerFlyoutPresenterAutomationPeer";
const LPCWSTR PivotAutomationPeerRuntimeClass::s_typeName = L"PivotAutomationPeer";
const LPCWSTR PivotItemAutomationPeerRuntimeClass::s_typeName = L"PivotItemAutomationPeer";
const LPCWSTR PivotItemDataAutomationPeerRuntimeClass::s_typeName = L"PivotItemDataAutomationPeer";
const LPCWSTR TimePickerFlyoutPresenterAutomationPeerRuntimeClass::s_typeName = L"TimePickerFlyoutPresenterAutomationPeer";
#endif

namespace ABI { namespace Microsoft { namespace UI { namespace Xaml { namespace Automation { namespace Peers
{

_Check_return_ HRESULT 
DatePickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
DatePickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
DatePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
DatePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(DatePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP DatePickerFlyoutPresenterAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT DatePickerFlyoutPresenterAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
ListPickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
ListPickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
ListPickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
ListPickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(ListPickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP ListPickerFlyoutPresenterAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT ListPickerFlyoutPresenterAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
LoopingSelectorAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
LoopingSelectorAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
LoopingSelectorAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(LoopingSelectorAutomationPeerGenerated::InitializeImpl());
}

// Properties.
IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_CanSelectMultiple(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_CanSelectMultipleImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_IsSelectionRequired(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_IsSelectionRequiredImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_HorizontallyScrollable(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontallyScrollableImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_HorizontalScrollPercent(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontalScrollPercentImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_HorizontalViewSize(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontalViewSizeImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_VerticallyScrollable(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticallyScrollableImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_VerticalScrollPercent(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticalScrollPercentImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::get_VerticalViewSize(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticalViewSizeImpl(pValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetSelection(_Out_ UINT* pReturnValueCount, _Out_writes_to_ptr_(*pReturnValueCount) ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple*** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(static_cast<LoopingSelectorAutomationPeer*>(this)->GetSelectionImpl(pReturnValueCount, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::FindItemByProperty(_In_opt_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple* pStartAfter, _In_opt_ ABI::Microsoft::UI::Xaml::Automation::IAutomationProperty* pAutomationProperty, _In_opt_ IInspectable* pValue, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(static_cast<LoopingSelectorAutomationPeer*>(this)->FindItemByPropertyImpl(pStartAfter, pAutomationProperty, pValue, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::Scroll(_In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount horizontalAmount, _In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount verticalAmount)
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorAutomationPeer*>(this)->ScrollImpl(horizontalAmount, verticalAmount));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::SetScrollPercent(_In_ DOUBLE horizontalPercent, _In_ DOUBLE verticalPercent)
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorAutomationPeer*>(this)->SetScrollPercentImpl(horizontalPercent, verticalPercent));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
LoopingSelectorItemAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
LoopingSelectorItemAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
LoopingSelectorItemAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorItemAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(LoopingSelectorItemAutomationPeerGenerated::InitializeImpl());
}

// Properties.
IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::get_IsSelected(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_IsSelectedImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::get_SelectionContainer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(get_SelectionContainerImpl(ppValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::ScrollIntoView()
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorItemAutomationPeer*>(this)->ScrollIntoViewImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::AddToSelection()
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorItemAutomationPeer*>(this)->AddToSelectionImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::RemoveFromSelection()
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorItemAutomationPeer*>(this)->RemoveFromSelectionImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::Select()
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorItemAutomationPeer*>(this)->SelectImpl());
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
LoopingSelectorItemDataAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
LoopingSelectorItemDataAutomationPeerGenerated::RuntimeClassInitialize(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer* pParent)
{
    RRETURN(InitializeImpl(pItem, pParent));
}

_Check_return_ HRESULT
LoopingSelectorItemDataAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
LoopingSelectorItemDataAutomationPeerGenerated::InitializeImpl(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer* pParent)
{
    UNREFERENCED_PARAMETER(pItem);
    UNREFERENCED_PARAMETER(pParent);

    RRETURN(LoopingSelectorItemDataAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods
IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::Realize()
{
    HRESULT hr = S_OK;


    IFC(static_cast<LoopingSelectorItemDataAutomationPeer*>(this)->RealizeImpl());
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP LoopingSelectorItemDataAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT LoopingSelectorItemDataAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
PickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
PickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
PickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
PickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(PickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PickerFlyoutPresenterAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PickerFlyoutPresenterAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT 
PivotAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
PivotAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
PivotAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotAutomationPeerFactory::EnsureProperties());


    RRETURN(hr);
}

_Check_return_ HRESULT
PivotAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(PivotAutomationPeerGenerated::InitializeImpl());
}

// Properties.
IFACEMETHODIMP PivotAutomationPeerGenerated::get_CanSelectMultiple(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_CanSelectMultipleImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_IsSelectionRequired(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_IsSelectionRequiredImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_HorizontallyScrollable(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontallyScrollableImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_HorizontalScrollPercent(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontalScrollPercentImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_HorizontalViewSize(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_HorizontalViewSizeImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_VerticallyScrollable(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticallyScrollableImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_VerticalScrollPercent(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticalScrollPercentImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::get_VerticalViewSize(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_VerticalViewSizeImpl(pValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP PivotAutomationPeerGenerated::GetSelection(_Out_ UINT* pReturnValueCount, _Out_writes_to_ptr_(*pReturnValueCount) ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple*** ppReturnValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(static_cast<PivotAutomationPeer*>(this)->GetSelectionImpl(pReturnValueCount, ppReturnValue));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::Scroll(_In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount horizontalAmount, _In_ ABI::Microsoft::UI::Xaml::Automation::ScrollAmount verticalAmount)
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotAutomationPeer*>(this)->ScrollImpl(horizontalAmount, verticalAmount));
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::SetScrollPercent(_In_ DOUBLE horizontalPercent, _In_ DOUBLE verticalPercent)
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotAutomationPeer*>(this)->SetScrollPercentImpl(horizontalPercent, verticalPercent));
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP PivotAutomationPeerGenerated::OnCreateItemAutomationPeer(_In_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IItemAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    ARG_NOTNULL(pItem, "pItem");
    
    IFC(OnCreateItemAutomationPeerImpl(pItem, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::OnCreateItemAutomationPeerImpl(_In_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IItemAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->OnCreateItemAutomationPeer(pItem, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.

// Initializers.
_Check_return_ HRESULT PivotAutomationPeerFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotAutomationPeerFactory::EnsureProperties()
{

    return S_OK;
}

void PivotAutomationPeerFactory::ClearProperties()
{
}

IFACEMETHODIMP PivotAutomationPeerFactory::CreateInstanceWithOwner(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivot* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer** ppInstance)
{
    HRESULT hr = S_OK;
    IFCPTR(ppInstance);
    ARG_VALIDRETURNPOINTER(ppInstance);
    ARG_NOTNULL(pOwner, "pOwner");
    IFC(CreateInstanceWithOwnerImpl(pOwner, ppInstance));
Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
PivotItemAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
PivotItemAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
PivotItemAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotItemAutomationPeerFactory::EnsureProperties());


    RRETURN(hr);
}

_Check_return_ HRESULT
PivotItemAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(PivotItemAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.

// Initializers.
_Check_return_ HRESULT PivotItemAutomationPeerFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemAutomationPeerFactory::EnsureProperties()
{

    return S_OK;
}

void PivotItemAutomationPeerFactory::ClearProperties()
{
}

IFACEMETHODIMP PivotItemAutomationPeerFactory::CreateInstanceWithOwner(_In_ ABI::Microsoft::UI::Xaml::Controls::IPivotItem* pOwner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer** ppInstance)
{
    HRESULT hr = S_OK;
    IFCPTR(ppInstance);
    ARG_VALIDRETURNPOINTER(ppInstance);
    ARG_NOTNULL(pOwner, "pOwner");
    IFC(CreateInstanceWithOwnerImpl(pOwner, ppInstance));
Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
PivotItemDataAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
PivotItemDataAutomationPeerGenerated::RuntimeClassInitialize(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent)
{
    RRETURN(InitializeImpl(pItem, pParent));
}

_Check_return_ HRESULT
PivotItemDataAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    // When types are created internally there is no guarantee that
    // the factory has been previously instantiated. 
    IFC_RETURN(PivotItemDataAutomationPeerFactory::EnsureProperties());


    RRETURN(hr);
}

_Check_return_ HRESULT
PivotItemDataAutomationPeerGenerated::InitializeImpl(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent)
{
    UNREFERENCED_PARAMETER(pItem);
    UNREFERENCED_PARAMETER(pParent);

    RRETURN(PivotItemDataAutomationPeerGenerated::InitializeImpl());
}

// Properties.
IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::get_IsSelected(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(pValue);
    IFC(get_IsSelectedImpl(pValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::get_SelectionContainer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppValue)
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(get_SelectionContainerImpl(ppValue));

Cleanup:
    RRETURN(hr);
}


// Events.

// Methods
IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::ScrollIntoView()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotItemDataAutomationPeer*>(this)->ScrollIntoViewImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::AddToSelection()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotItemDataAutomationPeer*>(this)->AddToSelectionImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::RemoveFromSelection()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotItemDataAutomationPeer*>(this)->RemoveFromSelectionImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::Select()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotItemDataAutomationPeer*>(this)->SelectImpl());
Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::Realize()
{
    HRESULT hr = S_OK;


    IFC(static_cast<PivotItemDataAutomationPeer*>(this)->RealizeImpl());
Cleanup:
    RRETURN(hr);
}


// Overrides
IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP PivotItemDataAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

// Dependency Property references.

// Initializers.
_Check_return_ HRESULT PivotItemDataAutomationPeerFactory::RuntimeClassInitialize()
{
    HRESULT hr = S_OK;

    IFC(EnsureProperties());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT PivotItemDataAutomationPeerFactory::EnsureProperties()
{

    return S_OK;
}

void PivotItemDataAutomationPeerFactory::ClearProperties()
{
}

IFACEMETHODIMP PivotItemDataAutomationPeerFactory::CreateInstanceWithParentAndItem(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotAutomationPeer* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer** ppInstance)
{
    HRESULT hr = S_OK;
    IFCPTR(ppInstance);
    ARG_VALIDRETURNPOINTER(ppInstance);
    ARG_NOTNULL(pItem, "pItem");
    ARG_NOTNULL(pParent, "pParent");
    IFC(CreateInstanceWithParentAndItemImpl(pItem, pParent, ppInstance));
Cleanup:
    RRETURN(hr);
}

// Static properties.

// Dependency properties.

// Attached properties.

// Static methods.

_Check_return_ HRESULT 
TimePickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize()
{
    RRETURN(InitializeImpl());
}
_Check_return_ HRESULT 
TimePickerFlyoutPresenterAutomationPeerGenerated::RuntimeClassInitialize(_In_ ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter* pOwner)
{
    RRETURN(InitializeImpl(pOwner));
}

_Check_return_ HRESULT
TimePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl()
{
    HRESULT hr = S_OK;


    RRETURN(hr);
}

_Check_return_ HRESULT
TimePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter* pOwner)
{
    UNREFERENCED_PARAMETER(pOwner);

    RRETURN(TimePickerFlyoutPresenterAutomationPeerGenerated::InitializeImpl());
}

// Properties.

// Events.

// Methods

// Overrides
IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPatternCoreImpl(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetPatternCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPatternCore(patternInterface, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAcceleratorKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetAcceleratorKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAcceleratorKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAccessKeyCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetAccessKeyCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAccessKeyCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationControlTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetAutomationIdCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetAutomationIdCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAutomationIdCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetBoundingRectangleCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetBoundingRectangleCoreImpl(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetBoundingRectangleCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetChildrenCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetChildrenCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetChildrenCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(NavigateCoreImpl(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::NavigateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->NavigateCore(direction, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClassNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetClassNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClassNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetClickablePointCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetClickablePointCoreImpl(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetClickablePointCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHelpTextCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetHelpTextCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHelpTextCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemStatusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetItemStatusCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemStatusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetItemTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetItemTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetItemTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetLabeledByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLabeledByCoreImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLabeledByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedControlTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedControlTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedControlTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetNameCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetNameCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetNameCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetOrientationCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetOrientationCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetOrientationCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(HasKeyboardFocusCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::HasKeyboardFocusCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->HasKeyboardFocusCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsContentElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsContentElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsContentElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsControlElementCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsControlElementCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsControlElementCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsEnabledCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsEnabledCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsEnabledCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsKeyboardFocusableCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsKeyboardFocusableCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsKeyboardFocusableCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsOffscreenCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsOffscreenCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsOffscreenCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPasswordCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsPasswordCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPasswordCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsRequiredForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsRequiredForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsRequiredForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    
    IFC(SetFocusCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::SetFocusCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->SetFocusCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetPeerFromPointCoreImpl(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetPeerFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPeerFromPointCore(point, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetElementFromPointCoreImpl(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFocusedElementCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetFocusedElementCoreImpl(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFocusedElementCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLiveSettingCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLiveSettingCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLiveSettingCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    
    IFC(ShowContextMenuCoreImpl());

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::ShowContextMenuCoreImpl()
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->ShowContextMenuCore());

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetControlledPeersCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetControlledPeersCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetControlledPeersCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetAnnotationsCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetAnnotationsCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetAnnotationsCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetPositionInSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetPositionInSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetPositionInSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetSizeOfSetCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetSizeOfSetCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetSizeOfSetCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLevelCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLandmarkTypeCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetLocalizedLandmarkTypeCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetLocalizedLandmarkTypeCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetLocalizedLandmarkTypeCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsPeripheralCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsPeripheralCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsPeripheralCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDataValidForFormCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsDataValidForFormCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDataValidForFormCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetFullDescriptionCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetFullDescriptionCoreImpl(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFullDescriptionCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetDescribedByCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetDescribedByCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetDescribedByCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsToCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsToCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsToCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(GetFlowsFromCoreImpl(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetFlowsFromCoreImpl(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetFlowsFromCore(ppReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetCultureCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetCultureCoreImpl(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetCultureCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(GetHeadingLevelCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::GetHeadingLevelCoreImpl(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->GetHeadingLevelCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}

IFACEMETHODIMP TimePickerFlyoutPresenterAutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(IsDialogCoreImpl(pReturnValue));

Cleanup:
    RRETURN(hr);
}

_Check_return_ HRESULT TimePickerFlyoutPresenterAutomationPeerGenerated::IsDialogCoreImpl(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;

    wrl::ComPtr<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> spOverrides;
    IFC(GetComposableBase().As(&spOverrides));
    IFC(spOverrides->IsDialogCore(pReturnValue));

Cleanup:
    RRETURN(hr);
}
}
}}}}}

