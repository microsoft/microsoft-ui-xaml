// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "MediaPlayerElement.g.h"
#include "ImageSource.g.h"
#include "MediaTransportControls.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::MediaPlayerElementGenerated::MediaPlayerElementGenerated()
{
}

DirectUI::MediaPlayerElementGenerated::~MediaPlayerElementGenerated()
{
}

HRESULT DirectUI::MediaPlayerElementGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::MediaPlayerElement)))
    {
        *ppObject = static_cast<DirectUI::MediaPlayerElement*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement)))
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ISupportInitialize)))
    {
        *ppObject = static_cast<DirectUI::ISupportInitialize*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_AreTransportControlsEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_AreTransportControlsEnabled, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_AreTransportControlsEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_AreTransportControlsEnabled, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_AutoPlay(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<MediaPlayerElement*>(this)->get_AutoPlayImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_AutoPlay(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->put_AutoPlayImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_IsFullWindow(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_IsFullWindow, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_IsFullWindow(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_IsFullWindow, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_MediaPlayer(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlayer** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_MediaPlayer, ppValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_PosterSource(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IImageSource** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_PosterSource, ppValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_PosterSource(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IImageSource* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_PosterSource, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_Source(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlaybackSource** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<MediaPlayerElement*>(this)->get_SourceImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_Source(_In_opt_ ABI::Windows::Media::Playback::IMediaPlaybackSource* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->put_SourceImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_Stretch(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_Stretch, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_Stretch(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MediaPlayerElement_Stretch, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::get_TransportControls(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<MediaPlayerElement*>(this)->get_TransportControlsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::put_TransportControls(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->put_TransportControlsImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::MediaPlayerElementGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pLayoutRootPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pMediaPlayerPresenterPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pPosterImagePart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pTimedTextSourcePresenterPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pTransportControlsPresenterPart;

    IFC(DirectUI::Control::OnApplyTemplate());

    // First try to resolve all parts.
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"LayoutRoot").Get(), &pLayoutRootPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"MediaPlayerPresenter").Get(), &pMediaPlayerPresenterPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"PosterImage").Get(), &pPosterImagePart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"TimedTextSourcePresenter").Get(), &pTimedTextSourcePresenterPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"TransportControlsPresenter").Get(), &pTransportControlsPresenterPart));

    // If everything succeeded, store the references.
    SetPtrValueWithQIOrNull(m_tpLayoutRootPart, pLayoutRootPart.Get());
    SetPtrValueWithQIOrNull(m_tpMediaPlayerPresenterPart, pMediaPlayerPresenterPart.Get());
    SetPtrValueWithQIOrNull(m_tpPosterImagePart, pPosterImagePart.Get());
    SetPtrValueWithQIOrNull(m_tpTimedTextSourcePresenterPart, pTimedTextSourcePresenterPart.Get());
    SetPtrValueWithQIOrNull(m_tpTransportControlsPresenterPart, pTransportControlsPresenterPart.Get());

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::BeginInit()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_BeginInit", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->BeginInitImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_BeginInit", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::EndInit(_In_opt_ DirectUI::XamlServiceProviderContext* pContext)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_EndInit", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->EndInitImpl(pContext));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_EndInit", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::MediaPlayerElementGenerated::SetMediaPlayer(_In_opt_ ABI::Windows::Media::Playback::IMediaPlayer* pMediaPlayer)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_SetMediaPlayer", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MediaPlayerElement*>(this)->SetMediaPlayerImpl(pMediaPlayer));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "MediaPlayerElement_SetMediaPlayer", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::MediaPlayerElementFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_SourceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_Source, ppValue));
}

IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_AreTransportControlsEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_AreTransportControlsEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_PosterSourceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_PosterSource, ppValue));
}
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_StretchProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_Stretch, ppValue));
}
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_AutoPlayProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_AutoPlay, ppValue));
}
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_IsFullWindowProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_IsFullWindow, ppValue));
}
IFACEMETHODIMP DirectUI::MediaPlayerElementFactory::get_MediaPlayerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MediaPlayerElement_MediaPlayer, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_MediaPlayerElement()
    {
        RRETURN(ctl::ActivationFactoryCreator<MediaPlayerElementFactory>::CreateActivationFactory());
    }
}
