// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ScaleTransform.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ScaleTransform::ScaleTransform()
{
}

DirectUI::ScaleTransform::~ScaleTransform()
{
}

HRESULT DirectUI::ScaleTransform::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ScaleTransform)))
    {
        *ppObject = static_cast<DirectUI::ScaleTransform*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IScaleTransform)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IScaleTransform*>(this);
    }
    else
    {
        RRETURN(DirectUI::Transform::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ScaleTransform::get_CenterX(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterX, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::put_CenterX(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterX, value));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::get_CenterXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterXAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::put_CenterXAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterXAnimation, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::get_CenterY(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterY, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::put_CenterY(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterY, value));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::get_CenterYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterYAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::put_CenterYAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_CenterYAnimation, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::get_ScaleX(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleX, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::put_ScaleX(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleX, value));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::get_ScaleXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleXAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::put_ScaleXAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleXAnimation, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::get_ScaleY(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleY, pValue));
}
IFACEMETHODIMP DirectUI::ScaleTransform::put_ScaleY(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleY, value));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::get_ScaleYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleYAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::ScaleTransform::put_ScaleYAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScaleTransform_ScaleYAnimation, pValue));
}

// Events.

// Methods.

HRESULT DirectUI::ScaleTransformFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IScaleTransformStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IScaleTransformStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ScaleTransformFactory::get_CenterXProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScaleTransform_CenterX, ppValue));
}

IFACEMETHODIMP DirectUI::ScaleTransformFactory::get_CenterYProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScaleTransform_CenterY, ppValue));
}

IFACEMETHODIMP DirectUI::ScaleTransformFactory::get_ScaleXProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScaleTransform_ScaleX, ppValue));
}

IFACEMETHODIMP DirectUI::ScaleTransformFactory::get_ScaleYProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScaleTransform_ScaleY, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ScaleTransform()
    {
        RRETURN(ctl::ActivationFactoryCreator<ScaleTransformFactory>::CreateActivationFactory());
    }
}
