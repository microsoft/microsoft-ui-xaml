// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkTemplate.g.h"

#define __DataTemplate_GUID "2ba5f834-0618-4292-bb15-ea4f88f4ecd2"

namespace DirectUI
{
    class DataTemplate;
    class ElementFactoryGetArgs;
    class ElementFactoryRecycleArgs;
    class UIElement;

    class __declspec(novtable) DataTemplateGenerated:
        public DirectUI::FrameworkTemplate
        , public ABI::Microsoft::UI::Xaml::IDataTemplate
        , public ABI::Microsoft::UI::Xaml::IElementFactory
    {
        friend class DirectUI::DataTemplate;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.DataTemplate");

        BEGIN_INTERFACE_MAP(DataTemplateGenerated, DirectUI::FrameworkTemplate)
            INTERFACE_ENTRY(DataTemplateGenerated, ABI::Microsoft::UI::Xaml::IDataTemplate)
            INTERFACE_ENTRY(DataTemplateGenerated, ABI::Microsoft::UI::Xaml::IElementFactory)
        END_INTERFACE_MAP(DataTemplateGenerated, DirectUI::FrameworkTemplate)

    public:
        DataTemplateGenerated();
        ~DataTemplateGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::DataTemplate;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::DataTemplate;
        }

        // Properties.

        // Events.

        // Methods.
        IFACEMETHOD(GetElement)(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryGetArgs* pArgs, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue) override;
        IFACEMETHOD(LoadContent)(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue) override;
        IFACEMETHOD(RecycleElement)(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryRecycleArgs* pArgs) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "DataTemplate_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) DataTemplateFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::IDataTemplateFactory
        , public ABI::Microsoft::UI::Xaml::IDataTemplateStatics
    {
        BEGIN_INTERFACE_MAP(DataTemplateFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(DataTemplateFactory, ABI::Microsoft::UI::Xaml::IDataTemplateFactory)
            INTERFACE_ENTRY(DataTemplateFactory, ABI::Microsoft::UI::Xaml::IDataTemplateStatics)
        END_INTERFACE_MAP(DataTemplateFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.
        static _Check_return_ HRESULT GetExtensionInstanceStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension** ppValue);
        static _Check_return_ HRESULT SetExtensionInstanceStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension* pValue);
        IFACEMETHOD(get_ExtensionInstanceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(GetExtensionInstance)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension** ppValue);
        IFACEMETHOD(SetExtensionInstance)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension* pValue);

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::DataTemplate;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
