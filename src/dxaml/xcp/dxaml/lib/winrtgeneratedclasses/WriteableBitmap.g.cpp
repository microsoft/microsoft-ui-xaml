// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "WriteableBitmap.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::WriteableBitmapGenerated::WriteableBitmapGenerated()
{
}

DirectUI::WriteableBitmapGenerated::~WriteableBitmapGenerated()
{
}

HRESULT DirectUI::WriteableBitmapGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::WriteableBitmap)))
    {
        *ppObject = static_cast<DirectUI::WriteableBitmap*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap*>(this);
    }
    else
    {
        RRETURN(DirectUI::BitmapSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::WriteableBitmapGenerated::get_PixelBuffer(_Outptr_result_maybenull_ ABI::Windows::Storage::Streams::IBuffer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<WriteableBitmap*>(this)->get_PixelBufferImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::WriteableBitmapGenerated::Invalidate()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "WriteableBitmap_Invalidate", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<WriteableBitmap*>(this)->InvalidateImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "WriteableBitmap_Invalidate", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::WriteableBitmapFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::WriteableBitmapFactory::CreateInstanceWithDimensions(_In_ INT pixelWidth, _In_ INT pixelHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithDimensionsImpl(pixelWidth, pixelHeight, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_WriteableBitmap()
    {
        RRETURN(ctl::ActivationFactoryCreator<WriteableBitmapFactory>::CreateActivationFactory());
    }
}
