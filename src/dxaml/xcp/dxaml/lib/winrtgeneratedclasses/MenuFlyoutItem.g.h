// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "MenuFlyoutItemBase.g.h"

#define __MenuFlyoutItem_GUID "d39d96d6-cc5d-4df8-85f5-b4f353f1f6e8"

namespace DirectUI
{
    class MenuFlyoutItem;
    class IconElement;
    class MenuFlyoutItemTemplateSettings;

    class __declspec(novtable) MenuFlyoutItemGenerated:
        public DirectUI::MenuFlyoutItemBase
        , public ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem
    {
        friend class DirectUI::MenuFlyoutItem;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.MenuFlyoutItem");

        BEGIN_INTERFACE_MAP(MenuFlyoutItemGenerated, DirectUI::MenuFlyoutItemBase)
            INTERFACE_ENTRY(MenuFlyoutItemGenerated, ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem)
        END_INTERFACE_MAP(MenuFlyoutItemGenerated, DirectUI::MenuFlyoutItemBase)

    public:
        MenuFlyoutItemGenerated();
        ~MenuFlyoutItemGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IRoutedEventArgs> ClickEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MenuFlyoutItem;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::MenuFlyoutItem;
        }

        // Properties.
        IFACEMETHOD(get_Command)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::ICommand** ppValue) override;
        IFACEMETHOD(put_Command)(_In_opt_ ABI::Microsoft::UI::Xaml::Input::ICommand* pValue) override;
        IFACEMETHOD(get_CommandParameter)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_CommandParameter)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_Icon)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IIconElement** ppValue) override;
        IFACEMETHOD(put_Icon)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IIconElement* pValue) override;
        IFACEMETHOD(get_KeyboardAcceleratorTextOverride)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_KeyboardAcceleratorTextOverride)(_In_opt_ HSTRING value) override;
        _Check_return_ HRESULT get_PreventDismissOnPointer(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT put_PreventDismissOnPointer(_In_ BOOLEAN value);
        IFACEMETHOD(get_TemplateSettings)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings** ppValue) override;
        _Check_return_ HRESULT put_TemplateSettings(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings* pValue);
        IFACEMETHOD(get_Text)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_Text)(_In_opt_ HSTRING value) override;

        // Events.
        _Check_return_ HRESULT GetClickEventSourceNoRef(_Outptr_ ClickEventSourceType** ppEventSource);
        IFACEMETHOD(add_Click)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Click)(_In_ EventRegistrationToken token) override;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "MenuFlyoutItem_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) MenuFlyoutItemFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics
    {
        BEGIN_INTERFACE_MAP(MenuFlyoutItemFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(MenuFlyoutItemFactory, ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory)
            INTERFACE_ENTRY(MenuFlyoutItemFactory, ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics)
        END_INTERFACE_MAP(MenuFlyoutItemFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_TextProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_CommandProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_CommandParameterProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IconProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_KeyboardAcceleratorTextOverrideProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MenuFlyoutItem;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
