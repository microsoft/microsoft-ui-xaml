// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ContentDialog.g.h"
#include "DataTemplate.g.h"
#include "Style.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ContentDialogGenerated::ContentDialogGenerated()
{
}

DirectUI::ContentDialogGenerated::~ContentDialogGenerated()
{
}

HRESULT DirectUI::ContentDialogGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ContentDialog)))
    {
        *ppObject = static_cast<DirectUI::ContentDialog*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IContentDialog)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IContentDialog*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)))
    {
        *ppObject = static_cast<ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener*>(this);
    }
    else
    {
        RRETURN(DirectUI::ContentControl::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_CloseButtonCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::ICommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_CloseButtonCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Input::ICommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonCommand, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_CloseButtonCommandParameter(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_CloseButtonCommandParameter(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonCommandParameter, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_CloseButtonStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_CloseButtonStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonStyle, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_CloseButtonText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonText, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_CloseButtonText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_CloseButtonText, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_DefaultButton(_Out_ ABI::Microsoft::UI::Xaml::Controls::ContentDialogButton* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_DefaultButton, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_DefaultButton(_In_ ABI::Microsoft::UI::Xaml::Controls::ContentDialogButton value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_DefaultButton, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_FullSizeDesired(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_FullSizeDesired, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_FullSizeDesired(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_FullSizeDesired, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_IsPrimaryButtonEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_IsPrimaryButtonEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_IsPrimaryButtonEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_IsPrimaryButtonEnabled, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_IsSecondaryButtonEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_IsSecondaryButtonEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_IsSecondaryButtonEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_IsSecondaryButtonEnabled, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_PrimaryButtonCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::ICommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_PrimaryButtonCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Input::ICommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonCommand, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_PrimaryButtonCommandParameter(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_PrimaryButtonCommandParameter(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonCommandParameter, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_PrimaryButtonStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_PrimaryButtonStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonStyle, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_PrimaryButtonText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonText, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_PrimaryButtonText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_PrimaryButtonText, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_SecondaryButtonCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::ICommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_SecondaryButtonCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Input::ICommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonCommand, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_SecondaryButtonCommandParameter(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_SecondaryButtonCommandParameter(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonCommandParameter, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_SecondaryButtonStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_SecondaryButtonStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonStyle, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_SecondaryButtonText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonText, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_SecondaryButtonText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_SecondaryButtonText, value));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_Title(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_Title, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_Title(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_Title, pValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::get_TitleTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ContentDialog_TitleTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::put_TitleTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ContentDialog_TitleTemplate, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetCloseButtonClickEventSourceNoRef(_Outptr_ CloseButtonClickEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_CloseButtonClick, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CloseButtonClickEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_CloseButtonClick, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_CloseButtonClick, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_CloseButtonClick(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CloseButtonClickEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCloseButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_CloseButtonClick(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CloseButtonClickEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCloseButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_CloseButtonClick));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetClosedEventSourceNoRef(_Outptr_ ClosedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_Closed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ClosedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_Closed, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_Closed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_Closed(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_Closed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_Closed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetClosingEventSourceNoRef(_Outptr_ ClosingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_Closing, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ClosingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_Closing, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_Closing, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_Closing(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ClosingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_Closing(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ClosingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_Closing));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetOpenedEventSourceNoRef(_Outptr_ OpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_Opened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<OpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_Opened, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_Opened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_Opened(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_Opened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_Opened));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetPrimaryButtonClickEventSourceNoRef(_Outptr_ PrimaryButtonClickEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_PrimaryButtonClick, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PrimaryButtonClickEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_PrimaryButtonClick, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_PrimaryButtonClick, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_PrimaryButtonClick(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PrimaryButtonClickEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPrimaryButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_PrimaryButtonClick(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PrimaryButtonClickEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPrimaryButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_PrimaryButtonClick));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ContentDialogGenerated::GetSecondaryButtonClickEventSourceNoRef(_Outptr_ SecondaryButtonClickEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ContentDialog_SecondaryButtonClick, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SecondaryButtonClickEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ContentDialog_SecondaryButtonClick, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ContentDialog_SecondaryButtonClick, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::add_SecondaryButtonClick(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SecondaryButtonClickEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSecondaryButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ContentDialogGenerated::remove_SecondaryButtonClick(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SecondaryButtonClickEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSecondaryButtonClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ContentDialog_SecondaryButtonClick));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ContentDialogGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pBackgroundElementPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pButton1HostPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pButton2HostPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pCloseButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pCommandSpacePart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pContainerPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pContentPanelPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pContentPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pContentScrollViewerPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pDialogSpacePart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pLayoutRootPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pPrimaryButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pScaleTransformPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pSecondaryButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pTitlePart;

    IFC(DirectUI::ContentControl::OnApplyTemplate());

    // First try to resolve all parts.
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"BackgroundElement").Get(), &pBackgroundElementPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Button1Host").Get(), &pButton1HostPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Button2Host").Get(), &pButton2HostPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"CloseButton").Get(), &pCloseButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"CommandSpace").Get(), &pCommandSpacePart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Container").Get(), &pContainerPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ContentPanel").Get(), &pContentPanelPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Content").Get(), &pContentPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ContentScrollViewer").Get(), &pContentScrollViewerPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"DialogSpace").Get(), &pDialogSpacePart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"LayoutRoot").Get(), &pLayoutRootPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"PrimaryButton").Get(), &pPrimaryButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ScaleTransform").Get(), &pScaleTransformPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"SecondaryButton").Get(), &pSecondaryButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Title").Get(), &pTitlePart));

    // If everything succeeded, store the references.
    SetPtrValueWithQIOrNull(m_tpBackgroundElementPart, pBackgroundElementPart.Get());
    SetPtrValueWithQIOrNull(m_tpButton1HostPart, pButton1HostPart.Get());
    SetPtrValueWithQIOrNull(m_tpButton2HostPart, pButton2HostPart.Get());
    SetPtrValueWithQIOrNull(m_tpCloseButtonPart, pCloseButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpCommandSpacePart, pCommandSpacePart.Get());
    SetPtrValueWithQIOrNull(m_tpContainerPart, pContainerPart.Get());
    SetPtrValueWithQIOrNull(m_tpContentPanelPart, pContentPanelPart.Get());
    SetPtrValueWithQIOrNull(m_tpContentPart, pContentPart.Get());
    SetPtrValueWithQIOrNull(m_tpContentScrollViewerPart, pContentScrollViewerPart.Get());
    SetPtrValueWithQIOrNull(m_tpDialogSpacePart, pDialogSpacePart.Get());
    SetPtrValueWithQIOrNull(m_tpLayoutRootPart, pLayoutRootPart.Get());
    SetPtrValueWithQIOrNull(m_tpPrimaryButtonPart, pPrimaryButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpScaleTransformPart, pScaleTransformPart.Get());
    SetPtrValueWithQIOrNull(m_tpSecondaryButtonPart, pSecondaryButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpTitlePart, pTitlePart.Get());

Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::Hide()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ContentDialog_Hide", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ContentDialog*>(this)->HideImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ContentDialog_Hide", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::OnBackButtonPressed(_Out_ BOOLEAN* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ContentDialog_OnBackButtonPressed", 0);
    }
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ContentDialog*>(this)->OnBackButtonPressedImpl(pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ContentDialog_OnBackButtonPressed", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::ShowAsync(_Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Controls::ContentDialogResult>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ContentDialog_ShowAsync", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ContentDialog*>(this)->ShowAsyncImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ContentDialog_ShowAsync", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ContentDialogGenerated::ShowAsyncWithPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ContentDialogPlacement placement, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Controls::ContentDialogResult>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ContentDialog_ShowAsyncWithPlacement", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ContentDialog*>(this)->ShowAsyncWithPlacementImpl(placement, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ContentDialog_ShowAsyncWithPlacement", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ContentDialogGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ContentDialog_CloseButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                CloseButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetCloseButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Closed:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ClosedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetClosedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Closing:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ClosingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetClosingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Opened:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                OpenedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetOpenedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_PrimaryButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                PrimaryButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetPrimaryButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_SecondaryButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SecondaryButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSecondaryButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ContentControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ContentDialogGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ContentDialog_CloseButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                CloseButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetCloseButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Closed:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ClosedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetClosedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Closing:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ClosingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetClosingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_Opened:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                OpenedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetOpenedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_PrimaryButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                PrimaryButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetPrimaryButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ContentDialog_SecondaryButtonClick:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ContentDialog*, ABI::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SecondaryButtonClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSecondaryButtonClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ContentControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ContentDialogFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IContentDialogFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IContentDialogFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IContentDialogStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IContentDialogStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ContentDialogFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IContentDialog** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IContentDialog);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_TitleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_Title, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_TitleTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_TitleTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_FullSizeDesiredProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_FullSizeDesired, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_PrimaryButtonTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_PrimaryButtonText, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_SecondaryButtonTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_SecondaryButtonText, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_CloseButtonTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_CloseButtonText, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_PrimaryButtonCommandProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_PrimaryButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_SecondaryButtonCommandProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_SecondaryButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_CloseButtonCommandProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_CloseButtonCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_PrimaryButtonCommandParameterProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_PrimaryButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_SecondaryButtonCommandParameterProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_SecondaryButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_CloseButtonCommandParameterProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_CloseButtonCommandParameter, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_IsPrimaryButtonEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_IsPrimaryButtonEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_IsSecondaryButtonEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_IsSecondaryButtonEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_PrimaryButtonStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_PrimaryButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_SecondaryButtonStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_SecondaryButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_CloseButtonStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_CloseButtonStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ContentDialogFactory::get_DefaultButtonProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ContentDialog_DefaultButton, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ContentDialog()
    {
        RRETURN(ctl::ActivationFactoryCreator<ContentDialogFactory>::CreateActivationFactory());
    }
}
