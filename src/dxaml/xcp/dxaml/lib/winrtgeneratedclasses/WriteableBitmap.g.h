// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "BitmapSource.g.h"

#define __WriteableBitmap_GUID "1a238ad6-83f6-4882-b4b0-c0892d263181"

namespace DirectUI
{
    class WriteableBitmap;

    class __declspec(novtable) WriteableBitmapGenerated:
        public DirectUI::BitmapSource
        , public ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap
    {
        friend class DirectUI::WriteableBitmap;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap");

        BEGIN_INTERFACE_MAP(WriteableBitmapGenerated, DirectUI::BitmapSource)
            INTERFACE_ENTRY(WriteableBitmapGenerated, ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap)
        END_INTERFACE_MAP(WriteableBitmapGenerated, DirectUI::BitmapSource)

    public:
        WriteableBitmapGenerated();
        ~WriteableBitmapGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::WriteableBitmap;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::WriteableBitmap;
        }

        // Properties.
        IFACEMETHOD(get_PixelBuffer)(_Outptr_result_maybenull_ ABI::Windows::Storage::Streams::IBuffer** ppValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(Invalidate)() override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "WriteableBitmap_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) WriteableBitmapFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory
    {
        BEGIN_INTERFACE_MAP(WriteableBitmapFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(WriteableBitmapFactory, ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory)
        END_INTERFACE_MAP(WriteableBitmapFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithDimensions)(_In_ INT pixelWidth, _In_ INT pixelHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::WriteableBitmap;
        }


    private:
        _Check_return_ HRESULT CreateInstanceWithDimensionsImpl(_In_ INT pixelWidth, _In_ INT pixelHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
