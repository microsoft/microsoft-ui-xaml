// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Thumb.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ThumbGenerated::ThumbGenerated(): m_isPointerOver()
{
}

DirectUI::ThumbGenerated::~ThumbGenerated()
{
}

HRESULT DirectUI::ThumbGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Thumb)))
    {
        *ppObject = static_cast<DirectUI::Thumb*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumb)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumb*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ThumbGenerated::get_IsDragging(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Thumb_IsDragging, pValue));
}
_Check_return_ HRESULT DirectUI::ThumbGenerated::put_IsDragging(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Thumb_IsDragging, value));
}
_Check_return_ HRESULT DirectUI::ThumbGenerated::get_IsPointerOver(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_isPointerOver, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ThumbGenerated::put_IsPointerOver(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_isPointerOver));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::ThumbGenerated::GetDragCompletedEventSourceNoRef(_Outptr_ DragCompletedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Thumb_DragCompleted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DragCompletedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Thumb_DragCompleted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Thumb_DragCompleted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::add_DragCompleted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DragCompletedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::remove_DragCompleted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DragCompletedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Thumb_DragCompleted));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ThumbGenerated::GetDragDeltaEventSourceNoRef(_Outptr_ DragDeltaEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Thumb_DragDelta, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DragDeltaEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Thumb_DragDelta, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Thumb_DragDelta, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::add_DragDelta(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DragDeltaEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragDeltaEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::remove_DragDelta(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DragDeltaEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragDeltaEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Thumb_DragDelta));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ThumbGenerated::GetDragStartedEventSourceNoRef(_Outptr_ DragStartedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Thumb_DragStarted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DragStartedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Thumb_DragStarted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Thumb_DragStarted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::add_DragStarted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DragStartedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ThumbGenerated::remove_DragStarted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DragStartedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Thumb_DragStarted));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ThumbGenerated::CancelDrag()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Thumb_CancelDrag", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Thumb*>(this)->CancelDragImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Thumb_CancelDrag", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ThumbGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Thumb_DragCompleted:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Thumb_DragDelta:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragDeltaEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragDeltaEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Thumb_DragStarted:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragStartedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragStartedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ThumbGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Thumb_DragCompleted:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Thumb_DragDelta:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragDeltaEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragDeltaEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Thumb_DragStarted:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragStartedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragStartedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ThumbFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ThumbFactory::get_IsDraggingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Thumb_IsDragging, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Thumb()
    {
        RRETURN(ctl::ActivationFactoryCreator<ThumbFactory>::CreateActivationFactory());
    }
}
