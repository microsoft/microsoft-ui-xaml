// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __DesktopWindowXamlSource_GUID "e6336955-51ed-4e64-9067-506501e80451"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_Content)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override { return This()->get_Content(ppValue); }
        IFACEMETHOD(put_Content)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override { return This()->put_Content(pValue); }
        IFACEMETHOD(get_HasFocus)(_Out_ BOOLEAN* pValue) override { return This()->get_HasFocus(pValue); }
        IFACEMETHOD(get_SiteBridge)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Content::IDesktopChildSiteBridge** ppValue) override { return This()->get_SiteBridge(ppValue); }
        IFACEMETHOD(get_SystemBackdrop)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue) override { return This()->get_SystemBackdrop(ppValue); }
        IFACEMETHOD(put_SystemBackdrop)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue) override { return This()->put_SystemBackdrop(pValue); }
        IFACEMETHOD(Initialize)(_In_ ABI::Microsoft::UI::WindowId parentWindowId) override { return This()->Initialize(parentWindowId); }
        IFACEMETHOD(NavigateFocus)(_In_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest* pRequest, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationResult** ppResult) override { return This()->NavigateFocus(pRequest, ppResult); }
        IFACEMETHOD(add_GotFocus)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_GotFocus(pValue, pToken); }
        IFACEMETHOD(remove_GotFocus)(_In_ EventRegistrationToken token) override { return This()->remove_GotFocus(token); }
        IFACEMETHOD(add_TakeFocusRequested)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_TakeFocusRequested(pValue, pToken); }
        IFACEMETHOD(remove_TakeFocusRequested)(_In_ EventRegistrationToken token) override { return This()->remove_TakeFocusRequested(token); }
    };
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource2, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource2, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_ShouldConstrainPopupsToWorkArea)(_Out_ BOOLEAN* pValue) override { return This()->get_ShouldConstrainPopupsToWorkArea(pValue); }
        IFACEMETHOD(put_ShouldConstrainPopupsToWorkArea)(_In_ BOOLEAN value) override { return This()->put_ShouldConstrainPopupsToWorkArea(value); }
    };
}
#pragma endregion

namespace DirectUI
{
    class DesktopWindowXamlSource;
    class SystemBackdrop;
    class UIElement;
    class XamlSourceFocusNavigationRequest;

    class __declspec(novtable) DesktopWindowXamlSourceGenerated:
        public ctl::WeakReferenceSource
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource, DesktopWindowXamlSourceGenerated >
        , public ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop
        , public ABI::Windows::Foundation::IClosable
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource2, DesktopWindowXamlSourceGenerated >
    {
        friend class DirectUI::DesktopWindowXamlSource;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource");

        BEGIN_INTERFACE_MAP(DesktopWindowXamlSourceGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(DesktopWindowXamlSourceGenerated, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource)
            INTERFACE_ENTRY(DesktopWindowXamlSourceGenerated, ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop)
            INTERFACE_ENTRY(DesktopWindowXamlSourceGenerated, ABI::Windows::Foundation::IClosable)
            INTERFACE_ENTRY(DesktopWindowXamlSourceGenerated, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource2)
        END_INTERFACE_MAP(DesktopWindowXamlSourceGenerated, ctl::WeakReferenceSource)

    public:
        DesktopWindowXamlSourceGenerated();
        ~DesktopWindowXamlSourceGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs*>, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSourceTakeFocusRequestedEventArgs> TakeFocusRequestedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs*>, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSourceGotFocusEventArgs> GotFocusEventSourceType;


        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Content(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Content(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_HasFocus(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_ShouldConstrainPopupsToWorkArea(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_ShouldConstrainPopupsToWorkArea(_In_ BOOLEAN value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_SiteBridge(_Outptr_result_maybenull_ ABI::Microsoft::UI::Content::IDesktopChildSiteBridge** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue);

        // Events.
        virtual _Check_return_ HRESULT GetGotFocusEventSourceNoRef(_Outptr_ GotFocusEventSourceType** ppEventSource) = 0;
        _Check_return_ HRESULT STDMETHODCALLTYPE add_GotFocus(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceGotFocusEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_GotFocus(_In_ EventRegistrationToken token);
        virtual _Check_return_ HRESULT GetTakeFocusRequestedEventSourceNoRef(_Outptr_ TakeFocusRequestedEventSourceType** ppEventSource) = 0;
        _Check_return_ HRESULT STDMETHODCALLTYPE add_TakeFocusRequested(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSource*, ABI::Microsoft::UI::Xaml::Hosting::DesktopWindowXamlSourceTakeFocusRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_TakeFocusRequested(_In_ EventRegistrationToken token);

        // Methods.
        _Check_return_ HRESULT STDMETHODCALLTYPE Initialize(_In_ ABI::Microsoft::UI::WindowId parentWindowId);
        _Check_return_ HRESULT STDMETHODCALLTYPE NavigateFocus(_In_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest* pRequest, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationResult** ppResult);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
       _Check_return_ HRESULT EventAddPreValidation(_In_ void* const pValue, EventRegistrationToken* const ptToken) const;

        // Fields.
    };
}

#include "DesktopWindowXamlSource_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) DesktopWindowXamlSourceFactory:
       public ctl::AggregableActivationFactory<DirectUI::DesktopWindowXamlSource>
        , public ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSourceFactory
    {
        BEGIN_INTERFACE_MAP(DesktopWindowXamlSourceFactory, ctl::AggregableActivationFactory<DirectUI::DesktopWindowXamlSource>)
            INTERFACE_ENTRY(DesktopWindowXamlSourceFactory, ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSourceFactory)
        END_INTERFACE_MAP(DesktopWindowXamlSourceFactory, ctl::AggregableActivationFactory<DirectUI::DesktopWindowXamlSource>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IDesktopWindowXamlSource** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
