// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "IconElement.g.h"

#define __SymbolIcon_GUID "610584aa-9a0f-4a60-93bc-52bb48367145"

namespace DirectUI
{
    class SymbolIcon;

    class __declspec(novtable) SymbolIconGenerated:
        public DirectUI::IconElement
        , public ABI::Microsoft::UI::Xaml::Controls::ISymbolIcon
    {
        friend class DirectUI::SymbolIcon;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.SymbolIcon");

        BEGIN_INTERFACE_MAP(SymbolIconGenerated, DirectUI::IconElement)
            INTERFACE_ENTRY(SymbolIconGenerated, ABI::Microsoft::UI::Xaml::Controls::ISymbolIcon)
        END_INTERFACE_MAP(SymbolIconGenerated, DirectUI::IconElement)

    public:
        SymbolIconGenerated();
        ~SymbolIconGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SymbolIcon;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::SymbolIcon;
        }

        // Properties.
        IFACEMETHOD(get_Symbol)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Symbol* pValue) override;
        IFACEMETHOD(put_Symbol)(_In_ ABI::Microsoft::UI::Xaml::Controls::Symbol value) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "SymbolIcon_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SymbolIconFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::ISymbolIconFactory
        , public ABI::Microsoft::UI::Xaml::Controls::ISymbolIconStatics
    {
        BEGIN_INTERFACE_MAP(SymbolIconFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(SymbolIconFactory, ABI::Microsoft::UI::Xaml::Controls::ISymbolIconFactory)
            INTERFACE_ENTRY(SymbolIconFactory, ABI::Microsoft::UI::Xaml::Controls::ISymbolIconStatics)
        END_INTERFACE_MAP(SymbolIconFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithSymbol)(_In_ ABI::Microsoft::UI::Xaml::Controls::Symbol symbol, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ISymbolIcon** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_SymbolProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SymbolIcon;
        }


    private:
        _Check_return_ HRESULT CreateInstanceWithSymbolImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::Symbol symbol, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ISymbolIcon** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
