// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "DataTemplate.g.h"
#include "ElementFactoryGetArgs.g.h"
#include "ElementFactoryRecycleArgs.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::DataTemplateGenerated::DataTemplateGenerated()
{
}

DirectUI::DataTemplateGenerated::~DataTemplateGenerated()
{
}

HRESULT DirectUI::DataTemplateGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::DataTemplate)))
    {
        *ppObject = static_cast<DirectUI::DataTemplate*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IDataTemplate*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IElementFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IElementFactory*>(this);
    }
    else
    {
        RRETURN(DirectUI::FrameworkTemplate::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::DataTemplateGenerated::GetElement(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryGetArgs* pArgs, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DataTemplate_GetElement", 0);
    }
    ARG_NOTNULL(pArgs, "args");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<DataTemplate*>(this)->GetElementImpl(pArgs, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DataTemplate_GetElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DataTemplateGenerated::LoadContent(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DataTemplate_LoadContent", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<DataTemplate*>(this)->LoadContentImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DataTemplate_LoadContent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DataTemplateGenerated::RecycleElement(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryRecycleArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DataTemplate_RecycleElement", 0);
    }
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<DataTemplate*>(this)->RecycleElementImpl(pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DataTemplate_RecycleElement", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::DataTemplateFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplateFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IDataTemplateFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplateStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IDataTemplateStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::DataTemplateFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT DirectUI::DataTemplateFactory::GetExtensionInstanceStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::DataTemplate_ExtensionInstance, ppValue));
}

_Check_return_ HRESULT DirectUI::DataTemplateFactory::SetExtensionInstanceStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::DataTemplate_ExtensionInstance, pValue));
}


IFACEMETHODIMP DirectUI::DataTemplateFactory::get_ExtensionInstanceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DataTemplate_ExtensionInstance, ppValue));
}


IFACEMETHODIMP DirectUI::DataTemplateFactory::GetExtensionInstance(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension** ppValue)
{
    RRETURN(GetExtensionInstanceStatic(pElement, ppValue));
}

IFACEMETHODIMP DirectUI::DataTemplateFactory::SetExtensionInstance(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplateExtension* pValue)
{
    RRETURN(SetExtensionInstanceStatic(pElement, pValue));
}

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_DataTemplate()
    {
        RRETURN(ctl::ActivationFactoryCreator<DataTemplateFactory>::CreateActivationFactory());
    }
}
