// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ContentControl.g.h"

#define __SelectorItem_GUID "fc7f5516-860f-4955-84f5-1da1c81c5516"

namespace DirectUI
{
    class SelectorItem;

    class __declspec(novtable) SelectorItemGenerated:
        public DirectUI::ContentControl
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem
    {
        friend class DirectUI::SelectorItem;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.SelectorItem");

        BEGIN_INTERFACE_MAP(SelectorItemGenerated, DirectUI::ContentControl)
            INTERFACE_ENTRY(SelectorItemGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem)
        END_INTERFACE_MAP(SelectorItemGenerated, DirectUI::ContentControl)

    public:
        SelectorItemGenerated();
        ~SelectorItemGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SelectorItem;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::SelectorItem;
        }

        // Properties.
        _Check_return_ HRESULT get_IsPointerOver(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT put_IsPointerOver(_In_ BOOLEAN value);
        IFACEMETHOD(get_IsSelected)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsSelected)(_In_ BOOLEAN value) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
        BOOLEAN m_isPointerOver;
    };
}

#include "SelectorItem_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SelectorItemFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics
    {
        BEGIN_INTERFACE_MAP(SelectorItemFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(SelectorItemFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory)
            INTERFACE_ENTRY(SelectorItemFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics)
        END_INTERFACE_MAP(SelectorItemFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_IsSelectedProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SelectorItem;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
