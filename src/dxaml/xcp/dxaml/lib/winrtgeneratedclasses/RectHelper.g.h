// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once



#include "RectHelper_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) RectHelperFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::IRectHelperStatics
        , public ABI::Microsoft::UI::Xaml::IRectHelperStaticsPrivate
    {
        BEGIN_INTERFACE_MAP(RectHelperFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(RectHelperFactory, ABI::Microsoft::UI::Xaml::IRectHelperStatics)
            INTERFACE_ENTRY(RectHelperFactory, ABI::Microsoft::UI::Xaml::IRectHelperStaticsPrivate)
        END_INTERFACE_MAP(RectHelperFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.

        // Static properties.
        IFACEMETHOD(get_Empty)(_Out_ ABI::Windows::Foundation::Rect* pValue) override;

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(FromCoordinatesAndDimensions)(_In_ FLOAT x, _In_ FLOAT y, _In_ FLOAT width, _In_ FLOAT height, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(FromPoints)(_In_ ABI::Windows::Foundation::Point point1, _In_ ABI::Windows::Foundation::Point point2, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(FromLocationAndSize)(_In_ ABI::Windows::Foundation::Point location, _In_ ABI::Windows::Foundation::Size size, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(GetIsEmpty)(_In_ ABI::Windows::Foundation::Rect target, _Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(GetBottom)(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue) override;
        IFACEMETHOD(GetLeft)(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue) override;
        IFACEMETHOD(GetRight)(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue) override;
        IFACEMETHOD(GetTop)(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue) override;
        IFACEMETHOD(Contains)(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Point point, _Out_ BOOLEAN* pReturnValue) override;
        IFACEMETHOD(Equals)(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect value, _Out_ BOOLEAN* pReturnValue) override;
        IFACEMETHOD(Intersect)(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect rect, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(UnionWithPoint)(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Point point, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(UnionWithRect)(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect rect, _Out_ ABI::Windows::Foundation::Rect* pReturnValue) override;
        IFACEMETHOD(DipsRectToPhysicalRect)(_In_ ABI::Windows::Foundation::Rect dipsRect, _Out_ ABI::Windows::Foundation::Rect* pResult) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:

        // Customized static properties.
         _Check_return_ HRESULT get_EmptyImpl(_Out_ ABI::Windows::Foundation::Rect* pValue); 

        // Customized static  methods.
         _Check_return_ HRESULT FromCoordinatesAndDimensionsImpl(_In_ FLOAT x, _In_ FLOAT y, _In_ FLOAT width, _In_ FLOAT height, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT FromPointsImpl(_In_ ABI::Windows::Foundation::Point point1, _In_ ABI::Windows::Foundation::Point point2, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT FromLocationAndSizeImpl(_In_ ABI::Windows::Foundation::Point location, _In_ ABI::Windows::Foundation::Size size, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT GetIsEmptyImpl(_In_ ABI::Windows::Foundation::Rect target, _Out_ BOOLEAN* pValue); 
         _Check_return_ HRESULT GetBottomImpl(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue); 
         _Check_return_ HRESULT GetLeftImpl(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue); 
         _Check_return_ HRESULT GetRightImpl(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue); 
         _Check_return_ HRESULT GetTopImpl(_In_ ABI::Windows::Foundation::Rect target, _Out_ FLOAT* pValue); 
         _Check_return_ HRESULT ContainsImpl(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Point point, _Out_ BOOLEAN* pReturnValue); 
         _Check_return_ HRESULT EqualsImpl(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect value, _Out_ BOOLEAN* pReturnValue); 
         _Check_return_ HRESULT IntersectImpl(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect rect, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT UnionWithPointImpl(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Point point, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT UnionWithRectImpl(_In_ ABI::Windows::Foundation::Rect target, _In_ ABI::Windows::Foundation::Rect rect, _Out_ ABI::Windows::Foundation::Rect* pReturnValue); 
         _Check_return_ HRESULT DipsRectToPhysicalRectImpl(_In_ ABI::Windows::Foundation::Rect dipsRect, _Out_ ABI::Windows::Foundation::Rect* pResult); 
    };
}
