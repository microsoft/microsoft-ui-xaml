// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CalendarPanel.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CalendarPanelGenerated::CalendarPanelGenerated()
{
}

DirectUI::CalendarPanelGenerated::~CalendarPanelGenerated()
{
}

HRESULT DirectUI::CalendarPanelGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CalendarPanel)))
    {
        *ppObject = static_cast<DirectUI::CalendarPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IOrientedPanel)))
    {
        *ppObject = static_cast<DirectUI::IOrientedPanel*>(this);
    }
    else
    {
        RRETURN(DirectUI::ModernCollectionBasePanel::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_CacheLength(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_CacheLength, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_CacheLength(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_CacheLength, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_Cols(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Cols, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_Cols(_In_ INT value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Cols, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_FirstCacheIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CalendarPanel*>(this)->get_FirstCacheIndexImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_FirstVisibleIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CalendarPanel*>(this)->get_FirstVisibleIndexImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_ItemMinHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_ItemMinHeight, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_ItemMinHeight(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_ItemMinHeight, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_ItemMinWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_ItemMinWidth, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_ItemMinWidth(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_ItemMinWidth, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_LastCacheIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CalendarPanel*>(this)->get_LastCacheIndexImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_LastVisibleIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CalendarPanel*>(this)->get_LastVisibleIndexImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_Orientation(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Orientation, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_Orientation(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Orientation, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_Rows(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Rows, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_Rows(_In_ INT value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_Rows, value));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_ScrollingDirection(_Out_ ABI::Microsoft::UI::Xaml::Controls::PanelScrollingDirection* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CalendarPanel*>(this)->get_ScrollingDirectionImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::get_StartIndex(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_StartIndex, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarPanelGenerated::put_StartIndex(_In_ INT value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarPanel_StartIndex, value));
}

// Events.

// Methods.

// Factory methods.

// Dependency properties.








// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_CalendarPanel()
    {
        RRETURN(ctl::ActivationFactoryCreator<CalendarPanelFactory>::CreateActivationFactory());
    }
}
