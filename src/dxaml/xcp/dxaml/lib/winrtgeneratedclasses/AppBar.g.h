// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ContentControl.g.h"

#define __AppBar_GUID "8b02a325-a1ee-434f-aeaa-131cf438b6d3"

namespace DirectUI
{
    class AppBar;
    class AppBarTemplateSettings;

    class __declspec(novtable) AppBarGenerated:
        public DirectUI::ContentControl
        , public ABI::Microsoft::UI::Xaml::Controls::IAppBar
        , public ABI::Microsoft::UI::Xaml::Controls::IAppBarOverrides
        , public ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener
    {
        friend class DirectUI::AppBar;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.AppBar");

        BEGIN_INTERFACE_MAP(AppBarGenerated, DirectUI::ContentControl)
            INTERFACE_ENTRY(AppBarGenerated, ABI::Microsoft::UI::Xaml::Controls::IAppBar)
            INTERFACE_ENTRY(AppBarGenerated, ABI::Microsoft::UI::Xaml::Controls::IAppBarOverrides)
            INTERFACE_ENTRY(AppBarGenerated, ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)
        END_INTERFACE_MAP(AppBarGenerated, DirectUI::ContentControl)

    public:
        AppBarGenerated();
        ~AppBarGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> OpeningEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> OpenedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> ClosingEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> ClosedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::AppBar;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::AppBar;
        }

        // Properties.
        IFACEMETHOD(get_ClosedDisplayMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::AppBarClosedDisplayMode* pValue) override;
        IFACEMETHOD(put_ClosedDisplayMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::AppBarClosedDisplayMode value) override;
        IFACEMETHOD(get_IsOpen)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsOpen)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_IsSticky)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsSticky)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_LightDismissOverlayMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue) override;
        IFACEMETHOD(put_LightDismissOverlayMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value) override;
        IFACEMETHOD(get_TemplateSettings)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings** ppValue) override;
        _Check_return_ HRESULT put_TemplateSettings(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings* pValue);

        // Events.
        _Check_return_ HRESULT GetClosedEventSourceNoRef(_Outptr_ ClosedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Closed)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Closed)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetClosingEventSourceNoRef(_Outptr_ ClosingEventSourceType** ppEventSource);
        IFACEMETHOD(add_Closing)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Closing)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetOpenedEventSourceNoRef(_Outptr_ OpenedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Opened)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Opened)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetOpeningEventSourceNoRef(_Outptr_ OpeningEventSourceType** ppEventSource);
        IFACEMETHOD(add_Opening)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Opening)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(OnBackButtonPressed)(_Out_ BOOLEAN* pResult) override;
        IFACEMETHOD(OnClosed)(_In_ IInspectable* pE) override;
        _Check_return_ HRESULT OnClosedProtected(_In_ IInspectable* pE);
        IFACEMETHOD(OnClosing)(_In_ IInspectable* pE) override;
        _Check_return_ HRESULT OnClosingProtected(_In_ IInspectable* pE);
        IFACEMETHOD(OnOpened)(_In_ IInspectable* pE) override;
        _Check_return_ HRESULT OnOpenedProtected(_In_ IInspectable* pE);
        IFACEMETHOD(OnOpening)(_In_ IInspectable* pE) override;
        _Check_return_ HRESULT OnOpeningProtected(_In_ IInspectable* pE);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "AppBar_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) AppBarFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IAppBarFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IAppBarStatics
    {
        BEGIN_INTERFACE_MAP(AppBarFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(AppBarFactory, ABI::Microsoft::UI::Xaml::Controls::IAppBarFactory)
            INTERFACE_ENTRY(AppBarFactory, ABI::Microsoft::UI::Xaml::Controls::IAppBarStatics)
        END_INTERFACE_MAP(AppBarFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IAppBar** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_IsOpenProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsStickyProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ClosedDisplayModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_LightDismissOverlayModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::AppBar;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
