// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ItemsChangedEventArgs.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ItemsChangedEventArgs::ItemsChangedEventArgs(): m_action(), m_position(), m_oldPosition(), m_itemCount(), m_itemUICount()
{
}

DirectUI::ItemsChangedEventArgs::~ItemsChangedEventArgs()
{
}

HRESULT DirectUI::ItemsChangedEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ItemsChangedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::ItemsChangedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ItemsChangedEventArgs::get_Action(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_action, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ItemsChangedEventArgs::put_Action(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_action));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsChangedEventArgs::get_ItemCount(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_itemCount, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ItemsChangedEventArgs::put_ItemCount(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_itemCount));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsChangedEventArgs::get_ItemUICount(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_itemUICount, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ItemsChangedEventArgs::put_ItemUICount(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_itemUICount));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsChangedEventArgs::get_OldPosition(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_oldPosition, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ItemsChangedEventArgs::put_OldPosition(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_oldPosition));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsChangedEventArgs::get_Position(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_position, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ItemsChangedEventArgs::put_Position(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_position));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ItemsChangedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
