// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ToggleSwitch.g.h"
#include "DataTemplate.g.h"
#include "ToggleSwitchTemplateSettings.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ToggleSwitchGenerated::ToggleSwitchGenerated()
{
}

DirectUI::ToggleSwitchGenerated::~ToggleSwitchGenerated()
{
}

HRESULT DirectUI::ToggleSwitchGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ToggleSwitch)))
    {
        *ppObject = static_cast<DirectUI::ToggleSwitch*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IToggleSwitch)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IToggleSwitch*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_Header, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_IsOn(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_IsOn, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_IsOn(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_IsOn, value));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_OffContent(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OffContent, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_OffContent(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OffContent, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_OffContentTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OffContentTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_OffContentTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OffContentTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_OnContent(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OnContent, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_OnContent(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OnContent, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_OnContentTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OnContentTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::put_OnContentTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_OnContentTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::get_TemplateSettings(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_TemplateSettings, ppValue));
}
_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::put_TemplateSettings(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ToggleSwitch_TemplateSettings, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::GetToggledEventSourceNoRef(_Outptr_ ToggledEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ToggleSwitch_Toggled, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ToggledEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ToggleSwitch_Toggled, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ToggleSwitch_Toggled, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::add_Toggled(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ToggledEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetToggledEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::remove_Toggled(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ToggledEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetToggledEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ToggleSwitch_Toggled));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::OnHeaderChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnHeaderChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ToggleSwitch*>(this)->OnHeaderChangedImpl(pOldContent, pNewContent));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnHeaderChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::OnHeaderChangedProtected(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnHeaderChanged(pOldContent, pNewContent));
    }
    else
    {
        IFC(OnHeaderChanged(pOldContent, pNewContent));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::OnOffContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnOffContentChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ToggleSwitch*>(this)->OnOffContentChangedImpl(pOldContent, pNewContent));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnOffContentChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::OnOffContentChangedProtected(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnOffContentChanged(pOldContent, pNewContent));
    }
    else
    {
        IFC(OnOffContentChanged(pOldContent, pNewContent));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::OnOnContentChanged(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnOnContentChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ToggleSwitch*>(this)->OnOnContentChangedImpl(pOldContent, pNewContent));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnOnContentChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::OnOnContentChangedProtected(_In_opt_ IInspectable* pOldContent, _In_opt_ IInspectable* pNewContent)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnOnContentChanged(pOldContent, pNewContent));
    }
    else
    {
        IFC(OnOnContentChanged(pOldContent, pNewContent));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ToggleSwitchGenerated::OnToggled()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnToggled", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ToggleSwitch*>(this)->OnToggledImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ToggleSwitch_OnToggled", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::OnToggledProtected()
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnToggled());
    }
    else
    {
        IFC(OnToggled());
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ToggleSwitch_Toggled:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::IRoutedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ToggledEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetToggledEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ToggleSwitchGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ToggleSwitch_Toggled:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::IRoutedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ToggledEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetToggledEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ToggleSwitchFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IToggleSwitchStaticsFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_IsOnProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_IsOn, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_OnContentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_OnContent, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_OnContentTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_OnContentTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_OffContentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_OffContent, ppValue));
}
IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_OffContentTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_OffContentTemplate, ppValue));
}

IFACEMETHODIMP DirectUI::ToggleSwitchFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ToggleSwitch_HeaderPlacement, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ToggleSwitch()
    {
        RRETURN(ctl::ActivationFactoryCreator<ToggleSwitchFactory>::CreateActivationFactory());
    }
}
