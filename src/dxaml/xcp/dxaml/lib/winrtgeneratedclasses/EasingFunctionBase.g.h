// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __EasingFunctionBase_GUID "e4ec7ec1-6d51-4e9b-aa09-2c14a0eff318"

namespace DirectUI
{
    class EasingFunctionBase;

    class __declspec(novtable) EasingFunctionBaseGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase
    {
        friend class DirectUI::EasingFunctionBase;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase");

        BEGIN_INTERFACE_MAP(EasingFunctionBaseGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(EasingFunctionBaseGenerated, ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase)
        END_INTERFACE_MAP(EasingFunctionBaseGenerated, DirectUI::DependencyObject)

    public:
        EasingFunctionBaseGenerated();
        ~EasingFunctionBaseGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::EasingFunctionBase;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::EasingFunctionBase;
        }

        // Properties.
        IFACEMETHOD(get_EasingMode)(_Out_ ABI::Microsoft::UI::Xaml::Media::Animation::EasingMode* pValue) override;
        IFACEMETHOD(put_EasingMode)(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::EasingMode value) override;

        // Events.

        // Methods.
        IFACEMETHOD(Ease)(_In_ DOUBLE normalizedTime, _Out_ DOUBLE* pReturnValue) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "EasingFunctionBase_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) EasingFunctionBaseFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory
        , public ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics
    {
        BEGIN_INTERFACE_MAP(EasingFunctionBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(EasingFunctionBaseFactory, ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory)
            INTERFACE_ENTRY(EasingFunctionBaseFactory, ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics)
        END_INTERFACE_MAP(EasingFunctionBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_EasingModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::EasingFunctionBase;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
