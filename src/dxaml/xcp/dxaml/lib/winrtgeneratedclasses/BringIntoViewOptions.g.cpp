// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "BringIntoViewOptions.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::BringIntoViewOptionsGenerated::BringIntoViewOptionsGenerated(): m_animationDesired()
{
}

DirectUI::BringIntoViewOptionsGenerated::~BringIntoViewOptionsGenerated()
{
}

HRESULT DirectUI::BringIntoViewOptionsGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::BringIntoViewOptions)))
    {
        *ppObject = static_cast<DirectUI::BringIntoViewOptions*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IBringIntoViewOptions)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IBringIntoViewOptions*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_AnimationDesired(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_animationDesired, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_AnimationDesired(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_animationDesired));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_HorizontalAlignmentRatio(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->get_HorizontalAlignmentRatioImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_HorizontalAlignmentRatio(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->put_HorizontalAlignmentRatioImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_HorizontalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->get_HorizontalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_HorizontalOffset(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->put_HorizontalOffsetImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_TargetRect(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_targetRect.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_TargetRect(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_targetRect, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_VerticalAlignmentRatio(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->get_VerticalAlignmentRatioImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_VerticalAlignmentRatio(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->put_VerticalAlignmentRatioImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::get_VerticalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->get_VerticalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BringIntoViewOptionsGenerated::put_VerticalOffset(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<BringIntoViewOptions*>(this)->put_VerticalOffsetImpl(value));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_BringIntoViewOptions()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::BringIntoViewOptions>>::CreateActivationFactory());
    }
}
