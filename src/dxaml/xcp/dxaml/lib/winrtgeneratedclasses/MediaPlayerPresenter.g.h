// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkElement.g.h"

#define __MediaPlayerPresenter_GUID "c9dc45d1-1576-4ca7-ab3c-b6ae8ae1476e"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_IsFullWindow)(_Out_ BOOLEAN* pValue) override { return This()->get_IsFullWindow(pValue); }
        IFACEMETHOD(put_IsFullWindow)(_In_ BOOLEAN value) override { return This()->put_IsFullWindow(value); }
        IFACEMETHOD(get_MediaPlayer)(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlayer** ppValue) override { return This()->get_MediaPlayer(ppValue); }
        IFACEMETHOD(put_MediaPlayer)(_In_opt_ ABI::Windows::Media::Playback::IMediaPlayer* pValue) override { return This()->put_MediaPlayer(pValue); }
        IFACEMETHOD(get_Stretch)(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue) override { return This()->get_Stretch(pValue); }
        IFACEMETHOD(put_Stretch)(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value) override { return This()->put_Stretch(value); }
    };
}
#pragma endregion

namespace DirectUI
{
    class MediaPlayerPresenter;

    class __declspec(novtable) MediaPlayerPresenterGenerated:
        public DirectUI::FrameworkElement
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter, MediaPlayerPresenterGenerated >
    {
        friend class DirectUI::MediaPlayerPresenter;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.MediaPlayerPresenter");

        BEGIN_INTERFACE_MAP(MediaPlayerPresenterGenerated, DirectUI::FrameworkElement)
            INTERFACE_ENTRY(MediaPlayerPresenterGenerated, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter)
        END_INTERFACE_MAP(MediaPlayerPresenterGenerated, DirectUI::FrameworkElement)

    public:
        MediaPlayerPresenterGenerated();
        ~MediaPlayerPresenterGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MediaPlayerPresenter;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::MediaPlayerPresenter;
        }

        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_IsFullWindow(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_IsFullWindow(_In_ BOOLEAN value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_MediaPlayer(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlayer** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_MediaPlayer(_In_opt_ ABI::Windows::Media::Playback::IMediaPlayer* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Stretch(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Stretch(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "MediaPlayerPresenter_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) MediaPlayerPresenterFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics
    {
        BEGIN_INTERFACE_MAP(MediaPlayerPresenterFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(MediaPlayerPresenterFactory, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory)
            INTERFACE_ENTRY(MediaPlayerPresenterFactory, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics)
        END_INTERFACE_MAP(MediaPlayerPresenterFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_MediaPlayerProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_StretchProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsFullWindowProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MediaPlayerPresenter;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
