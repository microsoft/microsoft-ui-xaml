// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ProvideValueTargetProperty.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ProvideValueTargetPropertyGenerated::ProvideValueTargetPropertyGenerated()
{
}

DirectUI::ProvideValueTargetPropertyGenerated::~ProvideValueTargetPropertyGenerated()
{
}

HRESULT DirectUI::ProvideValueTargetPropertyGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ProvideValueTargetProperty)))
    {
        *ppObject = static_cast<DirectUI::ProvideValueTargetProperty*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IProvideValueTargetProperty)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IProvideValueTargetProperty*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ProvideValueTargetPropertyGenerated::get_DeclaringType(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ProvideValueTargetProperty*>(this)->get_DeclaringTypeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ProvideValueTargetPropertyGenerated::get_Name(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ProvideValueTargetProperty*>(this)->get_NameImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ProvideValueTargetPropertyGenerated::get_Type(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ProvideValueTargetProperty*>(this)->get_TypeImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ProvideValueTargetProperty()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::ProvideValueTargetProperty>>::CreateActivationFactory());
    }
}
