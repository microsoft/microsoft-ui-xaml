// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ItemsControl.g.h"
#include "DataTemplate.g.h"
#include "DataTemplateSelector.g.h"
#include "GroupStyleSelector.g.h"
#include "ItemCollection.g.h"
#include "ItemContainerGenerator.g.h"
#include "ItemsPanelTemplate.g.h"
#include "Panel.g.h"
#include "Style.g.h"
#include "StyleSelector.g.h"
#include "TransitionCollection.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ItemsControlGenerated::ItemsControlGenerated()
{
}

DirectUI::ItemsControlGenerated::~ItemsControlGenerated()
{
}

HRESULT DirectUI::ItemsControlGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ItemsControl)))
    {
        *ppObject = static_cast<DirectUI::ItemsControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemsControl)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemsControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemContainerMapping)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemContainerMapping*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IContainerRecyclingContext)))
    {
        *ppObject = static_cast<DirectUI::IContainerRecyclingContext*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IGroupHeaderMapping)))
    {
        *ppObject = static_cast<DirectUI::IGroupHeaderMapping*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_DisplayMemberPath(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_DisplayMemberPath, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_DisplayMemberPath(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_DisplayMemberPath, value));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_GroupStyle(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<ABI::Microsoft::UI::Xaml::Controls::GroupStyle*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ItemsControl*>(this)->get_GroupStyleImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_GroupStyleSelector(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_GroupStyleSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_GroupStyleSelector(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_GroupStyleSelector, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_IsGrouping(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_IsGrouping, pValue));
}
_Check_return_ HRESULT DirectUI::ItemsControlGenerated::put_IsGrouping(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_IsGrouping, value));
}
_Check_return_ HRESULT DirectUI::ItemsControlGenerated::get_IsItemsHostInvalid(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_IsItemsHostInvalid, pValue));
}
_Check_return_ HRESULT DirectUI::ItemsControlGenerated::put_IsItemsHostInvalid(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_IsItemsHostInvalid, value));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemContainerGenerator(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IItemContainerGenerator** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ItemsControl*>(this)->get_ItemContainerGeneratorImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemContainerStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemContainerStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerStyle, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemContainerStyleSelector(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerStyleSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemContainerStyleSelector(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerStyleSelector, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemContainerTransitions(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemContainerTransitions(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemContainerTransitions, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_Items(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_Items, ppValue));
}
_Check_return_ HRESULT DirectUI::ItemsControlGenerated::get_ItemsHost(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IPanel** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsHost, ppValue));
}
_Check_return_ HRESULT DirectUI::ItemsControlGenerated::put_ItemsHost(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IPanel* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsHost, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemsPanel(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsPanel, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemsPanel(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsPanel, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemsPanelRoot(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IPanel** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ItemsControl*>(this)->get_ItemsPanelRootImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemsSource(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsSource, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemsSource(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemsSource, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_ItemTemplateSelector(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemTemplateSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_ItemTemplateSelector(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ItemsControl_ItemTemplateSelector, pValue));
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::get_SelectedContainer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ItemsControl*>(this)->get_SelectedContainerImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::put_SelectedContainer(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->put_SelectedContainerImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::ItemsControlGenerated::ClearContainerForItemOverride(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_ClearContainerForItemOverride", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->ClearContainerForItemOverrideImpl(pElement, pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_ClearContainerForItemOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::ClearContainerForItemOverrideProtected(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->ClearContainerForItemOverride(pElement, pItem));
    }
    else
    {
        IFC(ClearContainerForItemOverride(pElement, pItem));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::ConfigureSelectedContainer(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pContainer)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_ConfigureSelectedContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->ConfigureSelectedContainerImpl(pContainer));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_ConfigureSelectedContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::ContainerFromIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_ContainerFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->ContainerFromIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_ContainerFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::ContainerFromItem(_In_opt_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_ContainerFromItem", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->ContainerFromItemImpl(pItem, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_ContainerFromItem", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::GetContainerForItemOverride(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_GetContainerForItemOverride", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->GetContainerForItemOverrideImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_GetContainerForItemOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::GetContainerForItemOverrideProtected(_Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetContainerForItemOverride(ppReturnValue));
    }
    else
    {
        IFC(GetContainerForItemOverride(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::GroupFromHeader(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeader, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_GroupFromHeader", 0);
    }
    ARG_NOTNULL(pHeader, "header");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->GroupFromHeaderImpl(pHeader, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_GroupFromHeader", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::GroupHeaderContainerFromItemContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pItemContainer, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_GroupHeaderContainerFromItemContainer", 0);
    }
    ARG_NOTNULL(pItemContainer, "itemContainer");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->GroupHeaderContainerFromItemContainerImpl(pItemContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_GroupHeaderContainerFromItemContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::HeaderFromGroup(_In_ IInspectable* pGroup, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_HeaderFromGroup", 0);
    }
    ARG_NOTNULL(pGroup, "group");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->HeaderFromGroupImpl(pGroup, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_HeaderFromGroup", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::HeaderFromIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_HeaderFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->HeaderFromIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_HeaderFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::IndexFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_IndexFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->IndexFromContainerImpl(pContainer, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_IndexFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::IndexFromHeader(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeader, _In_ BOOLEAN excludeHiddenEmptyGroups, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_IndexFromHeader", 0);
    }
    ARG_NOTNULL(pHeader, "header");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->IndexFromHeaderImpl(pHeader, excludeHiddenEmptyGroups, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_IndexFromHeader", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::IsCompatible(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pCandidate, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_IsCompatible", 0);
    }
    ARG_NOTNULL(pCandidate, "candidate");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->IsCompatibleImpl(pCandidate, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_IsCompatible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::IsItemItsOwnContainerOverride(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_IsItemItsOwnContainerOverride", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->IsItemItsOwnContainerOverrideImpl(pItem, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_IsItemItsOwnContainerOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::IsItemItsOwnContainerOverrideProtected(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsItemItsOwnContainerOverride(pItem, pReturnValue));
    }
    else
    {
        IFC(IsItemItsOwnContainerOverride(pItem, pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::ItemFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_ItemFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->ItemFromContainerImpl(pContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_ItemFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnGroupStyleSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnGroupStyleSelectorChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnGroupStyleSelectorChangedImpl(pOldGroupStyleSelector, pNewGroupStyleSelector));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnGroupStyleSelectorChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnGroupStyleSelectorChangedProtected(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pOldGroupStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyleSelector* pNewGroupStyleSelector)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnGroupStyleSelectorChanged(pOldGroupStyleSelector, pNewGroupStyleSelector));
    }
    else
    {
        IFC(OnGroupStyleSelectorChanged(pOldGroupStyleSelector, pNewGroupStyleSelector));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnItemContainerStyleChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemContainerStyleChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnItemContainerStyleChangedImpl(pOldItemContainerStyle, pNewItemContainerStyle));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemContainerStyleChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnItemContainerStyleChangedProtected(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pOldItemContainerStyle, _In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pNewItemContainerStyle)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnItemContainerStyleChanged(pOldItemContainerStyle, pNewItemContainerStyle));
    }
    else
    {
        IFC(OnItemContainerStyleChanged(pOldItemContainerStyle, pNewItemContainerStyle));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnItemContainerStyleSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemContainerStyleSelectorChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnItemContainerStyleSelectorChangedImpl(pOldItemContainerStyleSelector, pNewItemContainerStyleSelector));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemContainerStyleSelectorChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnItemContainerStyleSelectorChangedProtected(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pOldItemContainerStyleSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pNewItemContainerStyleSelector)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnItemContainerStyleSelectorChanged(pOldItemContainerStyleSelector, pNewItemContainerStyleSelector));
    }
    else
    {
        IFC(OnItemContainerStyleSelectorChanged(pOldItemContainerStyleSelector, pNewItemContainerStyleSelector));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnItemsChanged(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemsChanged", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnItemsChangedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemsChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnItemsChangedProtected(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnItemsChanged(pE));
    }
    else
    {
        IFC(OnItemsChanged(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnItemTemplateChanged(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemTemplateChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnItemTemplateChangedImpl(pOldItemTemplate, pNewItemTemplate));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemTemplateChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnItemTemplateChangedProtected(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pOldItemTemplate, _In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pNewItemTemplate)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnItemTemplateChanged(pOldItemTemplate, pNewItemTemplate));
    }
    else
    {
        IFC(OnItemTemplateChanged(pOldItemTemplate, pNewItemTemplate));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::OnItemTemplateSelectorChanged(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemTemplateSelectorChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->OnItemTemplateSelectorChangedImpl(pOldItemTemplateSelector, pNewItemTemplateSelector));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_OnItemTemplateSelectorChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::OnItemTemplateSelectorChangedProtected(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pOldItemTemplateSelector, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pNewItemTemplateSelector)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnItemTemplateSelectorChanged(pOldItemTemplateSelector, pNewItemTemplateSelector));
    }
    else
    {
        IFC(OnItemTemplateSelectorChanged(pOldItemTemplateSelector, pNewItemTemplateSelector));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::PrepareContainerForItemOverride(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_PrepareContainerForItemOverride", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->PrepareContainerForItemOverrideImpl(pElement, pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_PrepareContainerForItemOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ItemsControlGenerated::PrepareContainerForItemOverrideProtected(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IItemsControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->PrepareContainerForItemOverride(pElement, pItem));
    }
    else
    {
        IFC(PrepareContainerForItemOverride(pElement, pItem));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::PrepareForItemRecycling(_In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_PrepareForItemRecycling", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->PrepareForItemRecyclingImpl(pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_PrepareForItemRecycling", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlGenerated::StopRecycling()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemsControl_StopRecycling", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ItemsControl*>(this)->StopRecyclingImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemsControl_StopRecycling", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::ItemsControlFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemsControlFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemsControlFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemsControlStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemsControlStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ItemsControlFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IItemsControl** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemsControl);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemsSourceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemsSource, ppValue));
}

IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemTemplateSelectorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemTemplateSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemsPanelProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemsPanel, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_DisplayMemberPathProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_DisplayMemberPath, ppValue));
}


IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemContainerStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemContainerStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemContainerStyleSelectorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemContainerStyleSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_ItemContainerTransitionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_ItemContainerTransitions, ppValue));
}

IFACEMETHODIMP DirectUI::ItemsControlFactory::get_GroupStyleSelectorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_GroupStyleSelector, ppValue));
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::get_IsGroupingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ItemsControl_IsGrouping, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::ItemsControlFactory::GetItemsOwner(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IItemsControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "ItemsControl_GetItemsOwner", 0);
    }
    ARG_NOTNULL(pElement, "element");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(GetItemsOwnerImpl(pElement, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "ItemsControl_GetItemsOwner", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemsControlFactory::ItemsControlFromItemContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IItemsControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "ItemsControl_ItemsControlFromItemContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(ItemsControlFromItemContainerImpl(pContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "ItemsControl_ItemsControlFromItemContainer", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ItemsControl()
    {
        RRETURN(ctl::ActivationFactoryCreator<ItemsControlFactory>::CreateActivationFactory());
    }
}
