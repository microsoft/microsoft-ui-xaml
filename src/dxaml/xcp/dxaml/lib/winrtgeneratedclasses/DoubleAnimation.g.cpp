// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "DoubleAnimation.g.h"
#include "EasingFunctionBase.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::DoubleAnimation::DoubleAnimation()
{
}

DirectUI::DoubleAnimation::~DoubleAnimation()
{
}

HRESULT DirectUI::DoubleAnimation::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::DoubleAnimation)))
    {
        *ppObject = static_cast<DirectUI::DoubleAnimation*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation*>(this);
    }
    else
    {
        RRETURN(DirectUI::Timeline::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::DoubleAnimation::get_By(_Out_ ABI::Windows::Foundation::IReference<DOUBLE>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_By, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::put_By(_In_ ABI::Windows::Foundation::IReference<DOUBLE>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_By, pValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::get_EasingFunction(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_EasingFunction, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::put_EasingFunction(_In_opt_ ABI::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_EasingFunction, pValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::get_EnableDependentAnimation(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_EnableDependentAnimation, pValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::put_EnableDependentAnimation(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_EnableDependentAnimation, value));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::get_From(_Out_ ABI::Windows::Foundation::IReference<DOUBLE>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_From, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::put_From(_In_ ABI::Windows::Foundation::IReference<DOUBLE>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_From, pValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::get_To(_Out_ ABI::Windows::Foundation::IReference<DOUBLE>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_To, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimation::put_To(_In_ ABI::Windows::Foundation::IReference<DOUBLE>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DoubleAnimation_To, pValue));
}

// Events.

// Methods.

HRESULT DirectUI::DoubleAnimationFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::DoubleAnimationFactory::get_FromProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DoubleAnimation_From, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimationFactory::get_ToProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DoubleAnimation_To, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimationFactory::get_ByProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DoubleAnimation_By, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimationFactory::get_EasingFunctionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DoubleAnimation_EasingFunction, ppValue));
}
IFACEMETHODIMP DirectUI::DoubleAnimationFactory::get_EnableDependentAnimationProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DoubleAnimation_EnableDependentAnimation, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_DoubleAnimation()
    {
        RRETURN(ctl::ActivationFactoryCreator<DoubleAnimationFactory>::CreateActivationFactory());
    }
}
