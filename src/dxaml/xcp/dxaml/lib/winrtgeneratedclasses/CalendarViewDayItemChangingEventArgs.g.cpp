// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "CalendarViewDayItemChangingEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::CalendarViewDayItemChangingEventArgsGenerated::CalendarViewDayItemChangingEventArgsGenerated(): m_inRecycleQueue(), m_phase(), m_wantsCallBack()
{
}

DirectUI::CalendarViewDayItemChangingEventArgsGenerated::~CalendarViewDayItemChangingEventArgsGenerated()
{
}

HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CalendarViewDayItemChangingEventArgs)))
    {
        *ppObject = static_cast<DirectUI::CalendarViewDayItemChangingEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::CalendarViewDayItemChangingEventArgsGenerated::get_InRecycleQueue(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_inRecycleQueue, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::put_InRecycleQueue(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_inRecycleQueue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CalendarViewDayItemChangingEventArgsGenerated::get_Item(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pItem.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::put_Item(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pItem, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CalendarViewDayItemChangingEventArgsGenerated::get_Phase(_Out_ UINT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_phase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::put_Phase(_In_ UINT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_phase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::get_WantsCallBack(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_wantsCallBack, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::put_WantsCallBack(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_wantsCallBack));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::get_Callback(_Outptr_result_maybenull_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pCallback.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::put_Callback(_In_opt_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pCallback, pValue);
Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::CalendarViewDayItemChangingEventArgsGenerated::RegisterUpdateCallback(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>* pCallback)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_RegisterUpdateCallback", 0);
    }
    ARG_NOTNULL(pCallback, "callback");
    IFC(CheckThread());
    IFC(static_cast<CalendarViewDayItemChangingEventArgs*>(this)->RegisterUpdateCallbackImpl(pCallback));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_RegisterUpdateCallback", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CalendarViewDayItemChangingEventArgsGenerated::RegisterUpdateCallbackWithPhase(_In_ UINT callbackPhase, _In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>* pCallback)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_RegisterUpdateCallbackWithPhase", 0);
    }
    ARG_NOTNULL(pCallback, "callback");
    IFC(CheckThread());
    IFC(static_cast<CalendarViewDayItemChangingEventArgs*>(this)->RegisterUpdateCallbackWithPhaseImpl(callbackPhase, pCallback));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_RegisterUpdateCallbackWithPhase", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewDayItemChangingEventArgsGenerated::ResetLifetime()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_ResetLifetime", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<CalendarViewDayItemChangingEventArgs*>(this)->ResetLifetimeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CalendarViewDayItemChangingEventArgs_ResetLifetime", hr);
    }
    RRETURN(hr);
}


namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateCalendarViewDayItemChangingEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::CalendarViewDayItemChangingEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_CalendarViewDayItemChangingEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
