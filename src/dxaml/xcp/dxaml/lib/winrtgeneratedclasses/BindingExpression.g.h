// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "BindingExpressionBase.g.h"

#define __BindingExpression_GUID "0cefe851-8761-4e94-b5d3-60f4e7469ad8"

namespace DirectUI
{
    class BindingExpression;
    class Binding;

    class __declspec(novtable) BindingExpressionGenerated:
        public DirectUI::BindingExpressionBase
        , public ABI::Microsoft::UI::Xaml::Data::IBindingExpression
    {
        friend class DirectUI::BindingExpression;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Data.BindingExpression");

        BEGIN_INTERFACE_MAP(BindingExpressionGenerated, DirectUI::BindingExpressionBase)
            INTERFACE_ENTRY(BindingExpressionGenerated, ABI::Microsoft::UI::Xaml::Data::IBindingExpression)
        END_INTERFACE_MAP(BindingExpressionGenerated, DirectUI::BindingExpressionBase)

    public:
        BindingExpressionGenerated();
        ~BindingExpressionGenerated() override;

        // Event source typedefs.


        // Properties.
        IFACEMETHOD(get_DataItem)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(get_ParentBinding)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Data::IBinding** ppValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(UpdateSource)() override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "BindingExpression_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) BindingExpressionFactory:
       public ctl::AggregableActivationFactory<DirectUI::BindingExpression>
        , public ABI::Microsoft::UI::Xaml::Data::IBindingExpressionFactory
    {
        BEGIN_INTERFACE_MAP(BindingExpressionFactory, ctl::AggregableActivationFactory<DirectUI::BindingExpression>)
            INTERFACE_ENTRY(BindingExpressionFactory, ABI::Microsoft::UI::Xaml::Data::IBindingExpressionFactory)
        END_INTERFACE_MAP(BindingExpressionFactory, ctl::AggregableActivationFactory<DirectUI::BindingExpression>)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
