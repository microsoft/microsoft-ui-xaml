// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FlyoutBase.g.h"
#include "Control.g.h"
#include "FlyoutShowOptions.g.h"
#include "FrameworkElement.g.h"
#include "ProcessKeyboardAcceleratorEventArgs.g.h"
#include "SystemBackdrop.g.h"
#include "XamlRoot.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FlyoutBaseGenerated::FlyoutBaseGenerated()
{
}

DirectUI::FlyoutBaseGenerated::~FlyoutBaseGenerated()
{
}

HRESULT DirectUI::FlyoutBaseGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FlyoutBase)))
    {
        *ppObject = static_cast<DirectUI::FlyoutBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBasePrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBasePrivate*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2)))
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_AllowFocusOnInteraction(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AllowFocusOnInteraction, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_AllowFocusOnInteraction(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AllowFocusOnInteraction, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_AllowFocusWhenDisabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AllowFocusWhenDisabled, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_AllowFocusWhenDisabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AllowFocusWhenDisabled, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_AreOpenCloseAnimationsEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AreOpenCloseAnimationsEnabled, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_AreOpenCloseAnimationsEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_AreOpenCloseAnimationsEnabled, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_ElementSoundMode(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ElementSoundMode, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_ElementSoundMode(_In_ ABI::Microsoft::UI::Xaml::ElementSoundMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ElementSoundMode, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_InputDevicePrefersPrimaryCommands(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_InputDevicePrefersPrimaryCommands, pValue));
}
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::put_InputDevicePrefersPrimaryCommands(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_InputDevicePrefersPrimaryCommands, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_IsConstrainedToRootBounds(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<FlyoutBase*>(this)->get_IsConstrainedToRootBoundsImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_IsLightDismissOverlayEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<FlyoutBase*>(this)->get_IsLightDismissOverlayEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_IsLightDismissOverlayEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->put_IsLightDismissOverlayEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_IsOpen(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<FlyoutBase*>(this)->get_IsOpenImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_LightDismissOverlayMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_LightDismissOverlayMode, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_LightDismissOverlayMode(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_LightDismissOverlayMode, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_OverlayInputPassThroughElement(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_OverlayInputPassThroughElement, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_OverlayInputPassThroughElement(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_OverlayInputPassThroughElement, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_Placement(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_Placement, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_Placement(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_Placement, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_ShouldConstrainToRootBounds(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ShouldConstrainToRootBounds, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_ShouldConstrainToRootBounds(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ShouldConstrainToRootBounds, value));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_ShowMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ShowMode, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_ShowMode(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_ShowMode, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::FlyoutBaseGenerated::get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_SystemBackdrop, ppValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::FlyoutBaseGenerated::put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_SystemBackdrop, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_Target(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IFrameworkElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_Target, ppValue));
}
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::put_Target(_In_opt_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FlyoutBase_Target, pValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_UsePickerFlyoutTheme(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<FlyoutBase*>(this)->get_UsePickerFlyoutThemeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_UsePickerFlyoutTheme(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->put_UsePickerFlyoutThemeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::get_XamlRoot(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IXamlRoot** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<FlyoutBase*>(this)->get_XamlRootImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::put_XamlRoot(_In_opt_ ABI::Microsoft::UI::Xaml::IXamlRoot* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->put_XamlRootImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::GetClosedEventSourceNoRef(_Outptr_ ClosedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FlyoutBase_Closed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ClosedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FlyoutBase_Closed, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FlyoutBase_Closed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::add_Closed(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::remove_Closed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FlyoutBase_Closed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::GetClosingEventSourceNoRef(_Outptr_ ClosingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FlyoutBase_Closing, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ClosingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FlyoutBase_Closing, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FlyoutBase_Closing, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::add_Closing(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase*, ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ClosingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::remove_Closing(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ClosingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase*, ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase*, ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FlyoutBase_Closing));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::GetOpenedEventSourceNoRef(_Outptr_ OpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FlyoutBase_Opened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<OpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FlyoutBase_Opened, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FlyoutBase_Opened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::add_Opened(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::remove_Opened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FlyoutBase_Opened));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::GetOpeningEventSourceNoRef(_Outptr_ OpeningEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FlyoutBase_Opening, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<OpeningEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FlyoutBase_Opening, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FlyoutBase_Opening, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::add_Opening(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    OpeningEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::remove_Opening(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    OpeningEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FlyoutBase_Opening));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::CreatePresenter(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_CreatePresenter", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->CreatePresenterImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_CreatePresenter", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::CreatePresenterProtected(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->CreatePresenter(ppReturnValue));
    }
    else
    {
        IFC(CreatePresenter(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::Hide()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_Hide", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->HideImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_Hide", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::OnProcessKeyboardAccelerators(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_OnProcessKeyboardAccelerators", 0);
    }
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->OnProcessKeyboardAcceleratorsImpl(pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_OnProcessKeyboardAccelerators", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FlyoutBaseGenerated::OnProcessKeyboardAcceleratorsProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnProcessKeyboardAccelerators(pArgs));
    }
    else
    {
        IFC(OnProcessKeyboardAccelerators(pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::PlaceFlyoutForDateTimePicker(_In_ ABI::Windows::Foundation::Point point)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_PlaceFlyoutForDateTimePicker", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->PlaceFlyoutForDateTimePickerImpl(point));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_PlaceFlyoutForDateTimePicker", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::ShowAt(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pPlacementTarget)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_ShowAt", 0);
    }
    ARG_NOTNULL(pPlacementTarget, "placementTarget");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->ShowAtImpl(pPlacementTarget));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_ShowAt", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::ShowAtWithOptions(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pPlacementTarget, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions* pShowOptions)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_ShowAtWithOptions", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->ShowAtWithOptionsImpl(pPlacementTarget, pShowOptions));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_ShowAtWithOptions", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutBaseGenerated::TryInvokeKeyboardAccelerator(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FlyoutBase_TryInvokeKeyboardAccelerator", 0);
    }
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FlyoutBase*>(this)->TryInvokeKeyboardAcceleratorImpl(pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FlyoutBase_TryInvokeKeyboardAccelerator", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::FlyoutBaseFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_PlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_Placement, ppValue));
}

IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_AllowFocusOnInteractionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_AllowFocusOnInteraction, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_LightDismissOverlayModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_LightDismissOverlayMode, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_AllowFocusWhenDisabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_AllowFocusWhenDisabled, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_ShowModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_ShowMode, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_InputDevicePrefersPrimaryCommandsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_InputDevicePrefersPrimaryCommands, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_AreOpenCloseAnimationsEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_AreOpenCloseAnimationsEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_ShouldConstrainToRootBoundsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_ShouldConstrainToRootBounds, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_SystemBackdropProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_SystemBackdrop, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_ElementSoundModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_ElementSoundMode, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_OverlayInputPassThroughElementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_OverlayInputPassThroughElement, ppValue));
}
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_IsOpenProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_IsOpen, ppValue));
}

// Attached properties.
_Check_return_ HRESULT DirectUI::FlyoutBaseFactory::GetAttachedFlyoutStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::FlyoutBase_AttachedFlyout, ppValue));
}

_Check_return_ HRESULT DirectUI::FlyoutBaseFactory::SetAttachedFlyoutStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::FlyoutBase_AttachedFlyout, pValue));
}


IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_AttachedFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FlyoutBase_AttachedFlyout, ppValue));
}


IFACEMETHODIMP DirectUI::FlyoutBaseFactory::GetAttachedFlyout(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetAttachedFlyoutStatic(pElement, ppValue));
}

IFACEMETHODIMP DirectUI::FlyoutBaseFactory::SetAttachedFlyout(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    RRETURN(SetAttachedFlyoutStatic(pElement, pValue));
}

// Static properties.
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::get_TargetProperty(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckActivationAllowed());
    IFC(get_TargetPropertyImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.
IFACEMETHODIMP DirectUI::FlyoutBaseFactory::ShowAttachedFlyout(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pFlyoutOwner)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "FlyoutBase_ShowAttachedFlyout", 0);
    }
    ARG_NOTNULL(pFlyoutOwner, "flyoutOwner");
    IFC(CheckActivationAllowed());
    IFC(ShowAttachedFlyoutImpl(pFlyoutOwner));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "FlyoutBase_ShowAttachedFlyout", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FlyoutBase()
    {
        RRETURN(ctl::ActivationFactoryCreator<FlyoutBaseFactory>::CreateActivationFactory());
    }
}
