// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __DxamlCoreTestHooks_GUID "61615723-8486-4376-84d5-27d0ff539580"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
    };
}
#pragma endregion

namespace DirectUI
{
    class DxamlCoreTestHooks;

    class __declspec(novtable) DxamlCoreTestHooksGenerated:
        public ctl::WeakReferenceSource
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks, DxamlCoreTestHooksGenerated >
    {
        friend class DirectUI::DxamlCoreTestHooks;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.DxamlCoreTestHooks");

        BEGIN_INTERFACE_MAP(DxamlCoreTestHooksGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(DxamlCoreTestHooksGenerated, ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks)
        END_INTERFACE_MAP(DxamlCoreTestHooksGenerated, ctl::WeakReferenceSource)

    public:
        DxamlCoreTestHooksGenerated();
        ~DxamlCoreTestHooksGenerated() override;

        // Event source typedefs.


        // Properties.

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "DxamlCoreTestHooks_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) DxamlCoreTestHooksFactory:
       public ctl::ActivationFactory<DirectUI::DxamlCoreTestHooks>
        , public ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooksStatics
    {
        BEGIN_INTERFACE_MAP(DxamlCoreTestHooksFactory, ctl::ActivationFactory<DirectUI::DxamlCoreTestHooks>)
            INTERFACE_ENTRY(DxamlCoreTestHooksFactory, ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooksStatics)
        END_INTERFACE_MAP(DxamlCoreTestHooksFactory, ctl::ActivationFactory<DirectUI::DxamlCoreTestHooks>)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(GetForCurrentThread)(_Outptr_ ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks** ppResult) override;
        IFACEMETHOD(PerformProcessWideLeakDetection)(_In_ INT threshold) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT GetForCurrentThreadImpl(_Outptr_ ABI::Microsoft::UI::Xaml::IDxamlCoreTestHooks** ppResult); 
         _Check_return_ HRESULT PerformProcessWideLeakDetectionImpl(_In_ INT threshold); 
    };
}
