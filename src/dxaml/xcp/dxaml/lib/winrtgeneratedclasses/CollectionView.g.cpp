// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CollectionView.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CollectionViewGenerated::CollectionViewGenerated()
{
}

DirectUI::CollectionViewGenerated::~CollectionViewGenerated()
{
}

HRESULT DirectUI::CollectionViewGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CollectionView)))
    {
        *ppObject = static_cast<DirectUI::CollectionView*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::ICollectionView)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::ICollectionView*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::ICustomPropertyProvider)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::ICustomPropertyProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::INotifyPropertyChanged)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::INotifyPropertyChanged*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Windows::Foundation::Collections::IIterable<IInspectable*>)))
    {
        *ppObject = static_cast<ABI::Windows::Foundation::Collections::IIterable<IInspectable*>*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>)))
    {
        *ppObject = static_cast<ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Windows::Foundation::Collections::IVector<IInspectable*>)))
    {
        *ppObject = static_cast<ABI::Windows::Foundation::Collections::IVector<IInspectable*>*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_CollectionGroups(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_CollectionGroupsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_CurrentItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_CurrentItemImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_CurrentPosition(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_CurrentPositionImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_HasMoreItems(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_HasMoreItemsImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_IsCurrentAfterLast(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_IsCurrentAfterLastImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_IsCurrentBeforeFirst(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_IsCurrentBeforeFirstImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::get_Type(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<CollectionView*>(this)->get_TypeImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::CollectionViewGenerated::GetPropertyChangedEventSourceNoRef(_Outptr_ PropertyChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::CollectionView_PropertyChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PropertyChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::CollectionView_PropertyChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::CollectionView_PropertyChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CollectionViewGenerated::add_PropertyChanged(_In_ ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PropertyChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPropertyChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CollectionViewGenerated::remove_PropertyChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PropertyChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPropertyChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::CollectionView_PropertyChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::CollectionViewGenerated::GetCustomProperty(_In_ HSTRING name, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_GetCustomProperty", 0);
    }
    ARG_NOTNULL(name, "name");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->GetCustomPropertyImpl(name, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_GetCustomProperty", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::GetIndexedProperty(_In_ HSTRING name, _In_ ABI::Windows::UI::Xaml::Interop::TypeName type, _Outptr_ ABI::Microsoft::UI::Xaml::Data::ICustomProperty** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_GetIndexedProperty", 0);
    }
    ARG_NOTNULL(name, "name");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->GetIndexedPropertyImpl(name, type, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_GetIndexedProperty", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::GetStringRepresentation(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_GetStringRepresentation", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->GetStringRepresentationImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_GetStringRepresentation", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::LoadMoreItemsAsync(_In_ UINT count, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Data::LoadMoreItemsResult>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_LoadMoreItemsAsync", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->LoadMoreItemsAsyncImpl(count, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_LoadMoreItemsAsync", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentTo(_In_opt_ IInspectable* pItem, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentTo", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToImpl(pItem, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentTo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentToFirst(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToFirst", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToFirstImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToFirst", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentToLast(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToLast", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToLastImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToLast", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentToNext(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToNext", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToNextImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToNext", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentToPosition(_In_ INT index, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToPosition", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToPositionImpl(index, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToPosition", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CollectionViewGenerated::MoveCurrentToPrevious(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToPrevious", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CollectionView*>(this)->MoveCurrentToPreviousImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CollectionView_MoveCurrentToPrevious", hr);
    }
    RRETURN(hr);
}


