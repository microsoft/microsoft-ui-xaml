// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Control.g.h"

#define __RangeBase_GUID "478496af-bcc2-4c59-aeff-65f260ee218b"

namespace DirectUI
{
    class RangeBase;

    class __declspec(novtable) RangeBaseGenerated:
        public DirectUI::Control
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides
    {
        friend class DirectUI::RangeBase;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.RangeBase");

        BEGIN_INTERFACE_MAP(RangeBaseGenerated, DirectUI::Control)
            INTERFACE_ENTRY(RangeBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase)
            INTERFACE_ENTRY(RangeBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides)
        END_INTERFACE_MAP(RangeBaseGenerated, DirectUI::Control)

    public:
        RangeBaseGenerated();
        ~RangeBaseGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs> ValueChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::RangeBase;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::RangeBase;
        }

        // Properties.
        IFACEMETHOD(get_LargeChange)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_LargeChange)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_Maximum)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_Maximum)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_Minimum)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_Minimum)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_SmallChange)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_SmallChange)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_Value)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_Value)(_In_ DOUBLE value) override;

        // Events.
        _Check_return_ HRESULT GetValueChangedEventSourceNoRef(_Outptr_ ValueChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_ValueChanged)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_ValueChanged)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(OnMaximumChanged)(_In_ DOUBLE oldMaximum, _In_ DOUBLE newMaximum) override;
        _Check_return_ HRESULT OnMaximumChangedProtected(_In_ DOUBLE oldMaximum, _In_ DOUBLE newMaximum);
        IFACEMETHOD(OnMinimumChanged)(_In_ DOUBLE oldMinimum, _In_ DOUBLE newMinimum) override;
        _Check_return_ HRESULT OnMinimumChangedProtected(_In_ DOUBLE oldMinimum, _In_ DOUBLE newMinimum);
        IFACEMETHOD(OnValueChanged)(_In_ DOUBLE oldValue, _In_ DOUBLE newValue) override;
        _Check_return_ HRESULT OnValueChangedProtected(_In_ DOUBLE oldValue, _In_ DOUBLE newValue);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "RangeBase_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) RangeBaseFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics
    {
        BEGIN_INTERFACE_MAP(RangeBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(RangeBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory)
            INTERFACE_ENTRY(RangeBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics)
        END_INTERFACE_MAP(RangeBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_MinimumProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_MaximumProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_SmallChangeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_LargeChangeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ValueProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::RangeBase;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
