// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ParametricCurve.g.h"
#include "ParametricCurveSegmentCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ParametricCurve::ParametricCurve()
{
}

DirectUI::ParametricCurve::~ParametricCurve()
{
}

HRESULT DirectUI::ParametricCurve::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ParametricCurve)))
    {
        *ppObject = static_cast<DirectUI::ParametricCurve*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::ParametricCurve::get_CurveSegments(_Outptr_result_maybenull_ DirectUI::ParametricCurveSegmentCollection** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurve_CurveSegments, ppValue));
}

// Events.

// Methods.
_Check_return_ HRESULT DirectUI::ParametricCurve::SetPrimaryContentProperty(_In_ HSTRING primaryContentProperty)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ParametricCurve_SetPrimaryContentProperty", 0);
    }

    xephemeral_string_ptr primaryContentPropertyCore(primaryContentProperty);

    ARG_NOTNULL(primaryContentProperty, "primaryContentProperty");

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CParametricCurve*>(GetHandle())->SetPrimaryContentProperty(primaryContentPropertyCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ParametricCurve_SetPrimaryContentProperty", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ParametricCurve::SetSecondaryContentProperty(_In_ DirectUI::DirectManipulationProperty secondaryContentProperty, _In_ HSTRING associatedDependencyProperty)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ParametricCurve_SetSecondaryContentProperty", 0);
    }

    DirectUI::DirectManipulationProperty secondaryContentPropertyCore = static_cast<DirectUI::DirectManipulationProperty>(secondaryContentProperty);
    xephemeral_string_ptr associatedDependencyPropertyCore(associatedDependencyProperty);

    ARG_NOTNULL(associatedDependencyProperty, "associatedDependencyProperty");

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CParametricCurve*>(GetHandle())->SetSecondaryContentProperty(secondaryContentPropertyCore, associatedDependencyPropertyCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ParametricCurve_SetSecondaryContentProperty", hr);
    }
    RRETURN(hr);
}


namespace DirectUI
{
}
