// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __Window_GUID "b0d8d8be-9fae-4cdc-a457-523fb68b3953"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::IWindow2, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::IWindow2, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_AppWindow)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Windowing::IAppWindow** ppValue) override { return This()->get_AppWindow(ppValue); }
        IFACEMETHOD(get_SystemBackdrop)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue) override { return This()->get_SystemBackdrop(ppValue); }
        IFACEMETHOD(put_SystemBackdrop)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue) override { return This()->put_SystemBackdrop(pValue); }
    };
}
#pragma endregion

namespace DirectUI
{
    class Window;
    class SystemBackdrop;
    class UIElement;

    class __declspec(novtable) WindowGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::IWindow
        , public ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop
        , public ABI::Microsoft::UI::Xaml::IWindowPrivate
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::IWindow2, WindowGenerated >
    {
        friend class DirectUI::Window;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Window");

        BEGIN_INTERFACE_MAP(WindowGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(WindowGenerated, ABI::Microsoft::UI::Xaml::IWindow)
            INTERFACE_ENTRY(WindowGenerated, ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop)
            INTERFACE_ENTRY(WindowGenerated, ABI::Microsoft::UI::Xaml::IWindowPrivate)
            INTERFACE_ENTRY(WindowGenerated, ABI::Microsoft::UI::Xaml::IWindow2)
        END_INTERFACE_MAP(WindowGenerated, DirectUI::DependencyObject)

    public:
        WindowGenerated();
        ~WindowGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Window;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Window;
        }

        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_AppWindow(_Outptr_result_maybenull_ ABI::Microsoft::UI::Windowing::IAppWindow** ppValue);
        IFACEMETHOD(get_Bounds)(_Out_ ABI::Windows::Foundation::Rect* pValue) override;
        IFACEMETHOD(get_Compositor)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Composition::ICompositor** ppValue) override;
        IFACEMETHOD(get_Content)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override;
        IFACEMETHOD(put_Content)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override;
        IFACEMETHOD(get_CoreWindow)(_Outptr_result_maybenull_ ABI::Windows::UI::Core::ICoreWindow** ppValue) override;
        IFACEMETHOD(get_Dispatcher)(_Outptr_result_maybenull_ ABI::Windows::UI::Core::ICoreDispatcher** ppValue) override;
        IFACEMETHOD(get_DispatcherQueue)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Dispatching::IDispatcherQueue** ppValue) override;
        IFACEMETHOD(get_ExtendsContentIntoTitleBar)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_ExtendsContentIntoTitleBar)(_In_ BOOLEAN value) override;
        _Check_return_ HRESULT STDMETHODCALLTYPE get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue);
        IFACEMETHOD(get_Title)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_Title)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_TransparentBackground)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_TransparentBackground)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_Visible)(_Out_ BOOLEAN* pValue) override;

        // Events.
        IFACEMETHOD(add_Activated)(_In_ ABI::Windows::Foundation::ITypedEventHandler<IInspectable*, ABI::Microsoft::UI::Xaml::WindowActivatedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) = 0;
        IFACEMETHOD(remove_Activated)(_In_ EventRegistrationToken token) = 0;
        IFACEMETHOD(add_Closed)(_In_ ABI::Windows::Foundation::ITypedEventHandler<IInspectable*, ABI::Microsoft::UI::Xaml::WindowEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) = 0;
        IFACEMETHOD(remove_Closed)(_In_ EventRegistrationToken token) = 0;
        IFACEMETHOD(add_SizeChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<IInspectable*, ABI::Microsoft::UI::Xaml::WindowSizeChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) = 0;
        IFACEMETHOD(remove_SizeChanged)(_In_ EventRegistrationToken token) = 0;
        IFACEMETHOD(add_VisibilityChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<IInspectable*, ABI::Microsoft::UI::Xaml::WindowVisibilityChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) = 0;
        IFACEMETHOD(remove_VisibilityChanged)(_In_ EventRegistrationToken token) = 0;

        // Methods.
        IFACEMETHOD(Activate)() override;
        IFACEMETHOD(Close)() override;
        IFACEMETHOD(GetWindowContentBoundsForElement)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Windows::Foundation::Rect* pResult) override;
        IFACEMETHOD(Hide)() override;
        IFACEMETHOD(MoveWindow)(_In_ INT x, _In_ INT y, _In_ INT width, _In_ INT height) override;
        IFACEMETHOD(ReleaseGraphicsDeviceOnSuspend)(_In_ BOOLEAN enable) override;
        IFACEMETHOD(SetAtlasRequestCallback)(_In_opt_ ABI::Microsoft::UI::Xaml::IAtlasRequestCallback* pCallback) override;
        IFACEMETHOD(SetAtlasSizeHint)(_In_ UINT width, _In_ UINT height) override;
        IFACEMETHOD(SetTitleBar)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pTitleBar) override;
        IFACEMETHOD(Show)() override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "Window_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) WindowFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::IWindowFactory
        , public ABI::Microsoft::UI::Xaml::IWindowStatics
    {
        BEGIN_INTERFACE_MAP(WindowFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(WindowFactory, ABI::Microsoft::UI::Xaml::IWindowFactory)
            INTERFACE_ENTRY(WindowFactory, ABI::Microsoft::UI::Xaml::IWindowStatics)
        END_INTERFACE_MAP(WindowFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IWindow** ppInstance);

        // Static properties.
        IFACEMETHOD(get_Current)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IWindow** ppValue) override;

        // Dependency properties.
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Window;
        }


    private:

        // Customized static properties.
         _Check_return_ HRESULT get_CurrentImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IWindow** ppValue); 

        // Customized static  methods.
    };
}
