// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ScrollViewer.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ScrollViewerGenerated::ScrollViewerGenerated()
{
}

DirectUI::ScrollViewerGenerated::~ScrollViewerGenerated()
{
}

HRESULT DirectUI::ScrollViewerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ScrollViewer)))
    {
        *ppObject = static_cast<DirectUI::ScrollViewer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollViewer)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollViewer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollViewerPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollViewerPrivate*>(this);
    }
    else
    {
        RRETURN(DirectUI::ScrollContentControl::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ArePointerWheelEventsIgnored(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_ArePointerWheelEventsIgnoredImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_ArePointerWheelEventsIgnored(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_ArePointerWheelEventsIgnoredImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_BringIntoViewOnFocusChange(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_BringIntoViewOnFocusChangeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_BringIntoViewOnFocusChange(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_BringIntoViewOnFocusChangeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_CanContentRenderOutsideBounds(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_CanContentRenderOutsideBoundsImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_CanContentRenderOutsideBounds(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_CanContentRenderOutsideBoundsImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ComputedHorizontalScrollBarVisibility(_Out_ ABI::Microsoft::UI::Xaml::Visibility* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ComputedHorizontalScrollBarVisibility, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ComputedHorizontalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::Visibility value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ComputedHorizontalScrollBarVisibility, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ComputedVerticalScrollBarVisibility(_Out_ ABI::Microsoft::UI::Xaml::Visibility* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ComputedVerticalScrollBarVisibility, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ComputedVerticalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::Visibility value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ComputedVerticalScrollBarVisibility, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_CurrentAnchor(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_CurrentAnchorImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ExtentHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ExtentHeight, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ExtentHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ExtentHeight, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ExtentWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ExtentWidth, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ExtentWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ExtentWidth, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalAnchorRatio(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalAnchorRatio, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_HorizontalAnchorRatio(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalAnchorRatio, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalOffset, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_HorizontalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalOffset, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalScrollBarVisibility(_Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_HorizontalScrollBarVisibilityImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_HorizontalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_HorizontalScrollBarVisibilityImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalScrollMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_HorizontalScrollModeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_HorizontalScrollMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_HorizontalScrollModeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalSnapPointsAlignment(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsAlignment, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_HorizontalSnapPointsAlignment(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsAlignment, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_HorizontalSnapPointsType(_Out_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsType, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_HorizontalSnapPointsType(_In_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsType, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsDeferredScrollingEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsDeferredScrollingEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsDeferredScrollingEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsDeferredScrollingEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsHorizontalRailEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsHorizontalRailEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsHorizontalRailEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsHorizontalRailEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsHorizontalScrollChainingEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsHorizontalScrollChainingEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsHorizontalScrollChainingEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsHorizontalScrollChainingEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsInActiveDirectManipulation(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsInActiveDirectManipulationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsInDirectManipulation(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsInDirectManipulationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsRequestBringIntoViewIgnored(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsRequestBringIntoViewIgnoredImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsRequestBringIntoViewIgnored(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsRequestBringIntoViewIgnoredImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsScrollInertiaEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsScrollInertiaEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsScrollInertiaEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsScrollInertiaEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsVerticalRailEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsVerticalRailEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsVerticalRailEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsVerticalRailEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsVerticalScrollChainingEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsVerticalScrollChainingEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsVerticalScrollChainingEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsVerticalScrollChainingEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsZoomChainingEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsZoomChainingEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsZoomChainingEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsZoomChainingEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_IsZoomInertiaEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_IsZoomInertiaEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_IsZoomInertiaEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_IsZoomInertiaEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_LeftHeader(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_LeftHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_LeftHeader(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_LeftHeader, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_MaxZoomFactor(_Out_ FLOAT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_MaxZoomFactor, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_MaxZoomFactor(_In_ FLOAT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_MaxZoomFactor, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_MinZoomFactor(_Out_ FLOAT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_MinZoomFactor, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_MinZoomFactor(_In_ FLOAT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_MinZoomFactor, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ReduceViewportForCoreInputViewOcclusions(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ReduceViewportForCoreInputViewOcclusions, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_ReduceViewportForCoreInputViewOcclusions(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ReduceViewportForCoreInputViewOcclusions, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ScrollableHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ScrollableHeight, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ScrollableHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ScrollableHeight, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ScrollableWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ScrollableWidth, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ScrollableWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ScrollableWidth, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_TopHeader(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_TopHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_TopHeader(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_TopHeader, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_TopLeftHeader(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_TopLeftHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_TopLeftHeader(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_TopLeftHeader, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalAnchorRatio(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalAnchorRatio, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_VerticalAnchorRatio(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalAnchorRatio, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalOffset, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_VerticalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalOffset, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalScrollBarVisibility(_Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_VerticalScrollBarVisibilityImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_VerticalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_VerticalScrollBarVisibilityImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalScrollMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_VerticalScrollModeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_VerticalScrollMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_VerticalScrollModeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalSnapPointsAlignment(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsAlignment, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_VerticalSnapPointsAlignment(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsAlignment, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_VerticalSnapPointsType(_Out_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsType, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_VerticalSnapPointsType(_In_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsType, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ViewportHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ViewportHeight, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ViewportHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ViewportHeight, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ViewportWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ViewportWidth, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ViewportWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ViewportWidth, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ZoomFactor(_Out_ FLOAT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ZoomFactor, pValue));
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::put_ZoomFactor(_In_ FLOAT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ZoomFactor, value));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ZoomMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_ZoomModeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_ZoomMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->put_ZoomModeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ZoomSnapPoints(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<FLOAT>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollViewer*>(this)->get_ZoomSnapPointsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::get_ZoomSnapPointsType(_Out_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ZoomSnapPointsType, pValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::put_ZoomSnapPointsType(_In_ ABI::Microsoft::UI::Xaml::Controls::SnapPointsType value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollViewer_ZoomSnapPointsType, value));
}

// Events.
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::GetAnchorRequestedEventSourceNoRef(_Outptr_ AnchorRequestedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollViewer_AnchorRequested, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnchorRequestedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollViewer_AnchorRequested, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollViewer_AnchorRequested, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::add_AnchorRequested(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewer*, ABI::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnchorRequestedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAnchorRequestedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::remove_AnchorRequested(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnchorRequestedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewer*, ABI::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewer*, ABI::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAnchorRequestedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollViewer_AnchorRequested));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::GetDirectManipulationCompletedEventSourceNoRef(_Outptr_ DirectManipulationCompletedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollViewer_DirectManipulationCompleted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DirectManipulationCompletedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollViewer_DirectManipulationCompleted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollViewer_DirectManipulationCompleted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::add_DirectManipulationCompleted(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DirectManipulationCompletedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDirectManipulationCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::remove_DirectManipulationCompleted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DirectManipulationCompletedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDirectManipulationCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollViewer_DirectManipulationCompleted));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::GetDirectManipulationStartedEventSourceNoRef(_Outptr_ DirectManipulationStartedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollViewer_DirectManipulationStarted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DirectManipulationStartedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollViewer_DirectManipulationStarted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollViewer_DirectManipulationStarted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::add_DirectManipulationStarted(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DirectManipulationStartedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDirectManipulationStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::remove_DirectManipulationStarted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DirectManipulationStartedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDirectManipulationStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollViewer_DirectManipulationStarted));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::GetViewChangedEventSourceNoRef(_Outptr_ ViewChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollViewer_ViewChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ViewChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollViewer_ViewChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollViewer_ViewChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::add_ViewChanged(_In_ ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ViewChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetViewChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::remove_ViewChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ViewChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs*>* pValue = (ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetViewChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollViewer_ViewChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::GetViewChangingEventSourceNoRef(_Outptr_ ViewChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollViewer_ViewChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ViewChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollViewer_ViewChanging, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollViewer_ViewChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::add_ViewChanging(_In_ ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ViewChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetViewChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollViewerGenerated::remove_ViewChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ViewChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs*>* pValue = (ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetViewChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollViewer_ViewChanging));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::ChangeView(_In_ ABI::Windows::Foundation::IReference<DOUBLE>* pHorizontalOffset, _In_ ABI::Windows::Foundation::IReference<DOUBLE>* pVerticalOffset, _In_ ABI::Windows::Foundation::IReference<FLOAT>* pZoomFactor, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_ChangeView", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->ChangeViewImpl(pHorizontalOffset, pVerticalOffset, pZoomFactor, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_ChangeView", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::ChangeViewWithOptionalAnimation(_In_ ABI::Windows::Foundation::IReference<DOUBLE>* pHorizontalOffset, _In_ ABI::Windows::Foundation::IReference<DOUBLE>* pVerticalOffset, _In_ ABI::Windows::Foundation::IReference<FLOAT>* pZoomFactor, _In_ BOOLEAN disableAnimation, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_ChangeViewWithOptionalAnimation", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->ChangeViewWithOptionalAnimationImpl(pHorizontalOffset, pVerticalOffset, pZoomFactor, disableAnimation, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_ChangeViewWithOptionalAnimation", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::DisableOverpan()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_DisableOverpan", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->DisableOverpanImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_DisableOverpan", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::EnableOverpan()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_EnableOverpan", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->EnableOverpanImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_EnableOverpan", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::InvalidateScrollInfo()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_InvalidateScrollInfo", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->InvalidateScrollInfoImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_InvalidateScrollInfo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::RegisterAnchorCandidate(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_RegisterAnchorCandidate", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->RegisterAnchorCandidateImpl(pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_RegisterAnchorCandidate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::ScrollToHorizontalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_ScrollToHorizontalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->ScrollToHorizontalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_ScrollToHorizontalOffset", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::ScrollToVerticalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_ScrollToVerticalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->ScrollToVerticalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_ScrollToVerticalOffset", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::SetIsNearVerticalAlignmentForced(_In_ BOOLEAN enabled)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_SetIsNearVerticalAlignmentForced", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->SetIsNearVerticalAlignmentForcedImpl(enabled));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_SetIsNearVerticalAlignmentForced", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::UnregisterAnchorCandidate(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_UnregisterAnchorCandidate", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->UnregisterAnchorCandidateImpl(pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_UnregisterAnchorCandidate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollViewerGenerated::ZoomToFactor(_In_ FLOAT factor)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollViewer_ZoomToFactor", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollViewer*>(this)->ZoomToFactorImpl(factor));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollViewer_ZoomToFactor", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ScrollViewer_AnchorRequested:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewer*, ABI::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                AnchorRequestedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetAnchorRequestedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_DirectManipulationCompleted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DirectManipulationCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDirectManipulationCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_DirectManipulationStarted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DirectManipulationStartedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDirectManipulationStartedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_ViewChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ViewChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetViewChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_ViewChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ViewChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetViewChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ScrollContentControl::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ScrollViewerGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ScrollViewer_AnchorRequested:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewer*, ABI::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                AnchorRequestedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetAnchorRequestedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_DirectManipulationCompleted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DirectManipulationCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDirectManipulationCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_DirectManipulationStarted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DirectManipulationStartedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDirectManipulationStartedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_ViewChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ViewChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetViewChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ScrollViewer_ViewChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ViewChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetViewChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ScrollContentControl::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ScrollViewerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollViewerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollViewerStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalSnapPointsAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalSnapPointsAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalSnapPointsTypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalSnapPointsType, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalSnapPointsTypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalSnapPointsType, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ZoomSnapPointsTypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ZoomSnapPointsType, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalOffset, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ViewportWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ViewportWidth, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ScrollableWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ScrollableWidth, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ComputedHorizontalScrollBarVisibilityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ComputedHorizontalScrollBarVisibility, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ExtentWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ExtentWidth, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalOffset, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ViewportHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ViewportHeight, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ScrollableHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ScrollableHeight, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ComputedVerticalScrollBarVisibilityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ComputedVerticalScrollBarVisibility, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ExtentHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ExtentHeight, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_MinZoomFactorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_MinZoomFactor, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_MaxZoomFactorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_MaxZoomFactor, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ZoomFactorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ZoomFactor, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ZoomSnapPointsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ZoomSnapPoints, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_TopLeftHeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_TopLeftHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_LeftHeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_LeftHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_TopHeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_TopHeader, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ReduceViewportForCoreInputViewOcclusionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ReduceViewportForCoreInputViewOcclusions, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalAnchorRatioProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalAnchorRatio, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalAnchorRatioProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalAnchorRatio, ppValue));
}

// Attached properties.
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetHorizontalScrollBarVisibilityStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pHorizontalScrollBarVisibility)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_HorizontalScrollBarVisibility, pHorizontalScrollBarVisibility));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetHorizontalScrollBarVisibilityStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_HorizontalScrollBarVisibility, horizontalScrollBarVisibility));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalScrollBarVisibilityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalScrollBarVisibility, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetHorizontalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pHorizontalScrollBarVisibility)
{
    RRETURN(GetHorizontalScrollBarVisibilityStatic(pElement, pHorizontalScrollBarVisibility));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetHorizontalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility)
{
    RRETURN(SetHorizontalScrollBarVisibilityStatic(pElement, horizontalScrollBarVisibility));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetVerticalScrollBarVisibilityStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pVerticalScrollBarVisibility)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_VerticalScrollBarVisibility, pVerticalScrollBarVisibility));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetVerticalScrollBarVisibilityStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_VerticalScrollBarVisibility, verticalScrollBarVisibility));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalScrollBarVisibilityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalScrollBarVisibility, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetVerticalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility* pVerticalScrollBarVisibility)
{
    RRETURN(GetVerticalScrollBarVisibilityStatic(pElement, pVerticalScrollBarVisibility));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetVerticalScrollBarVisibility(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility)
{
    RRETURN(SetVerticalScrollBarVisibilityStatic(pElement, verticalScrollBarVisibility));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsHorizontalRailEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsHorizontalRailEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsHorizontalRailEnabled, pIsHorizontalRailEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsHorizontalRailEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isHorizontalRailEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsHorizontalRailEnabled, isHorizontalRailEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsHorizontalRailEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsHorizontalRailEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsHorizontalRailEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsHorizontalRailEnabled)
{
    RRETURN(GetIsHorizontalRailEnabledStatic(pElement, pIsHorizontalRailEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsHorizontalRailEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isHorizontalRailEnabled)
{
    RRETURN(SetIsHorizontalRailEnabledStatic(pElement, isHorizontalRailEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsVerticalRailEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsVerticalRailEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsVerticalRailEnabled, pIsVerticalRailEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsVerticalRailEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isVerticalRailEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsVerticalRailEnabled, isVerticalRailEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsVerticalRailEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsVerticalRailEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsVerticalRailEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsVerticalRailEnabled)
{
    RRETURN(GetIsVerticalRailEnabledStatic(pElement, pIsVerticalRailEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsVerticalRailEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isVerticalRailEnabled)
{
    RRETURN(SetIsVerticalRailEnabledStatic(pElement, isVerticalRailEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsHorizontalScrollChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsHorizontalScrollChainingEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsHorizontalScrollChainingEnabled, pIsHorizontalScrollChainingEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsHorizontalScrollChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isHorizontalScrollChainingEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsHorizontalScrollChainingEnabled, isHorizontalScrollChainingEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsHorizontalScrollChainingEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsHorizontalScrollChainingEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsHorizontalScrollChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsHorizontalScrollChainingEnabled)
{
    RRETURN(GetIsHorizontalScrollChainingEnabledStatic(pElement, pIsHorizontalScrollChainingEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsHorizontalScrollChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isHorizontalScrollChainingEnabled)
{
    RRETURN(SetIsHorizontalScrollChainingEnabledStatic(pElement, isHorizontalScrollChainingEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsVerticalScrollChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsVerticalScrollChainingEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsVerticalScrollChainingEnabled, pIsVerticalScrollChainingEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsVerticalScrollChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isVerticalScrollChainingEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsVerticalScrollChainingEnabled, isVerticalScrollChainingEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsVerticalScrollChainingEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsVerticalScrollChainingEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsVerticalScrollChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsVerticalScrollChainingEnabled)
{
    RRETURN(GetIsVerticalScrollChainingEnabledStatic(pElement, pIsVerticalScrollChainingEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsVerticalScrollChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isVerticalScrollChainingEnabled)
{
    RRETURN(SetIsVerticalScrollChainingEnabledStatic(pElement, isVerticalScrollChainingEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsZoomChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsZoomChainingEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsZoomChainingEnabled, pIsZoomChainingEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsZoomChainingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isZoomChainingEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsZoomChainingEnabled, isZoomChainingEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsZoomChainingEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsZoomChainingEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsZoomChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsZoomChainingEnabled)
{
    RRETURN(GetIsZoomChainingEnabledStatic(pElement, pIsZoomChainingEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsZoomChainingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isZoomChainingEnabled)
{
    RRETURN(SetIsZoomChainingEnabledStatic(pElement, isZoomChainingEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsScrollInertiaEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsScrollInertiaEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsScrollInertiaEnabled, pIsScrollInertiaEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsScrollInertiaEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isScrollInertiaEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsScrollInertiaEnabled, isScrollInertiaEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsScrollInertiaEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsScrollInertiaEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsScrollInertiaEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsScrollInertiaEnabled)
{
    RRETURN(GetIsScrollInertiaEnabledStatic(pElement, pIsScrollInertiaEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsScrollInertiaEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isScrollInertiaEnabled)
{
    RRETURN(SetIsScrollInertiaEnabledStatic(pElement, isScrollInertiaEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsZoomInertiaEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsZoomInertiaEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsZoomInertiaEnabled, pIsZoomInertiaEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsZoomInertiaEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isZoomInertiaEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsZoomInertiaEnabled, isZoomInertiaEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsZoomInertiaEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsZoomInertiaEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsZoomInertiaEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsZoomInertiaEnabled)
{
    RRETURN(GetIsZoomInertiaEnabledStatic(pElement, pIsZoomInertiaEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsZoomInertiaEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isZoomInertiaEnabled)
{
    RRETURN(SetIsZoomInertiaEnabledStatic(pElement, isZoomInertiaEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetHorizontalScrollModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pHorizontalScrollMode)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_HorizontalScrollMode, pHorizontalScrollMode));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetHorizontalScrollModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode horizontalScrollMode)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_HorizontalScrollMode, horizontalScrollMode));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_HorizontalScrollModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_HorizontalScrollMode, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetHorizontalScrollMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pHorizontalScrollMode)
{
    RRETURN(GetHorizontalScrollModeStatic(pElement, pHorizontalScrollMode));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetHorizontalScrollMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode horizontalScrollMode)
{
    RRETURN(SetHorizontalScrollModeStatic(pElement, horizontalScrollMode));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetVerticalScrollModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pVerticalScrollMode)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_VerticalScrollMode, pVerticalScrollMode));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetVerticalScrollModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode verticalScrollMode)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_VerticalScrollMode, verticalScrollMode));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_VerticalScrollModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_VerticalScrollMode, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetVerticalScrollMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode* pVerticalScrollMode)
{
    RRETURN(GetVerticalScrollModeStatic(pElement, pVerticalScrollMode));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetVerticalScrollMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollMode verticalScrollMode)
{
    RRETURN(SetVerticalScrollModeStatic(pElement, verticalScrollMode));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetZoomModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode* pZoomMode)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_ZoomMode, pZoomMode));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetZoomModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode zoomMode)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_ZoomMode, zoomMode));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_ZoomModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_ZoomMode, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetZoomMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode* pZoomMode)
{
    RRETURN(GetZoomModeStatic(pElement, pZoomMode));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetZoomMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::ZoomMode zoomMode)
{
    RRETURN(SetZoomModeStatic(pElement, zoomMode));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetIsDeferredScrollingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsDeferredScrollingEnabled)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsDeferredScrollingEnabled, pIsDeferredScrollingEnabled));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetIsDeferredScrollingEnabledStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isDeferredScrollingEnabled)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_IsDeferredScrollingEnabled, isDeferredScrollingEnabled));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_IsDeferredScrollingEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_IsDeferredScrollingEnabled, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetIsDeferredScrollingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pIsDeferredScrollingEnabled)
{
    RRETURN(GetIsDeferredScrollingEnabledStatic(pElement, pIsDeferredScrollingEnabled));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetIsDeferredScrollingEnabled(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN isDeferredScrollingEnabled)
{
    RRETURN(SetIsDeferredScrollingEnabledStatic(pElement, isDeferredScrollingEnabled));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetBringIntoViewOnFocusChangeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pBringIntoViewOnFocusChange)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_BringIntoViewOnFocusChange, pBringIntoViewOnFocusChange));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetBringIntoViewOnFocusChangeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN bringIntoViewOnFocusChange)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_BringIntoViewOnFocusChange, bringIntoViewOnFocusChange));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_BringIntoViewOnFocusChangeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_BringIntoViewOnFocusChange, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetBringIntoViewOnFocusChange(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pBringIntoViewOnFocusChange)
{
    RRETURN(GetBringIntoViewOnFocusChangeStatic(pElement, pBringIntoViewOnFocusChange));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetBringIntoViewOnFocusChange(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN bringIntoViewOnFocusChange)
{
    RRETURN(SetBringIntoViewOnFocusChangeStatic(pElement, bringIntoViewOnFocusChange));
}
_Check_return_ HRESULT DirectUI::ScrollViewerFactory::GetCanContentRenderOutsideBoundsStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pCanContentRenderOutsideBounds)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_CanContentRenderOutsideBounds, pCanContentRenderOutsideBounds));
}

_Check_return_ HRESULT DirectUI::ScrollViewerFactory::SetCanContentRenderOutsideBoundsStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN canContentRenderOutsideBounds)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::ScrollViewer_CanContentRenderOutsideBounds, canContentRenderOutsideBounds));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::get_CanContentRenderOutsideBoundsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollViewer_CanContentRenderOutsideBounds, ppValue));
}


IFACEMETHODIMP DirectUI::ScrollViewerFactory::GetCanContentRenderOutsideBounds(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pCanContentRenderOutsideBounds)
{
    RRETURN(GetCanContentRenderOutsideBoundsStatic(pElement, pCanContentRenderOutsideBounds));
}

IFACEMETHODIMP DirectUI::ScrollViewerFactory::SetCanContentRenderOutsideBounds(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN canContentRenderOutsideBounds)
{
    RRETURN(SetCanContentRenderOutsideBoundsStatic(pElement, canContentRenderOutsideBounds));
}

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ScrollViewer()
    {
        RRETURN(ctl::ActivationFactoryCreator<ScrollViewerFactory>::CreateActivationFactory());
    }
}
