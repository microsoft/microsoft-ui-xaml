// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ElementSoundPlayer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ElementSoundPlayer::ElementSoundPlayer()
{
}

DirectUI::ElementSoundPlayer::~ElementSoundPlayer()
{
}

HRESULT DirectUI::ElementSoundPlayer::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ElementSoundPlayer)))
    {
        *ppObject = static_cast<DirectUI::ElementSoundPlayer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IElementSoundPlayer)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IElementSoundPlayer*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.

HRESULT DirectUI::ElementSoundPlayerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IElementSoundPlayerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IElementSoundPlayerStatics*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IElementSoundPlayerStaticsPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IElementSoundPlayerStaticsPrivate*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::get_Volume(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_VolumeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::put_Volume(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckActivationAllowed());
    IFC(put_VolumeImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::get_State(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_StateImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::put_State(_In_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckActivationAllowed());
    IFC(put_StateImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::get_SpatialAudioMode(_Out_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_SpatialAudioModeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::put_SpatialAudioMode(_In_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckActivationAllowed());
    IFC(put_SpatialAudioModeImpl(value));
Cleanup:
    RRETURN(hr);
}

// Static methods.
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::Play(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "ElementSoundPlayer_Play", 0);
    }
    
    IFC(CheckActivationAllowed());
    IFC(PlayImpl(sound));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "ElementSoundPlayer_Play", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::RequestInteractionSoundForElement(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "ElementSoundPlayer_RequestInteractionSoundForElement", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckActivationAllowed());
    IFC(RequestInteractionSoundForElementImpl(sound, pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "ElementSoundPlayer_RequestInteractionSoundForElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ElementSoundPlayerFactory::GetEffectiveSoundMode(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "ElementSoundPlayer_GetEffectiveSoundMode", 0);
    }
    ARG_NOTNULL(pElement, "element");
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckActivationAllowed());
    IFC(GetEffectiveSoundModeImpl(pElement, pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "ElementSoundPlayer_GetEffectiveSoundMode", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ElementSoundPlayer()
    {
        RRETURN(ctl::ActivationFactoryCreator<ElementSoundPlayerFactory>::CreateActivationFactory());
    }
}
