// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Brush.g.h"

#define __XamlCompositionBrushBase_GUID "4c29bfbe-4cff-4b3e-b75f-8217d05f0478"

namespace DirectUI
{
    class XamlCompositionBrushBase;

    class __declspec(novtable) XamlCompositionBrushBaseGenerated:
        public DirectUI::Brush
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBase
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseProtected
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseOverrides
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBasePrivates
    {
        friend class DirectUI::XamlCompositionBrushBase;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.XamlCompositionBrushBase");

        BEGIN_INTERFACE_MAP(XamlCompositionBrushBaseGenerated, DirectUI::Brush)
            INTERFACE_ENTRY(XamlCompositionBrushBaseGenerated, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBase)
            INTERFACE_ENTRY(XamlCompositionBrushBaseGenerated, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseProtected)
            INTERFACE_ENTRY(XamlCompositionBrushBaseGenerated, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseOverrides)
            INTERFACE_ENTRY(XamlCompositionBrushBaseGenerated, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBasePrivates)
        END_INTERFACE_MAP(XamlCompositionBrushBaseGenerated, DirectUI::Brush)

    public:
        XamlCompositionBrushBaseGenerated();
        ~XamlCompositionBrushBaseGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlCompositionBrushBase;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::XamlCompositionBrushBase;
        }

        // Properties.
        IFACEMETHOD(get_CompositionBrush)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Composition::ICompositionBrush** ppValue) override;
        IFACEMETHOD(put_CompositionBrush)(_In_opt_ ABI::Microsoft::UI::Composition::ICompositionBrush* pValue) override;
        IFACEMETHOD(get_FallbackColor)(_Out_ ABI::Windows::UI::Color* pValue) override;
        IFACEMETHOD(put_FallbackColor)(_In_ ABI::Windows::UI::Color value) override;

        // Events.

        // Methods.
        IFACEMETHOD(ClearBrushForXamlRoot)(_In_ IInspectable* pXamlRoot, _In_ ABI::Microsoft::UI::Composition::ICompositionBrush* pBrush) override;
        IFACEMETHOD(ClearCompositionBrushMap)() override;
        IFACEMETHOD(GetBrushForXamlRoot)(_In_ IInspectable* pXamlRoot, _Outptr_ ABI::Microsoft::UI::Composition::ICompositionBrush** ppResult) override;
        IFACEMETHOD(OnConnected)() override;
        _Check_return_ HRESULT OnConnectedProtected();
        IFACEMETHOD(OnDisconnected)() override;
        _Check_return_ HRESULT OnDisconnectedProtected();
        IFACEMETHOD(SetBrushForXamlRoot)(_In_ IInspectable* pXamlRoot, _In_ ABI::Microsoft::UI::Composition::ICompositionBrush* pBrush) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "XamlCompositionBrushBase_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) XamlCompositionBrushBaseFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseFactory
        , public ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseStatics
    {
        BEGIN_INTERFACE_MAP(XamlCompositionBrushBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(XamlCompositionBrushBaseFactory, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseFactory)
            INTERFACE_ENTRY(XamlCompositionBrushBaseFactory, ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBaseStatics)
        END_INTERFACE_MAP(XamlCompositionBrushBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IXamlCompositionBrushBase** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_FallbackColorProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlCompositionBrushBase;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
