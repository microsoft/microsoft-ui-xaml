// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "RoutedEventArgs.g.h"

#define __DragDeltaEventArgs_GUID "aa87d427-7d00-449c-994a-a36fb2e2fe6f"

namespace DirectUI
{
    class DragDeltaEventArgs;

    class __declspec(novtable) DragDeltaEventArgsGenerated :
        public ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs,
        public DirectUI::RoutedEventArgs
    {
        friend class DirectUI::DragDeltaEventArgs;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs");

        BEGIN_INTERFACE_MAP(DragDeltaEventArgsGenerated, DirectUI::RoutedEventArgs)
            INTERFACE_ENTRY(DragDeltaEventArgsGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs)
        END_INTERFACE_MAP(DragDeltaEventArgsGenerated, DirectUI::RoutedEventArgs)

    public:
        DragDeltaEventArgsGenerated();
        ~DragDeltaEventArgsGenerated() override;

        // Properties.
        IFACEMETHOD(get_HorizontalChange)(_Out_ DOUBLE* pValue) override;
        _Check_return_ HRESULT put_HorizontalChange(_In_ DOUBLE value);
        IFACEMETHOD(get_VerticalChange)(_Out_ DOUBLE* pValue) override;
        _Check_return_ HRESULT put_VerticalChange(_In_ DOUBLE value);

        // Methods.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "DragDeltaEventArgs_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) DragDeltaEventArgsFactory:
       public ctl::AggregableActivationFactory<DirectUI::DragDeltaEventArgs>
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory
    {
        BEGIN_INTERFACE_MAP(DragDeltaEventArgsFactory, ctl::AggregableActivationFactory<DirectUI::DragDeltaEventArgs>)
            INTERFACE_ENTRY(DragDeltaEventArgsFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory)
        END_INTERFACE_MAP(DragDeltaEventArgsFactory, ctl::AggregableActivationFactory<DirectUI::DragDeltaEventArgs>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithHorizontalChangeAndVerticalChange)(_In_ DOUBLE horizontalChange, _In_ DOUBLE verticalChange, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:
        _Check_return_ HRESULT CreateInstanceWithHorizontalChangeAndVerticalChangeImpl(_In_ DOUBLE horizontalChange, _In_ DOUBLE verticalChange, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
