// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "VirtualSurfaceImageSource.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::VirtualSurfaceImageSourceGenerated::VirtualSurfaceImageSourceGenerated()
{
}

DirectUI::VirtualSurfaceImageSourceGenerated::~VirtualSurfaceImageSourceGenerated()
{
}

HRESULT DirectUI::VirtualSurfaceImageSourceGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::VirtualSurfaceImageSource)))
    {
        *ppObject = static_cast<DirectUI::VirtualSurfaceImageSource*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource*>(this);
    }
    else
    {
        RRETURN(DirectUI::SurfaceImageSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.

HRESULT DirectUI::VirtualSurfaceImageSourceFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::VirtualSurfaceImageSourceFactory::CreateInstanceWithDimensions(_In_ INT pixelWidth, _In_ INT pixelHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithDimensionsImpl(pixelWidth, pixelHeight, ppInstance));
Cleanup:
    return hr;
}
IFACEMETHODIMP DirectUI::VirtualSurfaceImageSourceFactory::CreateInstanceWithDimensionsAndOpacity(_In_ INT pixelWidth, _In_ INT pixelHeight, _In_ BOOLEAN isOpaque, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithDimensionsAndOpacityImpl(pixelWidth, pixelHeight, isOpaque, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_VirtualSurfaceImageSource()
    {
        RRETURN(ctl::ActivationFactoryCreator<VirtualSurfaceImageSourceFactory>::CreateActivationFactory());
    }
}
