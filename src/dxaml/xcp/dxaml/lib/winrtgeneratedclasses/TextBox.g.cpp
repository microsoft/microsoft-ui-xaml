// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "TextBox.g.h"
#include "Brush.g.h"
#include "DataTemplate.g.h"
#include "FlyoutBase.g.h"
#include "InputScope.g.h"
#include "InputValidationCommand.g.h"
#include "InputValidationContext.g.h"
#include "SolidColorBrush.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::TextBoxGenerated::TextBoxGenerated()
{
}

DirectUI::TextBoxGenerated::~TextBoxGenerated()
{
}

HRESULT DirectUI::TextBoxGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::TextBox)))
    {
        *ppObject = static_cast<DirectUI::TextBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBox)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITelemetryCollectionPriv)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITelemetryCollectionPriv*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxPriv2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxPriv2*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_AcceptsReturn(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_AcceptsReturn, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_AcceptsReturn(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_AcceptsReturn, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_CanPasteClipboardContent(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_CanPasteClipboardContent, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_CanRedo(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_CanRedo, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_CanUndo(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_CanUndo, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_CharacterCasing(_Out_ ABI::Microsoft::UI::Xaml::Controls::CharacterCasing* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_CharacterCasing, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_CharacterCasing(_In_ ABI::Microsoft::UI::Xaml::Controls::CharacterCasing value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_CharacterCasing, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_Description(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_Description(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_Description, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_DesiredCandidateWindowAlignment(_Out_ ABI::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_DesiredCandidateWindowAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_DesiredCandidateWindowAlignment(_In_ ABI::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_DesiredCandidateWindowAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_ErrorTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_ErrorTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_ErrorTemplate, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_HasValidationErrors(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_HasValidationErrors, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_Header, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_HorizontalTextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_HorizontalTextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_HorizontalTextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_HorizontalTextAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_InputScope(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::IInputScope** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_InputScope, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_InputScope(_In_opt_ ABI::Microsoft::UI::Xaml::Input::IInputScope* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_InputScope, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_InputValidationKind(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_InputValidationKind, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_InputValidationKind(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_InputValidationKind, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_InputValidationMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_InputValidationMode, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_InputValidationMode(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_InputValidationMode, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsColorFontEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsColorFontEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsColorFontEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsColorFontEnabled, value));
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::get_IsCoreDesktopPopupMenuEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsCoreDesktopPopupMenuEnabled, pValue));
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::put_IsCoreDesktopPopupMenuEnabled(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsCoreDesktopPopupMenuEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsDesktopPopupMenuEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<TextBox*>(this)->get_IsDesktopPopupMenuEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsDesktopPopupMenuEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->put_IsDesktopPopupMenuEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsReadOnly(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsReadOnly, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsReadOnly(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsReadOnly, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsSpellCheckEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsSpellCheckEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsSpellCheckEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsSpellCheckEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsTelemetryCollectionEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsTelemetryCollectionEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsTelemetryCollectionEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsTelemetryCollectionEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_IsTextPredictionEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_IsTextPredictionEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_IsTextPredictionEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_IsTextPredictionEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_MaxLength(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_MaxLength, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_MaxLength(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_MaxLength, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_PlaceholderForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_PlaceholderForeground, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_PlaceholderForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_PlaceholderForeground, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_PlaceholderText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_PlaceholderText, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_PlaceholderText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_PlaceholderText, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_PreventEditFocusLoss(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_PreventEditFocusLoss, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_PreventEditFocusLoss(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_PreventEditFocusLoss, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_PreventKeyboardDisplayOnProgrammaticFocus(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_PreventKeyboardDisplayOnProgrammaticFocus, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_PreventKeyboardDisplayOnProgrammaticFocus(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_PreventKeyboardDisplayOnProgrammaticFocus, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_ProofingMenuFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_ProofingMenuFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectedText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectedText, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectedText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectedText, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectionFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectionFlyout(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionFlyout, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectionHighlightColor(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectionHighlightColor(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionHighlightColor, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectionHighlightColorWhenNotFocused(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionHighlightColorWhenNotFocused, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectionHighlightColorWhenNotFocused(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionHighlightColorWhenNotFocused, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectionLength(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionLength, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectionLength(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionLength, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_SelectionStart(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionStart, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_SelectionStart(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_SelectionStart, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_Text(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_Text, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_Text(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_Text, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_TextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_TextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_TextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_TextAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_TextReadingOrder(_Out_ ABI::Microsoft::UI::Xaml::TextReadingOrder* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_TextReadingOrder, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_TextReadingOrder(_In_ ABI::Microsoft::UI::Xaml::TextReadingOrder value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_TextReadingOrder, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_TextWrapping(_Out_ ABI::Microsoft::UI::Xaml::TextWrapping* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_TextWrapping, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_TextWrapping(_In_ ABI::Microsoft::UI::Xaml::TextWrapping value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_TextWrapping, value));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_ValidationCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_ValidationCommand, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_ValidationCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_ValidationCommand, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_ValidationContext(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_ValidationContext, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::put_ValidationContext(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBox_ValidationContext, pValue));
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::get_ValidationErrors(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<ABI::Microsoft::UI::Xaml::Controls::InputValidationError*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBox_ValidationErrors, ppValue));
}

// Events.
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetBeforeTextChangingEventSourceNoRef(_Outptr_ BeforeTextChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_BeforeTextChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<BeforeTextChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_BeforeTextChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_BeforeTextChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_BeforeTextChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    BeforeTextChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetBeforeTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_BeforeTextChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    BeforeTextChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetBeforeTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_BeforeTextChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetCandidateWindowBoundsChangedEventSourceNoRef(_Outptr_ CandidateWindowBoundsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_CandidateWindowBoundsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CandidateWindowBoundsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_CandidateWindowBoundsChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_CandidateWindowBoundsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_CandidateWindowBoundsChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CandidateWindowBoundsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCandidateWindowBoundsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_CandidateWindowBoundsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CandidateWindowBoundsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCandidateWindowBoundsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_CandidateWindowBoundsChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetContextMenuOpeningEventSourceNoRef(_Outptr_ ContextMenuOpeningEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_ContextMenuOpening, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContextMenuOpeningEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_ContextMenuOpening, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_ContextMenuOpening, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_ContextMenuOpening(_In_ ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_ContextMenuOpening(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_ContextMenuOpening));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetCopyingToClipboardEventSourceNoRef(_Outptr_ CopyingToClipboardEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_CopyingToClipboard, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CopyingToClipboardEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_CopyingToClipboard, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_CopyingToClipboard, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_CopyingToClipboard(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CopyingToClipboardEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCopyingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_CopyingToClipboard(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CopyingToClipboardEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCopyingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_CopyingToClipboard));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetCuttingToClipboardEventSourceNoRef(_Outptr_ CuttingToClipboardEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_CuttingToClipboard, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CuttingToClipboardEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_CuttingToClipboard, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_CuttingToClipboard, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_CuttingToClipboard(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CuttingToClipboardEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCuttingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_CuttingToClipboard(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CuttingToClipboardEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCuttingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_CuttingToClipboard));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetHasValidationErrorsChangedEventSourceNoRef(_Outptr_ HasValidationErrorsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_HasValidationErrorsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HasValidationErrorsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_HasValidationErrorsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::TextBox_HasValidationErrorsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_HasValidationErrorsChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_HasValidationErrorsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_HasValidationErrorsChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetPasteEventSourceNoRef(_Outptr_ PasteEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_Paste, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PasteEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_Paste, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_Paste, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_Paste(_In_ ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_Paste(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_Paste));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetSelectionChangedEventSourceNoRef(_Outptr_ SelectionChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_SelectionChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectionChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_SelectionChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_SelectionChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_SelectionChanged(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_SelectionChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_SelectionChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetSelectionChangingEventSourceNoRef(_Outptr_ SelectionChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_SelectionChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectionChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_SelectionChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_SelectionChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_SelectionChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectionChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_SelectionChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectionChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_SelectionChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetTextChangedEventSourceNoRef(_Outptr_ TextChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_TextChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_TextChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_TextChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_TextChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::ITextChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_TextChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::ITextChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::ITextChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_TextChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetTextChangingEventSourceNoRef(_Outptr_ TextChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_TextChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_TextChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_TextChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_TextChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_TextChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_TextChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetTextCompositionChangedEventSourceNoRef(_Outptr_ TextCompositionChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_TextCompositionChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_TextCompositionChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_TextCompositionChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_TextCompositionChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_TextCompositionChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_TextCompositionChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetTextCompositionEndedEventSourceNoRef(_Outptr_ TextCompositionEndedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_TextCompositionEnded, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionEndedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_TextCompositionEnded, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_TextCompositionEnded, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_TextCompositionEnded(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionEndedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionEndedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_TextCompositionEnded(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionEndedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionEndedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_TextCompositionEnded));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetTextCompositionStartedEventSourceNoRef(_Outptr_ TextCompositionStartedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_TextCompositionStarted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionStartedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_TextCompositionStarted, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_TextCompositionStarted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_TextCompositionStarted(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionStartedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_TextCompositionStarted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionStartedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_TextCompositionStarted));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::TextBoxGenerated::GetValidationErrorEventSourceNoRef(_Outptr_ ValidationErrorEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBox_ValidationError, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ValidationErrorEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBox_ValidationError, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBox_ValidationError, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::add_ValidationError(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBoxGenerated::remove_ValidationError(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBox_ValidationError));
    }

Cleanup:
    RRETURN(hr);
}
#endif

// Methods.
IFACEMETHODIMP DirectUI::TextBoxGenerated::ClearUndoRedoHistory()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_ClearUndoRedoHistory", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->ClearUndoRedoHistoryImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_ClearUndoRedoHistory", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::CopySelectionToClipboard()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_CopySelectionToClipboard", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->CopySelectionToClipboardImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_CopySelectionToClipboard", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::CutSelectionToClipboard()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_CutSelectionToClipboard", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->CutSelectionToClipboardImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_CutSelectionToClipboard", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::ForceEditFocusLoss()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_ForceEditFocusLoss", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->ForceEditFocusLossImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_ForceEditFocusLoss", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::GetLinguisticAlternativesAsync(_Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::Collections::IVectorView<HSTRING>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_GetLinguisticAlternativesAsync", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->GetLinguisticAlternativesAsyncImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_GetLinguisticAlternativesAsync", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::GetRectFromCharacterIndex(_In_ INT charIndex, _In_ BOOLEAN trailingEdge, _Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_GetRectFromCharacterIndex", 0);
    }

    INT charIndexCore = charIndex;
    BOOLEAN trailingEdgeCore = trailingEdge;
    ABI::Windows::Foundation::Rect returnValueCore;

    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CTextBox*>(GetHandle())->GetRectFromCharacterIndex(charIndexCore, trailingEdgeCore, &returnValueCore));

    IFC(CValueBoxer::ConvertToFramework(returnValueCore, pReturnValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_GetRectFromCharacterIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::PasteFromClipboard()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_PasteFromClipboard", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->PasteFromClipboardImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_PasteFromClipboard", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::Redo()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_Redo", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->RedoImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_Redo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::Select(_In_ INT start, _In_ INT length)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_Select", 0);
    }

    INT startCore = start;
    INT lengthCore = length;

    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CTextBox*>(GetHandle())->Select(startCore, lengthCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_Select", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::SelectAll()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_SelectAll", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CTextBox*>(GetHandle())->SelectAll());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_SelectAll", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxGenerated::Undo()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBox_Undo", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBox*>(this)->UndoImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBox_Undo", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::TextBoxFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxStaticsFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxStaticsFeature_InputValidation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxStaticsFeature_InputValidation*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::TextBoxFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ITextBox** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBox);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::TextBoxFactory::get_TextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_Text, ppValue));
}



IFACEMETHODIMP DirectUI::TextBoxFactory::get_MaxLengthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_MaxLength, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_IsReadOnlyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_IsReadOnly, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_AcceptsReturnProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_AcceptsReturn, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_TextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_TextAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_TextWrappingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_TextWrapping, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_IsSpellCheckEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_IsSpellCheckEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_IsTextPredictionEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_IsTextPredictionEnabled, ppValue));
}

IFACEMETHODIMP DirectUI::TextBoxFactory::get_InputScopeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_InputScope, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_PlaceholderTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_PlaceholderText, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_SelectionHighlightColorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_PreventKeyboardDisplayOnProgrammaticFocusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_PreventKeyboardDisplayOnProgrammaticFocus, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_IsColorFontEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_IsColorFontEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_DesiredCandidateWindowAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_DesiredCandidateWindowAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_TextReadingOrderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_TextReadingOrder, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_SelectionHighlightColorWhenNotFocusedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_SelectionHighlightColorWhenNotFocused, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_HorizontalTextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_HorizontalTextAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_CharacterCasingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_CharacterCasing, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_PlaceholderForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_PlaceholderForeground, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_CanPasteClipboardContentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_CanPasteClipboardContent, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_CanUndoProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_CanUndo, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_CanRedoProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_CanRedo, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_SelectionFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_ProofingMenuFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_ProofingMenuFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_DescriptionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_HeaderPlacement, ppValue));
}





IFACEMETHODIMP DirectUI::TextBoxFactory::get_ErrorTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_InputValidationModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_InputValidationMode, ppValue));
}
IFACEMETHODIMP DirectUI::TextBoxFactory::get_InputValidationKindProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBox_InputValidationKind, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_TextBox()
    {
        RRETURN(ctl::ActivationFactoryCreator<TextBoxFactory>::CreateActivationFactory());
    }
}
