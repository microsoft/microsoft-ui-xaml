// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ChoosingItemContainerEventArgs.g.h"
#include "SelectorItem.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ChoosingItemContainerEventArgs::ChoosingItemContainerEventArgs(): m_itemIndex(), m_isContainerPrepared()
{
}

DirectUI::ChoosingItemContainerEventArgs::~ChoosingItemContainerEventArgs()
{
}

HRESULT DirectUI::ChoosingItemContainerEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ChoosingItemContainerEventArgs)))
    {
        *ppObject = static_cast<DirectUI::ChoosingItemContainerEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::get_IsContainerPrepared(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_isContainerPrepared, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::put_IsContainerPrepared(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_isContainerPrepared));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::get_Item(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pItem.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ChoosingItemContainerEventArgs::put_Item(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pItem, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::get_ItemContainer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pItemContainer.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::put_ItemContainer(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pItemContainer, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingItemContainerEventArgs::get_ItemIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_itemIndex, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ChoosingItemContainerEventArgs::put_ItemIndex(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_itemIndex));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ChoosingItemContainerEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::ChoosingItemContainerEventArgs>>::CreateActivationFactory());
    }
}
