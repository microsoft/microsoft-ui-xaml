// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ItemContainerGenerator.g.h"
#include "Panel.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ItemContainerGeneratorGenerated::ItemContainerGeneratorGenerated()
{
}

DirectUI::ItemContainerGeneratorGenerated::~ItemContainerGeneratorGenerated()
{
}

HRESULT DirectUI::ItemContainerGeneratorGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ItemContainerGenerator)))
    {
        *ppObject = static_cast<DirectUI::ItemContainerGenerator*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemContainerGenerator)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemContainerGenerator*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

HRESULT DirectUI::ItemContainerGeneratorGenerated::EventAddPreValidation(_In_ void* const pValue, EventRegistrationToken* const ptToken) const
{
    HRESULT hr = S_OK;

    ARG_VALIDRETURNPOINTER(ptToken);
    ARG_NOTNULL(pValue, "value");
    IFC(CheckThread());

Cleanup:
    return S_OK;
}
// Events.
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::add_ItemsChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ItemsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetItemsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::remove_ItemsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ItemsChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(GetItemsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));


Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::ContainerFromIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ContainerFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->ContainerFromIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ContainerFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::ContainerFromItem(_In_opt_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ContainerFromItem", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->ContainerFromItemImpl(pItem, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ContainerFromItem", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::GenerateNext(_Out_ BOOLEAN* pIsNewlyRealized, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GenerateNext", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->GenerateNextImpl(pIsNewlyRealized, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GenerateNext", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::GeneratorPositionFromIndex(_In_ INT itemIndex, _Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GeneratorPositionFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->GeneratorPositionFromIndexImpl(itemIndex, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GeneratorPositionFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::GetItemContainerGeneratorForPanel(_In_ ABI::Microsoft::UI::Xaml::Controls::IPanel* pPanel, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IItemContainerGenerator** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GetItemContainerGeneratorForPanel", 0);
    }
    ARG_NOTNULL(pPanel, "panel");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->GetItemContainerGeneratorForPanelImpl(pPanel, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_GetItemContainerGeneratorForPanel", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::IndexFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_IndexFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->IndexFromContainerImpl(pContainer, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_IndexFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::IndexFromGeneratorPosition(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition position, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_IndexFromGeneratorPosition", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->IndexFromGeneratorPositionImpl(position, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_IndexFromGeneratorPosition", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::ItemFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ItemFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->ItemFromContainerImpl(pContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_ItemFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::PrepareItemContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_PrepareItemContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->PrepareItemContainerImpl(pContainer));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_PrepareItemContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::Recycle(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition position, _In_ INT count)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Recycle", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->RecycleImpl(position, count));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Recycle", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::Remove(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition position, _In_ INT count)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Remove", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->RemoveImpl(position, count));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Remove", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::RemoveAll()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_RemoveAll", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->RemoveAllImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_RemoveAll", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::StartAt(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition position, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::GeneratorDirection direction, _In_ BOOLEAN allowStartAtRealizedItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_StartAt", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->StartAtImpl(position, direction, allowStartAtRealizedItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_StartAt", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ItemContainerGeneratorGenerated::Stop()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Stop", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<ItemContainerGenerator*>(this)->StopImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ItemContainerGenerator_Stop", hr);
    }
    RRETURN(hr);
}

// Factory methods.

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::GetItemForItemContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_ItemForItemContainer, ppValue));
}

_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::SetItemForItemContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _In_opt_ IInspectable* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_ItemForItemContainer, pValue));
}
_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::GetDeferredUnlinkingPayloadStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_DeferredUnlinkingPayload, ppValue));
}

_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::SetDeferredUnlinkingPayloadStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _In_opt_ IInspectable* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_DeferredUnlinkingPayload, pValue));
}
_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::GetIsRecycledContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_IsRecycledContainer, pValue));
}

_Check_return_ HRESULT DirectUI::ItemContainerGeneratorFactory::SetIsRecycledContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _In_ BOOLEAN value)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::ItemContainerGenerator_IsRecycledContainer, value));
}

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ItemContainerGenerator()
    {
        RRETURN(ctl::ActivationFactoryCreator<ItemContainerGeneratorFactory>::CreateActivationFactory());
    }
}
