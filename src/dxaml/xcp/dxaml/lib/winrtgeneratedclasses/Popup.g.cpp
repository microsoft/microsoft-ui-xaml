// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Popup.g.h"
#include "FlyoutBase.g.h"
#include "SystemBackdrop.g.h"
#include "TransitionCollection.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::PopupGenerated::PopupGenerated()
{
}

DirectUI::PopupGenerated::~PopupGenerated()
{
}

HRESULT DirectUI::PopupGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Popup)))
    {
        *ppObject = static_cast<DirectUI::Popup*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)))
    {
        *ppObject = static_cast<ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup2)))
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup3)))
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopup3>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop*>(this);
    }
    else
    {
        RRETURN(DirectUI::FrameworkElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::get_ActualPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_ActualPlacement, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_AssociatedFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_AssociatedFlyout, ppValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_AssociatedFlyout(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_AssociatedFlyout, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_Child(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_Child, ppValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_Child(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_Child, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_ChildTransitions(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_ChildTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_ChildTransitions(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_ChildTransitions, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::get_DesiredPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_DesiredPlacement, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::put_DesiredPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_DesiredPlacement, value));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_DisableOverlayIsLightDismissCheck(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_DisableOverlayIsLightDismissCheck, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_DisableOverlayIsLightDismissCheck(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_DisableOverlayIsLightDismissCheck, value));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_HorizontalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_HorizontalOffset, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_HorizontalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_HorizontalOffset, value));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_IsApplicationBarService(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_IsApplicationBarService, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_IsApplicationBarService(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_IsApplicationBarService, value));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_IsConstrainedToRootBounds(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<Popup*>(this)->get_IsConstrainedToRootBoundsImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_IsContentDialog(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_IsContentDialog, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_IsContentDialog(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_IsContentDialog, value));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_IsLightDismissEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_IsLightDismissEnabled, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_IsLightDismissEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_IsLightDismissEnabled, value));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_IsOpen(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_IsOpen, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_IsOpen(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_IsOpen, value));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_IsSubMenu(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_IsSubMenu, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_IsSubMenu(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_IsSubMenu, value));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_LightDismissOverlayMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_LightDismissOverlayMode, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_LightDismissOverlayMode(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_LightDismissOverlayMode, value));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_OverlayElement(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IFrameworkElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_OverlayElement, ppValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_OverlayElement(_In_opt_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_OverlayElement, pValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::get_OverlayInputPassThroughElement(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_OverlayInputPassThroughElement, ppValue));
}
_Check_return_ HRESULT DirectUI::PopupGenerated::put_OverlayInputPassThroughElement(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_OverlayInputPassThroughElement, pValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::get_PlacementTarget(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IFrameworkElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_PlacementTarget, ppValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::put_PlacementTarget(_In_opt_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_PlacementTarget, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_ShouldConstrainToRootBounds(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_ShouldConstrainToRootBounds, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_ShouldConstrainToRootBounds(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_ShouldConstrainToRootBounds, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_SystemBackdrop, ppValue));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_SystemBackdrop, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::get_VerticalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Popup_VerticalOffset, pValue));
}
IFACEMETHODIMP DirectUI::PopupGenerated::put_VerticalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Popup_VerticalOffset, value));
}

// Events.
_Check_return_ HRESULT DirectUI::PopupGenerated::GetActualPlacementChangedEventSourceNoRef(_Outptr_ ActualPlacementChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Popup_ActualPlacementChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ActualPlacementChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Popup_ActualPlacementChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::Popup_ActualPlacementChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::add_ActualPlacementChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ActualPlacementChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetActualPlacementChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::PopupGenerated::remove_ActualPlacementChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ActualPlacementChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetActualPlacementChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Popup_ActualPlacementChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PopupGenerated::GetClosedEventSourceNoRef(_Outptr_ ClosedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Popup_Closed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ClosedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Popup_Closed, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::Popup_Closed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PopupGenerated::add_Closed(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PopupGenerated::remove_Closed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ClosedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Popup_Closed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PopupGenerated::GetOpenedEventSourceNoRef(_Outptr_ OpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Popup_Opened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<OpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Popup_Opened, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::Popup_Opened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PopupGenerated::add_Opened(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PopupGenerated::remove_Opened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    OpenedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Popup_Opened));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::PopupGenerated::OnBackButtonPressed(_Out_ BOOLEAN* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Popup_OnBackButtonPressed", 0);
    }
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Popup*>(this)->OnBackButtonPressedImpl(pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Popup_OnBackButtonPressed", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::PopupFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::PopupFactory::get_ChildProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_Child, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_IsOpenProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_IsOpen, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_HorizontalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_HorizontalOffset, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_VerticalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_VerticalOffset, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_ChildTransitionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_ChildTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_IsLightDismissEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_IsLightDismissEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_LightDismissOverlayModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_LightDismissOverlayMode, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_ShouldConstrainToRootBoundsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_ShouldConstrainToRootBounds, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_PlacementTargetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_PlacementTarget, ppValue));
}
IFACEMETHODIMP DirectUI::PopupFactory::get_DesiredPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_DesiredPlacement, ppValue));
}

IFACEMETHODIMP DirectUI::PopupFactory::get_SystemBackdropProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Popup_SystemBackdrop, ppValue));
}








// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Popup()
    {
        RRETURN(ctl::ActivationFactoryCreator<PopupFactory>::CreateActivationFactory());
    }
}
