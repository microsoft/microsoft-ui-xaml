// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __ItemIndexRange_GUID "075d4b8f-4a9d-4d2d-b308-b67b080b4a49"

namespace DirectUI
{
    class ItemIndexRange;

    class __declspec(novtable) ItemIndexRangeGenerated:
        public ctl::WeakReferenceSource
        , public ABI::Microsoft::UI::Xaml::Data::IItemIndexRange
    {
        friend class DirectUI::ItemIndexRange;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Data.ItemIndexRange");

        BEGIN_INTERFACE_MAP(ItemIndexRangeGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(ItemIndexRangeGenerated, ABI::Microsoft::UI::Xaml::Data::IItemIndexRange)
        END_INTERFACE_MAP(ItemIndexRangeGenerated, ctl::WeakReferenceSource)

    public:
        ItemIndexRangeGenerated();
        ~ItemIndexRangeGenerated() override;

        // Event source typedefs.


        // Properties.
        IFACEMETHOD(get_FirstIndex)(_Out_ INT* pValue) override;
        _Check_return_ HRESULT put_FirstIndex(_In_ INT value);
        IFACEMETHOD(get_LastIndex)(_Out_ INT* pValue) override;
        IFACEMETHOD(get_Length)(_Out_ UINT* pValue) override;
        _Check_return_ HRESULT put_Length(_In_ UINT value);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
        INT m_firstIndex;
        UINT m_length;
    };
}

#include "ItemIndexRange_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ItemIndexRangeFactory:
       public ctl::AggregableActivationFactory<DirectUI::ItemIndexRange>
        , public ABI::Microsoft::UI::Xaml::Data::IItemIndexRangeFactory
    {
        BEGIN_INTERFACE_MAP(ItemIndexRangeFactory, ctl::AggregableActivationFactory<DirectUI::ItemIndexRange>)
            INTERFACE_ENTRY(ItemIndexRangeFactory, ABI::Microsoft::UI::Xaml::Data::IItemIndexRangeFactory)
        END_INTERFACE_MAP(ItemIndexRangeFactory, ctl::AggregableActivationFactory<DirectUI::ItemIndexRange>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_ INT firstIndex, _In_ UINT length, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Data::IItemIndexRange** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:
        _Check_return_ HRESULT CreateInstanceImpl(_In_ INT firstIndex, _In_ UINT length, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Data::IItemIndexRange** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
