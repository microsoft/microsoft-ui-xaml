// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "PageStackEntry.g.h"
#include "NavigationTransitionInfo.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::PageStackEntryGenerated::PageStackEntryGenerated()
{
}

DirectUI::PageStackEntryGenerated::~PageStackEntryGenerated()
{
}

HRESULT DirectUI::PageStackEntryGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::PageStackEntry)))
    {
        *ppObject = static_cast<DirectUI::PageStackEntry*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntry)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntry*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::PageStackEntryGenerated::get_NavigationTransitionInfo(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(m_pNavigationTransitionInfo.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PageStackEntryGenerated::put_NavigationTransitionInfo(_In_opt_ ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    SetPtrValue(m_pNavigationTransitionInfo, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::PageStackEntryGenerated::get_Parameter(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(m_pParameter.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PageStackEntryGenerated::put_Parameter(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    SetPtrValue(m_pParameter, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::PageStackEntryGenerated::get_SourcePageType(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PageStackEntry_SourcePageType, pValue));
}
_Check_return_ HRESULT DirectUI::PageStackEntryGenerated::put_SourcePageType(_In_ ABI::Windows::UI::Xaml::Interop::TypeName value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PageStackEntry_SourcePageType, value));
}

// Events.

// Methods.

HRESULT DirectUI::PageStackEntryFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntryFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntryFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntryStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntryStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::PageStackEntryFactory::CreateInstance(_In_ ABI::Windows::UI::Xaml::Interop::TypeName sourcePageType, _In_opt_ IInspectable* pParameter, _In_opt_ ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo* pNavigationTransitionInfo, _Outptr_ ABI::Microsoft::UI::Xaml::Navigation::IPageStackEntry** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(sourcePageType, pParameter, pNavigationTransitionInfo, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::PageStackEntryFactory::get_SourcePageTypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PageStackEntry_SourcePageType, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_PageStackEntry()
    {
        RRETURN(ctl::ActivationFactoryCreator<PageStackEntryFactory>::CreateActivationFactory());
    }
}
