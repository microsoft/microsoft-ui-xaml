// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkElement.g.h"

#define __Glyphs_GUID "a1ba5ea2-aee8-4085-b254-6c97a8de1afe"

namespace DirectUI
{
    class Glyphs;
    class Brush;

    class __declspec(novtable) __declspec(uuid(__Glyphs_GUID)) Glyphs:
        public DirectUI::FrameworkElement
        , public ABI::Microsoft::UI::Xaml::Documents::IGlyphs
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Documents.Glyphs");

        BEGIN_INTERFACE_MAP(Glyphs, DirectUI::FrameworkElement)
            INTERFACE_ENTRY(Glyphs, ABI::Microsoft::UI::Xaml::Documents::IGlyphs)
        END_INTERFACE_MAP(Glyphs, DirectUI::FrameworkElement)

    public:
        Glyphs();
        ~Glyphs() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Glyphs;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Glyphs;
        }

        // Properties.
        IFACEMETHOD(get_ColorFontPaletteIndex)(_Out_ INT* pValue) override;
        IFACEMETHOD(put_ColorFontPaletteIndex)(_In_ INT value) override;
        IFACEMETHOD(get_Fill)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) override;
        IFACEMETHOD(put_Fill)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) override;
        IFACEMETHOD(get_FontRenderingEmSize)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_FontRenderingEmSize)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_FontUri)(_Outptr_result_maybenull_ ABI::Windows::Foundation::IUriRuntimeClass** ppValue) override;
        IFACEMETHOD(put_FontUri)(_In_opt_ ABI::Windows::Foundation::IUriRuntimeClass* pValue) override;
        IFACEMETHOD(get_Indices)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_Indices)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_IsColorFontEnabled)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsColorFontEnabled)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_OriginX)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_OriginX)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_OriginY)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_OriginY)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_StyleSimulations)(_Out_ ABI::Microsoft::UI::Xaml::Media::StyleSimulations* pValue) override;
        IFACEMETHOD(put_StyleSimulations)(_In_ ABI::Microsoft::UI::Xaml::Media::StyleSimulations value) override;
        IFACEMETHOD(get_UnicodeString)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_UnicodeString)(_In_opt_ HSTRING value) override;

        // Events.

        // Methods.
        _Check_return_ HRESULT SetFontSource(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pDownloader, _In_ HSTRING partName);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) GlyphsFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Documents::IGlyphsStatics
    {
        BEGIN_INTERFACE_MAP(GlyphsFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(GlyphsFactory, ABI::Microsoft::UI::Xaml::Documents::IGlyphsStatics)
        END_INTERFACE_MAP(GlyphsFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_UnicodeStringProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IndicesProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_FontUriProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_StyleSimulationsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_FontRenderingEmSizeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_OriginXProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_OriginYProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_FillProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsColorFontEnabledProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ColorFontPaletteIndexProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Glyphs;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
