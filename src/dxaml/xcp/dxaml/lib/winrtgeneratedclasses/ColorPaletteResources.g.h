// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ResourceDictionary.g.h"

#define __ColorPaletteResources_GUID "ec22abc3-034e-4a37-a82d-eda167e9f28b"

namespace DirectUI
{
    class ColorPaletteResources;

    class __declspec(novtable) __declspec(uuid(__ColorPaletteResources_GUID)) ColorPaletteResources:
        public DirectUI::ResourceDictionary
        , public ABI::Microsoft::UI::Xaml::IColorPaletteResources
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.ColorPaletteResources");

        BEGIN_INTERFACE_MAP(ColorPaletteResources, DirectUI::ResourceDictionary)
            INTERFACE_ENTRY(ColorPaletteResources, ABI::Microsoft::UI::Xaml::IColorPaletteResources)
        END_INTERFACE_MAP(ColorPaletteResources, DirectUI::ResourceDictionary)

    public:
        ColorPaletteResources();
        ~ColorPaletteResources() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ColorPaletteResources;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::ColorPaletteResources;
        }

        // Properties.
        IFACEMETHOD(get_Accent)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_Accent)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_AltHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_AltHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_AltLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_AltLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_AltMedium)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_AltMedium)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_AltMediumHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_AltMediumHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_AltMediumLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_AltMediumLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_BaseHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_BaseHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_BaseLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_BaseLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_BaseMedium)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_BaseMedium)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_BaseMediumHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_BaseMediumHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_BaseMediumLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_BaseMediumLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeAltLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeAltLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeBlackHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeBlackHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeBlackLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeBlackLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeBlackMedium)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeBlackMedium)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeBlackMediumLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeBlackMediumLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeDisabledHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeDisabledHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeDisabledLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeDisabledLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeGray)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeGray)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeHigh)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeHigh)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeMedium)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeMedium)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeMediumLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeMediumLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ChromeWhite)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ChromeWhite)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ErrorText)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ErrorText)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ListLow)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ListLow)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;
        IFACEMETHOD(get_ListMedium)(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>** ppValue) override;
        IFACEMETHOD(put_ListMedium)(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::UI::Color>* pValue) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ColorPaletteResourcesFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::IColorPaletteResourcesFactory
    {
        BEGIN_INTERFACE_MAP(ColorPaletteResourcesFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(ColorPaletteResourcesFactory, ABI::Microsoft::UI::Xaml::IColorPaletteResourcesFactory)
        END_INTERFACE_MAP(ColorPaletteResourcesFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IColorPaletteResources** ppInstance);

        // Static properties.

        // Dependency properties.
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ColorPaletteResources;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
