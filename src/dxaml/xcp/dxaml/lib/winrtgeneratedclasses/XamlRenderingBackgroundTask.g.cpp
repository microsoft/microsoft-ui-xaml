// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "XamlRenderingBackgroundTask.g.h"
#include "ResourceDictionary.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::XamlRenderingBackgroundTaskGenerated::XamlRenderingBackgroundTaskGenerated()
{
}

DirectUI::XamlRenderingBackgroundTaskGenerated::~XamlRenderingBackgroundTaskGenerated()
{
}

HRESULT DirectUI::XamlRenderingBackgroundTaskGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::XamlRenderingBackgroundTask)))
    {
        *ppObject = static_cast<DirectUI::XamlRenderingBackgroundTask*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::XamlRenderingBackgroundTaskGenerated::OnRun(_In_ ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance* pTaskInstance)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "XamlRenderingBackgroundTask_OnRun", 0);
    }
    ARG_NOTNULL(pTaskInstance, "taskInstance");
    
    IFC(static_cast<XamlRenderingBackgroundTask*>(this)->OnRunImpl(pTaskInstance));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "XamlRenderingBackgroundTask_OnRun", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::XamlRenderingBackgroundTaskGenerated::OnRunProtected(_In_ ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance* pTaskInstance)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnRun(pTaskInstance));
    }
    else
    {
        IFC(OnRun(pTaskInstance));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::XamlRenderingBackgroundTaskFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskStaticsPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskStaticsPrivate*>(this);
    }
    else
    {
        RRETURN(ctl::AggregableAbstractActivationFactory<DirectUI::XamlRenderingBackgroundTask>::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

_Check_return_ HRESULT DirectUI::XamlRenderingBackgroundTaskFactory::CheckActivationAllowed()
{
    RRETURN(S_OK);
}

// Factory methods.
IFACEMETHODIMP DirectUI::XamlRenderingBackgroundTaskFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask** ppInstance)
{


    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithAggregableAbstractActivationFactory<DirectUI::XamlRenderingBackgroundTask,ABI::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask>(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), true /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::XamlRenderingBackgroundTaskFactory::get_Resources(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IResourceDictionary** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    
    IFC(get_ResourcesImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.
IFACEMETHODIMP DirectUI::XamlRenderingBackgroundTaskFactory::EnableStandaloneHosting()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlRenderingBackgroundTask_EnableStandaloneHosting", 0);
    }
    
    
    IFC(EnableStandaloneHostingImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlRenderingBackgroundTask_EnableStandaloneHosting", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlRenderingBackgroundTaskFactory::SetScalePercentage(_In_ UINT percentage)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlRenderingBackgroundTask_SetScalePercentage", 0);
    }
    
    
    IFC(SetScalePercentageImpl(percentage));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlRenderingBackgroundTask_SetScalePercentage", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_XamlRenderingBackgroundTask()
    {
        RRETURN(ctl::ActivationFactoryCreator<XamlRenderingBackgroundTaskFactory>::CreateActivationFactory());
    }
}
