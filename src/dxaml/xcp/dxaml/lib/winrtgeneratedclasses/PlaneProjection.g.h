// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Projection.g.h"
#include "Matrix3D.g.h"

#define __PlaneProjection_GUID "c4d3813f-0488-42e9-a3c2-5850af688808"

namespace DirectUI
{
    class PlaneProjection;

    class __declspec(novtable) __declspec(uuid(__PlaneProjection_GUID)) PlaneProjection:
        public DirectUI::Projection
        , public ABI::Microsoft::UI::Xaml::Media::IPlaneProjection
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.PlaneProjection");

        BEGIN_INTERFACE_MAP(PlaneProjection, DirectUI::Projection)
            INTERFACE_ENTRY(PlaneProjection, ABI::Microsoft::UI::Xaml::Media::IPlaneProjection)
        END_INTERFACE_MAP(PlaneProjection, DirectUI::Projection)

    public:
        PlaneProjection();
        ~PlaneProjection() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::PlaneProjection;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::PlaneProjection;
        }

        // Properties.
        IFACEMETHOD(get_CenterOfRotationX)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_CenterOfRotationX)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_CenterOfRotationXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_CenterOfRotationXAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_CenterOfRotationY)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_CenterOfRotationY)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_CenterOfRotationYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_CenterOfRotationYAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_CenterOfRotationZ)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_CenterOfRotationZ)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_CenterOfRotationZAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_CenterOfRotationZAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_GlobalOffsetX)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_GlobalOffsetX)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_GlobalOffsetXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_GlobalOffsetXAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_GlobalOffsetY)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_GlobalOffsetY)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_GlobalOffsetYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_GlobalOffsetYAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_GlobalOffsetZ)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_GlobalOffsetZ)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_GlobalOffsetZAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_GlobalOffsetZAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_LocalOffsetX)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_LocalOffsetX)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_LocalOffsetXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_LocalOffsetXAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_LocalOffsetY)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_LocalOffsetY)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_LocalOffsetYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_LocalOffsetYAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_LocalOffsetZ)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_LocalOffsetZ)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_LocalOffsetZAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_LocalOffsetZAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_ProjectionMatrix)(_Out_ ABI::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* pValue) override;
        IFACEMETHOD(get_RotationX)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_RotationX)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_RotationXAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_RotationXAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_RotationY)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_RotationY)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_RotationYAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_RotationYAnimation(_In_opt_ IInspectable* pValue);
        IFACEMETHOD(get_RotationZ)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_RotationZ)(_In_ DOUBLE value) override;
        _Check_return_ HRESULT get_RotationZAnimation(_Outptr_result_maybenull_ IInspectable** ppValue);
        _Check_return_ HRESULT put_RotationZAnimation(_In_opt_ IInspectable* pValue);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) PlaneProjectionFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::IPlaneProjectionStatics
    {
        BEGIN_INTERFACE_MAP(PlaneProjectionFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(PlaneProjectionFactory, ABI::Microsoft::UI::Xaml::Media::IPlaneProjectionStatics)
        END_INTERFACE_MAP(PlaneProjectionFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_LocalOffsetXProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_LocalOffsetYProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_LocalOffsetZProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_RotationXProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_RotationYProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_RotationZProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_CenterOfRotationXProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_CenterOfRotationYProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_CenterOfRotationZProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_GlobalOffsetXProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_GlobalOffsetYProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_GlobalOffsetZProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_ProjectionMatrixProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::PlaneProjection;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
