// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "XamlLight.g.h"
#include "Brush.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::XamlLight::XamlLight()
{
}

DirectUI::XamlLight::~XamlLight()
{
}

HRESULT DirectUI::XamlLight::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::XamlLight)))
    {
        *ppObject = static_cast<DirectUI::XamlLight*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLight)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IXamlLight*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLightProtected)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IXamlLightProtected*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::XamlLight::get_CompositionLight(_Outptr_result_maybenull_ ABI::Microsoft::UI::Composition::ICompositionLight** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<XamlLight*>(this)->get_CompositionLightImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLight::put_CompositionLight(_In_opt_ ABI::Microsoft::UI::Composition::ICompositionLight* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<XamlLight*>(this)->put_CompositionLightImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::XamlLight::GetId(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "XamlLight_GetId", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<XamlLight*>(this)->GetIdImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "XamlLight_GetId", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::XamlLight::GetIdProtected(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetId(pReturnValue));
    }
    else
    {
        IFC(GetId(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLight::OnConnected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pNewElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "XamlLight_OnConnected", 0);
    }
    ARG_NOTNULL(pNewElement, "newElement");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<XamlLight*>(this)->OnConnectedImpl(pNewElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "XamlLight_OnConnected", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::XamlLight::OnConnectedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pNewElement)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnConnected(pNewElement));
    }
    else
    {
        IFC(OnConnected(pNewElement));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLight::OnDisconnected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pOldElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "XamlLight_OnDisconnected", 0);
    }
    ARG_NOTNULL(pOldElement, "oldElement");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<XamlLight*>(this)->OnDisconnectedImpl(pOldElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "XamlLight_OnDisconnected", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::XamlLight::OnDisconnectedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pOldElement)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDisconnected(pOldElement));
    }
    else
    {
        IFC(OnDisconnected(pOldElement));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::XamlLightFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLightFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IXamlLightFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLightStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IXamlLightStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::XamlLightFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IXamlLight** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Media::IXamlLight);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::XamlLightFactory::AddTargetElement(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlLight_AddTargetElement", 0);
    }
    ARG_NOTNULL(lightId, "lightId");
    ARG_NOTNULL(pElement, "element");
    IFC(CheckActivationAllowed());
    IFC(AddTargetElementImpl(lightId, pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlLight_AddTargetElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLightFactory::RemoveTargetElement(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlLight_RemoveTargetElement", 0);
    }
    ARG_NOTNULL(lightId, "lightId");
    ARG_NOTNULL(pElement, "element");
    IFC(CheckActivationAllowed());
    IFC(RemoveTargetElementImpl(lightId, pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlLight_RemoveTargetElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLightFactory::AddTargetBrush(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlLight_AddTargetBrush", 0);
    }
    ARG_NOTNULL(lightId, "lightId");
    ARG_NOTNULL(pBrush, "brush");
    IFC(CheckActivationAllowed());
    IFC(AddTargetBrushImpl(lightId, pBrush));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlLight_AddTargetBrush", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlLightFactory::RemoveTargetBrush(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlLight_RemoveTargetBrush", 0);
    }
    ARG_NOTNULL(lightId, "lightId");
    ARG_NOTNULL(pBrush, "brush");
    IFC(CheckActivationAllowed());
    IFC(RemoveTargetBrushImpl(lightId, pBrush));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlLight_RemoveTargetBrush", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_XamlLight()
    {
        RRETURN(ctl::ActivationFactoryCreator<XamlLightFactory>::CreateActivationFactory());
    }
}
