// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkElement.g.h"
#include "Thickness.g.h"

#define __RichTextBlockOverflow_GUID "28b1261a-787e-402c-8c99-70e0e5afa1f8"

namespace DirectUI
{
    class RichTextBlockOverflow;
    class RichTextBlock;
    class TextPointer;

    class __declspec(novtable) RichTextBlockOverflowGenerated:
        public DirectUI::FrameworkElement
        , public ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow
    {
        friend class DirectUI::RichTextBlockOverflow;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.RichTextBlockOverflow");

        BEGIN_INTERFACE_MAP(RichTextBlockOverflowGenerated, DirectUI::FrameworkElement)
            INTERFACE_ENTRY(RichTextBlockOverflowGenerated, ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow)
        END_INTERFACE_MAP(RichTextBlockOverflowGenerated, DirectUI::FrameworkElement)

    public:
        RichTextBlockOverflowGenerated();
        ~RichTextBlockOverflowGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>, ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow, ABI::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs> IsTextTrimmedChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::RichTextBlockOverflow;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::RichTextBlockOverflow;
        }

        // Properties.
        IFACEMETHOD(get_BaselineOffset)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(get_ContentEnd)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue) override;
        IFACEMETHOD(get_ContentSource)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlock** ppValue) override;
        IFACEMETHOD(get_ContentStart)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue) override;
        IFACEMETHOD(get_HasOverflowContent)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(get_IsTextTrimmed)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(get_MaxLines)(_Out_ INT* pValue) override;
        IFACEMETHOD(put_MaxLines)(_In_ INT value) override;
        IFACEMETHOD(get_OverflowContentTarget)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow** ppValue) override;
        IFACEMETHOD(put_OverflowContentTarget)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow* pValue) override;
        IFACEMETHOD(get_Padding)(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue) override;
        IFACEMETHOD(put_Padding)(_In_ ABI::Microsoft::UI::Xaml::Thickness value) override;

        // Events.
        _Check_return_ HRESULT GetIsTextTrimmedChangedEventSourceNoRef(_Outptr_ IsTextTrimmedChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_IsTextTrimmedChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_IsTextTrimmedChanged)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(GetPositionFromPoint)(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppReturnValue) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "RichTextBlockOverflow_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) RichTextBlockOverflowFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics
    {
        BEGIN_INTERFACE_MAP(RichTextBlockOverflowFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(RichTextBlockOverflowFactory, ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics)
        END_INTERFACE_MAP(RichTextBlockOverflowFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_OverflowContentTargetProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_PaddingProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_HasOverflowContentProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_MaxLinesProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsTextTrimmedProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::RichTextBlockOverflow;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
