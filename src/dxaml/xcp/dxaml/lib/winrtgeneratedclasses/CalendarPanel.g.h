// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ModernCollectionBasePanel.g.h"
#include "IOrientedPanel.g.h"

#define __CalendarPanel_GUID "b6927e47-7e23-4d44-a729-1517febe8049"

namespace DirectUI
{
    class CalendarPanel;

    class __declspec(novtable) CalendarPanelGenerated:
        public DirectUI::ModernCollectionBasePanel
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel
        , public DirectUI::IOrientedPanel
    {
        friend class DirectUI::CalendarPanel;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel");

        BEGIN_INTERFACE_MAP(CalendarPanelGenerated, DirectUI::ModernCollectionBasePanel)
            INTERFACE_ENTRY(CalendarPanelGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel)
            INTERFACE_ENTRY(CalendarPanelGenerated, DirectUI::IOrientedPanel)
        END_INTERFACE_MAP(CalendarPanelGenerated, DirectUI::ModernCollectionBasePanel)

    public:
        CalendarPanelGenerated();
        ~CalendarPanelGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CalendarPanel;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::CalendarPanel;
        }

        // Properties.
        _Check_return_ HRESULT get_CacheLength(_Out_ DOUBLE* pValue);
        _Check_return_ HRESULT put_CacheLength(_In_ DOUBLE value);
        _Check_return_ HRESULT get_Cols(_Out_ INT* pValue);
        _Check_return_ HRESULT put_Cols(_In_ INT value);
        _Check_return_ HRESULT get_FirstCacheIndex(_Out_ INT* pValue);
        _Check_return_ HRESULT get_FirstVisibleIndex(_Out_ INT* pValue);
        _Check_return_ HRESULT get_ItemMinHeight(_Out_ DOUBLE* pValue);
        _Check_return_ HRESULT put_ItemMinHeight(_In_ DOUBLE value);
        _Check_return_ HRESULT get_ItemMinWidth(_Out_ DOUBLE* pValue);
        _Check_return_ HRESULT put_ItemMinWidth(_In_ DOUBLE value);
        _Check_return_ HRESULT get_LastCacheIndex(_Out_ INT* pValue);
        _Check_return_ HRESULT get_LastVisibleIndex(_Out_ INT* pValue);
        _Check_return_ HRESULT get_Orientation(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue);
        _Check_return_ HRESULT put_Orientation(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value);
        _Check_return_ HRESULT get_Rows(_Out_ INT* pValue);
        _Check_return_ HRESULT put_Rows(_In_ INT value);
        _Check_return_ HRESULT get_ScrollingDirection(_Out_ ABI::Microsoft::UI::Xaml::Controls::PanelScrollingDirection* pValue);
        _Check_return_ HRESULT get_StartIndex(_Out_ INT* pValue);
        _Check_return_ HRESULT put_StartIndex(_In_ INT value);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "CalendarPanel_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) CalendarPanelFactory:
       public ctl::BetterCoreObjectActivationFactory
    {

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        
        
        
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CalendarPanel;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
