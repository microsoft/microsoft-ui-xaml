// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "RangeBase.g.h"

#define __ScrollBar_GUID "463a80e0-2629-420c-a58b-ca2a049a669b"

namespace DirectUI
{
    class ScrollBar;

    class __declspec(novtable) ScrollBarGenerated:
        public DirectUI::RangeBase
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar
    {
        friend class DirectUI::ScrollBar;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.ScrollBar");

        BEGIN_INTERFACE_MAP(ScrollBarGenerated, DirectUI::RangeBase)
            INTERFACE_ENTRY(ScrollBarGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar)
        END_INTERFACE_MAP(ScrollBarGenerated, DirectUI::RangeBase)

    public:
        ScrollBarGenerated();
        ~ScrollBarGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs> ScrollEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs> ThumbDragStartedEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs> ThumbDragCompletedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ScrollBar;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::ScrollBar;
        }

        // Properties.
        IFACEMETHOD(get_IndicatorMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode* pValue) override;
        IFACEMETHOD(put_IndicatorMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode value) override;
        IFACEMETHOD(get_Orientation)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue) override;
        IFACEMETHOD(put_Orientation)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value) override;
        IFACEMETHOD(get_ViewportSize)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_ViewportSize)(_In_ DOUBLE value) override;

        // Events.
        _Check_return_ HRESULT GetScrollEventSourceNoRef(_Outptr_ ScrollEventSourceType** ppEventSource);
        IFACEMETHOD(add_Scroll)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Scroll)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetThumbDragCompletedEventSourceNoRef(_Outptr_ ThumbDragCompletedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_ThumbDragCompleted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_ThumbDragCompleted(_In_ EventRegistrationToken token);
        _Check_return_ HRESULT GetThumbDragStartedEventSourceNoRef(_Outptr_ ThumbDragStartedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_ThumbDragStarted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_ThumbDragStarted(_In_ EventRegistrationToken token);

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "ScrollBar_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ScrollBarFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics
    {
        BEGIN_INTERFACE_MAP(ScrollBarFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(ScrollBarFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics)
        END_INTERFACE_MAP(ScrollBarFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_OrientationProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ViewportSizeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IndicatorModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ScrollBar;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
