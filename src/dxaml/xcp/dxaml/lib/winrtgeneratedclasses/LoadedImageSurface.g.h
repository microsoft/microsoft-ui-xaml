// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __LoadedImageSurface_GUID "8bea419f-558b-4bb7-8471-9ec1e89a267d"

namespace DirectUI
{
    class LoadedImageSurface;

    class __declspec(novtable) LoadedImageSurfaceGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface
        , public ABI::Microsoft::UI::Composition::ICompositionSurface
        , public ABI::Windows::Foundation::IClosable
    {
        friend class DirectUI::LoadedImageSurface;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.LoadedImageSurface");

        BEGIN_INTERFACE_MAP(LoadedImageSurfaceGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(LoadedImageSurfaceGenerated, ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface)
            INTERFACE_ENTRY(LoadedImageSurfaceGenerated, ABI::Microsoft::UI::Composition::ICompositionSurface)
            INTERFACE_ENTRY(LoadedImageSurfaceGenerated, ABI::Windows::Foundation::IClosable)
        END_INTERFACE_MAP(LoadedImageSurfaceGenerated, DirectUI::DependencyObject)

    public:
        LoadedImageSurfaceGenerated();
        ~LoadedImageSurfaceGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LoadedImageSurface*, ABI::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs*>, ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface, ABI::Microsoft::UI::Xaml::Media::ILoadedImageSourceLoadCompletedEventArgs> LoadCompletedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::LoadedImageSurface;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::LoadedImageSurface;
        }

        // Properties.
        IFACEMETHOD(get_DecodedPhysicalSize)(_Out_ ABI::Windows::Foundation::Size* pValue) override;
        _Check_return_ HRESULT put_DecodedPhysicalSize(_In_ ABI::Windows::Foundation::Size value);
        IFACEMETHOD(get_DecodedSize)(_Out_ ABI::Windows::Foundation::Size* pValue) override;
        _Check_return_ HRESULT put_DecodedSize(_In_ ABI::Windows::Foundation::Size value);
        IFACEMETHOD(get_NaturalSize)(_Out_ ABI::Windows::Foundation::Size* pValue) override;
        _Check_return_ HRESULT put_NaturalSize(_In_ ABI::Windows::Foundation::Size value);

        // Events.
        _Check_return_ HRESULT GetLoadCompletedEventSourceNoRef(_Outptr_ LoadCompletedEventSourceType** ppEventSource);
        IFACEMETHOD(add_LoadCompleted)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LoadedImageSurface*, ABI::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_LoadCompleted)(_In_ EventRegistrationToken token) override;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "LoadedImageSurface_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) LoadedImageSurfaceFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurfaceStatics
    {
        BEGIN_INTERFACE_MAP(LoadedImageSurfaceFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(LoadedImageSurfaceFactory, ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurfaceStatics)
        END_INTERFACE_MAP(LoadedImageSurfaceFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        
        
        

        // Attached properties.

        // Static methods.
        IFACEMETHOD(StartLoadFromUriWithSize)(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue) override;
        IFACEMETHOD(StartLoadFromUri)(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue) override;
        IFACEMETHOD(StartLoadFromStreamWithSize)(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue) override;
        IFACEMETHOD(StartLoadFromStream)(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::LoadedImageSurface;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT StartLoadFromUriWithSizeImpl(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue); 
         _Check_return_ HRESULT StartLoadFromUriImpl(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue); 
         _Check_return_ HRESULT StartLoadFromStreamWithSizeImpl(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue); 
         _Check_return_ HRESULT StartLoadFromStreamImpl(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue); 
    };
}
