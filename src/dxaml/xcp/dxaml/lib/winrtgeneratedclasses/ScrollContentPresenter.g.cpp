// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ScrollContentPresenter.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ScrollContentPresenterGenerated::ScrollContentPresenterGenerated()
{
}

DirectUI::ScrollContentPresenterGenerated::~ScrollContentPresenterGenerated()
{
}

HRESULT DirectUI::ScrollContentPresenterGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ScrollContentPresenter)))
    {
        *ppObject = static_cast<DirectUI::ScrollContentPresenter*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollContentPresenter)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollContentPresenter*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IScrollInfo)))
    {
        *ppObject = static_cast<DirectUI::IScrollInfo*>(this);
    }
    else
    {
        RRETURN(DirectUI::ContentPresenter::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_CanContentRenderOutsideBounds(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollContentPresenter_CanContentRenderOutsideBounds, pValue));
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::put_CanContentRenderOutsideBounds(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollContentPresenter_CanContentRenderOutsideBounds, value));
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_CanHorizontallyScroll(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_CanHorizontallyScrollImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::put_CanHorizontallyScroll(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->put_CanHorizontallyScrollImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_CanVerticallyScroll(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_CanVerticallyScrollImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::put_CanVerticallyScroll(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->put_CanVerticallyScrollImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_ExtentHeight(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_ExtentHeightImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_ExtentWidth(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_ExtentWidthImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_HorizontalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_HorizontalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_MinHorizontalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_MinHorizontalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_MinVerticalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_MinVerticalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_ScrollOwner(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_ScrollOwnerImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::put_ScrollOwner(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->put_ScrollOwnerImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_SizesContentToTemplatedParent(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollContentPresenter_SizesContentToTemplatedParent, pValue));
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::put_SizesContentToTemplatedParent(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollContentPresenter_SizesContentToTemplatedParent, value));
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_VerticalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_VerticalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_ViewportHeight(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_ViewportHeightImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::get_ViewportWidth(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ScrollContentPresenter*>(this)->get_ViewportWidthImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::LineDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->LineDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::LineLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->LineLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::LineRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->LineRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::LineUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->LineUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_LineUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pVisual, _In_ ABI::Windows::Foundation::Rect rectangle, _Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MakeVisible", 0);
    }
    ARG_NOTNULL(pVisual, "visual");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MakeVisibleImpl(pVisual, rectangle, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pVisual, _In_ ABI::Windows::Foundation::Rect rectangle, _In_ BOOLEAN useAnimation, _In_ DOUBLE horizontalAlignmentRatio, _In_ DOUBLE verticalAlignmentRatio, _In_ DOUBLE offsetX, _In_ DOUBLE offsetY, _Out_ ABI::Windows::Foundation::Rect* pResultRectangle, _Out_ DOUBLE* pAppliedOffsetX, _Out_ DOUBLE* pAppliedOffsetY)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MakeVisible", 0);
    }
    ARG_NOTNULL(pVisual, "visual");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MakeVisibleImpl(pVisual, rectangle, useAnimation, horizontalAlignmentRatio, verticalAlignmentRatio, offsetX, offsetY, pResultRectangle, pAppliedOffsetX, pAppliedOffsetY));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MouseWheelDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MouseWheelDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MouseWheelLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MouseWheelLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MouseWheelRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MouseWheelRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::MouseWheelUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->MouseWheelUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_MouseWheelUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::PageDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->PageDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::PageLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->PageLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::PageRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->PageRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::PageUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->PageUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_PageUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::SetHorizontalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_SetHorizontalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->SetHorizontalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_SetHorizontalOffset", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterGenerated::SetVerticalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_SetVerticalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ScrollContentPresenter*>(this)->SetVerticalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ScrollContentPresenter_SetVerticalOffset", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::ScrollContentPresenterFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ScrollContentPresenterFactory::get_CanContentRenderOutsideBoundsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollContentPresenter_CanContentRenderOutsideBounds, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollContentPresenterFactory::get_SizesContentToTemplatedParentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollContentPresenter_SizesContentToTemplatedParent, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ScrollContentPresenter()
    {
        RRETURN(ctl::ActivationFactoryCreator<ScrollContentPresenterFactory>::CreateActivationFactory());
    }
}
