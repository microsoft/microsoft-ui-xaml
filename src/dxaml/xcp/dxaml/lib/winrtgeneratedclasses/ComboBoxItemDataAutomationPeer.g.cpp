// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ComboBoxItemDataAutomationPeer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ComboBoxItemDataAutomationPeerGenerated::ComboBoxItemDataAutomationPeerGenerated()
{
}

DirectUI::ComboBoxItemDataAutomationPeerGenerated::~ComboBoxItemDataAutomationPeerGenerated()
{
}

HRESULT DirectUI::ComboBoxItemDataAutomationPeerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ComboBoxItemDataAutomationPeer)))
    {
        *ppObject = static_cast<DirectUI::ComboBoxItemDataAutomationPeer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollItemProvider)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Provider::IScrollItemProvider*>(this);
    }
    else
    {
        RRETURN(DirectUI::SelectorItemAutomationPeer::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::ComboBoxItemDataAutomationPeerGenerated::ScrollIntoView()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ComboBoxItemDataAutomationPeer_ScrollIntoView", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ComboBoxItemDataAutomationPeer*>(this)->ScrollIntoViewImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ComboBoxItemDataAutomationPeer_ScrollIntoView", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::ComboBoxItemDataAutomationPeerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ComboBoxItemDataAutomationPeerFactory::CreateInstanceWithParentAndItem(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer* pParent, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pItem, "item");
    ARG_NOTNULL(pParent, "parent");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithParentAndItemImpl(pItem, pParent, pOuter, ppInner, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ComboBoxItemDataAutomationPeer()
    {
        RRETURN(ctl::ActivationFactoryCreator<ComboBoxItemDataAutomationPeerFactory>::CreateActivationFactory());
    }
}
