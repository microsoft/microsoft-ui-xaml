// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "TileBrush.g.h"

#define __ImageBrush_GUID "12a869de-963a-49d6-bd1d-30a4e488e8f7"

namespace DirectUI
{
    class ImageBrush;
    class ImageSource;

    class __declspec(novtable) __declspec(uuid(__ImageBrush_GUID)) ImageBrush:
        public DirectUI::TileBrush
        , public ABI::Microsoft::UI::Xaml::Media::IImageBrush
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.ImageBrush");

        BEGIN_INTERFACE_MAP(ImageBrush, DirectUI::TileBrush)
            INTERFACE_ENTRY(ImageBrush, ABI::Microsoft::UI::Xaml::Media::IImageBrush)
        END_INTERFACE_MAP(ImageBrush, DirectUI::TileBrush)

    public:
        ImageBrush();
        ~ImageBrush() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IExceptionRoutedEventArgs> ImageFailedEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IRoutedEventArgs> ImageOpenedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ImageBrush;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::ImageBrush;
        }

        // Properties.
        IFACEMETHOD(get_ImageSource)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IImageSource** ppValue) override;
        IFACEMETHOD(put_ImageSource)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IImageSource* pValue) override;

        // Events.
        _Check_return_ HRESULT GetImageFailedEventSourceNoRef(_Outptr_ ImageFailedEventSourceType** ppEventSource);
        IFACEMETHOD(add_ImageFailed)(_In_ ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_ImageFailed)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetImageOpenedEventSourceNoRef(_Outptr_ ImageOpenedEventSourceType** ppEventSource);
        IFACEMETHOD(add_ImageOpened)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_ImageOpened)(_In_ EventRegistrationToken token) override;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ImageBrushFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::IImageBrushStatics
    {
        BEGIN_INTERFACE_MAP(ImageBrushFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(ImageBrushFactory, ABI::Microsoft::UI::Xaml::Media::IImageBrushStatics)
        END_INTERFACE_MAP(ImageBrushFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_ImageSourceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ImageBrush;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
