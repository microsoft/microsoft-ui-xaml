// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CommandingContainer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CommandingContainerGenerated::CommandingContainerGenerated()
{
}

DirectUI::CommandingContainerGenerated::~CommandingContainerGenerated()
{
}

HRESULT DirectUI::CommandingContainerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CommandingContainer)))
    {
        *ppObject = static_cast<DirectUI::CommandingContainer*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer)) && Feature_CommandingImprovements::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::ContentPresenter::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::CommandingContainerGenerated::get_CommandingTarget(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CommandingContainer_CommandingTarget, ppValue));
}
IFACEMETHODIMP DirectUI::CommandingContainerGenerated::put_CommandingTarget(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CommandingContainer_CommandingTarget, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::CommandingContainerGenerated::GetContextChangedEventSourceNoRef(_Outptr_ ContextChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::CommandingContainer_ContextChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContextChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::CommandingContainer_ContextChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::CommandingContainer_ContextChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CommandingContainerGenerated::add_ContextChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContextChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CommandingContainerGenerated::remove_ContextChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContextChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::CommandingContainer_ContextChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

_Check_return_ HRESULT DirectUI::CommandingContainerGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::CommandingContainer_ContextChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ContextChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetContextChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ContentPresenterGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::CommandingContainerGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::CommandingContainer_ContextChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ContextChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetContextChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ContentPresenterGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::CommandingContainerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerStatics*>(this);
    }
    else
#endif
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
    AddRefOuter();
    RRETURN(S_OK);
#endif
}


// Factory methods.
IFACEMETHODIMP DirectUI::CommandingContainerFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppInstance)
{
    if (!Feature_CommandingImprovements::IsEnabled()) IFC_RETURN(E_NOTIMPL);

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::CommandingContainerFactory::get_CommandingTargetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CommandingContainer_CommandingTarget, ppValue));
}

// Attached properties.
_Check_return_ HRESULT DirectUI::CommandingContainerFactory::GetCommandingContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::CommandingContainer_CommandingContainer, ppValue));
}

_Check_return_ HRESULT DirectUI::CommandingContainerFactory::SetCommandingContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::CommandingContainer_CommandingContainer, pValue));
}


IFACEMETHODIMP DirectUI::CommandingContainerFactory::get_CommandingContainerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CommandingContainer_CommandingContainer, ppValue));
}


IFACEMETHODIMP DirectUI::CommandingContainerFactory::GetCommandingContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppValue)
{
    RRETURN(GetCommandingContainerStatic(pElement, ppValue));
}

IFACEMETHODIMP DirectUI::CommandingContainerFactory::SetCommandingContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer* pValue)
{
    RRETURN(SetCommandingContainerStatic(pElement, pValue));
}

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::CommandingContainerFactory::NotifyContextChanged(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pCommandTarget)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "CommandingContainer_NotifyContextChanged", 0);
    }
    ARG_NOTNULL(pCommandTarget, "commandTarget");
    IFC(CheckActivationAllowed());
    IFC(NotifyContextChangedImpl(pCommandTarget));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "CommandingContainer_NotifyContextChanged", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_CommandingContainer()
    {
        RRETURN(ctl::ActivationFactoryCreator<CommandingContainerFactory>::CreateActivationFactory());
    }
}
