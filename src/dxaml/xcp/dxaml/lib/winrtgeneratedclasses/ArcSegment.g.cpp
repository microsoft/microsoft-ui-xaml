// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ArcSegment.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ArcSegment::ArcSegment()
{
}

DirectUI::ArcSegment::~ArcSegment()
{
}

HRESULT DirectUI::ArcSegment::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ArcSegment)))
    {
        *ppObject = static_cast<DirectUI::ArcSegment*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IArcSegment)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IArcSegment*>(this);
    }
    else
    {
        RRETURN(DirectUI::PathSegment::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ArcSegment::get_IsLargeArc(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ArcSegment_IsLargeArc, pValue));
}
IFACEMETHODIMP DirectUI::ArcSegment::put_IsLargeArc(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ArcSegment_IsLargeArc, value));
}
IFACEMETHODIMP DirectUI::ArcSegment::get_Point(_Out_ ABI::Windows::Foundation::Point* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ArcSegment_Point, pValue));
}
IFACEMETHODIMP DirectUI::ArcSegment::put_Point(_In_ ABI::Windows::Foundation::Point value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ArcSegment_Point, value));
}
IFACEMETHODIMP DirectUI::ArcSegment::get_RotationAngle(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ArcSegment_RotationAngle, pValue));
}
IFACEMETHODIMP DirectUI::ArcSegment::put_RotationAngle(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ArcSegment_RotationAngle, value));
}
IFACEMETHODIMP DirectUI::ArcSegment::get_Size(_Out_ ABI::Windows::Foundation::Size* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ArcSegment_Size, pValue));
}
IFACEMETHODIMP DirectUI::ArcSegment::put_Size(_In_ ABI::Windows::Foundation::Size value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ArcSegment_Size, value));
}
IFACEMETHODIMP DirectUI::ArcSegment::get_SweepDirection(_Out_ ABI::Microsoft::UI::Xaml::Media::SweepDirection* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ArcSegment_SweepDirection, pValue));
}
IFACEMETHODIMP DirectUI::ArcSegment::put_SweepDirection(_In_ ABI::Microsoft::UI::Xaml::Media::SweepDirection value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ArcSegment_SweepDirection, value));
}

// Events.

// Methods.

HRESULT DirectUI::ArcSegmentFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IArcSegmentStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IArcSegmentStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ArcSegmentFactory::get_PointProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ArcSegment_Point, ppValue));
}
IFACEMETHODIMP DirectUI::ArcSegmentFactory::get_SizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ArcSegment_Size, ppValue));
}
IFACEMETHODIMP DirectUI::ArcSegmentFactory::get_RotationAngleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ArcSegment_RotationAngle, ppValue));
}
IFACEMETHODIMP DirectUI::ArcSegmentFactory::get_IsLargeArcProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ArcSegment_IsLargeArc, ppValue));
}
IFACEMETHODIMP DirectUI::ArcSegmentFactory::get_SweepDirectionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ArcSegment_SweepDirection, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ArcSegment()
    {
        RRETURN(ctl::ActivationFactoryCreator<ArcSegmentFactory>::CreateActivationFactory());
    }
}
