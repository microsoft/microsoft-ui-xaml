// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "SecondaryContentRelationship.g.h"
#include "ParametricCurveCollection.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::SecondaryContentRelationship::SecondaryContentRelationship()
{
}

DirectUI::SecondaryContentRelationship::~SecondaryContentRelationship()
{
}

HRESULT DirectUI::SecondaryContentRelationship::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::SecondaryContentRelationship)))
    {
        *ppObject = static_cast<DirectUI::SecondaryContentRelationship*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::get_Curves(_Outptr_result_maybenull_ DirectUI::ParametricCurveCollection** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SecondaryContentRelationship_Curves, ppValue));
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::get_IsDescendant(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SecondaryContentRelationship_IsDescendant, pValue));
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::put_IsDescendant(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SecondaryContentRelationship_IsDescendant, value));
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::get_ShouldTargetClip(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SecondaryContentRelationship_ShouldTargetClip, pValue));
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::put_ShouldTargetClip(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SecondaryContentRelationship_ShouldTargetClip, value));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::SecondaryContentRelationship::Apply()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_Apply", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->Apply());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_Apply", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationship::PrepareForCurveUpdate()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_PrepareForCurveUpdate", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->PrepareForCurveUpdate());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_PrepareForCurveUpdate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationship::Remove()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_Remove", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->Remove());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_Remove", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationship::SetAuxiliaryDependencyPropertyHolder(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pAuxiliaryDependencyPropertyHolder)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetAuxiliaryDependencyPropertyHolder", 0);
    }

    CDependencyObject* pAuxiliaryDependencyPropertyHolderCore = static_cast<CDependencyObject*>(pAuxiliaryDependencyPropertyHolder ? static_cast<DirectUI::DependencyObject*>(pAuxiliaryDependencyPropertyHolder)->GetHandle() : nullptr);

    ARG_NOTNULL(pAuxiliaryDependencyPropertyHolder, "auxiliaryDependencyPropertyHolder");

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->SetAuxiliaryDependencyPropertyHolder(pAuxiliaryDependencyPropertyHolderCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetAuxiliaryDependencyPropertyHolder", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::SetPrimaryContent(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pPrimaryContent)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetPrimaryContent", 0);
    }

    CUIElement* pPrimaryContentCore = static_cast<CUIElement*>(pPrimaryContent ? static_cast<DirectUI::UIElement*>(pPrimaryContent)->GetHandle() : nullptr);

    ARG_NOTNULL(pPrimaryContent, "primaryContent");

    IFC(CheckThread());

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->SetPrimaryContent(pPrimaryContentCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetPrimaryContent", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SecondaryContentRelationship::SetSecondaryContent(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSecondaryContent, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pDependencyPropertyHolder)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetSecondaryContent", 0);
    }

    CUIElement* pSecondaryContentCore = static_cast<CUIElement*>(pSecondaryContent ? static_cast<DirectUI::UIElement*>(pSecondaryContent)->GetHandle() : nullptr);
    CDependencyObject* pDependencyPropertyHolderCore = static_cast<CDependencyObject*>(pDependencyPropertyHolder ? static_cast<DirectUI::DependencyObject*>(pDependencyPropertyHolder)->GetHandle() : nullptr);

    ARG_NOTNULL(pSecondaryContent, "secondaryContent");
    ARG_NOTNULL(pDependencyPropertyHolder, "dependencyPropertyHolder");

    IFC(CheckThread());

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->SetSecondaryContent(pSecondaryContentCore, pDependencyPropertyHolderCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_SetSecondaryContent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationship::UpdateDependencyProperties()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_UpdateDependencyProperties", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CSecondaryContentRelationship*>(GetHandle())->UpdateDependencyProperties());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "SecondaryContentRelationship_UpdateDependencyProperties", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::SecondaryContentRelationshipFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationshipStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationshipStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.




// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::SecondaryContentRelationshipFactory::CreateStickyHeaderRelationship(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pScrollViewer, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pPanelObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pPanelTransform, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeaderTransform, _In_ DOUBLE groupTopY, _In_ DOUBLE groupBottomY, _In_ DOUBLE headerHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SecondaryContentRelationship_CreateStickyHeaderRelationship", 0);
    }
    ARG_NOTNULL(pScrollViewer, "scrollViewer");
    ARG_NOTNULL(pPanelObject, "panelObject");
    ARG_NOTNULL(pPanelTransform, "panelTransform");
    ARG_NOTNULL(pHeaderTransform, "headerTransform");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(CreateStickyHeaderRelationshipImpl(pScrollViewer, pPanelObject, pPanelTransform, pHeaderTransform, groupTopY, groupBottomY, headerHeight, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SecondaryContentRelationship_CreateStickyHeaderRelationship", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationshipFactory::CreateClipTransformRelationship(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pScrollViewer, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pClipOwner, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pClipTransform, _In_ DOUBLE listExtentHeight, _In_ DOUBLE listViewportHeight, _Outptr_ ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SecondaryContentRelationship_CreateClipTransformRelationship", 0);
    }
    ARG_NOTNULL(pScrollViewer, "scrollViewer");
    ARG_NOTNULL(pClipOwner, "clipOwner");
    ARG_NOTNULL(pClipTransform, "clipTransform");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(CreateClipTransformRelationshipImpl(pScrollViewer, pClipOwner, pClipTransform, listExtentHeight, listViewportHeight, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SecondaryContentRelationship_CreateClipTransformRelationship", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationshipFactory::CreateParallaxRelationship(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pScrollViewer, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pHeaderObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeaderTransform, _In_ UINT primaryOffsetsCount, _In_reads_(primaryOffsetsCount) DOUBLE primaryOffsets[], _In_ UINT secondaryOffsetsCount, _In_reads_(secondaryOffsetsCount) DOUBLE secondaryOffsets[], _Outptr_ ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SecondaryContentRelationship_CreateParallaxRelationship", 0);
    }
    ARG_NOTNULL(pScrollViewer, "scrollViewer");
    ARG_NOTNULL(pHeaderObject, "headerObject");
    ARG_NOTNULL(pHeaderTransform, "headerTransform");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(CreateParallaxRelationshipImpl(pScrollViewer, pHeaderObject, pHeaderTransform, primaryOffsetsCount, primaryOffsets, secondaryOffsetsCount, secondaryOffsets, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SecondaryContentRelationship_CreateParallaxRelationship", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SecondaryContentRelationshipFactory::CreateStaticElementRelationship(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pScrollViewer, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pStaticElement, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElementTransform, _In_ BOOLEAN isHorizontallyStatic, _In_ BOOLEAN isInverted, _Outptr_ ABI::Microsoft::UI::Xaml::Internal::ISecondaryContentRelationship** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SecondaryContentRelationship_CreateStaticElementRelationship", 0);
    }
    ARG_NOTNULL(pScrollViewer, "scrollViewer");
    ARG_NOTNULL(pStaticElement, "staticElement");
    ARG_NOTNULL(pElementTransform, "elementTransform");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(CreateStaticElementRelationshipImpl(pScrollViewer, pStaticElement, pElementTransform, isHorizontallyStatic, isInverted, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SecondaryContentRelationship_CreateStaticElementRelationship", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_SecondaryContentRelationship()
    {
        RRETURN(ctl::ActivationFactoryCreator<SecondaryContentRelationshipFactory>::CreateActivationFactory());
    }
}
