// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "VisualStateChangedEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::VisualStateChangedEventArgs::VisualStateChangedEventArgs()
{
}

DirectUI::VisualStateChangedEventArgs::~VisualStateChangedEventArgs()
{
}

HRESULT DirectUI::VisualStateChangedEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::VisualStateChangedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::VisualStateChangedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateChangedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateChangedEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

CEventArgs* DirectUI::VisualStateChangedEventArgs::CreateCorePeer()
{
    return new CVisualStateChangedEventArgs();
}

// Properties.
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::get_OldState(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualState** ppValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CVisualState* pValueCore = nullptr;

    ARG_VALIDRETURNPOINTER(ppValue);

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->get_OldState(&pValueCore));

    IFC(CValueBoxer::ConvertToFramework(pValueCore, ppValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::put_OldState(_In_opt_ ABI::Microsoft::UI::Xaml::IVisualState* pValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CVisualState* pValueCore = static_cast<CVisualState*>(pValue ? static_cast<DirectUI::VisualState*>(pValue)->GetHandle() : nullptr);

    

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->put_OldState(pValueCore));


Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::get_NewState(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualState** ppValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CVisualState* pValueCore = nullptr;

    ARG_VALIDRETURNPOINTER(ppValue);

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->get_NewState(&pValueCore));

    IFC(CValueBoxer::ConvertToFramework(pValueCore, ppValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::put_NewState(_In_opt_ ABI::Microsoft::UI::Xaml::IVisualState* pValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CVisualState* pValueCore = static_cast<CVisualState*>(pValue ? static_cast<DirectUI::VisualState*>(pValue)->GetHandle() : nullptr);

    

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->put_NewState(pValueCore));


Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::get_Control(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CControl* pValueCore = nullptr;

    ARG_VALIDRETURNPOINTER(ppValue);

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->get_Control(&pValueCore));

    IFC(CValueBoxer::ConvertToFramework(pValueCore, ppValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateChangedEventArgs::put_Control(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IControl* pValue)
{
    HRESULT hr = S_OK;
    CEventArgs* pCoreEventArgsNoRef = nullptr;

    CControl* pValueCore = static_cast<CControl*>(pValue ? static_cast<DirectUI::Control*>(pValue)->GetHandle() : nullptr);

    

    IFC(GetCorePeerNoRefWithValidation(&pCoreEventArgsNoRef));
    IFC(static_cast<CVisualStateChangedEventArgs*>(pCoreEventArgsNoRef)->put_Control(pValueCore));


Cleanup:
    RRETURN(hr);
}

// Methods.


namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateVisualStateChangedEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::VisualStateChangedEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_VisualStateChangedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::VisualStateChangedEventArgs>>::CreateActivationFactory());
    }
}
