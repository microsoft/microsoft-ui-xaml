// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ContentControl.g.h"
#include "ITransitionContextProvider.g.h"

#define __ListViewBaseHeaderItem_GUID "1e1125ba-5e23-4ec1-be65-99c2a9935a61"

namespace DirectUI
{
    class ListViewBaseHeaderItem;

    class __declspec(novtable) ListViewBaseHeaderItemGenerated:
        public DirectUI::ContentControl
        , public ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem
        , public DirectUI::ITransitionContextProvider
    {
        friend class DirectUI::ListViewBaseHeaderItem;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem");

        BEGIN_INTERFACE_MAP(ListViewBaseHeaderItemGenerated, DirectUI::ContentControl)
            INTERFACE_ENTRY(ListViewBaseHeaderItemGenerated, ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem)
            INTERFACE_ENTRY(ListViewBaseHeaderItemGenerated, DirectUI::ITransitionContextProvider)
        END_INTERFACE_MAP(ListViewBaseHeaderItemGenerated, DirectUI::ContentControl)

    public:
        ListViewBaseHeaderItemGenerated();
        ~ListViewBaseHeaderItemGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ListViewBaseHeaderItem;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::ListViewBaseHeaderItem;
        }

        // Properties.

        // Events.

        // Methods.
        IFACEMETHOD(GetCurrentTransitionContext)(_In_ INT LayoutTickId, _Out_ DirectUI::ThemeTransitionContext* pReturnValue) = 0;
        IFACEMETHOD(GetDropOffsetToRoot)(_Out_ ABI::Windows::Foundation::Point* pReturnValue) = 0;
        IFACEMETHOD(IsCollectionMutatingFast)(_Out_ BOOLEAN* pReturnValue) = 0;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "ListViewBaseHeaderItem_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ListViewBaseHeaderItemFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory
    {
        BEGIN_INTERFACE_MAP(ListViewBaseHeaderItemFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(ListViewBaseHeaderItemFactory, ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory)
        END_INTERFACE_MAP(ListViewBaseHeaderItemFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ListViewBaseHeaderItem;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
