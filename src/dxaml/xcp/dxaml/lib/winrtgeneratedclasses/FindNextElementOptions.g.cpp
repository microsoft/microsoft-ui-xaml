// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FindNextElementOptions.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FindNextElementOptions::FindNextElementOptions(): m_exclusionRect(), m_hintRect(), m_XYFocusNavigationStrategyOverride(), m_ignoreOcclusivity()
{
}

DirectUI::FindNextElementOptions::~FindNextElementOptions()
{
}

HRESULT DirectUI::FindNextElementOptions::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FindNextElementOptions)))
    {
        *ppObject = static_cast<DirectUI::FindNextElementOptions*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptions)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptions*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptionsPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptionsPrivate*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FindNextElementOptions::get_ExclusionRect(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_exclusionRect, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::put_ExclusionRect(_In_ ABI::Windows::Foundation::Rect value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_exclusionRect));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::get_HintRect(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_hintRect, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::put_HintRect(_In_ ABI::Windows::Foundation::Rect value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_hintRect));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::get_IgnoreOcclusivity(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_ignoreOcclusivity, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::put_IgnoreOcclusivity(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_ignoreOcclusivity));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::get_SearchRoot(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pSearchRoot.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::put_SearchRoot(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pSearchRoot, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::get_XYFocusNavigationStrategyOverride(_Out_ ABI::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategyOverride* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_XYFocusNavigationStrategyOverride, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FindNextElementOptions::put_XYFocusNavigationStrategyOverride(_In_ ABI::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategyOverride value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_XYFocusNavigationStrategyOverride));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FindNextElementOptions()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::FindNextElementOptions>>::CreateActivationFactory());
    }
}
