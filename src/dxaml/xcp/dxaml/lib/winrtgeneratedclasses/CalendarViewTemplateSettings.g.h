// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __CalendarViewTemplateSettings_GUID "e28504a1-3a09-4775-aff2-ac2b91ccbe4b"

namespace DirectUI
{
    class CalendarViewTemplateSettings;

    class __declspec(novtable) __declspec(uuid(__CalendarViewTemplateSettings_GUID)) CalendarViewTemplateSettings:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings");

        BEGIN_INTERFACE_MAP(CalendarViewTemplateSettings, DirectUI::DependencyObject)
            INTERFACE_ENTRY(CalendarViewTemplateSettings, ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings)
        END_INTERFACE_MAP(CalendarViewTemplateSettings, DirectUI::DependencyObject)

    public:
        CalendarViewTemplateSettings();
        ~CalendarViewTemplateSettings() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CalendarViewTemplateSettings;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::CalendarViewTemplateSettings;
        }

        // Properties.
        IFACEMETHOD(get_CenterX)(_Out_ DOUBLE* pValue) override;
        _Check_return_ HRESULT put_CenterX(_In_ DOUBLE value);
        IFACEMETHOD(get_CenterY)(_Out_ DOUBLE* pValue) override;
        _Check_return_ HRESULT put_CenterY(_In_ DOUBLE value);
        IFACEMETHOD(get_ClipRect)(_Out_ ABI::Windows::Foundation::Rect* pValue) override;
        _Check_return_ HRESULT put_ClipRect(_In_ ABI::Windows::Foundation::Rect value);
        IFACEMETHOD(get_HasMoreContentAfter)(_Out_ BOOLEAN* pValue) override;
        _Check_return_ HRESULT put_HasMoreContentAfter(_In_ BOOLEAN value);
        IFACEMETHOD(get_HasMoreContentBefore)(_Out_ BOOLEAN* pValue) override;
        _Check_return_ HRESULT put_HasMoreContentBefore(_In_ BOOLEAN value);
        IFACEMETHOD(get_HasMoreViews)(_Out_ BOOLEAN* pValue) override;
        _Check_return_ HRESULT put_HasMoreViews(_In_ BOOLEAN value);
        IFACEMETHOD(get_HeaderText)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_HeaderText(_In_opt_ HSTRING value);
        IFACEMETHOD(get_MinViewWidth)(_Out_ DOUBLE* pValue) override;
        _Check_return_ HRESULT put_MinViewWidth(_In_ DOUBLE value);
        IFACEMETHOD(get_WeekDay1)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay1(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay2)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay2(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay3)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay3(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay4)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay4(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay5)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay5(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay6)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay6(_In_opt_ HSTRING value);
        IFACEMETHOD(get_WeekDay7)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_WeekDay7(_In_opt_ HSTRING value);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) CalendarViewTemplateSettingsFactory:
       public ctl::AbstractActivationFactory
    {

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CalendarViewTemplateSettings;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
