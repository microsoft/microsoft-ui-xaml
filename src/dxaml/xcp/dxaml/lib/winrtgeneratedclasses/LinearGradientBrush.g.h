// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "GradientBrush.g.h"
#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks) 
#define FEATURE_XAMLMOTIONSYSTEMHOLDBACKS_OVERRIDE override
#else
#define FEATURE_XAMLMOTIONSYSTEMHOLDBACKS_OVERRIDE
#endif
#define __LinearGradientBrush_GUID "194d6a64-ae13-41d4-89d0-64f0af6fb705"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_CenterPoint)(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue) override { return This()->get_CenterPoint(pValue); }
        IFACEMETHOD(put_CenterPoint)(_In_ ABI::Windows::Foundation::Numerics::Vector2 value) override { return This()->put_CenterPoint(value); }
        IFACEMETHOD(get_Rotation)(_Out_ DOUBLE* pValue) override { return This()->get_Rotation(pValue); }
        IFACEMETHOD(put_Rotation)(_In_ DOUBLE value) override { return This()->put_Rotation(value); }
        IFACEMETHOD(get_Scale)(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue) override { return This()->get_Scale(pValue); }
        IFACEMETHOD(put_Scale)(_In_ ABI::Windows::Foundation::Numerics::Vector2 value) override { return This()->put_Scale(value); }
        IFACEMETHOD(get_TransformMatrix)(_Out_ ABI::Windows::Foundation::Numerics::Matrix3x2* pValue) override { return This()->get_TransformMatrix(pValue); }
        IFACEMETHOD(put_TransformMatrix)(_In_ ABI::Windows::Foundation::Numerics::Matrix3x2 value) override { return This()->put_TransformMatrix(value); }
        IFACEMETHOD(get_Translation)(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue) override { return This()->get_Translation(pValue); }
        IFACEMETHOD(put_Translation)(_In_ ABI::Windows::Foundation::Numerics::Vector2 value) override { return This()->put_Translation(value); }
        IFACEMETHOD(add_CenterPointChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_CenterPointChanged(pValue, pToken); }
        IFACEMETHOD(remove_CenterPointChanged)(_In_ EventRegistrationToken token) override { return This()->remove_CenterPointChanged(token); }
        IFACEMETHOD(add_RotationChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_RotationChanged(pValue, pToken); }
        IFACEMETHOD(remove_RotationChanged)(_In_ EventRegistrationToken token) override { return This()->remove_RotationChanged(token); }
        IFACEMETHOD(add_ScaleChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_ScaleChanged(pValue, pToken); }
        IFACEMETHOD(remove_ScaleChanged)(_In_ EventRegistrationToken token) override { return This()->remove_ScaleChanged(token); }
        IFACEMETHOD(add_TransformMatrixChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_TransformMatrixChanged(pValue, pToken); }
        IFACEMETHOD(remove_TransformMatrixChanged)(_In_ EventRegistrationToken token) override { return This()->remove_TransformMatrixChanged(token); }
        IFACEMETHOD(add_TranslationChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_TranslationChanged(pValue, pToken); }
        IFACEMETHOD(remove_TranslationChanged)(_In_ EventRegistrationToken token) override { return This()->remove_TranslationChanged(token); }
    };
}
#pragma endregion

namespace DirectUI
{
    class LinearGradientBrush;

    class __declspec(novtable) LinearGradientBrushGenerated:
        public DirectUI::GradientBrush
        , public ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks, LinearGradientBrushGenerated >
#endif
    {
        friend class DirectUI::LinearGradientBrush;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.LinearGradientBrush");

        BEGIN_INTERFACE_MAP(LinearGradientBrushGenerated, DirectUI::GradientBrush)
            INTERFACE_ENTRY(LinearGradientBrushGenerated, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush)
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
            INTERFACE_ENTRY(LinearGradientBrushGenerated, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks)
#endif
        END_INTERFACE_MAP(LinearGradientBrushGenerated, DirectUI::GradientBrush)

    public:
        LinearGradientBrushGenerated();
        ~LinearGradientBrushGenerated() override;

        // Event source typedefs.
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> TranslationChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> AnimatedTranslationChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> RotationChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> AnimatedRotationChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> ScaleChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> AnimatedScaleChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> TransformMatrixChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> AnimatedTransformMatrixChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> CenterPointChangedEventSourceType;
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush, IInspectable> AnimatedCenterPointChangedEventSourceType;
#endif

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::LinearGradientBrush;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::LinearGradientBrush;
        }

        // Properties.
        _Check_return_ HRESULT get_AnimatedCenterPoint(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT put_AnimatedCenterPoint(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);
        _Check_return_ HRESULT get_AnimatedRotation(_Out_ DOUBLE* pValue);
        _Check_return_ HRESULT put_AnimatedRotation(_In_ DOUBLE value);
        _Check_return_ HRESULT get_AnimatedScale(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT put_AnimatedScale(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);
        _Check_return_ HRESULT get_AnimatedTransformMatrix(_Out_ ABI::Windows::Foundation::Numerics::Matrix3x2* pValue);
        _Check_return_ HRESULT put_AnimatedTransformMatrix(_In_ ABI::Windows::Foundation::Numerics::Matrix3x2 value);
        _Check_return_ HRESULT get_AnimatedTranslation(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT put_AnimatedTranslation(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_CenterPoint(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_CenterPoint(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);
        IFACEMETHOD(get_EndPoint)(_Out_ ABI::Windows::Foundation::Point* pValue) override;
        IFACEMETHOD(put_EndPoint)(_In_ ABI::Windows::Foundation::Point value) override;
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Rotation(_Out_ DOUBLE* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Rotation(_In_ DOUBLE value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Scale(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Scale(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);
        IFACEMETHOD(get_StartPoint)(_Out_ ABI::Windows::Foundation::Point* pValue) override;
        IFACEMETHOD(put_StartPoint)(_In_ ABI::Windows::Foundation::Point value) override;
        _Check_return_ HRESULT STDMETHODCALLTYPE get_TransformMatrix(_Out_ ABI::Windows::Foundation::Numerics::Matrix3x2* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_TransformMatrix(_In_ ABI::Windows::Foundation::Numerics::Matrix3x2 value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Translation(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Translation(_In_ ABI::Windows::Foundation::Numerics::Vector2 value);

        // Events.
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetAnimatedCenterPointChangedEventSourceNoRef(_Outptr_ AnimatedCenterPointChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_AnimatedCenterPointChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_AnimatedCenterPointChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetAnimatedRotationChangedEventSourceNoRef(_Outptr_ AnimatedRotationChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_AnimatedRotationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_AnimatedRotationChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetAnimatedScaleChangedEventSourceNoRef(_Outptr_ AnimatedScaleChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_AnimatedScaleChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_AnimatedScaleChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetAnimatedTransformMatrixChangedEventSourceNoRef(_Outptr_ AnimatedTransformMatrixChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_AnimatedTransformMatrixChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_AnimatedTransformMatrixChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetAnimatedTranslationChangedEventSourceNoRef(_Outptr_ AnimatedTranslationChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_AnimatedTranslationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_AnimatedTranslationChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetCenterPointChangedEventSourceNoRef(_Outptr_ CenterPointChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT STDMETHODCALLTYPE add_CenterPointChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_CenterPointChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetRotationChangedEventSourceNoRef(_Outptr_ RotationChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT STDMETHODCALLTYPE add_RotationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_RotationChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetScaleChangedEventSourceNoRef(_Outptr_ ScaleChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT STDMETHODCALLTYPE add_ScaleChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_ScaleChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetTransformMatrixChangedEventSourceNoRef(_Outptr_ TransformMatrixChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT STDMETHODCALLTYPE add_TransformMatrixChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_TransformMatrixChanged(_In_ EventRegistrationToken token);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT GetTranslationChangedEventSourceNoRef(_Outptr_ TranslationChangedEventSourceType** ppEventSource);
        _Check_return_ HRESULT STDMETHODCALLTYPE add_TranslationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_TranslationChanged(_In_ EventRegistrationToken token);
#endif

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
        // Simple property changed handlers.
        static void SimplePropertyChangedHandler_AnimatedCenterPointChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_AnimatedRotationChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_AnimatedScaleChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_AnimatedTransformMatrixChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_AnimatedTranslationChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_CenterPointChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_RotationChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_ScaleChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_TransformMatrixChanged(SimpleProperty::objid_t obj);
        static void SimplePropertyChangedHandler_TranslationChanged(SimpleProperty::objid_t obj);
    };
}

#include "LinearGradientBrush_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) LinearGradientBrushFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFactory
        , public ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushStatics
    {
        BEGIN_INTERFACE_MAP(LinearGradientBrushFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(LinearGradientBrushFactory, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFactory)
            INTERFACE_ENTRY(LinearGradientBrushFactory, ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushStatics)
        END_INTERFACE_MAP(LinearGradientBrushFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithGradientStopCollectionAndAngle)(_In_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::GradientStop*>* pGradientStopCollection, _In_ DOUBLE angle, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_StartPointProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_EndPointProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::LinearGradientBrush;
        }


    private:
        _Check_return_ HRESULT CreateInstanceWithGradientStopCollectionAndAngleImpl(_In_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::GradientStop*>* pGradientStopCollection, _In_ DOUBLE angle, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
