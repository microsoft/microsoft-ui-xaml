// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Control.g.h"
#include "ISupportInitialize.g.h"

#define __MediaPlayerElement_GUID "e43b41b4-e101-4624-8a3f-7925febd288d"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_AreTransportControlsEnabled)(_Out_ BOOLEAN* pValue) override { return This()->get_AreTransportControlsEnabled(pValue); }
        IFACEMETHOD(put_AreTransportControlsEnabled)(_In_ BOOLEAN value) override { return This()->put_AreTransportControlsEnabled(value); }
        IFACEMETHOD(get_AutoPlay)(_Out_ BOOLEAN* pValue) override { return This()->get_AutoPlay(pValue); }
        IFACEMETHOD(put_AutoPlay)(_In_ BOOLEAN value) override { return This()->put_AutoPlay(value); }
        IFACEMETHOD(get_IsFullWindow)(_Out_ BOOLEAN* pValue) override { return This()->get_IsFullWindow(pValue); }
        IFACEMETHOD(put_IsFullWindow)(_In_ BOOLEAN value) override { return This()->put_IsFullWindow(value); }
        IFACEMETHOD(get_MediaPlayer)(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlayer** ppValue) override { return This()->get_MediaPlayer(ppValue); }
        IFACEMETHOD(get_PosterSource)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IImageSource** ppValue) override { return This()->get_PosterSource(ppValue); }
        IFACEMETHOD(put_PosterSource)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IImageSource* pValue) override { return This()->put_PosterSource(pValue); }
        IFACEMETHOD(get_Source)(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlaybackSource** ppValue) override { return This()->get_Source(ppValue); }
        IFACEMETHOD(put_Source)(_In_opt_ ABI::Windows::Media::Playback::IMediaPlaybackSource* pValue) override { return This()->put_Source(pValue); }
        IFACEMETHOD(get_Stretch)(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue) override { return This()->get_Stretch(pValue); }
        IFACEMETHOD(put_Stretch)(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value) override { return This()->put_Stretch(value); }
        IFACEMETHOD(get_TransportControls)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls** ppValue) override { return This()->get_TransportControls(ppValue); }
        IFACEMETHOD(put_TransportControls)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls* pValue) override { return This()->put_TransportControls(pValue); }
        IFACEMETHOD(SetMediaPlayer)(_In_opt_ ABI::Windows::Media::Playback::IMediaPlayer* pMediaPlayer) override { return This()->SetMediaPlayer(pMediaPlayer); }
    };
}
#pragma endregion

namespace DirectUI
{
    class MediaPlayerElement;
    class ImageSource;
    class MediaTransportControls;

    class __declspec(novtable) MediaPlayerElementGenerated:
        public DirectUI::Control
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement, MediaPlayerElementGenerated >
        , public DirectUI::ISupportInitialize
    {
        friend class DirectUI::MediaPlayerElement;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.MediaPlayerElement");

        BEGIN_INTERFACE_MAP(MediaPlayerElementGenerated, DirectUI::Control)
            INTERFACE_ENTRY(MediaPlayerElementGenerated, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement)
            INTERFACE_ENTRY(MediaPlayerElementGenerated, DirectUI::ISupportInitialize)
        END_INTERFACE_MAP(MediaPlayerElementGenerated, DirectUI::Control)

    public:
        MediaPlayerElementGenerated();
        ~MediaPlayerElementGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MediaPlayerElement;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::MediaPlayerElement;
        }

        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_AreTransportControlsEnabled(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_AreTransportControlsEnabled(_In_ BOOLEAN value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_AutoPlay(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_AutoPlay(_In_ BOOLEAN value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_IsFullWindow(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_IsFullWindow(_In_ BOOLEAN value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_MediaPlayer(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlayer** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_PosterSource(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IImageSource** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_PosterSource(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IImageSource* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Source(_Outptr_result_maybenull_ ABI::Windows::Media::Playback::IMediaPlaybackSource** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Source(_In_opt_ ABI::Windows::Media::Playback::IMediaPlaybackSource* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Stretch(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Stretch(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_TransportControls(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_TransportControls(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IMediaTransportControls* pValue);

        // Events.

        // Methods.
        _Check_return_ HRESULT STDMETHODCALLTYPE BeginInit();
        _Check_return_ HRESULT STDMETHODCALLTYPE EndInit(_In_opt_ DirectUI::XamlServiceProviderContext* pContext);
        _Check_return_ HRESULT STDMETHODCALLTYPE SetMediaPlayer(_In_opt_ ABI::Windows::Media::Playback::IMediaPlayer* pMediaPlayer);

        IFACEMETHOD(OnApplyTemplate)() override;

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
        TrackerPtr<ABI::Microsoft::UI::Xaml::IUIElement> m_tpLayoutRootPart;
        TrackerPtr<ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter> m_tpMediaPlayerPresenterPart;
        TrackerPtr<ABI::Microsoft::UI::Xaml::Controls::IImage> m_tpPosterImagePart;
        TrackerPtr<ABI::Microsoft::UI::Xaml::IUIElement> m_tpTimedTextSourcePresenterPart;
        TrackerPtr<ABI::Microsoft::UI::Xaml::Controls::IContentPresenter> m_tpTransportControlsPresenterPart;
    };
}

#include "MediaPlayerElement_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) MediaPlayerElementFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics
    {
        BEGIN_INTERFACE_MAP(MediaPlayerElementFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(MediaPlayerElementFactory, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory)
            INTERFACE_ENTRY(MediaPlayerElementFactory, ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics)
        END_INTERFACE_MAP(MediaPlayerElementFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IMediaPlayerElement** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_SourceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_AreTransportControlsEnabledProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_PosterSourceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_StretchProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_AutoPlayProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsFullWindowProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_MediaPlayerProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::MediaPlayerElement;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
