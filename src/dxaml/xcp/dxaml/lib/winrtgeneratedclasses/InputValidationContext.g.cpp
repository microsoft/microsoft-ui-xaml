// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "InputValidationContext.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::InputValidationContext::InputValidationContext(): m_isInputRequired()
{
}

DirectUI::InputValidationContext::~InputValidationContext()
{
}

HRESULT DirectUI::InputValidationContext::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::InputValidationContext)))
    {
        *ppObject = static_cast<DirectUI::InputValidationContext*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext)) && Feature_InputValidation::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::InputValidationContext::get_IsInputRequired(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_isInputRequired, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::InputValidationContext::put_IsInputRequired(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_isInputRequired));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InputValidationContext::get_MemberName(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(m_pMemberName.CopyTo(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::InputValidationContext::put_MemberName(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(m_pMemberName.Set(value));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.

HRESULT DirectUI::InputValidationContextFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationContextFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationContextFactory*>(this);
    }
    else
#endif
    {
        RRETURN(ctl::AggregableActivationFactory<DirectUI::InputValidationContext>::QueryInterfaceImpl(iid, ppObject));
    }

#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    AddRefOuter();
    RRETURN(S_OK);
#endif
}


// Factory methods.
IFACEMETHODIMP DirectUI::InputValidationContextFactory::CreateInstance(_In_ HSTRING memberName, _In_ BOOLEAN isRequired, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(memberName, "memberName");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(memberName, isRequired, pOuter, ppInner, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_InputValidationContext()
    {
        RRETURN(ctl::ActivationFactoryCreator<InputValidationContextFactory>::CreateActivationFactory());
    }
}
