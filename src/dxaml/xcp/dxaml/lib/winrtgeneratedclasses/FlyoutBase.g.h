// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __FlyoutBase_GUID "938a03da-5470-4111-8b38-200a86db33f6"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_SystemBackdrop)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue) override { return This()->get_SystemBackdrop(ppValue); }
        IFACEMETHOD(put_SystemBackdrop)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue) override { return This()->put_SystemBackdrop(pValue); }
    };
}
#pragma endregion

namespace DirectUI
{
    class FlyoutBase;
    class Control;
    class FlyoutShowOptions;
    class FrameworkElement;
    class ProcessKeyboardAcceleratorEventArgs;
    class SystemBackdrop;
    class XamlRoot;

    class __declspec(novtable) FlyoutBaseGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBasePrivate
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, FlyoutBaseGenerated >
    {
        friend class DirectUI::FlyoutBase;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");

        BEGIN_INTERFACE_MAP(FlyoutBaseGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(FlyoutBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase)
            INTERFACE_ENTRY(FlyoutBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides)
            INTERFACE_ENTRY(FlyoutBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBasePrivate)
            INTERFACE_ENTRY(FlyoutBaseGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2)
        END_INTERFACE_MAP(FlyoutBaseGenerated, DirectUI::DependencyObject)

    public:
        FlyoutBaseGenerated();
        ~FlyoutBaseGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> OpenedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> ClosedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> OpeningEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase*, ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs*>, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs> ClosingEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::FlyoutBase;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::FlyoutBase;
        }

        // Properties.
        IFACEMETHOD(get_AllowFocusOnInteraction)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_AllowFocusOnInteraction)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_AllowFocusWhenDisabled)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_AllowFocusWhenDisabled)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_AreOpenCloseAnimationsEnabled)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_AreOpenCloseAnimationsEnabled)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_ElementSoundMode)(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pValue) override;
        IFACEMETHOD(put_ElementSoundMode)(_In_ ABI::Microsoft::UI::Xaml::ElementSoundMode value) override;
        IFACEMETHOD(get_InputDevicePrefersPrimaryCommands)(_Out_ BOOLEAN* pValue) override;
        _Check_return_ HRESULT put_InputDevicePrefersPrimaryCommands(_In_ BOOLEAN value);
        IFACEMETHOD(get_IsConstrainedToRootBounds)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(get_IsLightDismissOverlayEnabled)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsLightDismissOverlayEnabled)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_IsOpen)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(get_LightDismissOverlayMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue) override;
        IFACEMETHOD(put_LightDismissOverlayMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value) override;
        IFACEMETHOD(get_OverlayInputPassThroughElement)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue) override;
        IFACEMETHOD(put_OverlayInputPassThroughElement)(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue) override;
        IFACEMETHOD(get_Placement)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode* pValue) override;
        IFACEMETHOD(put_Placement)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode value) override;
        IFACEMETHOD(get_ShouldConstrainToRootBounds)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_ShouldConstrainToRootBounds)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_ShowMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode* pValue) override;
        IFACEMETHOD(put_ShowMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode value) override;
        _Check_return_ HRESULT STDMETHODCALLTYPE get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue);
        IFACEMETHOD(get_Target)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IFrameworkElement** ppValue) override;
        _Check_return_ HRESULT put_Target(_In_opt_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pValue);
        IFACEMETHOD(get_UsePickerFlyoutTheme)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_UsePickerFlyoutTheme)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_XamlRoot)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IXamlRoot** ppValue) override;
        IFACEMETHOD(put_XamlRoot)(_In_opt_ ABI::Microsoft::UI::Xaml::IXamlRoot* pValue) override;

        // Events.
        _Check_return_ HRESULT GetClosedEventSourceNoRef(_Outptr_ ClosedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Closed)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Closed)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetClosingEventSourceNoRef(_Outptr_ ClosingEventSourceType** ppEventSource);
        IFACEMETHOD(add_Closing)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase*, ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Closing)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetOpenedEventSourceNoRef(_Outptr_ OpenedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Opened)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Opened)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetOpeningEventSourceNoRef(_Outptr_ OpeningEventSourceType** ppEventSource);
        IFACEMETHOD(add_Opening)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Opening)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(CreatePresenter)(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue) override;
        _Check_return_ HRESULT CreatePresenterProtected(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppReturnValue);
        IFACEMETHOD(Hide)() override;
        IFACEMETHOD(OnProcessKeyboardAccelerators)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs) override;
        _Check_return_ HRESULT OnProcessKeyboardAcceleratorsProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs);
        IFACEMETHOD(PlaceFlyoutForDateTimePicker)(_In_ ABI::Windows::Foundation::Point point) override;
        IFACEMETHOD(ShowAt)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pPlacementTarget) override;
        IFACEMETHOD(ShowAtWithOptions)(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pPlacementTarget, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions* pShowOptions) override;
        IFACEMETHOD(TryInvokeKeyboardAccelerator)(_In_ ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs* pArgs) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "FlyoutBase_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) FlyoutBaseFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2
    {
        BEGIN_INTERFACE_MAP(FlyoutBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(FlyoutBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory)
            INTERFACE_ENTRY(FlyoutBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics)
            INTERFACE_ENTRY(FlyoutBaseFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2)
        END_INTERFACE_MAP(FlyoutBaseFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppInstance);

        // Static properties.
        IFACEMETHOD(get_TargetProperty)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Dependency properties.
        IFACEMETHOD(get_PlacementProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_AllowFocusOnInteractionProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_LightDismissOverlayModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_AllowFocusWhenDisabledProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ShowModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_InputDevicePrefersPrimaryCommandsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_AreOpenCloseAnimationsEnabledProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ShouldConstrainToRootBoundsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_SystemBackdropProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_ElementSoundModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_OverlayInputPassThroughElementProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsOpenProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.
        static _Check_return_ HRESULT GetAttachedFlyoutStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue);
        static _Check_return_ HRESULT SetAttachedFlyoutStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue);
        IFACEMETHOD(get_AttachedFlyoutProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(GetAttachedFlyout)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue);
        IFACEMETHOD(SetAttachedFlyout)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue);

        // Static methods.
        IFACEMETHOD(ShowAttachedFlyout)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pFlyoutOwner) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::FlyoutBase;
        }


    private:

        // Customized static properties.
         _Check_return_ HRESULT get_TargetPropertyImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue); 

        // Customized static  methods.
         _Check_return_ HRESULT ShowAttachedFlyoutImpl(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pFlyoutOwner); 
    };
}
