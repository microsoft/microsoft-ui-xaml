// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "AutomationPeer.g.h"
#include "AutomationProperty.g.h"
#include "IRawElementProviderSimple.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::AutomationPeerGenerated::AutomationPeerGenerated()
{
}

DirectUI::AutomationPeerGenerated::~AutomationPeerGenerated()
{
}

HRESULT DirectUI::AutomationPeerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::AutomationPeer)))
    {
        *ppObject = static_cast<DirectUI::AutomationPeer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerProtected)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerProtected*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerPrivate*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::get_EventsSource(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::AutomationPeer_EventsSource, ppValue));
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::put_EventsSource(_In_opt_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::AutomationPeer_EventsSource, pValue));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAcceleratorKey(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetAcceleratorKeyCore(pReturnValue));
    }
    else
    {
        IFC(GetAcceleratorKeyCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAcceleratorKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAcceleratorKey", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetAcceleratorKeyCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAcceleratorKey", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAccessKey(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetAccessKeyCore(pReturnValue));
    }
    else
    {
        IFC(GetAccessKeyCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAccessKeyCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAccessKey", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetAccessKeyCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAccessKey", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAnnotations(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetAnnotationsCore(ppReturnValue));
    }
    else
    {
        IFC(GetAnnotationsCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAnnotationsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeerAnnotation*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAnnotations", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetAnnotationsCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAnnotations", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAutomationControlType(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetAutomationControlTypeCore(pReturnValue));
    }
    else
    {
        IFC(GetAutomationControlTypeCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAutomationControlTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAutomationControlType", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetAutomationControlTypeCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAutomationControlType", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAutomationId(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetAutomationIdCore(pReturnValue));
    }
    else
    {
        IFC(GetAutomationIdCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetAutomationIdCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAutomationId", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetAutomationIdCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetAutomationId", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetBoundingRectangle(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetBoundingRectangleCore(pReturnValue));
    }
    else
    {
        IFC(GetBoundingRectangleCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetBoundingRectangleCore(_Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetBoundingRectangle", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetBoundingRectangleCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetBoundingRectangle", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetChildren(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetChildren", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetChildrenImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetChildren", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetChildrenCore(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetChildrenCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetChildrenCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetChildrenCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetChildrenCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetChildrenCore(ppReturnValue));
    }
    else
    {
        IFC(GetChildrenCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetClassName(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetClassNameCore(pReturnValue));
    }
    else
    {
        IFC(GetClassNameCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetClassNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetClassName", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetClassNameCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetClassName", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetClickablePoint(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetClickablePointCore(pReturnValue));
    }
    else
    {
        IFC(GetClickablePointCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetClickablePointCore(_Out_ ABI::Windows::Foundation::Point* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetClickablePoint", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetClickablePointCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetClickablePoint", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetControlledPeers(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetControlledPeers", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetControlledPeersImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetControlledPeers", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetControlledPeersCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetControlledPeersCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetControlledPeersCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetControlledPeersCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetControlledPeersCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetControlledPeersCore(ppReturnValue));
    }
    else
    {
        IFC(GetControlledPeersCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetCulture(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetCultureCore(pReturnValue));
    }
    else
    {
        IFC(GetCultureCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetCultureCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetCulture", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetCultureCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetCulture", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetDescribedByCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetDescribedByCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetDescribedByCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetDescribedByCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetDescribedByCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetDescribedByCore(ppReturnValue));
    }
    else
    {
        IFC(GetDescribedByCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetElementFromPoint(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));
    }
    else
    {
        IFC(GetElementFromPointCore(pointInWindowCoordinates, ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetElementFromPointCore(_In_ ABI::Windows::Foundation::Point pointInWindowCoordinates, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetElementFromPoint", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetElementFromPointCoreImpl(pointInWindowCoordinates, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetElementFromPoint", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFlowsFromCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFlowsFromCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetFlowsFromCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFlowsFromCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetFlowsFromCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetFlowsFromCore(ppReturnValue));
    }
    else
    {
        IFC(GetFlowsFromCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFlowsToCore(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFlowsToCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetFlowsToCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFlowsToCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetFlowsToCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetFlowsToCore(ppReturnValue));
    }
    else
    {
        IFC(GetFlowsToCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFocusedElement(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetFocusedElementCore(ppReturnValue));
    }
    else
    {
        IFC(GetFocusedElementCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFocusedElementCore(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFocusedElement", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetFocusedElementCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFocusedElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFullDescription(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetFullDescriptionCore(pReturnValue));
    }
    else
    {
        IFC(GetFullDescriptionCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetFullDescriptionCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFullDescription", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetFullDescriptionCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetFullDescription", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetHeadingLevel(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetHeadingLevelCore(pReturnValue));
    }
    else
    {
        IFC(GetHeadingLevelCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetHeadingLevelCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationHeadingLevel* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetHeadingLevel", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetHeadingLevelCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetHeadingLevel", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetHelpText(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetHelpTextCore(pReturnValue));
    }
    else
    {
        IFC(GetHelpTextCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetHelpTextCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetHelpText", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetHelpTextCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetHelpText", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetItemStatus(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetItemStatusCore(pReturnValue));
    }
    else
    {
        IFC(GetItemStatusCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetItemStatusCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetItemStatus", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetItemStatusCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetItemStatus", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetItemType(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetItemTypeCore(pReturnValue));
    }
    else
    {
        IFC(GetItemTypeCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetItemTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetItemType", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetItemTypeCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetItemType", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLabeledBy(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLabeledByCore(ppReturnValue));
    }
    else
    {
        IFC(GetLabeledByCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLabeledByCore(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLabeledBy", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLabeledByCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLabeledBy", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLandmarkType(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLandmarkTypeCore(pReturnValue));
    }
    else
    {
        IFC(GetLandmarkTypeCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLandmarkTypeCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLandmarkType* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLandmarkType", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLandmarkTypeCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLandmarkType", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLevel(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLevelCore(pReturnValue));
    }
    else
    {
        IFC(GetLevelCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLevelCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLevel", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLevelCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLevel", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLiveSetting(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLiveSettingCore(pReturnValue));
    }
    else
    {
        IFC(GetLiveSettingCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLiveSettingCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationLiveSetting* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLiveSetting", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLiveSettingCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLiveSetting", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLocalizedControlType(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLocalizedControlTypeCore(pReturnValue));
    }
    else
    {
        IFC(GetLocalizedControlTypeCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLocalizedControlTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLocalizedControlType", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLocalizedControlTypeCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLocalizedControlType", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLocalizedLandmarkType(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetLocalizedLandmarkTypeCore(pReturnValue));
    }
    else
    {
        IFC(GetLocalizedLandmarkTypeCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetLocalizedLandmarkTypeCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLocalizedLandmarkType", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetLocalizedLandmarkTypeCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetLocalizedLandmarkType", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetName(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetNameCore(pReturnValue));
    }
    else
    {
        IFC(GetNameCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetNameCore(_Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetName", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetNameCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetName", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetOrientation(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetOrientationCore(pReturnValue));
    }
    else
    {
        IFC(GetOrientationCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetOrientationCore(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationOrientation* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetOrientation", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetOrientationCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetOrientation", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetParent(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetParent", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetParentImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetParent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPattern(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetPatternCore(patternInterface, ppReturnValue));
    }
    else
    {
        IFC(GetPatternCore(patternInterface, ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPatternCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::PatternInterface patternInterface, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPattern", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetPatternCoreImpl(patternInterface, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPattern", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPeerFromPoint(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPeerFromPoint", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetPeerFromPointImpl(point, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPeerFromPoint", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPeerFromPointCore(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPeerFromPointCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetPeerFromPointCoreImpl(point, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPeerFromPointCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::GetPeerFromPointCoreProtected(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetPeerFromPointCore(point, ppReturnValue));
    }
    else
    {
        IFC(GetPeerFromPointCore(point, ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPositionInSet(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetPositionInSetCore(pReturnValue));
    }
    else
    {
        IFC(GetPositionInSetCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetPositionInSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPositionInSet", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetPositionInSetCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetPositionInSet", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetSizeOfSet(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetSizeOfSetCore(pReturnValue));
    }
    else
    {
        IFC(GetSizeOfSetCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::GetSizeOfSetCore(_Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetSizeOfSet", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->GetSizeOfSetCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_GetSizeOfSet", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::HasKeyboardFocus(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->HasKeyboardFocusCore(pReturnValue));
    }
    else
    {
        IFC(HasKeyboardFocusCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::HasKeyboardFocusCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_HasKeyboardFocus", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->HasKeyboardFocusCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_HasKeyboardFocus", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::InvalidatePeer()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_InvalidatePeer", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->InvalidatePeerImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_InvalidatePeer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsContentElement(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsContentElementCore(pReturnValue));
    }
    else
    {
        IFC(IsContentElementCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsContentElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsContentElement", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsContentElementCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsContentElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsControlElement(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsControlElementCore(pReturnValue));
    }
    else
    {
        IFC(IsControlElementCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsControlElementCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsControlElement", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsControlElementCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsControlElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsDataValidForForm(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsDataValidForFormCore(pReturnValue));
    }
    else
    {
        IFC(IsDataValidForFormCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsDataValidForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsDataValidForForm", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsDataValidForFormCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsDataValidForForm", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsDialog(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsDialogCore(pReturnValue));
    }
    else
    {
        IFC(IsDialogCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsDialogCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsDialog", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsDialogCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsDialog", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsEnabled(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsEnabledCore(pReturnValue));
    }
    else
    {
        IFC(IsEnabledCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsEnabledCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsEnabled", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsEnabledCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsEnabled", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsKeyboardFocusable(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsKeyboardFocusableCore(pReturnValue));
    }
    else
    {
        IFC(IsKeyboardFocusableCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsKeyboardFocusableCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsKeyboardFocusable", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsKeyboardFocusableCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsKeyboardFocusable", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsOffscreen(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsOffscreenCore(pReturnValue));
    }
    else
    {
        IFC(IsOffscreenCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsOffscreenCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsOffscreen", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsOffscreenCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsOffscreen", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsPassword(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsPasswordCore(pReturnValue));
    }
    else
    {
        IFC(IsPasswordCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsPasswordCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsPassword", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsPasswordCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsPassword", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsPeripheral(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsPeripheralCore(pReturnValue));
    }
    else
    {
        IFC(IsPeripheralCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsPeripheralCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsPeripheral", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsPeripheralCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsPeripheral", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsRequiredForForm(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->IsRequiredForFormCore(pReturnValue));
    }
    else
    {
        IFC(IsRequiredForFormCore(pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::IsRequiredForFormCore(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsRequiredForForm", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->IsRequiredForFormCoreImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_IsRequiredForForm", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::Navigate(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->NavigateCore(direction, ppReturnValue));
    }
    else
    {
        IFC(NavigateCore(direction, ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::NavigateCore(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNavigationDirection direction, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_Navigate", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->NavigateCoreImpl(direction, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_Navigate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::PeerFromProvider(_In_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple* pProvider, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_PeerFromProvider", 0);
    }
    ARG_NOTNULL(pProvider, "provider");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->PeerFromProviderImpl(pProvider, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_PeerFromProvider", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::ProviderFromPeer(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pPeer, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Provider::IIRawElementProviderSimple** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_ProviderFromPeer", 0);
    }
    ARG_NOTNULL(pPeer, "peer");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->ProviderFromPeerImpl(pPeer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_ProviderFromPeer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::RaiseAutomationEvent(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationEvents eventId)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseAutomationEvent", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->RaiseAutomationEventImpl(eventId));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseAutomationEvent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::RaiseNotificationEvent(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNotificationKind notificationKind, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationNotificationProcessing notificationProcessing, _In_opt_ HSTRING displayString, _In_ HSTRING activityId)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseNotificationEvent", 0);
    }
    ARG_NOTNULL(activityId, "activityId");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->RaiseNotificationEventImpl(notificationKind, notificationProcessing, displayString, activityId));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseNotificationEvent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::RaisePropertyChangedEvent(_In_ ABI::Microsoft::UI::Xaml::Automation::IAutomationProperty* pAutomationProperty, _In_ IInspectable* pOldValue, _In_ IInspectable* pNewValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaisePropertyChangedEvent", 0);
    }
    ARG_NOTNULL(pAutomationProperty, "automationProperty");
    ARG_NOTNULL(pOldValue, "oldValue");
    ARG_NOTNULL(pNewValue, "newValue");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->RaisePropertyChangedEventImpl(pAutomationProperty, pOldValue, pNewValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaisePropertyChangedEvent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::RaiseStructureChangedEvent(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationStructureChangeType structureChangeType, _In_opt_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pChild)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseStructureChangedEvent", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->RaiseStructureChangedEventImpl(structureChangeType, pChild));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseStructureChangedEvent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::RaiseTextEditTextChangedEvent(_In_ ABI::Microsoft::UI::Xaml::Automation::AutomationTextEditChangeType automationTextEditChangeType, _In_ ABI::Windows::Foundation::Collections::IVectorView<HSTRING>* pChangedData)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseTextEditTextChangedEvent", 0);
    }
    ARG_NOTNULL(pChangedData, "changedData");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->RaiseTextEditTextChangedEventImpl(automationTextEditChangeType, pChangedData));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_RaiseTextEditTextChangedEvent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::SetAutomationFocus()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetAutomationFocus", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->SetAutomationFocusImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetAutomationFocus", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::SetFocus()
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->SetFocusCore());
    }
    else
    {
        IFC(SetFocusCore());
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

IFACEMETHODIMP DirectUI::AutomationPeerGenerated::SetFocusCore()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetFocus", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->SetFocusCoreImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetFocus", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::SetParent(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pPeer)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetParent", 0);
    }
    ARG_NOTNULL(pPeer, "peer");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->SetParentImpl(pPeer));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_SetParent", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::ShowContextMenu()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_ShowContextMenu", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->ShowContextMenuImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_ShowContextMenu", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerGenerated::ShowContextMenuCore()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "AutomationPeer_ShowContextMenuCore", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<AutomationPeer*>(this)->ShowContextMenuCoreImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "AutomationPeer_ShowContextMenuCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::AutomationPeerGenerated::ShowContextMenuCoreProtected()
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->ShowContextMenuCore());
    }
    else
    {
        IFC(ShowContextMenuCore());
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::AutomationPeerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::AutomationPeerFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.


// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::AutomationPeerFactory::ListenerExists(_In_ ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationEvents eventId, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "AutomationPeer_ListenerExists", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(ListenerExistsImpl(eventId, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "AutomationPeer_ListenerExists", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AutomationPeerFactory::GenerateRawElementProviderRuntimeId(_Out_ ABI::Microsoft::UI::Xaml::Automation::Peers::RawElementProviderRuntimeId* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "AutomationPeer_GenerateRawElementProviderRuntimeId", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(GenerateRawElementProviderRuntimeIdImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "AutomationPeer_GenerateRawElementProviderRuntimeId", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_AutomationPeer()
    {
        RRETURN(ctl::ActivationFactoryCreator<AutomationPeerFactory>::CreateActivationFactory());
    }
}
