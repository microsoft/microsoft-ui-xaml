// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "DatePicker.g.h"
#include "DataTemplate.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::DatePickerGenerated::DatePickerGenerated()
{
}

DirectUI::DatePickerGenerated::~DatePickerGenerated()
{
}

HRESULT DirectUI::DatePickerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::DatePicker)))
    {
        *ppObject = static_cast<DirectUI::DatePicker*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePicker)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IDatePicker*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_CalendarIdentifier(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_CalendarIdentifier, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_CalendarIdentifier(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_CalendarIdentifier, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_Date(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_Date, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_Date(_In_ ABI::Windows::Foundation::DateTime value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_Date, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_DayFormat(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_DayFormat, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_DayFormat(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_DayFormat, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_DayVisible(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_DayVisible, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_DayVisible(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_DayVisible, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_Header, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_Header, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_LightDismissOverlayMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_LightDismissOverlayMode, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_LightDismissOverlayMode(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_LightDismissOverlayMode, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_MaxYear(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_MaxYear, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_MaxYear(_In_ ABI::Windows::Foundation::DateTime value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_MaxYear, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_MinYear(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_MinYear, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_MinYear(_In_ ABI::Windows::Foundation::DateTime value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_MinYear, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_MonthFormat(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_MonthFormat, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_MonthFormat(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_MonthFormat, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_MonthVisible(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_MonthVisible, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_MonthVisible(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_MonthVisible, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_Orientation(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_Orientation, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_Orientation(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_Orientation, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_SelectedDate(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_SelectedDate, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_SelectedDate(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::DateTime>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_SelectedDate, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_YearFormat(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_YearFormat, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_YearFormat(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_YearFormat, value));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::get_YearVisible(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DatePicker_YearVisible, pValue));
}
IFACEMETHODIMP DirectUI::DatePickerGenerated::put_YearVisible(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DatePicker_YearVisible, value));
}

// Events.
_Check_return_ HRESULT DirectUI::DatePickerGenerated::GetDateChangedEventSourceNoRef(_Outptr_ DateChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::DatePicker_DateChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DateChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::DatePicker_DateChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::DatePicker_DateChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::DatePickerGenerated::add_DateChanged(_In_ ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DateChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::DatePickerGenerated::remove_DateChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DateChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs*>* pValue = (ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::DatePicker_DateChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::DatePickerGenerated::GetSelectedDateChangedEventSourceNoRef(_Outptr_ SelectedDateChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::DatePicker_SelectedDateChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectedDateChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::DatePicker_SelectedDateChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::DatePicker_SelectedDateChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::DatePickerGenerated::add_SelectedDateChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePicker*, ABI::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectedDateChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectedDateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::DatePickerGenerated::remove_SelectedDateChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectedDateChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePicker*, ABI::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePicker*, ABI::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectedDateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::DatePicker_SelectedDateChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

_Check_return_ HRESULT DirectUI::DatePickerGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::DatePicker_DateChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DateChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDateChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::DatePicker_SelectedDateChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePicker*, ABI::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SelectedDateChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSelectedDateChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::DatePickerGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::DatePicker_DateChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DateChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDateChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::DatePicker_SelectedDateChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::DatePicker*, ABI::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SelectedDateChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSelectedDateChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::DatePickerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IDatePickerStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IDatePickerStaticsFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::DatePickerFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IDatePicker** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePicker);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::DatePickerFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_Header, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_CalendarIdentifierProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_CalendarIdentifier, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_DateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_Date, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_DayVisibleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_DayVisible, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_MonthVisibleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_MonthVisible, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_YearVisibleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_YearVisible, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_DayFormatProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_DayFormat, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_MonthFormatProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_MonthFormat, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_YearFormatProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_YearFormat, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_MinYearProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_MinYear, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_MaxYearProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_MaxYear, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_OrientationProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_Orientation, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_LightDismissOverlayModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_LightDismissOverlayMode, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_SelectedDateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_SelectedDate, ppValue));
}
IFACEMETHODIMP DirectUI::DatePickerFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DatePicker_HeaderPlacement, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_DatePicker()
    {
        RRETURN(ctl::ActivationFactoryCreator<DatePickerFactory>::CreateActivationFactory());
    }
}
