// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "InputValidationError.g.h"

#define __InputValidationErrorEventArgs_GUID "95d4d3ce-d079-4901-830a-6994cf15e371"
#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation) 
#define FEATURE_INPUTVALIDATION_OVERRIDE override
#else
#define FEATURE_INPUTVALIDATION_OVERRIDE
#endif
namespace DirectUI
{
    class InputValidationErrorEventArgs;

    class __declspec(novtable) __declspec(uuid(__InputValidationErrorEventArgs_GUID)) InputValidationErrorEventArgs :
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
        public ABI::Microsoft::UI::Xaml::Controls::IInputValidationErrorEventArgs,
#endif
        public DirectUI::EventArgs
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.InputValidationErrorEventArgs");

        BEGIN_INTERFACE_MAP(InputValidationErrorEventArgs, DirectUI::EventArgs)
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
            INTERFACE_ENTRY(InputValidationErrorEventArgs, ABI::Microsoft::UI::Xaml::Controls::IInputValidationErrorEventArgs)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(InputValidationErrorEventArgs, DirectUI::EventArgs)

    public:
        InputValidationErrorEventArgs();
        ~InputValidationErrorEventArgs() override;

        // Properties.
        IFACEMETHOD(get_Action)(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventAction* pValue) FEATURE_INPUTVALIDATION_OVERRIDE;
        _Check_return_ HRESULT put_Action(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventAction value);
        IFACEMETHOD(get_Error)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationError** ppValue) FEATURE_INPUTVALIDATION_OVERRIDE;
        _Check_return_ HRESULT put_Error(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationError* pValue);

        // Methods.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) InputValidationErrorEventArgsFactory:
       public ctl::AbstractActivationFactory
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
#endif
    {

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:



    private:
        _Check_return_ HRESULT CreateInstanceImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventAction action, _In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationError* pError, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationErrorEventArgs** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
