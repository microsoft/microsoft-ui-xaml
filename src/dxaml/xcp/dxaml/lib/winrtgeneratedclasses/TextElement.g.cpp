// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "TextElement.g.h"
#include "AutomationPeer.g.h"
#include "Brush.g.h"
#include "FontFamily.g.h"
#include "TextPointer.g.h"
#include "XamlRoot.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::TextElementGenerated::TextElementGenerated()
{
}

DirectUI::TextElementGenerated::~TextElementGenerated()
{
}

HRESULT DirectUI::TextElementGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::TextElement)))
    {
        *ppObject = static_cast<DirectUI::TextElement*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Documents::ITextElement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Documents::ITextElement*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Documents::ITextElementOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Documents::ITextElementOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::TextElementGenerated::get_AccessKey(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_AccessKey, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_AccessKey(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_AccessKey, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_AccessKeyScopeOwner(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_AccessKeyScopeOwnerImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_AccessKeyScopeOwner(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextElement*>(this)->put_AccessKeyScopeOwnerImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_AllowFocusOnInteraction(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_AllowFocusOnInteraction, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_AllowFocusOnInteraction(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_AllowFocusOnInteraction, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_CharacterSpacing(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_CharacterSpacing, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_CharacterSpacing(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_CharacterSpacing, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_ContentEnd(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_ContentEndImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_ContentStart(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_ContentStartImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_ElementEnd(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_ElementEndImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_ElementStart(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_ElementStartImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_ExitDisplayModeOnAccessKeyInvoked(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_ExitDisplayModeOnAccessKeyInvoked, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_ExitDisplayModeOnAccessKeyInvoked(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_ExitDisplayModeOnAccessKeyInvoked, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_FontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_FontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_FontFamily, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_FontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_FontSize, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_FontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_FontSize, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_FontStretch(_Out_ ABI::Windows::UI::Text::FontStretch* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_FontStretch, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_FontStretch(_In_ ABI::Windows::UI::Text::FontStretch value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_FontStretch, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_FontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_FontStyle, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_FontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_FontStyle, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_FontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_FontWeight, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_FontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_FontWeight, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_Foreground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_Foreground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_Foreground, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_IsAccessKeyScope(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_IsAccessKeyScope, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_IsAccessKeyScope(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_IsAccessKeyScope, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_IsTextScaleFactorEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_IsTextScaleFactorEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_IsTextScaleFactorEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_IsTextScaleFactorEnabled, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_KeyTipHorizontalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipHorizontalOffset, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_KeyTipHorizontalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipHorizontalOffset, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_KeyTipPlacementMode(_Out_ ABI::Microsoft::UI::Xaml::Input::KeyTipPlacementMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipPlacementMode, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_KeyTipPlacementMode(_In_ ABI::Microsoft::UI::Xaml::Input::KeyTipPlacementMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipPlacementMode, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_KeyTipVerticalOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipVerticalOffset, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_KeyTipVerticalOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_KeyTipVerticalOffset, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_Language(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_Language, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_Language(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_Language, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_Name(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_NameImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_TextDecorations(_Out_ ABI::Windows::UI::Text::TextDecorations* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextElement_TextDecorations, pValue));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_TextDecorations(_In_ ABI::Windows::UI::Text::TextDecorations value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextElement_TextDecorations, value));
}
IFACEMETHODIMP DirectUI::TextElementGenerated::get_XamlRoot(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IXamlRoot** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextElement*>(this)->get_XamlRootImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::put_XamlRoot(_In_opt_ ABI::Microsoft::UI::Xaml::IXamlRoot* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextElement*>(this)->put_XamlRootImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::TextElementGenerated::GetAccessKeyDisplayDismissedEventSourceNoRef(_Outptr_ AccessKeyDisplayDismissedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextElement_AccessKeyDisplayDismissed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AccessKeyDisplayDismissedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextElement_AccessKeyDisplayDismissed, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextElement_AccessKeyDisplayDismissed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::add_AccessKeyDisplayDismissed(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AccessKeyDisplayDismissedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyDisplayDismissedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::remove_AccessKeyDisplayDismissed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AccessKeyDisplayDismissedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyDisplayDismissedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextElement_AccessKeyDisplayDismissed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextElementGenerated::GetAccessKeyDisplayRequestedEventSourceNoRef(_Outptr_ AccessKeyDisplayRequestedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextElement_AccessKeyDisplayRequested, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AccessKeyDisplayRequestedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextElement_AccessKeyDisplayRequested, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextElement_AccessKeyDisplayRequested, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::add_AccessKeyDisplayRequested(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AccessKeyDisplayRequestedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyDisplayRequestedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::remove_AccessKeyDisplayRequested(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AccessKeyDisplayRequestedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyDisplayRequestedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextElement_AccessKeyDisplayRequested));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextElementGenerated::GetAccessKeyInvokedEventSourceNoRef(_Outptr_ AccessKeyInvokedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextElement_AccessKeyInvoked, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AccessKeyInvokedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextElement_AccessKeyInvoked, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextElement_AccessKeyInvoked, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::add_AccessKeyInvoked(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AccessKeyInvokedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyInvokedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextElementGenerated::remove_AccessKeyInvoked(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AccessKeyInvokedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Documents::TextElement*, ABI::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetAccessKeyInvokedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextElement_AccessKeyInvoked));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::TextElementGenerated::FindName(_In_ HSTRING name, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextElement_FindName", 0);
    }
    ARG_NOTNULL(name, "name");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextElement*>(this)->FindNameImpl(name, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextElement_FindName", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextElementGenerated::OnCreateAutomationPeer(_Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextElement_OnCreateAutomationPeer", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextElement_OnCreateAutomationPeer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextElementGenerated::OnDisconnectVisualChildren()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextElement_OnDisconnectVisualChildren", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextElement*>(this)->OnDisconnectVisualChildrenImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextElement_OnDisconnectVisualChildren", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::TextElementGenerated::OnDisconnectVisualChildrenProtected()
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Documents::ITextElementOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDisconnectVisualChildren());
    }
    else
    {
        IFC(OnDisconnectVisualChildren());
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::TextElementFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Documents::ITextElementFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Documents::ITextElementFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Documents::ITextElementStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Documents::ITextElementStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::TextElementFactory::get_FontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_FontSize, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_FontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_FontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_FontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_FontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_FontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_FontStretchProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_FontStretch, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_CharacterSpacingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_CharacterSpacing, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_ForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_LanguageProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_Language, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_IsTextScaleFactorEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_IsTextScaleFactorEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_TextDecorationsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_TextDecorations, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_AllowFocusOnInteractionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_AllowFocusOnInteraction, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_AccessKeyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_AccessKey, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_ExitDisplayModeOnAccessKeyInvokedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_ExitDisplayModeOnAccessKeyInvoked, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_IsAccessKeyScopeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_IsAccessKeyScope, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_AccessKeyScopeOwnerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_AccessKeyScopeOwner, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_KeyTipPlacementModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_KeyTipPlacementMode, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_KeyTipHorizontalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_KeyTipHorizontalOffset, ppValue));
}
IFACEMETHODIMP DirectUI::TextElementFactory::get_KeyTipVerticalOffsetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextElement_KeyTipVerticalOffset, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_TextElement()
    {
        RRETURN(ctl::ActivationFactoryCreator<TextElementFactory>::CreateActivationFactory());
    }
}
