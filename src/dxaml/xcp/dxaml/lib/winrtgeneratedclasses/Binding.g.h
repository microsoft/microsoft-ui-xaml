// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "BindingBase.g.h"
#include "ISupportInitialize.g.h"

#define __Binding_GUID "9fe108de-6fec-4a38-972d-dd6015ab7621"

namespace DirectUI
{
    class Binding;
    class PropertyPath;
    class RelativeSource;

    class __declspec(novtable) BindingGenerated:
        public DirectUI::BindingBase
        , public ABI::Microsoft::UI::Xaml::Data::IBinding
        , public DirectUI::ISupportInitialize
    {
        friend class DirectUI::Binding;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Data.Binding");

        BEGIN_INTERFACE_MAP(BindingGenerated, DirectUI::BindingBase)
            INTERFACE_ENTRY(BindingGenerated, ABI::Microsoft::UI::Xaml::Data::IBinding)
            INTERFACE_ENTRY(BindingGenerated, DirectUI::ISupportInitialize)
        END_INTERFACE_MAP(BindingGenerated, DirectUI::BindingBase)

    public:
        BindingGenerated();
        ~BindingGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Binding;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Binding;
        }

        // Properties.
        IFACEMETHOD(get_Converter)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Data::IValueConverter** ppValue) override;
        IFACEMETHOD(put_Converter)(_In_opt_ ABI::Microsoft::UI::Xaml::Data::IValueConverter* pValue) override;
        IFACEMETHOD(get_ConverterLanguage)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_ConverterLanguage)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_ConverterParameter)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_ConverterParameter)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_ElementName)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_ElementName)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_FallbackValue)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_FallbackValue)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_Mode)(_Out_ ABI::Microsoft::UI::Xaml::Data::BindingMode* pValue) override;
        IFACEMETHOD(put_Mode)(_In_ ABI::Microsoft::UI::Xaml::Data::BindingMode value) override;
        IFACEMETHOD(get_Path)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IPropertyPath** ppValue) override;
        IFACEMETHOD(put_Path)(_In_opt_ ABI::Microsoft::UI::Xaml::IPropertyPath* pValue) override;
        IFACEMETHOD(get_RelativeSource)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Data::IRelativeSource** ppValue) override;
        IFACEMETHOD(put_RelativeSource)(_In_opt_ ABI::Microsoft::UI::Xaml::Data::IRelativeSource* pValue) override;
        IFACEMETHOD(get_Source)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_Source)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_TargetNullValue)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_TargetNullValue)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_UpdateSourceTrigger)(_Out_ ABI::Microsoft::UI::Xaml::Data::UpdateSourceTrigger* pValue) override;
        IFACEMETHOD(put_UpdateSourceTrigger)(_In_ ABI::Microsoft::UI::Xaml::Data::UpdateSourceTrigger value) override;

        // Events.

        // Methods.
        IFACEMETHOD(BeginInit)() override;
        IFACEMETHOD(EndInit)(_In_opt_ DirectUI::XamlServiceProviderContext* pContext) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "Binding_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) BindingFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Data::IBindingFactory
    {
        BEGIN_INTERFACE_MAP(BindingFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(BindingFactory, ABI::Microsoft::UI::Xaml::Data::IBindingFactory)
        END_INTERFACE_MAP(BindingFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Data::IBinding** ppInstance);

        // Static properties.

        // Dependency properties.
        
        
        
        
        
        
        
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Binding;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
