// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "GradientBrush.g.h"
#include "GradientStopCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::GradientBrush::GradientBrush()
{
}

DirectUI::GradientBrush::~GradientBrush()
{
}

HRESULT DirectUI::GradientBrush::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::GradientBrush)))
    {
        *ppObject = static_cast<DirectUI::GradientBrush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IGradientBrush)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IGradientBrush*>(this);
    }
    else
    {
        RRETURN(DirectUI::Brush::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::GradientBrush::get_ColorInterpolationMode(_Out_ ABI::Microsoft::UI::Xaml::Media::ColorInterpolationMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::GradientBrush_ColorInterpolationMode, pValue));
}
IFACEMETHODIMP DirectUI::GradientBrush::put_ColorInterpolationMode(_In_ ABI::Microsoft::UI::Xaml::Media::ColorInterpolationMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::GradientBrush_ColorInterpolationMode, value));
}
IFACEMETHODIMP DirectUI::GradientBrush::get_GradientStops(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::GradientStop*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::GradientBrush_GradientStops, ppValue));
}
IFACEMETHODIMP DirectUI::GradientBrush::put_GradientStops(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::GradientStop*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::GradientBrush_GradientStops, pValue));
}
IFACEMETHODIMP DirectUI::GradientBrush::get_MappingMode(_Out_ ABI::Microsoft::UI::Xaml::Media::BrushMappingMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::GradientBrush_MappingMode, pValue));
}
IFACEMETHODIMP DirectUI::GradientBrush::put_MappingMode(_In_ ABI::Microsoft::UI::Xaml::Media::BrushMappingMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::GradientBrush_MappingMode, value));
}
IFACEMETHODIMP DirectUI::GradientBrush::get_SpreadMethod(_Out_ ABI::Microsoft::UI::Xaml::Media::GradientSpreadMethod* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::GradientBrush_SpreadMethod, pValue));
}
IFACEMETHODIMP DirectUI::GradientBrush::put_SpreadMethod(_In_ ABI::Microsoft::UI::Xaml::Media::GradientSpreadMethod value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::GradientBrush_SpreadMethod, value));
}

// Events.

// Methods.

HRESULT DirectUI::GradientBrushFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IGradientBrushFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IGradientBrushFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IGradientBrushStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IGradientBrushStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::GradientBrushFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IGradientBrush** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Media::IGradientBrush);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::GradientBrushFactory::get_SpreadMethodProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::GradientBrush_SpreadMethod, ppValue));
}
IFACEMETHODIMP DirectUI::GradientBrushFactory::get_MappingModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::GradientBrush_MappingMode, ppValue));
}
IFACEMETHODIMP DirectUI::GradientBrushFactory::get_ColorInterpolationModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::GradientBrush_ColorInterpolationMode, ppValue));
}
IFACEMETHODIMP DirectUI::GradientBrushFactory::get_GradientStopsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::GradientBrush_GradientStops, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_GradientBrush()
    {
        RRETURN(ctl::ActivationFactoryCreator<GradientBrushFactory>::CreateActivationFactory());
    }
}
