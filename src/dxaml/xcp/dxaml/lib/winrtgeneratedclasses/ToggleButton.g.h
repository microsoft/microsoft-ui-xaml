// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ButtonBase.g.h"

#define __ToggleButton_GUID "5752c258-e1ad-41e1-9747-38b10fec6b3a"

namespace DirectUI
{
    class ToggleButton;

    class __declspec(novtable) ToggleButtonGenerated:
        public DirectUI::ButtonBase
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides
    {
        friend class DirectUI::ToggleButton;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.ToggleButton");

        BEGIN_INTERFACE_MAP(ToggleButtonGenerated, DirectUI::ButtonBase)
            INTERFACE_ENTRY(ToggleButtonGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton)
            INTERFACE_ENTRY(ToggleButtonGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides)
        END_INTERFACE_MAP(ToggleButtonGenerated, DirectUI::ButtonBase)

    public:
        ToggleButtonGenerated();
        ~ToggleButtonGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IRoutedEventArgs> CheckedEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IRoutedEventArgs> UncheckedEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::IRoutedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IRoutedEventArgs> IndeterminateEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ToggleButton;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::ToggleButton;
        }

        // Properties.
        IFACEMETHOD(get_IsChecked)(_Out_ ABI::Windows::Foundation::IReference<bool>** ppValue) override;
        IFACEMETHOD(put_IsChecked)(_In_ ABI::Windows::Foundation::IReference<bool>* pValue) override;
        IFACEMETHOD(get_IsThreeState)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsThreeState)(_In_ BOOLEAN value) override;

        // Events.
        _Check_return_ HRESULT GetCheckedEventSourceNoRef(_Outptr_ CheckedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Checked)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Checked)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetIndeterminateEventSourceNoRef(_Outptr_ IndeterminateEventSourceType** ppEventSource);
        IFACEMETHOD(add_Indeterminate)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Indeterminate)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetUncheckedEventSourceNoRef(_Outptr_ UncheckedEventSourceType** ppEventSource);
        IFACEMETHOD(add_Unchecked)(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Unchecked)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(OnToggle)() override;
        _Check_return_ HRESULT OnToggleProtected();


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "ToggleButton_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ToggleButtonFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics
    {
        BEGIN_INTERFACE_MAP(ToggleButtonFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(ToggleButtonFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory)
            INTERFACE_ENTRY(ToggleButtonFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics)
        END_INTERFACE_MAP(ToggleButtonFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_IsCheckedProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsThreeStateProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::ToggleButton;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
