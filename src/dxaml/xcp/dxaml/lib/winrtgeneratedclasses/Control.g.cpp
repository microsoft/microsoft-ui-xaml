// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Control.g.h"
#include "Brush.g.h"
#include "CharacterReceivedRoutedEventArgs.g.h"
#include "ControlTemplate.g.h"
#include "DoubleTappedRoutedEventArgs.g.h"
#include "DragEventArgs.g.h"
#include "FontFamily.g.h"
#include "HoldingRoutedEventArgs.g.h"
#include "KeyRoutedEventArgs.g.h"
#include "ManipulationCompletedRoutedEventArgs.g.h"
#include "ManipulationDeltaRoutedEventArgs.g.h"
#include "ManipulationInertiaStartingRoutedEventArgs.g.h"
#include "ManipulationStartedRoutedEventArgs.g.h"
#include "ManipulationStartingRoutedEventArgs.g.h"
#include "PointerRoutedEventArgs.g.h"
#include "RightTappedRoutedEventArgs.g.h"
#include "RoutedEventArgs.g.h"
#include "TappedRoutedEventArgs.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ControlGenerated::ControlGenerated()
{
}

DirectUI::ControlGenerated::~ControlGenerated()
{
}

HRESULT DirectUI::ControlGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Control)))
    {
        *ppObject = static_cast<DirectUI::Control*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControl)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControlProtected)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IControlProtected*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControlOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IControlOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::FrameworkElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ControlGenerated::get_Background(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_Background, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_Background(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_Background, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_BackgroundSizing(_Out_ ABI::Microsoft::UI::Xaml::Controls::BackgroundSizing* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_BackgroundSizing, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_BackgroundSizing(_In_ ABI::Microsoft::UI::Xaml::Controls::BackgroundSizing value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_BackgroundSizing, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_BorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_BorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_BorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_BorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_BorderThickness(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_BorderThickness, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_BorderThickness(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_BorderThickness, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_CharacterSpacing(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_CharacterSpacing, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_CharacterSpacing(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_CharacterSpacing, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_CornerRadius(_Out_ ABI::Microsoft::UI::Xaml::CornerRadius* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_CornerRadius, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_CornerRadius(_In_ ABI::Microsoft::UI::Xaml::CornerRadius value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_CornerRadius, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_DefaultStyleKey(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_DefaultStyleKey, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_DefaultStyleKey(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_DefaultStyleKey, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_DefaultStyleResourceUri(_Outptr_result_maybenull_ ABI::Windows::Foundation::IUriRuntimeClass** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_DefaultStyleResourceUri, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_DefaultStyleResourceUri(_In_opt_ ABI::Windows::Foundation::IUriRuntimeClass* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_DefaultStyleResourceUri, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_ElementSoundMode(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_ElementSoundMode, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_ElementSoundMode(_In_ ABI::Microsoft::UI::Xaml::ElementSoundMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_ElementSoundMode, value));
}
_Check_return_ HRESULT DirectUI::ControlGenerated::get_FocusTargetDescendant(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FocusTargetDescendant, ppValue));
}
_Check_return_ HRESULT DirectUI::ControlGenerated::put_FocusTargetDescendant(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FocusTargetDescendant, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_FontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_FontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FontFamily, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_FontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FontSize, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_FontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FontSize, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_FontStretch(_Out_ ABI::Windows::UI::Text::FontStretch* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FontStretch, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_FontStretch(_In_ ABI::Windows::UI::Text::FontStretch value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FontStretch, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_FontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FontStyle, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_FontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FontStyle, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_FontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_FontWeight, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_FontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_FontWeight, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_Foreground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_Foreground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_Foreground, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_HorizontalContentAlignment(_Out_ ABI::Microsoft::UI::Xaml::HorizontalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_HorizontalContentAlignment, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_HorizontalContentAlignment(_In_ ABI::Microsoft::UI::Xaml::HorizontalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_HorizontalContentAlignment, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_IsEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_IsEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_IsEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_IsEnabled, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_IsFocusEngaged(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_IsFocusEngaged, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_IsFocusEngaged(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_IsFocusEngaged, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_IsFocusEngagementEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_IsFocusEngagementEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_IsFocusEngagementEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_IsFocusEngagementEnabled, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_IsTextScaleFactorEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_IsTextScaleFactorEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_IsTextScaleFactorEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_IsTextScaleFactorEnabled, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_Padding(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_Padding, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_Padding(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_Padding, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_RequiresPointer(_Out_ ABI::Microsoft::UI::Xaml::Controls::RequiresPointer* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_RequiresPointer, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_RequiresPointer(_In_ ABI::Microsoft::UI::Xaml::Controls::RequiresPointer value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_RequiresPointer, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_TabNavigation(_Out_ ABI::Microsoft::UI::Xaml::Input::KeyboardNavigationMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_TabNavigation, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_TabNavigation(_In_ ABI::Microsoft::UI::Xaml::Input::KeyboardNavigationMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_TabNavigation, value));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_Template(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IControlTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_Template, ppValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_Template(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IControlTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_Template, pValue));
}
_Check_return_ HRESULT DirectUI::ControlGenerated::get_TemplateKeyTipTarget(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_TemplateKeyTipTarget, ppValue));
}
_Check_return_ HRESULT DirectUI::ControlGenerated::put_TemplateKeyTipTarget(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_TemplateKeyTipTarget, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::get_VerticalContentAlignment(_Out_ ABI::Microsoft::UI::Xaml::VerticalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Control_VerticalContentAlignment, pValue));
}
IFACEMETHODIMP DirectUI::ControlGenerated::put_VerticalContentAlignment(_In_ ABI::Microsoft::UI::Xaml::VerticalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Control_VerticalContentAlignment, value));
}

// Events.
_Check_return_ HRESULT DirectUI::ControlGenerated::GetFocusDisengagedEventSourceNoRef(_Outptr_ FocusDisengagedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Control_FocusDisengaged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<FocusDisengagedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Control_FocusDisengaged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Control_FocusDisengaged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ControlGenerated::add_FocusDisengaged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    FocusDisengagedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetFocusDisengagedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ControlGenerated::remove_FocusDisengaged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    FocusDisengagedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetFocusDisengagedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Control_FocusDisengaged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ControlGenerated::GetFocusEngagedEventSourceNoRef(_Outptr_ FocusEngagedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Control_FocusEngaged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<FocusEngagedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Control_FocusEngaged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Control_FocusEngaged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ControlGenerated::add_FocusEngaged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    FocusEngagedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetFocusEngagedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ControlGenerated::remove_FocusEngaged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    FocusEngagedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetFocusEngagedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Control_FocusEngaged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ControlGenerated::GetInheritedPropertyChangedEventSourceNoRef(_Outptr_ InheritedPropertyChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Control_InheritedPropertyChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<InheritedPropertyChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Control_InheritedPropertyChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::Control_InheritedPropertyChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ControlGenerated::add_InheritedPropertyChanged(_In_ ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    InheritedPropertyChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetInheritedPropertyChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ControlGenerated::remove_InheritedPropertyChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    InheritedPropertyChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IDependencyPropertyChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(GetInheritedPropertyChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Control_InheritedPropertyChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ControlGenerated::ApplyTemplate(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_ApplyTemplate", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->ApplyTemplateImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_ApplyTemplate", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ControlGenerated::GetImplementationRoot(_Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_GetImplementationRoot", 0);
    }

    CUIElement* pReturnValueCore = nullptr;

    ARG_VALIDRETURNPOINTER(ppReturnValue);

    IFC(CheckThread());

    IFC(static_cast<CControl*>(GetHandle())->GetImplementationRoot(&pReturnValueCore));

    IFC(CValueBoxer::ConvertToFramework(pReturnValueCore, ppReturnValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_GetImplementationRoot", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::GetTemplateChild(_In_ HSTRING childName, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_GetTemplateChild", 0);
    }
    ARG_NOTNULL(childName, "childName");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->GetTemplateChildImpl(childName, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_GetTemplateChild", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnCharacterReceived(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnCharacterReceived", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnCharacterReceivedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnCharacterReceived", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnCharacterReceivedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnCharacterReceived(pE));
    }
    else
    {
        IFC(OnCharacterReceived(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnDoubleTapped", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnDoubleTappedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnDoubleTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnDoubleTappedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDoubleTapped(pE));
    }
    else
    {
        IFC(OnDoubleTapped(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnDragEnter", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnDragEnterImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnDragEnter", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnDragEnterProtected(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragEnter(pE));
    }
    else
    {
        IFC(OnDragEnter(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnDragLeave", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnDragLeaveImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnDragLeave", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnDragLeaveProtected(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragLeave(pE));
    }
    else
    {
        IFC(OnDragLeave(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnDragOver", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnDragOverImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnDragOver", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnDragOverProtected(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragOver(pE));
    }
    else
    {
        IFC(OnDragOver(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnDrop", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnDropImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnDrop", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnDropProtected(_In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDrop(pE));
    }
    else
    {
        IFC(OnDrop(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnGotFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnGotFocus", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnGotFocusImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnGotFocus", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnGotFocusProtected(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnGotFocus(pE));
    }
    else
    {
        IFC(OnGotFocus(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnHolding", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnHoldingImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnHolding", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnHoldingProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnHolding(pE));
    }
    else
    {
        IFC(OnHolding(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnKeyDown", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnKeyDownImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnKeyDown", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnKeyDownProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnKeyDown(pE));
    }
    else
    {
        IFC(OnKeyDown(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnKeyUp", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnKeyUpImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnKeyUp", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnKeyUpProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnKeyUp(pE));
    }
    else
    {
        IFC(OnKeyUp(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnLostFocus(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnLostFocus", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnLostFocusImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnLostFocus", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnLostFocusProtected(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnLostFocus(pE));
    }
    else
    {
        IFC(OnLostFocus(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnManipulationCompleted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnManipulationCompleted", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnManipulationCompletedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnManipulationCompleted", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnManipulationCompletedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnManipulationCompleted(pE));
    }
    else
    {
        IFC(OnManipulationCompleted(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnManipulationDelta(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnManipulationDelta", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnManipulationDeltaImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnManipulationDelta", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnManipulationDeltaProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnManipulationDelta(pE));
    }
    else
    {
        IFC(OnManipulationDelta(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnManipulationInertiaStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnManipulationInertiaStarting", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnManipulationInertiaStartingImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnManipulationInertiaStarting", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnManipulationInertiaStartingProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnManipulationInertiaStarting(pE));
    }
    else
    {
        IFC(OnManipulationInertiaStarting(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnManipulationStarted(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnManipulationStarted", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnManipulationStartedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnManipulationStarted", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnManipulationStartedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnManipulationStarted(pE));
    }
    else
    {
        IFC(OnManipulationStarted(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnManipulationStarting(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnManipulationStarting", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnManipulationStartingImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnManipulationStarting", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnManipulationStartingProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnManipulationStarting(pE));
    }
    else
    {
        IFC(OnManipulationStarting(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerCanceled", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerCanceledImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerCanceled", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerCanceledProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerCanceled(pE));
    }
    else
    {
        IFC(OnPointerCanceled(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerCaptureLost", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerCaptureLostImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerCaptureLost", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerCaptureLostProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerCaptureLost(pE));
    }
    else
    {
        IFC(OnPointerCaptureLost(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerEntered", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerEnteredImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerEntered", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerEnteredProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerEntered(pE));
    }
    else
    {
        IFC(OnPointerEntered(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerExited", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerExitedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerExited", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerExitedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerExited(pE));
    }
    else
    {
        IFC(OnPointerExited(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerMoved", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerMovedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerMoved", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerMovedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerMoved(pE));
    }
    else
    {
        IFC(OnPointerMoved(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerPressed", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerPressedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerPressed", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerPressedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerPressed(pE));
    }
    else
    {
        IFC(OnPointerPressed(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerReleased", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerReleasedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerReleased", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerReleasedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerReleased(pE));
    }
    else
    {
        IFC(OnPointerReleased(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPointerWheelChanged", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPointerWheelChangedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPointerWheelChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPointerWheelChangedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerWheelChanged(pE));
    }
    else
    {
        IFC(OnPointerWheelChanged(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPreviewKeyDown(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPreviewKeyDown", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPreviewKeyDownImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPreviewKeyDown", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPreviewKeyDownProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPreviewKeyDown(pE));
    }
    else
    {
        IFC(OnPreviewKeyDown(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnPreviewKeyUp(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnPreviewKeyUp", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnPreviewKeyUpImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnPreviewKeyUp", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnPreviewKeyUpProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPreviewKeyUp(pE));
    }
    else
    {
        IFC(OnPreviewKeyUp(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnRightTapped", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnRightTappedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnRightTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnRightTappedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnRightTapped(pE));
    }
    else
    {
        IFC(OnRightTapped(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_OnTapped", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->OnTappedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_OnTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::OnTappedProtected(_In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IControlOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnTapped(pE));
    }
    else
    {
        IFC(OnTapped(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ControlGenerated::RemoveFocusEngagement()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Control_RemoveFocusEngagement", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Control*>(this)->RemoveFocusEngagementImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Control_RemoveFocusEngagement", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ControlGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Control_FocusDisengaged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                FocusDisengagedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetFocusDisengagedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Control_FocusEngaged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                FocusEngagedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetFocusEngagedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::FrameworkElementGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ControlGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Control_FocusDisengaged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                FocusDisengagedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetFocusDisengagedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Control_FocusEngaged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::Control*, ABI::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                FocusEngagedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetFocusEngagedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::FrameworkElementGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ControlFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControlFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IControlFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControlStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IControlStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ControlFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IControl** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IControl);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::ControlFactory::get_IsFocusEngagementEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsFocusEngagementEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_IsFocusEngagedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsFocusEngaged, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_RequiresPointerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_RequiresPointer, ppValue));
}

IFACEMETHODIMP DirectUI::ControlFactory::get_FontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_FontSize, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_FontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_FontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_FontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_FontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_FontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_FontStretchProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_FontStretch, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_CharacterSpacingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_CharacterSpacing, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_ForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_IsTextScaleFactorEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsTextScaleFactorEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_IsEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_TabNavigationProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_TabNavigation, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_TemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_Template, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_PaddingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_Padding, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_HorizontalContentAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_HorizontalContentAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_VerticalContentAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_VerticalContentAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_BackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_Background, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_BackgroundSizingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_BackgroundSizing, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_BorderThicknessProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_BorderThickness, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_BorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_BorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_DefaultStyleKeyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_DefaultStyleKey, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_DefaultStyleResourceUriProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_DefaultStyleResourceUri, ppValue));
}
IFACEMETHODIMP DirectUI::ControlFactory::get_ElementSoundModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_ElementSoundMode, ppValue));
}

IFACEMETHODIMP DirectUI::ControlFactory::get_CornerRadiusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_CornerRadius, ppValue));
}

// Attached properties.
_Check_return_ HRESULT DirectUI::ControlFactory::GetIsTemplateFocusTargetStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::Control_IsTemplateFocusTarget, pValue));
}

_Check_return_ HRESULT DirectUI::ControlFactory::SetIsTemplateFocusTargetStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ BOOLEAN value)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pElement), KnownPropertyIndex::Control_IsTemplateFocusTarget, value));
}


IFACEMETHODIMP DirectUI::ControlFactory::get_IsTemplateFocusTargetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsTemplateFocusTarget, ppValue));
}


IFACEMETHODIMP DirectUI::ControlFactory::GetIsTemplateFocusTarget(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(GetIsTemplateFocusTargetStatic(pElement, pValue));
}

IFACEMETHODIMP DirectUI::ControlFactory::SetIsTemplateFocusTarget(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pElement, _In_ BOOLEAN value)
{
    RRETURN(SetIsTemplateFocusTargetStatic(pElement, value));
}
_Check_return_ HRESULT DirectUI::ControlFactory::GetIsTemplateKeyTipTargetStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::Control_IsTemplateKeyTipTarget, pValue));
}

_Check_return_ HRESULT DirectUI::ControlFactory::SetIsTemplateKeyTipTargetStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN value)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::Control_IsTemplateKeyTipTarget, value));
}


IFACEMETHODIMP DirectUI::ControlFactory::get_IsTemplateKeyTipTargetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Control_IsTemplateKeyTipTarget, ppValue));
}


IFACEMETHODIMP DirectUI::ControlFactory::GetIsTemplateKeyTipTarget(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(GetIsTemplateKeyTipTargetStatic(pElement, pValue));
}

IFACEMETHODIMP DirectUI::ControlFactory::SetIsTemplateKeyTipTarget(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ BOOLEAN value)
{
    RRETURN(SetIsTemplateKeyTipTargetStatic(pElement, value));
}

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Control()
    {
        RRETURN(ctl::ActivationFactoryCreator<ControlFactory>::CreateActivationFactory());
    }
}
