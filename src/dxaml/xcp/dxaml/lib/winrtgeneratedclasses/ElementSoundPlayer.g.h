// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __ElementSoundPlayer_GUID "2296ace8-f2ee-41c1-8a1f-9abaefe57f18"

namespace DirectUI
{
    class ElementSoundPlayer;

    class __declspec(novtable) __declspec(uuid(__ElementSoundPlayer_GUID)) ElementSoundPlayer:
        public ctl::WeakReferenceSource
        , public ABI::Microsoft::UI::Xaml::IElementSoundPlayer
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.ElementSoundPlayer");

        BEGIN_INTERFACE_MAP(ElementSoundPlayer, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(ElementSoundPlayer, ABI::Microsoft::UI::Xaml::IElementSoundPlayer)
        END_INTERFACE_MAP(ElementSoundPlayer, ctl::WeakReferenceSource)

    public:
        ElementSoundPlayer();
        ~ElementSoundPlayer() override;

        // Event source typedefs.


        // Properties.

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ElementSoundPlayerFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::IElementSoundPlayerStatics
        , public ABI::Microsoft::UI::Xaml::IElementSoundPlayerStaticsPrivate
    {
        BEGIN_INTERFACE_MAP(ElementSoundPlayerFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(ElementSoundPlayerFactory, ABI::Microsoft::UI::Xaml::IElementSoundPlayerStatics)
            INTERFACE_ENTRY(ElementSoundPlayerFactory, ABI::Microsoft::UI::Xaml::IElementSoundPlayerStaticsPrivate)
        END_INTERFACE_MAP(ElementSoundPlayerFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.

        // Static properties.
        IFACEMETHOD(get_Volume)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_Volume)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_State)(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState* pValue) override;
        IFACEMETHOD(put_State)(_In_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState value) override;
        IFACEMETHOD(get_SpatialAudioMode)(_Out_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode* pValue) override;
        IFACEMETHOD(put_SpatialAudioMode)(_In_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode value) override;

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(Play)(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound) override;
        IFACEMETHOD(RequestInteractionSoundForElement)(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement) override;
        IFACEMETHOD(GetEffectiveSoundMode)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pResult) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:

        // Customized static properties.
         _Check_return_ HRESULT get_VolumeImpl(_Out_ DOUBLE* pValue); 
         _Check_return_ HRESULT put_VolumeImpl(_In_ DOUBLE value); 
         _Check_return_ HRESULT get_StateImpl(_Out_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState* pValue); 
         _Check_return_ HRESULT put_StateImpl(_In_ ABI::Microsoft::UI::Xaml::ElementSoundPlayerState value); 
         _Check_return_ HRESULT get_SpatialAudioModeImpl(_Out_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode* pValue); 
         _Check_return_ HRESULT put_SpatialAudioModeImpl(_In_ ABI::Microsoft::UI::Xaml::ElementSpatialAudioMode value); 

        // Customized static  methods.
         _Check_return_ HRESULT PlayImpl(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound); 
         _Check_return_ HRESULT RequestInteractionSoundForElementImpl(_In_ ABI::Microsoft::UI::Xaml::ElementSoundKind sound, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement); 
         _Check_return_ HRESULT GetEffectiveSoundModeImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::ElementSoundMode* pResult); 
    };
}
