// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "SetterBase.g.h"

#define __Setter_GUID "7c425f15-7da5-4f20-b7cc-39527248803b"

namespace DirectUI
{
    class Setter;
    class TargetPropertyPath;

    class __declspec(novtable) __declspec(uuid(__Setter_GUID)) Setter:
        public DirectUI::SetterBase
        , public ABI::Microsoft::UI::Xaml::ISetter
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Setter");

        BEGIN_INTERFACE_MAP(Setter, DirectUI::SetterBase)
            INTERFACE_ENTRY(Setter, ABI::Microsoft::UI::Xaml::ISetter)
        END_INTERFACE_MAP(Setter, DirectUI::SetterBase)

    public:
        Setter();
        ~Setter() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Setter;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Setter;
        }

        // Properties.
        IFACEMETHOD(get_Property)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(put_Property)(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pValue) override;
        IFACEMETHOD(get_Target)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::ITargetPropertyPath** ppValue) override;
        IFACEMETHOD(put_Target)(_In_opt_ ABI::Microsoft::UI::Xaml::ITargetPropertyPath* pValue) override;
        IFACEMETHOD(get_Value)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_Value)(_In_opt_ IInspectable* pValue) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.
         _Check_return_ HRESULT get_PropertyImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue); 
         _Check_return_ HRESULT put_PropertyImpl(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pValue); 

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SetterFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::ISetterFactory
    {
        BEGIN_INTERFACE_MAP(SetterFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(SetterFactory, ABI::Microsoft::UI::Xaml::ISetterFactory)
        END_INTERFACE_MAP(SetterFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pTargetProperty, _In_ IInspectable* pValue, _Outptr_ ABI::Microsoft::UI::Xaml::ISetter** ppInstance);

        // Static properties.

        // Dependency properties.
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Setter;
        }


    private:
        _Check_return_ HRESULT CreateInstanceImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pTargetProperty, _In_ IInspectable* pValue, _Outptr_ ABI::Microsoft::UI::Xaml::ISetter** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
