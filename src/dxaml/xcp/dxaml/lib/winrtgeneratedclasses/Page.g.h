// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "UserControl.g.h"

#define __Page_GUID "b0e467bb-e8ee-4cf2-af8a-106295e5efef"

namespace DirectUI
{
    class Page;
    class AppBar;
    class Frame;
    class NavigatingCancelEventArgs;
    class NavigationEventArgs;

    class __declspec(novtable) PageGenerated:
        public DirectUI::UserControl
        , public ABI::Microsoft::UI::Xaml::Controls::IPage
        , public ABI::Microsoft::UI::Xaml::Controls::IPageOverrides
    {
        friend class DirectUI::Page;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Page");

        BEGIN_INTERFACE_MAP(PageGenerated, DirectUI::UserControl)
            INTERFACE_ENTRY(PageGenerated, ABI::Microsoft::UI::Xaml::Controls::IPage)
            INTERFACE_ENTRY(PageGenerated, ABI::Microsoft::UI::Xaml::Controls::IPageOverrides)
        END_INTERFACE_MAP(PageGenerated, DirectUI::UserControl)

    public:
        PageGenerated();
        ~PageGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Page;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Page;
        }

        // Properties.
        IFACEMETHOD(get_BottomAppBar)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IAppBar** ppValue) override;
        IFACEMETHOD(put_BottomAppBar)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IAppBar* pValue) override;
        IFACEMETHOD(get_Frame)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IFrame** ppValue) override;
        _Check_return_ HRESULT put_Frame(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IFrame* pValue);
        IFACEMETHOD(get_NavigationCacheMode)(_Out_ ABI::Microsoft::UI::Xaml::Navigation::NavigationCacheMode* pValue) override;
        IFACEMETHOD(put_NavigationCacheMode)(_In_ ABI::Microsoft::UI::Xaml::Navigation::NavigationCacheMode value) override;
        IFACEMETHOD(get_TopAppBar)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IAppBar** ppValue) override;
        IFACEMETHOD(put_TopAppBar)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IAppBar* pValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(OnNavigatedFrom)(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigationEventArgs* pE) override;
        _Check_return_ HRESULT OnNavigatedFromProtected(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigationEventArgs* pE);
        IFACEMETHOD(OnNavigatedTo)(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigationEventArgs* pE) override;
        _Check_return_ HRESULT OnNavigatedToProtected(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigationEventArgs* pE);
        IFACEMETHOD(OnNavigatingFrom)(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigatingCancelEventArgs* pE) override;
        _Check_return_ HRESULT OnNavigatingFromProtected(_In_ ABI::Microsoft::UI::Xaml::Navigation::INavigatingCancelEventArgs* pE);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "Page_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) PageFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IPageFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IPageStatics
    {
        BEGIN_INTERFACE_MAP(PageFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(PageFactory, ABI::Microsoft::UI::Xaml::Controls::IPageFactory)
            INTERFACE_ENTRY(PageFactory, ABI::Microsoft::UI::Xaml::Controls::IPageStatics)
        END_INTERFACE_MAP(PageFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPage** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_FrameProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_TopAppBarProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_BottomAppBarProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Page;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
