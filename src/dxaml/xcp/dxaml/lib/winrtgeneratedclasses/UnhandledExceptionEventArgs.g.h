// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __UnhandledExceptionEventArgs_GUID "09a587f5-1500-4d9f-8a68-772c490dc433"

namespace DirectUI
{
    class UnhandledExceptionEventArgs;

    class __declspec(novtable) __declspec(uuid(__UnhandledExceptionEventArgs_GUID)) UnhandledExceptionEventArgs :
        public ABI::Microsoft::UI::Xaml::IUnhandledExceptionEventArgs,
        public DirectUI::EventArgs
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.UnhandledExceptionEventArgs");

        BEGIN_INTERFACE_MAP(UnhandledExceptionEventArgs, DirectUI::EventArgs)
            INTERFACE_ENTRY(UnhandledExceptionEventArgs, ABI::Microsoft::UI::Xaml::IUnhandledExceptionEventArgs)
        END_INTERFACE_MAP(UnhandledExceptionEventArgs, DirectUI::EventArgs)

    public:
        UnhandledExceptionEventArgs();
        ~UnhandledExceptionEventArgs() override;

        // Properties.
        IFACEMETHOD(get_Exception)(_Out_ HRESULT* pValue) override;
        _Check_return_ HRESULT put_Exception(_In_ HRESULT value);
        IFACEMETHOD(get_Message)(_Out_ HSTRING* pValue) override;
        _Check_return_ HRESULT put_Message(_In_opt_ HSTRING value);
        IFACEMETHOD(get_Handled)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_Handled)(_In_ BOOLEAN value) override;

        // Methods.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
        HRESULT m_exception;
        Microsoft::WRL::Wrappers::HString m_message;
        BOOLEAN m_handled;
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) UnhandledExceptionEventArgsFactory:
       public ctl::AbstractActivationFactory
    {

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
