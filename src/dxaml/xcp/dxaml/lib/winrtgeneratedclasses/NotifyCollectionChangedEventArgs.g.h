// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __NotifyCollectionChangedEventArgs_GUID "8daf9e4f-2d86-498d-a56f-5379ffe47b54"

namespace DirectUI
{
    class NotifyCollectionChangedEventArgs;

    class __declspec(novtable) __declspec(uuid(__NotifyCollectionChangedEventArgs_GUID)) NotifyCollectionChangedEventArgs:
        public ctl::WeakReferenceSource
        , public ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgs
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs");

        BEGIN_INTERFACE_MAP(NotifyCollectionChangedEventArgs, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(NotifyCollectionChangedEventArgs, ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgs)
        END_INTERFACE_MAP(NotifyCollectionChangedEventArgs, ctl::WeakReferenceSource)

    public:
        NotifyCollectionChangedEventArgs();
        ~NotifyCollectionChangedEventArgs() override;

        // Event source typedefs.


        // Properties.
        IFACEMETHOD(get_Action)(_Out_ ABI::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction* pValue) override;
        _Check_return_ HRESULT put_Action(_In_ ABI::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction value);
        IFACEMETHOD(get_NewItems)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector** ppValue) override;
        _Check_return_ HRESULT put_NewItems(_In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pValue);
        IFACEMETHOD(get_NewStartingIndex)(_Out_ INT* pValue) override;
        _Check_return_ HRESULT put_NewStartingIndex(_In_ INT value);
        IFACEMETHOD(get_OldItems)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector** ppValue) override;
        _Check_return_ HRESULT put_OldItems(_In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pValue);
        IFACEMETHOD(get_OldStartingIndex)(_Out_ INT* pValue) override;
        _Check_return_ HRESULT put_OldStartingIndex(_In_ INT value);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
        ABI::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction m_action;
        TrackerPtr<ABI::Microsoft::UI::Xaml::Interop::IBindableVector> m_pNewItems;
        INT m_newStartingIndex;
        TrackerPtr<ABI::Microsoft::UI::Xaml::Interop::IBindableVector> m_pOldItems;
        INT m_oldStartingIndex;
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) NotifyCollectionChangedEventArgsFactory:
       public ctl::AggregableActivationFactory<DirectUI::NotifyCollectionChangedEventArgs>
        , public ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgsFactory
    {
        BEGIN_INTERFACE_MAP(NotifyCollectionChangedEventArgsFactory, ctl::AggregableActivationFactory<DirectUI::NotifyCollectionChangedEventArgs>)
            INTERFACE_ENTRY(NotifyCollectionChangedEventArgsFactory, ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgsFactory)
        END_INTERFACE_MAP(NotifyCollectionChangedEventArgsFactory, ctl::AggregableActivationFactory<DirectUI::NotifyCollectionChangedEventArgs>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithAllParameters)(_In_ ABI::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction action, _In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pNewItems, _In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pOldItems, _In_ INT newIndex, _In_ INT oldIndex, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgs** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:
        _Check_return_ HRESULT CreateInstanceWithAllParametersImpl(_In_ ABI::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction action, _In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pNewItems, _In_opt_ ABI::Microsoft::UI::Xaml::Interop::IBindableVector* pOldItems, _In_ INT newIndex, _In_ INT oldIndex, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Interop::INotifyCollectionChangedEventArgs** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
