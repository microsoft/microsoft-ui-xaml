// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "KeyboardAcceleratorInvokedEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::KeyboardAcceleratorInvokedEventArgs::KeyboardAcceleratorInvokedEventArgs(): m_handled()
{
}

DirectUI::KeyboardAcceleratorInvokedEventArgs::~KeyboardAcceleratorInvokedEventArgs()
{
}

HRESULT DirectUI::KeyboardAcceleratorInvokedEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::KeyboardAcceleratorInvokedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::KeyboardAcceleratorInvokedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::KeyboardAcceleratorInvokedEventArgs::get_Handled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_handled, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::KeyboardAcceleratorInvokedEventArgs::put_Handled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_handled));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::KeyboardAcceleratorInvokedEventArgs::get_Element(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pElement.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::KeyboardAcceleratorInvokedEventArgs::put_Element(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pElement, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::KeyboardAcceleratorInvokedEventArgs::get_KeyboardAccelerator(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAccelerator** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pKeyboardAccelerator.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::KeyboardAcceleratorInvokedEventArgs::put_KeyboardAccelerator(_In_opt_ ABI::Microsoft::UI::Xaml::Input::IKeyboardAccelerator* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pKeyboardAccelerator, pValue);
Cleanup:
    RRETURN(hr);
}

// Methods.


namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateKeyboardAcceleratorInvokedEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::KeyboardAcceleratorInvokedEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_KeyboardAcceleratorInvokedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
