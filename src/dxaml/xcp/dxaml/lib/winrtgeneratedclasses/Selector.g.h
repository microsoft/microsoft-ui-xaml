// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ItemsControl.g.h"
#include "ISupportInitialize.g.h"

#define __Selector_GUID "ea21182d-8ec7-468c-998f-2cd20f52f288"

namespace DirectUI
{
    class Selector;

    class __declspec(novtable) SelectorGenerated:
        public DirectUI::ItemsControl
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelector
        , public DirectUI::ISupportInitialize
    {
        friend class DirectUI::Selector;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.Selector");

        BEGIN_INTERFACE_MAP(SelectorGenerated, DirectUI::ItemsControl)
            INTERFACE_ENTRY(SelectorGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelector)
            INTERFACE_ENTRY(SelectorGenerated, DirectUI::ISupportInitialize)
        END_INTERFACE_MAP(SelectorGenerated, DirectUI::ItemsControl)

    public:
        SelectorGenerated();
        ~SelectorGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs> SelectionChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Selector;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Selector;
        }

        // Properties.
        _Check_return_ HRESULT get_IsSelectionActive(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT put_IsSelectionActive(_In_ BOOLEAN value);
        IFACEMETHOD(get_IsSynchronizedWithCurrentItem)(_Out_ ABI::Windows::Foundation::IReference<bool>** ppValue) override;
        IFACEMETHOD(put_IsSynchronizedWithCurrentItem)(_In_ ABI::Windows::Foundation::IReference<bool>* pValue) override;
        IFACEMETHOD(get_SelectedIndex)(_Out_ INT* pValue) override;
        IFACEMETHOD(put_SelectedIndex)(_In_ INT value) override;
        IFACEMETHOD(get_SelectedItem)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_SelectedItem)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_SelectedValue)(_Outptr_result_maybenull_ IInspectable** ppValue) override;
        IFACEMETHOD(put_SelectedValue)(_In_opt_ IInspectable* pValue) override;
        IFACEMETHOD(get_SelectedValuePath)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_SelectedValuePath)(_In_opt_ HSTRING value) override;

        // Events.
        _Check_return_ HRESULT GetSelectionChangedEventSourceNoRef(_Outptr_ SelectionChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_SelectionChanged)(_In_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_SelectionChanged)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(BeginInit)() override;
        IFACEMETHOD(EndInit)(_In_opt_ DirectUI::XamlServiceProviderContext* pContext) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "Selector_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SelectorFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics
    {
        BEGIN_INTERFACE_MAP(SelectorFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(SelectorFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory)
            INTERFACE_ENTRY(SelectorFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics)
        END_INTERFACE_MAP(SelectorFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_SelectedIndexProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_SelectedItemProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_SelectedValueProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_SelectedValuePathProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsSynchronizedWithCurrentItemProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        

        // Attached properties.

        // Static methods.
        IFACEMETHOD(GetIsSelectionActive)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pReturnValue) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Selector;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT GetIsSelectionActiveImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ BOOLEAN* pReturnValue); 
    };
}
