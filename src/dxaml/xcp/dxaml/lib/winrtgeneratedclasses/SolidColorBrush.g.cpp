// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "SolidColorBrush.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::SolidColorBrush::SolidColorBrush()
{
}

DirectUI::SolidColorBrush::~SolidColorBrush()
{
}

HRESULT DirectUI::SolidColorBrush::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::SolidColorBrush)))
    {
        *ppObject = static_cast<DirectUI::SolidColorBrush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush*>(this);
    }
    else
    {
        RRETURN(DirectUI::Brush::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::SolidColorBrush::get_Color(_Out_ ABI::Windows::UI::Color* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_Color, pValue));
}
IFACEMETHODIMP DirectUI::SolidColorBrush::put_Color(_In_ ABI::Windows::UI::Color value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_Color, value));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::get_ColorAAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorAAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::put_ColorAAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorAAnimation, pValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::get_ColorAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::put_ColorAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorAnimation, pValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::get_ColorBAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorBAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::put_ColorBAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorBAnimation, pValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::get_ColorGAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorGAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::put_ColorGAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorGAnimation, pValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::get_ColorRAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorRAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::SolidColorBrush::put_ColorRAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SolidColorBrush_ColorRAnimation, pValue));
}

// Events.

// Methods.

HRESULT DirectUI::SolidColorBrushFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ISolidColorBrushFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ISolidColorBrushFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ISolidColorBrushStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ISolidColorBrushStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::SolidColorBrushFactory::CreateInstanceWithColor(_In_ ABI::Windows::UI::Color color, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithColorImpl(color, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::SolidColorBrushFactory::get_ColorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::SolidColorBrush_Color, ppValue));
}






// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_SolidColorBrush()
    {
        RRETURN(ctl::ActivationFactoryCreator<SolidColorBrushFactory>::CreateActivationFactory());
    }
}
