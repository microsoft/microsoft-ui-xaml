// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "PointerAnimationUsingKeyFrames.g.h"
#include "PointerKeyFrameCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::PointerAnimationUsingKeyFrames::PointerAnimationUsingKeyFrames()
{
}

DirectUI::PointerAnimationUsingKeyFrames::~PointerAnimationUsingKeyFrames()
{
}

HRESULT DirectUI::PointerAnimationUsingKeyFrames::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::PointerAnimationUsingKeyFrames)))
    {
        *ppObject = static_cast<DirectUI::PointerAnimationUsingKeyFrames*>(this);
    }
    else
    {
        RRETURN(DirectUI::Timeline::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::PointerAnimationUsingKeyFrames::get_KeyFrames(_Outptr_result_maybenull_ DirectUI::PointerKeyFrameCollection** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PointerAnimationUsingKeyFrames_KeyFrames, ppValue));
}
_Check_return_ HRESULT DirectUI::PointerAnimationUsingKeyFrames::get_PointerSource(_Out_ DirectUI::PointerDirection* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PointerAnimationUsingKeyFrames_PointerSource, pValue));
}
_Check_return_ HRESULT DirectUI::PointerAnimationUsingKeyFrames::put_PointerSource(_In_ DirectUI::PointerDirection value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PointerAnimationUsingKeyFrames_PointerSource, value));
}

// Events.

// Methods.
_Check_return_ HRESULT DirectUI::PointerAnimationUsingKeyFrames::SetRelativeToObject(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pRelativeToObject)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "PointerAnimationUsingKeyFrames_SetRelativeToObject", 0);
    }

    CDependencyObject* pRelativeToObjectCore = static_cast<CDependencyObject*>(pRelativeToObject ? static_cast<DirectUI::DependencyObject*>(pRelativeToObject)->GetHandle() : nullptr);

    ARG_NOTNULL(pRelativeToObject, "relativeToObject");

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CPointerAnimationUsingKeyFrames*>(GetHandle())->SetRelativeToObject(pRelativeToObjectCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "PointerAnimationUsingKeyFrames_SetRelativeToObject", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PointerAnimationUsingKeyFrames::SetRelativeToObjectName(_In_ HSTRING relativeToObjectName)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "PointerAnimationUsingKeyFrames_SetRelativeToObjectName", 0);
    }

    xephemeral_string_ptr relativeToObjectNameCore(relativeToObjectName);

    ARG_NOTNULL(relativeToObjectName, "relativeToObjectName");

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CPointerAnimationUsingKeyFrames*>(GetHandle())->SetRelativeToObjectName(relativeToObjectNameCore));


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "PointerAnimationUsingKeyFrames_SetRelativeToObjectName", hr);
    }
    RRETURN(hr);
}


namespace DirectUI
{
}
