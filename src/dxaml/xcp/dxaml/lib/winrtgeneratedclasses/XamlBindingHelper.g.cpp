// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "XamlBindingHelper.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"


HRESULT DirectUI::XamlBindingHelperFactoryGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IXamlBindingHelperStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IXamlBindingHelperStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT DirectUI::XamlBindingHelperFactoryGenerated::GetDataTemplateComponentStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Markup::IDataTemplateComponent** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::XamlBindingHelper_DataTemplateComponent, ppValue));
}

_Check_return_ HRESULT DirectUI::XamlBindingHelperFactoryGenerated::SetDataTemplateComponentStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Markup::IDataTemplateComponent* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::DependencyObject*>(pElement), KnownPropertyIndex::XamlBindingHelper_DataTemplateComponent, pValue));
}


IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::get_DataTemplateComponentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::XamlBindingHelper_DataTemplateComponent, ppValue));
}


IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::GetDataTemplateComponent(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Markup::IDataTemplateComponent** ppValue)
{
    RRETURN(GetDataTemplateComponentStatic(pElement, ppValue));
}

IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetDataTemplateComponent(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Markup::IDataTemplateComponent* pValue)
{
    RRETURN(SetDataTemplateComponentStatic(pElement, pValue));
}

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SuspendRendering(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pTarget)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SuspendRendering", 0);
    }
    ARG_NOTNULL(pTarget, "target");
    IFC(CheckActivationAllowed());
    IFC(SuspendRenderingImpl(pTarget));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SuspendRendering", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::ResumeRendering(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pTarget)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_ResumeRendering", 0);
    }
    ARG_NOTNULL(pTarget, "target");
    IFC(CheckActivationAllowed());
    IFC(ResumeRenderingImpl(pTarget));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_ResumeRendering", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::ConvertValue(_In_ ABI::Windows::UI::Xaml::Interop::TypeName type, _In_ IInspectable* pValue, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_ConvertValue", 0);
    }
    ARG_NOTNULL(pValue, "value");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(ConvertValueImpl(type, pValue, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_ConvertValue", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromString(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ HSTRING value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromString", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    ARG_NOTNULL(value, "value");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromStringImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromString", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromBoolean(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromBoolean", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromBooleanImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromBoolean", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromChar16(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ WCHAR value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromChar16", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromChar16Impl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromChar16", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromDateTime(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::DateTime value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromDateTime", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromDateTimeImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromDateTime", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromDouble(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromDouble", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromDoubleImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromDouble", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromInt32(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ INT value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromInt32", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromInt32Impl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromInt32", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromUInt32(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ UINT value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromUInt32", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromUInt32Impl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromUInt32", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromInt64(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ INT64 value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromInt64", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromInt64Impl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromInt64", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromUInt64(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ UINT64 value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromUInt64", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromUInt64Impl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromUInt64", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromSingle(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ FLOAT value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromSingle", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromSingleImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromSingle", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromPoint(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::Point value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromPoint", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromPointImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromPoint", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromRect(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::Rect value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromRect", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromRectImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromRect", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromSize(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::Size value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromSize", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromSizeImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromSize", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromTimeSpan(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::TimeSpan value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromTimeSpan", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromTimeSpanImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromTimeSpan", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromByte(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ BYTE value)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromByte", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromByteImpl(pDependencyObject, pPropertyToSet, value));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromByte", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromUri(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ ABI::Windows::Foundation::IUriRuntimeClass* pValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromUri", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    ARG_NOTNULL(pValue, "value");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromUriImpl(pDependencyObject, pPropertyToSet, pValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromUri", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlBindingHelperFactoryGenerated::SetPropertyFromObject(_In_ IInspectable* pDependencyObject, _In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pPropertyToSet, _In_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlBindingHelper_SetPropertyFromObject", 0);
    }
    ARG_NOTNULL(pDependencyObject, "dependencyObject");
    ARG_NOTNULL(pPropertyToSet, "propertyToSet");
    ARG_NOTNULL(pValue, "value");
    IFC(CheckActivationAllowed());
    IFC(SetPropertyFromObjectImpl(pDependencyObject, pPropertyToSet, pValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlBindingHelper_SetPropertyFromObject", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_XamlBindingHelper()
    {
        RRETURN(ctl::ActivationFactoryCreator<XamlBindingHelperFactory>::CreateActivationFactory());
    }
}
