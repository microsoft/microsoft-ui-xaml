// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "RangeBase.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::RangeBaseGenerated::RangeBaseGenerated()
{
}

DirectUI::RangeBaseGenerated::~RangeBaseGenerated()
{
}

HRESULT DirectUI::RangeBaseGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::RangeBase)))
    {
        *ppObject = static_cast<DirectUI::RangeBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::RangeBaseGenerated::get_LargeChange(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RangeBase_LargeChange, pValue));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::put_LargeChange(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RangeBase_LargeChange, value));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::get_Maximum(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RangeBase_Maximum, pValue));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::put_Maximum(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RangeBase_Maximum, value));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::get_Minimum(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RangeBase_Minimum, pValue));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::put_Minimum(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RangeBase_Minimum, value));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::get_SmallChange(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RangeBase_SmallChange, pValue));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::put_SmallChange(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RangeBase_SmallChange, value));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::get_Value(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RangeBase_Value, pValue));
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::put_Value(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RangeBase_Value, value));
}

// Events.
_Check_return_ HRESULT DirectUI::RangeBaseGenerated::GetValueChangedEventSourceNoRef(_Outptr_ ValueChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RangeBase_ValueChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ValueChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RangeBase_ValueChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::RangeBase_ValueChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RangeBaseGenerated::add_ValueChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ValueChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValueChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RangeBaseGenerated::remove_ValueChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ValueChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValueChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RangeBase_ValueChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::RangeBaseGenerated::OnMaximumChanged(_In_ DOUBLE oldMaximum, _In_ DOUBLE newMaximum)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "RangeBase_OnMaximumChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<RangeBase*>(this)->OnMaximumChangedImpl(oldMaximum, newMaximum));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "RangeBase_OnMaximumChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::RangeBaseGenerated::OnMaximumChangedProtected(_In_ DOUBLE oldMaximum, _In_ DOUBLE newMaximum)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnMaximumChanged(oldMaximum, newMaximum));
    }
    else
    {
        IFC(OnMaximumChanged(oldMaximum, newMaximum));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::OnMinimumChanged(_In_ DOUBLE oldMinimum, _In_ DOUBLE newMinimum)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "RangeBase_OnMinimumChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<RangeBase*>(this)->OnMinimumChangedImpl(oldMinimum, newMinimum));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "RangeBase_OnMinimumChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::RangeBaseGenerated::OnMinimumChangedProtected(_In_ DOUBLE oldMinimum, _In_ DOUBLE newMinimum)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnMinimumChanged(oldMinimum, newMinimum));
    }
    else
    {
        IFC(OnMinimumChanged(oldMinimum, newMinimum));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RangeBaseGenerated::OnValueChanged(_In_ DOUBLE oldValue, _In_ DOUBLE newValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "RangeBase_OnValueChanged", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<RangeBase*>(this)->OnValueChangedImpl(oldValue, newValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "RangeBase_OnValueChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::RangeBaseGenerated::OnValueChangedProtected(_In_ DOUBLE oldValue, _In_ DOUBLE newValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnValueChanged(oldValue, newValue));
    }
    else
    {
        IFC(OnValueChanged(oldValue, newValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::RangeBaseGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::RangeBase_ValueChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ValueChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetValueChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::RangeBaseGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::RangeBase_ValueChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ValueChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetValueChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::RangeBaseFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::RangeBaseFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::RangeBaseFactory::get_MinimumProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RangeBase_Minimum, ppValue));
}
IFACEMETHODIMP DirectUI::RangeBaseFactory::get_MaximumProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RangeBase_Maximum, ppValue));
}
IFACEMETHODIMP DirectUI::RangeBaseFactory::get_SmallChangeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RangeBase_SmallChange, ppValue));
}
IFACEMETHODIMP DirectUI::RangeBaseFactory::get_LargeChangeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RangeBase_LargeChange, ppValue));
}
IFACEMETHODIMP DirectUI::RangeBaseFactory::get_ValueProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RangeBase_Value, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_RangeBase()
    {
        RRETURN(ctl::ActivationFactoryCreator<RangeBaseFactory>::CreateActivationFactory());
    }
}
