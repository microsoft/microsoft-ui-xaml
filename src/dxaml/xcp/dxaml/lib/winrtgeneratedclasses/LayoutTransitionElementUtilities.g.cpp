// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "LayoutTransitionElementUtilities.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::LayoutTransitionElementUtilities::LayoutTransitionElementUtilities()
{
}

DirectUI::LayoutTransitionElementUtilities::~LayoutTransitionElementUtilities()
{
}

HRESULT DirectUI::LayoutTransitionElementUtilities::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::LayoutTransitionElementUtilities)))
    {
        *ppObject = static_cast<DirectUI::LayoutTransitionElementUtilities*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.

HRESULT DirectUI::LayoutTransitionElementUtilitiesFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Internal::ILayoutTransitionElementUtilitiesStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Internal::ILayoutTransitionElementUtilitiesStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::LayoutTransitionElementUtilitiesFactory::CreateLayoutTransitionElement(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LayoutTransitionElementUtilities_CreateLayoutTransitionElement", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(CreateLayoutTransitionElementImpl(pSource, pParent, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LayoutTransitionElementUtilities_CreateLayoutTransitionElement", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LayoutTransitionElementUtilitiesFactory::DestroyLayoutTransitionElement(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pLayoutTransitionElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LayoutTransitionElementUtilities_DestroyLayoutTransitionElement", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pLayoutTransitionElement, "layoutTransitionElement");
    IFC(CheckActivationAllowed());
    IFC(DestroyLayoutTransitionElementImpl(pSource, pParent, pLayoutTransitionElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LayoutTransitionElementUtilities_DestroyLayoutTransitionElement", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_LayoutTransitionElementUtilities()
    {
        RRETURN(ctl::ActivationFactoryCreator<LayoutTransitionElementUtilitiesFactory>::CreateActivationFactory());
    }
}
