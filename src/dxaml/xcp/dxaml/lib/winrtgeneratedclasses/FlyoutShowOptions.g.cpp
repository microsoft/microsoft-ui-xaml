// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FlyoutShowOptions.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FlyoutShowOptionsGenerated::FlyoutShowOptionsGenerated(): m_showMode(), m_placement()
{
}

DirectUI::FlyoutShowOptionsGenerated::~FlyoutShowOptionsGenerated()
{
}

HRESULT DirectUI::FlyoutShowOptionsGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FlyoutShowOptions)))
    {
        *ppObject = static_cast<DirectUI::FlyoutShowOptions*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::get_ExclusionRect(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_exclusionRect.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::put_ExclusionRect(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_exclusionRect, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::get_Placement(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_placement, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::put_Placement(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_placement));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::get_Position(_Out_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Point>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_position.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::put_Position(_In_ ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Point>* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_position, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::get_ShowMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_showMode, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FlyoutShowOptionsGenerated::put_ShowMode(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_showMode));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.

HRESULT DirectUI::FlyoutShowOptionsFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AggregableActivationFactory<DirectUI::FlyoutShowOptions>::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::FlyoutShowOptionsFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions** ppInstance)
{


    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithAggregableActivationFactory<DirectUI::FlyoutShowOptions,ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions>(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FlyoutShowOptions()
    {
        RRETURN(ctl::ActivationFactoryCreator<FlyoutShowOptionsFactory>::CreateActivationFactory());
    }
}
