// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "SplitViewTemplateSettings.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::SplitViewTemplateSettings::SplitViewTemplateSettings()
{
}

DirectUI::SplitViewTemplateSettings::~SplitViewTemplateSettings()
{
}

HRESULT DirectUI::SplitViewTemplateSettings::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::SplitViewTemplateSettings)))
    {
        *ppObject = static_cast<DirectUI::SplitViewTemplateSettings*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_CompactPaneGridLength(_Out_ ABI::Microsoft::UI::Xaml::GridLength* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_CompactPaneGridLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_CompactPaneGridLength(_In_ ABI::Microsoft::UI::Xaml::GridLength value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_CompactPaneGridLength, value));
}
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_NegativeOpenPaneLength(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_NegativeOpenPaneLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_NegativeOpenPaneLength(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_NegativeOpenPaneLength, value));
}
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_NegativeOpenPaneLengthMinusCompactLength(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_NegativeOpenPaneLengthMinusCompactLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_NegativeOpenPaneLengthMinusCompactLength(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_NegativeOpenPaneLengthMinusCompactLength, value));
}
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_OpenPaneGridLength(_Out_ ABI::Microsoft::UI::Xaml::GridLength* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneGridLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_OpenPaneGridLength(_In_ ABI::Microsoft::UI::Xaml::GridLength value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneGridLength, value));
}
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_OpenPaneLength(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_OpenPaneLength(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneLength, value));
}
IFACEMETHODIMP DirectUI::SplitViewTemplateSettings::get_OpenPaneLengthMinusCompactLength(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneLengthMinusCompactLength, pValue));
}
_Check_return_ HRESULT DirectUI::SplitViewTemplateSettings::put_OpenPaneLengthMinusCompactLength(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::SplitViewTemplateSettings_OpenPaneLengthMinusCompactLength, value));
}

// Events.

// Methods.

// Factory methods.

// Dependency properties.







// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_SplitViewTemplateSettings()
    {
        RRETURN(ctl::ActivationFactoryCreator<SplitViewTemplateSettingsFactory>::CreateActivationFactory());
    }
}
