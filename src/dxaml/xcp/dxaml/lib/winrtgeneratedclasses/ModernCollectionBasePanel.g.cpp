// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ModernCollectionBasePanel.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ModernCollectionBasePanelGenerated::ModernCollectionBasePanelGenerated(): m_firstCacheIndexBase(), m_firstVisibleIndexBase(), m_lastVisibleIndexBase(), m_lastCacheIndexBase(), m_firstCacheGroupIndexBase(), m_firstVisibleGroupIndexBase(), m_lastVisibleGroupIndexBase(), m_lastCacheGroupIndexBase(), m_isRegisteredForCallbacks()
{
}

DirectUI::ModernCollectionBasePanelGenerated::~ModernCollectionBasePanelGenerated()
{
}

HRESULT DirectUI::ModernCollectionBasePanelGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ModernCollectionBasePanel)))
    {
        *ppObject = static_cast<DirectUI::ModernCollectionBasePanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInsertionPanel)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInsertionPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IItemContainerMapping)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IItemContainerMapping*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IChildTransitionContextProvider)))
    {
        *ppObject = static_cast<DirectUI::IChildTransitionContextProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ICustomGeneratorItemsHost)))
    {
        *ppObject = static_cast<DirectUI::ICustomGeneratorItemsHost*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IGroupHeaderMapping)))
    {
        *ppObject = static_cast<DirectUI::IGroupHeaderMapping*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IItemContainerGenerator2)))
    {
        *ppObject = static_cast<DirectUI::IItemContainerGenerator2*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IItemLookupPanel)))
    {
        *ppObject = static_cast<DirectUI::IItemLookupPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IKeyboardHeaderNavigationPanel)))
    {
        *ppObject = static_cast<DirectUI::IKeyboardHeaderNavigationPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IKeyboardNavigationPanel)))
    {
        *ppObject = static_cast<DirectUI::IKeyboardNavigationPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IPaginatedPanel)))
    {
        *ppObject = static_cast<DirectUI::IPaginatedPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ITreeBuilder)))
    {
        *ppObject = static_cast<DirectUI::ITreeBuilder*>(this);
    }
    else
    {
        RRETURN(DirectUI::Panel::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::get_AreHorizontalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ModernCollectionBasePanel*>(this)->get_AreHorizontalSnapPointsRegularImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_AreStickyGroupHeadersEnabledBase(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ModernCollectionBasePanel_AreStickyGroupHeadersEnabledBase, pValue));
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_AreStickyGroupHeadersEnabledBase(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ModernCollectionBasePanel_AreStickyGroupHeadersEnabledBase, value));
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::get_AreVerticalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ModernCollectionBasePanel*>(this)->get_AreVerticalSnapPointsRegularImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_FirstCacheGroupIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_firstCacheGroupIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_FirstCacheGroupIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_firstCacheGroupIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_FirstCacheIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_firstCacheIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_FirstCacheIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_firstCacheIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_FirstVisibleGroupIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_firstVisibleGroupIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_FirstVisibleGroupIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_firstVisibleGroupIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_FirstVisibleIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_firstVisibleIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_FirstVisibleIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_firstVisibleIndexBase));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::get_IsRegisteredForCallbacks(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_isRegisteredForCallbacks, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::put_IsRegisteredForCallbacks(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_isRegisteredForCallbacks));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_LastCacheGroupIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_lastCacheGroupIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_LastCacheGroupIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_lastCacheGroupIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_LastCacheIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_lastCacheIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_LastCacheIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_lastCacheIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_LastVisibleGroupIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_lastVisibleGroupIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_LastVisibleGroupIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_lastVisibleGroupIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_LastVisibleIndexBase(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_lastVisibleIndexBase, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_LastVisibleIndexBase(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_lastVisibleIndexBase));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::get_PanningDirectionBase(_Out_ ABI::Microsoft::UI::Xaml::Controls::PanelScrollingDirection* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<ModernCollectionBasePanel*>(this)->get_PanningDirectionBaseImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::put_PanningDirectionBase(_In_ ABI::Microsoft::UI::Xaml::Controls::PanelScrollingDirection value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->put_PanningDirectionBaseImpl(value));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::GetHorizontalSnapPointsChangedEventSourceNoRef(_Outptr_ HorizontalSnapPointsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HorizontalSnapPointsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::add_HorizontalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::remove_HorizontalSnapPointsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::GetVerticalSnapPointsChangedEventSourceNoRef(_Outptr_ VerticalSnapPointsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<VerticalSnapPointsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::add_VerticalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::remove_VerticalSnapPointsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::GetVisibleIndicesUpdatedEventSourceNoRef(_Outptr_ VisibleIndicesUpdatedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ModernCollectionBasePanel_VisibleIndicesUpdated, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<VisibleIndicesUpdatedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ModernCollectionBasePanel_VisibleIndicesUpdated, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ModernCollectionBasePanel_VisibleIndicesUpdated, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::add_VisibleIndicesUpdated(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    VisibleIndicesUpdatedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetVisibleIndicesUpdatedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::remove_VisibleIndicesUpdated(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    VisibleIndicesUpdatedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetVisibleIndicesUpdatedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ModernCollectionBasePanel_VisibleIndicesUpdated));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::BuildTree(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_BuildTree", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->BuildTreeImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_BuildTree", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::ContainerFromIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ContainerFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->ContainerFromIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ContainerFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::ContainerFromItem(_In_opt_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ContainerFromItem", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->ContainerFromItemImpl(pItem, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ContainerFromItem", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::DisconnectItemsHost()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_DisconnectItemsHost", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->DisconnectItemsHostImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_DisconnectItemsHost", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::FindRecyclingCandidate(_In_ INT index, _Out_ BOOLEAN* pHasMatchingCandidate)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_FindRecyclingCandidate", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->FindRecyclingCandidateImpl(index, pHasMatchingCandidate));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_FindRecyclingCandidate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GenerateContainerAtIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GenerateContainerAtIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GenerateContainerAtIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GenerateContainerAtIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GenerateHeaderAtGroupIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GenerateHeaderAtGroupIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GenerateHeaderAtGroupIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GenerateHeaderAtGroupIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetContainerRecycleQueueEmpty(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetContainerRecycleQueueEmpty", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetContainerRecycleQueueEmptyImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetContainerRecycleQueueEmpty", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetContainersForIncrementalVisualization(_Outptr_ DirectUI::IContainerContentChangingIterator** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetContainersForIncrementalVisualization", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetContainersForIncrementalVisualizationImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetContainersForIncrementalVisualization", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetGroupHeaderMapping(_Outptr_ DirectUI::IGroupHeaderMapping** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetGroupHeaderMapping", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetGroupHeaderMappingImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetGroupHeaderMapping", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetHeaderRecycleQueueEmpty(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetHeaderRecycleQueueEmpty", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetHeaderRecycleQueueEmptyImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetHeaderRecycleQueueEmpty", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetInsertionIndexes(_In_ ABI::Windows::Foundation::Point position, _Out_ INT* pFirst, _Out_ INT* pSecond)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetInsertionIndexes", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetInsertionIndexesImpl(position, pFirst, pSecond));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetInsertionIndexes", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetIrregularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetIrregularSnapPoints", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetIrregularSnapPointsImpl(orientation, alignment, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetIrregularSnapPoints", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetItemContainerMapping(_Outptr_ ABI::Microsoft::UI::Xaml::Controls::IItemContainerMapping** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetItemContainerMapping", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetItemContainerMappingImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetItemContainerMapping", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetQueueLength(_Out_ UINT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetQueueLength", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetQueueLengthImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetQueueLength", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GetRegularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetRegularSnapPoints", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GetRegularSnapPointsImpl(orientation, alignment, pOffset, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GetRegularSnapPoints", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GroupFromHeader(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeader, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GroupFromHeader", 0);
    }
    ARG_NOTNULL(pHeader, "header");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GroupFromHeaderImpl(pHeader, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GroupFromHeader", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::GroupHeaderContainerFromItemContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pItemContainer, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GroupHeaderContainerFromItemContainer", 0);
    }
    ARG_NOTNULL(pItemContainer, "itemContainer");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->GroupHeaderContainerFromItemContainerImpl(pItemContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_GroupHeaderContainerFromItemContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::HeaderFromGroup(_In_ IInspectable* pGroup, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_HeaderFromGroup", 0);
    }
    ARG_NOTNULL(pGroup, "group");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->HeaderFromGroupImpl(pGroup, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_HeaderFromGroup", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::HeaderFromIndex(_In_ INT index, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_HeaderFromIndex", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->HeaderFromIndexImpl(index, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_HeaderFromIndex", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::IndexFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IndexFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->IndexFromContainerImpl(pContainer, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IndexFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::IndexFromHeader(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pHeader, _In_ BOOLEAN excludeHiddenEmptyGroups, _Out_ INT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IndexFromHeader", 0);
    }
    ARG_NOTNULL(pHeader, "header");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->IndexFromHeaderImpl(pHeader, excludeHiddenEmptyGroups, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IndexFromHeader", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::IsBuildTreeSuspended(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IsBuildTreeSuspended", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->IsBuildTreeSuspendedImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_IsBuildTreeSuspended", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::ItemFromContainer(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ItemFromContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->ItemFromContainerImpl(pContainer, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ItemFromContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::NotifyOfItemsChanged(_In_ ABI::Windows::Foundation::Collections::IVectorChangedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsChanged", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->NotifyOfItemsChangedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsChanged", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::NotifyOfItemsChanging(_In_ ABI::Windows::Foundation::Collections::IVectorChangedEventArgs* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsChanging", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->NotifyOfItemsChangingImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsChanging", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::NotifyOfItemsReordered(_In_ UINT count)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsReordered", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->NotifyOfItemsReorderedImpl(count));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_NotifyOfItemsReordered", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::RecycleAllContainers()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleAllContainers", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RecycleAllContainersImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleAllContainers", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::RecycleAllHeaders()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleAllHeaders", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RecycleAllHeadersImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleAllHeaders", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::RecycleContainer(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pContainer)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RecycleContainerImpl(pContainer));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleContainer", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::RecycleHeader(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pHeader)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleHeader", 0);
    }
    ARG_NOTNULL(pHeader, "header");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RecycleHeaderImpl(pHeader));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RecycleHeader", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::Refresh()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_Refresh", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RefreshImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_Refresh", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::RegisterItemsHost(_In_ DirectUI::IGeneratorHost* pHost)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RegisterItemsHost", 0);
    }
    ARG_NOTNULL(pHost, "host");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->RegisterItemsHostImpl(pHost));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_RegisterItemsHost", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::ShutDownDeferredWork()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ShutDownDeferredWork", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->ShutDownDeferredWorkImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_ShutDownDeferredWork", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ModernCollectionBasePanelGenerated::TryRecycleContainer(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pContainer, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_TryRecycleContainer", 0);
    }
    ARG_NOTNULL(pContainer, "container");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ModernCollectionBasePanel*>(this)->TryRecycleContainerImpl(pContainer, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ModernCollectionBasePanel_TryRecycleContainer", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::PanelGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ModernCollectionBasePanelGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ModernCollectionBasePanel_HorizontalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ModernCollectionBasePanel_VerticalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::PanelGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}


namespace DirectUI
{
}
