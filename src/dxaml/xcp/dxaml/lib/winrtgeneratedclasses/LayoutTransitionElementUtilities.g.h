// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __LayoutTransitionElementUtilities_GUID "fd1cab1a-0f0d-4d69-864e-e5e0a98037cb"

namespace DirectUI
{
    class LayoutTransitionElementUtilities;
    class UIElement;

    class __declspec(novtable) __declspec(uuid(__LayoutTransitionElementUtilities_GUID)) LayoutTransitionElementUtilities:
        public ctl::WeakReferenceSource
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Internal.LayoutTransitionElementUtilities");


    public:
        LayoutTransitionElementUtilities();
        ~LayoutTransitionElementUtilities() override;

        // Event source typedefs.


        // Properties.

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) LayoutTransitionElementUtilitiesFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::Internal::ILayoutTransitionElementUtilitiesStatics
    {
        BEGIN_INTERFACE_MAP(LayoutTransitionElementUtilitiesFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(LayoutTransitionElementUtilitiesFactory, ABI::Microsoft::UI::Xaml::Internal::ILayoutTransitionElementUtilitiesStatics)
        END_INTERFACE_MAP(LayoutTransitionElementUtilitiesFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(CreateLayoutTransitionElement)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppResult) override;
        IFACEMETHOD(DestroyLayoutTransitionElement)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pLayoutTransitionElement) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;



    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT CreateLayoutTransitionElementImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppResult); 
         _Check_return_ HRESULT DestroyLayoutTransitionElementImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSource, _In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pParent, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pLayoutTransitionElement); 
    };
}
