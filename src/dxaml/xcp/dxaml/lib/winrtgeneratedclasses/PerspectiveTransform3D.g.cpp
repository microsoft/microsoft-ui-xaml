// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "PerspectiveTransform3D.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::PerspectiveTransform3D::PerspectiveTransform3D()
{
}

DirectUI::PerspectiveTransform3D::~PerspectiveTransform3D()
{
}

HRESULT DirectUI::PerspectiveTransform3D::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::PerspectiveTransform3D)))
    {
        *ppObject = static_cast<DirectUI::PerspectiveTransform3D*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Media3D::IPerspectiveTransform3D)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Media3D::IPerspectiveTransform3D*>(this);
    }
    else
    {
        RRETURN(DirectUI::Transform3D::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::get_Depth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_Depth, pValue));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::put_Depth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_Depth, value));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::get_OffsetX(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_OffsetX, pValue));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::put_OffsetX(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_OffsetX, value));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::get_OffsetY(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_OffsetY, pValue));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3D::put_OffsetY(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PerspectiveTransform3D_OffsetY, value));
}

// Events.

// Methods.

HRESULT DirectUI::PerspectiveTransform3DFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Media3D::IPerspectiveTransform3DStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Media3D::IPerspectiveTransform3DStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::PerspectiveTransform3DFactory::get_DepthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PerspectiveTransform3D_Depth, ppValue));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3DFactory::get_OffsetXProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PerspectiveTransform3D_OffsetX, ppValue));
}
IFACEMETHODIMP DirectUI::PerspectiveTransform3DFactory::get_OffsetYProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PerspectiveTransform3D_OffsetY, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_PerspectiveTransform3D()
    {
        RRETURN(ctl::ActivationFactoryCreator<PerspectiveTransform3DFactory>::CreateActivationFactory());
    }
}
