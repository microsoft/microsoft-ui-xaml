// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "ContentPresenter.g.h"
#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements) 
#define FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE override
#else
#define FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE
#endif
#define __CommandingContainer_GUID "be8b22e5-d70f-4b16-90c8-2e34e0edafa0"

namespace DirectUI
{
    class CommandingContainer;

    class __declspec(novtable) CommandingContainerGenerated:
        public DirectUI::ContentPresenter
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
        , public ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer
#endif
    {
        friend class DirectUI::CommandingContainer;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.CommandingContainer");

        BEGIN_INTERFACE_MAP(CommandingContainerGenerated, DirectUI::ContentPresenter)
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
            INTERFACE_ENTRY(CommandingContainerGenerated, ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(CommandingContainerGenerated, DirectUI::ContentPresenter)

    public:
        CommandingContainerGenerated();
        ~CommandingContainerGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>, ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer, ABI::Microsoft::UI::Xaml::Controls::ICommandingContextChangedEventArgs> ContextChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CommandingContainer;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::CommandingContainer;
        }

        // Properties.
        IFACEMETHOD(get_CommandingTarget)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;
        IFACEMETHOD(put_CommandingTarget)(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pValue) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;

        // Events.
        _Check_return_ HRESULT GetContextChangedEventSourceNoRef(_Outptr_ ContextChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_ContextChanged)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CommandingContainer*, ABI::Microsoft::UI::Xaml::Controls::CommandingContextChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;
        IFACEMETHOD(remove_ContextChanged)(_In_ EventRegistrationToken token) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "CommandingContainer_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) CommandingContainerFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
        , public ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerFactory
        , public ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerStatics
#endif
    {
        BEGIN_INTERFACE_MAP(CommandingContainerFactory, ctl::BetterAggregableCoreObjectActivationFactory)
#if WI_IS_FEATURE_PRESENT(Feature_CommandingImprovements)
            INTERFACE_ENTRY(CommandingContainerFactory, ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerFactory)
            INTERFACE_ENTRY(CommandingContainerFactory, ABI::Microsoft::UI::Xaml::Controls::ICommandingContainerStatics)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(CommandingContainerFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_CommandingTargetProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;

        // Attached properties.
        static _Check_return_ HRESULT GetCommandingContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppValue);
        static _Check_return_ HRESULT SetCommandingContainerStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer* pValue);
        IFACEMETHOD(get_CommandingContainerProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;
        IFACEMETHOD(GetCommandingContainer)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer** ppValue);
        IFACEMETHOD(SetCommandingContainer)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_opt_ ABI::Microsoft::UI::Xaml::Controls::ICommandingContainer* pValue);

        // Static methods.
        IFACEMETHOD(NotifyContextChanged)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pCommandTarget) FEATURE_COMMANDINGIMPROVEMENTS_OVERRIDE;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::CommandingContainer;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT NotifyContextChangedImpl(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pCommandTarget); 
    };
}
