// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __WindowsXamlManager_GUID "3b953d5c-2c9f-4e49-88a7-c030616de1f0"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
    };
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager2, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager2, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(add_XamlShutdownCompletedOnThread)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::WindowsXamlManager*, ABI::Microsoft::UI::Xaml::Hosting::XamlShutdownCompletedOnThreadEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override { return This()->add_XamlShutdownCompletedOnThread(pValue, pToken); }
        IFACEMETHOD(remove_XamlShutdownCompletedOnThread)(_In_ EventRegistrationToken token) override { return This()->remove_XamlShutdownCompletedOnThread(token); }
    };
}
#pragma endregion

namespace DirectUI
{
    class WindowsXamlManager;

    class __declspec(novtable) WindowsXamlManagerGenerated:
        public ctl::WeakReferenceSource
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager, WindowsXamlManagerGenerated >
        , public ABI::Windows::Foundation::IClosable
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager2, WindowsXamlManagerGenerated >
    {
        friend class DirectUI::WindowsXamlManager;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Hosting.WindowsXamlManager");

        BEGIN_INTERFACE_MAP(WindowsXamlManagerGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(WindowsXamlManagerGenerated, ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager)
            INTERFACE_ENTRY(WindowsXamlManagerGenerated, ABI::Windows::Foundation::IClosable)
            INTERFACE_ENTRY(WindowsXamlManagerGenerated, ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager2)
        END_INTERFACE_MAP(WindowsXamlManagerGenerated, ctl::WeakReferenceSource)

    public:
        WindowsXamlManagerGenerated();
        ~WindowsXamlManagerGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::WindowsXamlManager*, ABI::Microsoft::UI::Xaml::Hosting::XamlShutdownCompletedOnThreadEventArgs*>, ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager, ABI::Microsoft::UI::Xaml::Hosting::IXamlShutdownCompletedOnThreadEventArgs> XamlShutdownCompletedOnThreadEventSourceType;


        // Properties.

        // Events.
        virtual _Check_return_ HRESULT GetXamlShutdownCompletedOnThreadEventSourceNoRef(_Outptr_ XamlShutdownCompletedOnThreadEventSourceType** ppEventSource) = 0;
        _Check_return_ HRESULT STDMETHODCALLTYPE add_XamlShutdownCompletedOnThread(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Hosting::WindowsXamlManager*, ABI::Microsoft::UI::Xaml::Hosting::XamlShutdownCompletedOnThreadEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT STDMETHODCALLTYPE remove_XamlShutdownCompletedOnThread(_In_ EventRegistrationToken token);

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
       _Check_return_ HRESULT EventAddPreValidation(_In_ void* const pValue, EventRegistrationToken* const ptToken) const;

        // Fields.
    };
}

#include "WindowsXamlManager_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) WindowsXamlManagerFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManagerStatics
        , public ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManagerStatics2
    {
        BEGIN_INTERFACE_MAP(WindowsXamlManagerFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(WindowsXamlManagerFactory, ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManagerStatics)
            INTERFACE_ENTRY(WindowsXamlManagerFactory, ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManagerStatics2)
        END_INTERFACE_MAP(WindowsXamlManagerFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(InitializeForCurrentThread)(_Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager** ppResult) override;
        IFACEMETHOD(GetForCurrentThread)(_Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager** ppResult) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT InitializeForCurrentThreadImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager** ppResult); 
         _Check_return_ HRESULT GetForCurrentThreadImpl(_Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IWindowsXamlManager** ppResult); 
    };
}
