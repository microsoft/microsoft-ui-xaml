// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FrameworkElement.g.h"
#include "BindingBase.g.h"
#include "BindingExpression.g.h"
#include "Brush.g.h"
#include "ResourceDictionary.g.h"
#include "Style.g.h"
#include "TriggerCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FrameworkElementGenerated::FrameworkElementGenerated()
{
}

DirectUI::FrameworkElementGenerated::~FrameworkElementGenerated()
{
}

HRESULT DirectUI::FrameworkElementGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FrameworkElement)))
    {
        *ppObject = static_cast<DirectUI::FrameworkElement*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElement*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementProtected)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementProtected*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::UIElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_ActualHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_ActualHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_ActualTheme(_Out_ ABI::Microsoft::UI::Xaml::ElementTheme* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_ActualTheme, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_ActualWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_ActualWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_AllowFocusOnInteraction(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_AllowFocusOnInteraction, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_AllowFocusOnInteraction(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_AllowFocusOnInteraction, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_AllowFocusWhenDisabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_AllowFocusWhenDisabled, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_AllowFocusWhenDisabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_AllowFocusWhenDisabled, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_BaseUri(_Outptr_result_maybenull_ ABI::Windows::Foundation::IUriRuntimeClass** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<FrameworkElement*>(this)->get_BaseUriImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::get_BringIntoViewDistanceX(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_BringIntoViewDistanceX, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::put_BringIntoViewDistanceX(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_BringIntoViewDistanceX, value));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::get_BringIntoViewDistanceY(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_BringIntoViewDistanceY, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::put_BringIntoViewDistanceY(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_BringIntoViewDistanceY, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_DataContext(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_DataContext, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_DataContext(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_DataContext, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::get_EffectiveViewport(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_EffectiveViewport, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::put_EffectiveViewport(_In_ ABI::Windows::Foundation::Rect value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_EffectiveViewport, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FlowDirection(_Out_ ABI::Microsoft::UI::Xaml::FlowDirection* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FlowDirection, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FlowDirection(_In_ ABI::Microsoft::UI::Xaml::FlowDirection value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FlowDirection, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FocusVisualMargin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualMargin, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FocusVisualMargin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualMargin, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FocusVisualPrimaryBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<FrameworkElement*>(this)->get_FocusVisualPrimaryBrushImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FocusVisualPrimaryBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->put_FocusVisualPrimaryBrushImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FocusVisualPrimaryThickness(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualPrimaryThickness, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FocusVisualPrimaryThickness(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualPrimaryThickness, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FocusVisualSecondaryBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<FrameworkElement*>(this)->get_FocusVisualSecondaryBrushImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FocusVisualSecondaryBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->put_FocusVisualSecondaryBrushImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_FocusVisualSecondaryThickness(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualSecondaryThickness, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_FocusVisualSecondaryThickness(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_FocusVisualSecondaryThickness, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Height(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Height, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Height(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Height, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_HorizontalAlignment(_Out_ ABI::Microsoft::UI::Xaml::HorizontalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_HorizontalAlignment, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_HorizontalAlignment(_In_ ABI::Microsoft::UI::Xaml::HorizontalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_HorizontalAlignment, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_IsLoaded(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<FrameworkElement*>(this)->get_IsLoadedImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::get_IsTextScaleFactorEnabledInternal(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_IsTextScaleFactorEnabledInternal, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::put_IsTextScaleFactorEnabledInternal(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_IsTextScaleFactorEnabledInternal, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Language(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Language, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Language(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Language, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Margin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Margin, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Margin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Margin, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_MaxHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_MaxHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxHeight, value));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::get_MaxViewport(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxViewport, pValue));
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::put_MaxViewport(_In_ ABI::Windows::Foundation::Rect value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxViewport, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_MaxWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_MaxWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MaxWidth, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_MinHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MinHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_MinHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MinHeight, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_MinWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MinWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_MinWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_MinWidth, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Name(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::DependencyObject_Name, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Name(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::DependencyObject_Name, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Parent(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Parent, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_RequestedTheme(_Out_ ABI::Microsoft::UI::Xaml::ElementTheme* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_RequestedTheme, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_RequestedTheme(_In_ ABI::Microsoft::UI::Xaml::ElementTheme value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_RequestedTheme, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Resources(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IResourceDictionary** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Resources, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Resources(_In_opt_ ABI::Microsoft::UI::Xaml::IResourceDictionary* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Resources, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Style(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Style, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Style(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Style, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Tag(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Tag, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Tag(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Tag, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Triggers(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::TriggerBase*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Triggers, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_VerticalAlignment(_Out_ ABI::Microsoft::UI::Xaml::VerticalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_VerticalAlignment, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_VerticalAlignment(_In_ ABI::Microsoft::UI::Xaml::VerticalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_VerticalAlignment, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::get_Width(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Width, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::put_Width(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElement_Width, value));
}

// Events.
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetActualThemeChangedEventSourceNoRef(_Outptr_ ActualThemeChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_ActualThemeChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ActualThemeChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_ActualThemeChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_ActualThemeChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_ActualThemeChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ActualThemeChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetActualThemeChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_ActualThemeChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ActualThemeChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetActualThemeChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_ActualThemeChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetDataContextChangedEventSourceNoRef(_Outptr_ DataContextChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_DataContextChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DataContextChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_DataContextChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_DataContextChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_DataContextChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::DataContextChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DataContextChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDataContextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_DataContextChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DataContextChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::DataContextChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::DataContextChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDataContextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_DataContextChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetEffectiveViewportChangedEventSourceNoRef(_Outptr_ EffectiveViewportChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_EffectiveViewportChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<EffectiveViewportChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_EffectiveViewportChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_EffectiveViewportChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_EffectiveViewportChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::EffectiveViewportChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    EffectiveViewportChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetEffectiveViewportChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_EffectiveViewportChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    EffectiveViewportChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::EffectiveViewportChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::EffectiveViewportChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetEffectiveViewportChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_EffectiveViewportChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetHighContrastChangedEventSourceNoRef(_Outptr_ HighContrastChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_HighContrastChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HighContrastChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_HighContrastChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_HighContrastChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::add_HighContrastChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HighContrastChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetHighContrastChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::remove_HighContrastChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HighContrastChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetHighContrastChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_HighContrastChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetLayoutUpdatedEventSourceNoRef(_Outptr_ LayoutUpdatedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_LayoutUpdated, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<LayoutUpdatedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_LayoutUpdated, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_LayoutUpdated, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_LayoutUpdated(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    LayoutUpdatedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLayoutUpdatedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_LayoutUpdated(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    LayoutUpdatedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLayoutUpdatedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_LayoutUpdated));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetLoadedEventSourceNoRef(_Outptr_ LoadedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_Loaded, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<LoadedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_Loaded, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_Loaded, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_Loaded(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    LoadedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_Loaded(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    LoadedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_Loaded));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetLoadingEventSourceNoRef(_Outptr_ LoadingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_Loading, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<LoadingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_Loading, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_Loading, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_Loading(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    LoadingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_Loading(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    LoadingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_Loading));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetSizeChangedEventSourceNoRef(_Outptr_ SizeChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_SizeChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SizeChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_SizeChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_SizeChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_SizeChanged(_In_ ABI::Microsoft::UI::Xaml::ISizeChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SizeChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSizeChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_SizeChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SizeChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::ISizeChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::ISizeChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSizeChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_SizeChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GetUnloadedEventSourceNoRef(_Outptr_ UnloadedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::FrameworkElement_Unloaded, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<UnloadedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::FrameworkElement_Unloaded, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::FrameworkElement_Unloaded, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::add_Unloaded(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    UnloadedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetUnloadedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::FrameworkElementGenerated::remove_Unloaded(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    UnloadedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetUnloadedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::FrameworkElement_Unloaded));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::ArrangeOverride(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_ArrangeOverride", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->ArrangeOverrideImpl(finalSize, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_ArrangeOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::ArrangeOverrideProtected(_In_ ABI::Windows::Foundation::Size finalSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->ArrangeOverride(finalSize, pReturnValue));
    }
    else
    {
        IFC(ArrangeOverride(finalSize, pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::FindName(_In_ HSTRING name, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_FindName", 0);
    }
    ARG_NOTNULL(name, "name");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->FindNameImpl(name, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_FindName", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::GetBindingExpression(_In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pDp, _Outptr_ ABI::Microsoft::UI::Xaml::Data::IBindingExpression** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_GetBindingExpression", 0);
    }
    ARG_NOTNULL(pDp, "dp");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->GetBindingExpressionImpl(pDp, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_GetBindingExpression", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::GoToElementStateCore(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_GoToElementStateCore", 0);
    }
    ARG_NOTNULL(stateName, "stateName");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->GoToElementStateCoreImpl(stateName, useTransitions, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_GoToElementStateCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::GoToElementStateCoreProtected(_In_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GoToElementStateCore(stateName, useTransitions, pReturnValue));
    }
    else
    {
        IFC(GoToElementStateCore(stateName, useTransitions, pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::InvalidateViewport()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvalidateViewport", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->InvalidateViewportImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvalidateViewport", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::InvokeApplyTemplate(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvokeApplyTemplate", 0);
    }

    BOOLEAN returnValueCore;

    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(CheckThread());

    IFC(static_cast<CFrameworkElement*>(GetHandle())->InvokeApplyTemplate(&returnValueCore));

    IFC(CValueBoxer::ConvertToFramework(returnValueCore, pReturnValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvokeApplyTemplate", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::InvokeFocus(_In_ ABI::Microsoft::UI::Xaml::FocusState value, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvokeFocus", 0);
    }

    DirectUI::FocusState valueCore = static_cast<DirectUI::FocusState>(value);
    BOOLEAN returnValueCore;

    ARG_VALIDRETURNPOINTER(pReturnValue);

    IFC(CheckThread());

    IFC(static_cast<CFrameworkElement*>(GetHandle())->InvokeFocus(valueCore, &returnValueCore));

    IFC(CValueBoxer::ConvertToFramework(returnValueCore, pReturnValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_InvokeFocus", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::MeasureOverride(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_MeasureOverride", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->MeasureOverrideImpl(availableSize, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_MeasureOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::MeasureOverrideProtected(_In_ ABI::Windows::Foundation::Size availableSize, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->MeasureOverride(availableSize, pReturnValue));
    }
    else
    {
        IFC(MeasureOverride(availableSize, pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_OnApplyTemplate", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CFrameworkElement*>(GetHandle())->OnApplyTemplate());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_OnApplyTemplate", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::OnApplyTemplateProtected()
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IFrameworkElementOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnApplyTemplate());
    }
    else
    {
        IFC(OnApplyTemplate());
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FrameworkElementGenerated::SetBinding(_In_ ABI::Microsoft::UI::Xaml::IDependencyProperty* pDp, _In_ ABI::Microsoft::UI::Xaml::Data::IBindingBase* pBinding)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "FrameworkElement_SetBinding", 0);
    }
    ARG_NOTNULL(pDp, "dp");
    ARG_NOTNULL(pBinding, "binding");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<FrameworkElement*>(this)->SetBindingImpl(pDp, pBinding));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "FrameworkElement_SetBinding", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::FrameworkElement_DataContextChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::DataContextChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DataContextChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDataContextChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::FrameworkElement_LayoutUpdated:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                LayoutUpdatedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetLayoutUpdatedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::FrameworkElement_SizeChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::ISizeChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SizeChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSizeChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::UIElementGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::FrameworkElementGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::FrameworkElement_DataContextChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::FrameworkElement*, ABI::Microsoft::UI::Xaml::DataContextChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DataContextChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDataContextChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::FrameworkElement_LayoutUpdated:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                LayoutUpdatedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetLayoutUpdatedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::FrameworkElement_SizeChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::ISizeChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SizeChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSizeChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::UIElementGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::FrameworkElementFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::FrameworkElementFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IFrameworkElement** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElement);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.



IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_TagProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Tag, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_LanguageProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Language, ppValue));
}

IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_ActualWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_ActualWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_ActualHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_ActualHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_WidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Width, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_HeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Height, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_MinWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_MinWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_MaxWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_MaxWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_MinHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_MinHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_MaxHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_MaxHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_HorizontalAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_HorizontalAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_VerticalAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_VerticalAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_MarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Margin, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_NameProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::DependencyObject_Name, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_DataContextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_DataContext, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_AllowFocusOnInteractionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_AllowFocusOnInteraction, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FocusVisualMarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FocusVisualMargin, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FocusVisualSecondaryThicknessProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FocusVisualSecondaryThickness, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FocusVisualPrimaryThicknessProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FocusVisualPrimaryThickness, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FocusVisualSecondaryBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FocusVisualSecondaryBrush, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FocusVisualPrimaryBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FocusVisualPrimaryBrush, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_AllowFocusWhenDisabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_AllowFocusWhenDisabled, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_StyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_Style, ppValue));
}

IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_FlowDirectionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_FlowDirection, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_RequestedThemeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_RequestedTheme, ppValue));
}




IFACEMETHODIMP DirectUI::FrameworkElementFactory::get_ActualThemeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElement_ActualTheme, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::FrameworkElementFactory::DeferTree(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "FrameworkElement_DeferTree", 0);
    }
    ARG_NOTNULL(pElement, "element");
    IFC(CheckActivationAllowed());
    IFC(DeferTreeImpl(pElement));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "FrameworkElement_DeferTree", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FrameworkElement()
    {
        RRETURN(ctl::ActivationFactoryCreator<FrameworkElementFactory>::CreateActivationFactory());
    }
}
