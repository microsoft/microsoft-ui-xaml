// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "LinearGradientBrush.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::LinearGradientBrushGenerated::LinearGradientBrushGenerated()
{
}

DirectUI::LinearGradientBrushGenerated::~LinearGradientBrushGenerated()
{
}

HRESULT DirectUI::LinearGradientBrushGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::LinearGradientBrush)))
    {
        *ppObject = static_cast<DirectUI::LinearGradientBrush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks)) && Feature_XamlMotionSystemHoldbacks::IsEnabled())
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFeature_XamlMotionSystemHoldbacks>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::GradientBrush::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::get_AnimatedCenterPoint(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_AnimatedCenterPointImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::put_AnimatedCenterPoint(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->put_AnimatedCenterPointImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::get_AnimatedRotation(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_AnimatedRotationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::put_AnimatedRotation(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->put_AnimatedRotationImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::get_AnimatedScale(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_AnimatedScaleImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::put_AnimatedScale(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->put_AnimatedScaleImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::get_AnimatedTransformMatrix(_Out_ ABI::Windows::Foundation::Numerics::Matrix3x2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_AnimatedTransformMatrixImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::put_AnimatedTransformMatrix(_In_ ABI::Windows::Foundation::Numerics::Matrix3x2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->put_AnimatedTransformMatrixImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::get_AnimatedTranslation(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_AnimatedTranslationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::put_AnimatedTranslation(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->put_AnimatedTranslationImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::get_CenterPoint(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_CenterPointImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::put_CenterPoint(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"CenterPoint"));
    IFC(static_cast<LinearGradientBrush*>(this)->put_CenterPointImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LinearGradientBrushGenerated::get_EndPoint(_Out_ ABI::Windows::Foundation::Point* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::LinearGradientBrush_EndPoint, pValue));
}
IFACEMETHODIMP DirectUI::LinearGradientBrushGenerated::put_EndPoint(_In_ ABI::Windows::Foundation::Point value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::LinearGradientBrush_EndPoint, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::get_Rotation(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_RotationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::put_Rotation(_In_ DOUBLE value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"Rotation"));
    IFC(static_cast<LinearGradientBrush*>(this)->put_RotationImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::get_Scale(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_ScaleImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::put_Scale(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"Scale"));
    IFC(static_cast<LinearGradientBrush*>(this)->put_ScaleImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LinearGradientBrushGenerated::get_StartPoint(_Out_ ABI::Windows::Foundation::Point* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::LinearGradientBrush_StartPoint, pValue));
}
IFACEMETHODIMP DirectUI::LinearGradientBrushGenerated::put_StartPoint(_In_ ABI::Windows::Foundation::Point value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::LinearGradientBrush_StartPoint, value));
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::get_TransformMatrix(_Out_ ABI::Windows::Foundation::Numerics::Matrix3x2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_TransformMatrixImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::put_TransformMatrix(_In_ ABI::Windows::Foundation::Numerics::Matrix3x2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"TransformMatrix"));
    IFC(static_cast<LinearGradientBrush*>(this)->put_TransformMatrixImpl(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::get_Translation(_Out_ ABI::Windows::Foundation::Numerics::Vector2* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<LinearGradientBrush*>(this)->get_TranslationImpl(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::put_Translation(_In_ ABI::Windows::Foundation::Numerics::Vector2 value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"Translation"));
    IFC(static_cast<LinearGradientBrush*>(this)->put_TranslationImpl(value));
Cleanup:
    RRETURN(hr);
}

// Events.
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_AnimatedCenterPointChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, AnimatedCenterPointChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_AnimatedCenterPointChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetAnimatedCenterPointChangedEventSourceNoRef(_Outptr_ AnimatedCenterPointChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_AnimatedCenterPointChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnimatedCenterPointChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_AnimatedCenterPointChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_AnimatedCenterPointChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedCenterPoint, &SimplePropertyChangedHandler_AnimatedCenterPointChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::add_AnimatedCenterPointChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnimatedCenterPointChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetAnimatedCenterPointChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::remove_AnimatedCenterPointChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnimatedCenterPointChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetAnimatedCenterPointChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedCenterPoint, &SimplePropertyChangedHandler_AnimatedCenterPointChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_AnimatedCenterPointChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_AnimatedRotationChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, AnimatedRotationChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_AnimatedRotationChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetAnimatedRotationChangedEventSourceNoRef(_Outptr_ AnimatedRotationChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_AnimatedRotationChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnimatedRotationChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_AnimatedRotationChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_AnimatedRotationChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedRotation, &SimplePropertyChangedHandler_AnimatedRotationChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::add_AnimatedRotationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnimatedRotationChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetAnimatedRotationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::remove_AnimatedRotationChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnimatedRotationChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetAnimatedRotationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedRotation, &SimplePropertyChangedHandler_AnimatedRotationChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_AnimatedRotationChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_AnimatedScaleChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, AnimatedScaleChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_AnimatedScaleChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetAnimatedScaleChangedEventSourceNoRef(_Outptr_ AnimatedScaleChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_AnimatedScaleChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnimatedScaleChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_AnimatedScaleChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_AnimatedScaleChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedScale, &SimplePropertyChangedHandler_AnimatedScaleChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::add_AnimatedScaleChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnimatedScaleChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetAnimatedScaleChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::remove_AnimatedScaleChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnimatedScaleChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetAnimatedScaleChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedScale, &SimplePropertyChangedHandler_AnimatedScaleChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_AnimatedScaleChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_AnimatedTransformMatrixChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, AnimatedTransformMatrixChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_AnimatedTransformMatrixChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetAnimatedTransformMatrixChangedEventSourceNoRef(_Outptr_ AnimatedTransformMatrixChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_AnimatedTransformMatrixChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnimatedTransformMatrixChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_AnimatedTransformMatrixChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_AnimatedTransformMatrixChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedTransformMatrix, &SimplePropertyChangedHandler_AnimatedTransformMatrixChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::add_AnimatedTransformMatrixChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnimatedTransformMatrixChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetAnimatedTransformMatrixChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::remove_AnimatedTransformMatrixChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnimatedTransformMatrixChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetAnimatedTransformMatrixChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedTransformMatrix, &SimplePropertyChangedHandler_AnimatedTransformMatrixChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_AnimatedTransformMatrixChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_AnimatedTranslationChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, AnimatedTranslationChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_AnimatedTranslationChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetAnimatedTranslationChangedEventSourceNoRef(_Outptr_ AnimatedTranslationChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_AnimatedTranslationChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<AnimatedTranslationChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_AnimatedTranslationChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_AnimatedTranslationChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedTranslation, &SimplePropertyChangedHandler_AnimatedTranslationChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::add_AnimatedTranslationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    AnimatedTranslationChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetAnimatedTranslationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::remove_AnimatedTranslationChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    AnimatedTranslationChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(GetAnimatedTranslationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_AnimatedTranslation, &SimplePropertyChangedHandler_AnimatedTranslationChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_AnimatedTranslationChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_CenterPointChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, CenterPointChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_CenterPointChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetCenterPointChangedEventSourceNoRef(_Outptr_ CenterPointChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_CenterPointChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CenterPointChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_CenterPointChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_CenterPointChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_CenterPoint, &SimplePropertyChangedHandler_CenterPointChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::add_CenterPointChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CenterPointChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(StrictOnlyApiCheck(this, L"CenterPointChanged"));
    IFC(GetCenterPointChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::remove_CenterPointChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CenterPointChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"CenterPointChanged"));
    IFC(GetCenterPointChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_CenterPoint, &SimplePropertyChangedHandler_CenterPointChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_CenterPointChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_RotationChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, RotationChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_RotationChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetRotationChangedEventSourceNoRef(_Outptr_ RotationChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_RotationChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<RotationChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_RotationChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_RotationChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_Rotation, &SimplePropertyChangedHandler_RotationChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::add_RotationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    RotationChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(StrictOnlyApiCheck(this, L"RotationChanged"));
    IFC(GetRotationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::remove_RotationChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    RotationChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"RotationChanged"));
    IFC(GetRotationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_Rotation, &SimplePropertyChangedHandler_RotationChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_RotationChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_ScaleChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, ScaleChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_ScaleChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetScaleChangedEventSourceNoRef(_Outptr_ ScaleChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_ScaleChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ScaleChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_ScaleChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_ScaleChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_Scale, &SimplePropertyChangedHandler_ScaleChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::add_ScaleChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ScaleChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(StrictOnlyApiCheck(this, L"ScaleChanged"));
    IFC(GetScaleChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::remove_ScaleChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ScaleChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"ScaleChanged"));
    IFC(GetScaleChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_Scale, &SimplePropertyChangedHandler_ScaleChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_ScaleChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_TransformMatrixChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, TransformMatrixChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_TransformMatrixChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetTransformMatrixChangedEventSourceNoRef(_Outptr_ TransformMatrixChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_TransformMatrixChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TransformMatrixChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_TransformMatrixChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_TransformMatrixChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_TransformMatrix, &SimplePropertyChangedHandler_TransformMatrixChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::add_TransformMatrixChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TransformMatrixChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(StrictOnlyApiCheck(this, L"TransformMatrixChanged"));
    IFC(GetTransformMatrixChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::remove_TransformMatrixChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TransformMatrixChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"TransformMatrixChanged"));
    IFC(GetTransformMatrixChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_TransformMatrix, &SimplePropertyChangedHandler_TransformMatrixChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_TransformMatrixChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
void DirectUI::LinearGradientBrushGenerated::SimplePropertyChangedHandler_TranslationChanged(SimpleProperty::objid_t obj)
{
    IFCFAILFAST((DependencyObject::RaiseSimplePropertyChangedNotification<LinearGradientBrush, TranslationChangedEventSourceType>(
        obj,
        KnownEventIndex::LinearGradientBrush_TranslationChanged,
        nullptr)));
}

_Check_return_ HRESULT DirectUI::LinearGradientBrushGenerated::GetTranslationChangedEventSourceNoRef(_Outptr_ TranslationChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LinearGradientBrush_TranslationChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TranslationChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LinearGradientBrush_TranslationChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::LinearGradientBrush_TranslationChanged, *ppEventSource));
        SimpleProperty::Property::RegisterHandler(KnownPropertyIndex::LinearGradientBrush_Translation, &SimplePropertyChangedHandler_TranslationChanged);

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::add_TranslationChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TranslationChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(StrictOnlyApiCheck(this, L"TranslationChanged"));
    IFC(GetTranslationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::LinearGradientBrushGenerated::remove_TranslationChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TranslationChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LinearGradientBrush*, IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"TranslationChanged"));
    IFC(GetTranslationChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        SimpleProperty::Property::UnregisterHandler(KnownPropertyIndex::LinearGradientBrush_Translation, &SimplePropertyChangedHandler_TranslationChanged);
        IFC(RemoveEventSource(KnownEventIndex::LinearGradientBrush_TranslationChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif

// Methods.

HRESULT DirectUI::LinearGradientBrushFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrushStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::LinearGradientBrushFactory::CreateInstanceWithGradientStopCollectionAndAngle(_In_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::GradientStop*>* pGradientStopCollection, _In_ DOUBLE angle, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILinearGradientBrush** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pGradientStopCollection, "gradientStopCollection");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithGradientStopCollectionAndAngleImpl(pGradientStopCollection, angle, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::LinearGradientBrushFactory::get_StartPointProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::LinearGradientBrush_StartPoint, ppValue));
}
IFACEMETHODIMP DirectUI::LinearGradientBrushFactory::get_EndPointProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::LinearGradientBrush_EndPoint, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_LinearGradientBrush()
    {
        RRETURN(ctl::ActivationFactoryCreator<LinearGradientBrushFactory>::CreateActivationFactory());
    }
}
