// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __PrintDocument_GUID "00f4014b-5d4a-4f4c-b5d3-dc9cd6163fa6"

namespace DirectUI
{
    class PrintDocument;
    class UIElement;

    class __declspec(novtable) PrintDocumentGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Printing::IPrintDocument
    {
        friend class DirectUI::PrintDocument;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Printing.PrintDocument");

        BEGIN_INTERFACE_MAP(PrintDocumentGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(PrintDocumentGenerated, ABI::Microsoft::UI::Xaml::Printing::IPrintDocument)
        END_INTERFACE_MAP(PrintDocumentGenerated, DirectUI::DependencyObject)

    public:
        PrintDocumentGenerated();
        ~PrintDocumentGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> BeginPrintEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> EndPrintEventSourceType;
        typedef CEventSource<ABI::Microsoft::UI::Xaml::Printing::IPaginateEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Printing::IPaginateEventArgs> PaginateEventSourceType;
        typedef CEventSource<ABI::Microsoft::UI::Xaml::Printing::IGetPreviewPageEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Printing::IGetPreviewPageEventArgs> GetPreviewPageEventSourceType;
        typedef CEventSource<ABI::Microsoft::UI::Xaml::Printing::IAddPagesEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Printing::IAddPagesEventArgs> AddPagesEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::PrintDocument;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::PrintDocument;
        }

        // Properties.
        _Check_return_ HRESULT get_DesiredFormat(_Out_ DirectUI::PrintDocumentFormat* pValue);
        _Check_return_ HRESULT put_DesiredFormat(_In_ DirectUI::PrintDocumentFormat value);
        IFACEMETHOD(get_DocumentSource)(_Outptr_result_maybenull_ ABI::Windows::Graphics::Printing::IPrintDocumentSource** ppValue) override;
        _Check_return_ HRESULT get_PrintedPageCount(_Out_ INT* pValue);

        // Events.
        _Check_return_ HRESULT GetAddPagesEventSourceNoRef(_Outptr_ AddPagesEventSourceType** ppEventSource);
        IFACEMETHOD(add_AddPages)(_In_ ABI::Microsoft::UI::Xaml::Printing::IAddPagesEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_AddPages)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetBeginPrintEventSourceNoRef(_Outptr_ BeginPrintEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_BeginPrint(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_BeginPrint(_In_ EventRegistrationToken token);
        _Check_return_ HRESULT GetEndPrintEventSourceNoRef(_Outptr_ EndPrintEventSourceType** ppEventSource);
        _Check_return_ HRESULT add_EndPrint(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken);
        _Check_return_ HRESULT remove_EndPrint(_In_ EventRegistrationToken token);
        _Check_return_ HRESULT GetGetPreviewPageEventSourceNoRef(_Outptr_ GetPreviewPageEventSourceType** ppEventSource);
        IFACEMETHOD(add_GetPreviewPage)(_In_ ABI::Microsoft::UI::Xaml::Printing::IGetPreviewPageEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_GetPreviewPage)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetPaginateEventSourceNoRef(_Outptr_ PaginateEventSourceType** ppEventSource);
        IFACEMETHOD(add_Paginate)(_In_ ABI::Microsoft::UI::Xaml::Printing::IPaginateEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_Paginate)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(AddPage)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pPageVisual) override;
        IFACEMETHOD(AddPagesComplete)() override;
        IFACEMETHOD(InvalidatePreview)() override;
        IFACEMETHOD(SetPreviewPage)(_In_ INT pageNumber, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pPageVisual) override;
        IFACEMETHOD(SetPreviewPageCount)(_In_ INT count, _In_ ABI::Microsoft::UI::Xaml::Printing::PreviewPageCountType type) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "PrintDocument_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) PrintDocumentFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Printing::IPrintDocumentFactory
        , public ABI::Microsoft::UI::Xaml::Printing::IPrintDocumentStatics
    {
        BEGIN_INTERFACE_MAP(PrintDocumentFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(PrintDocumentFactory, ABI::Microsoft::UI::Xaml::Printing::IPrintDocumentFactory)
            INTERFACE_ENTRY(PrintDocumentFactory, ABI::Microsoft::UI::Xaml::Printing::IPrintDocumentStatics)
        END_INTERFACE_MAP(PrintDocumentFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Printing::IPrintDocument** ppInstance);

        // Static properties.

        // Dependency properties.
        
        
        IFACEMETHOD(get_DocumentSourceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::PrintDocument;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
