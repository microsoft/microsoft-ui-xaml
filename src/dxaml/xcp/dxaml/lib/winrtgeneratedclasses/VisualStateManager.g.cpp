// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "VisualStateManager.g.h"
#include "Control.g.h"
#include "FrameworkElement.g.h"
#include "VisualState.g.h"
#include "VisualStateGroup.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::VisualStateManagerGenerated::VisualStateManagerGenerated()
{
}

DirectUI::VisualStateManagerGenerated::~VisualStateManagerGenerated()
{
}

HRESULT DirectUI::VisualStateManagerGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::VisualStateManager)))
    {
        *ppObject = static_cast<DirectUI::VisualStateManager*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManager)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateManager*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManagerProtected)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateManagerProtected*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManagerOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateManagerOverrides*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::VisualStateManagerGenerated::GoToStateCore(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IControl* pControl, _In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTemplateRoot, _In_opt_ HSTRING stateName, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualStateGroup* pGroup, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualState* pState, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "VisualStateManager_GoToStateCore", 0);
    }
    ARG_NOTNULL(pTemplateRoot, "templateRoot");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<VisualStateManager*>(this)->GoToStateCoreImpl(pControl, pTemplateRoot, stateName, pGroup, pState, useTransitions, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "VisualStateManager_GoToStateCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::VisualStateManagerGenerated::GoToStateCoreProtected(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IControl* pControl, _In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pTemplateRoot, _In_opt_ HSTRING stateName, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualStateGroup* pGroup, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualState* pState, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IVisualStateManagerOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GoToStateCore(pControl, pTemplateRoot, stateName, pGroup, pState, useTransitions, pReturnValue));
    }
    else
    {
        IFC(GoToStateCore(pControl, pTemplateRoot, stateName, pGroup, pState, useTransitions, pReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateManagerGenerated::RaiseCurrentStateChanged(_In_ ABI::Microsoft::UI::Xaml::IVisualStateGroup* pStateGroup, _In_ ABI::Microsoft::UI::Xaml::IVisualState* pOldState, _In_ ABI::Microsoft::UI::Xaml::IVisualState* pNewState, _In_ ABI::Microsoft::UI::Xaml::Controls::IControl* pControl)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "VisualStateManager_RaiseCurrentStateChanged", 0);
    }
    ARG_NOTNULL(pStateGroup, "stateGroup");
    ARG_NOTNULL(pOldState, "oldState");
    ARG_NOTNULL(pNewState, "newState");
    ARG_NOTNULL(pControl, "control");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<VisualStateManager*>(this)->RaiseCurrentStateChangedImpl(pStateGroup, pOldState, pNewState, pControl));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "VisualStateManager_RaiseCurrentStateChanged", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateManagerGenerated::RaiseCurrentStateChanging(_In_ ABI::Microsoft::UI::Xaml::IVisualStateGroup* pStateGroup, _In_ ABI::Microsoft::UI::Xaml::IVisualState* pOldState, _In_ ABI::Microsoft::UI::Xaml::IVisualState* pNewState, _In_ ABI::Microsoft::UI::Xaml::Controls::IControl* pControl)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "VisualStateManager_RaiseCurrentStateChanging", 0);
    }
    ARG_NOTNULL(pStateGroup, "stateGroup");
    ARG_NOTNULL(pOldState, "oldState");
    ARG_NOTNULL(pNewState, "newState");
    ARG_NOTNULL(pControl, "control");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<VisualStateManager*>(this)->RaiseCurrentStateChangingImpl(pStateGroup, pOldState, pNewState, pControl));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "VisualStateManager_RaiseCurrentStateChanging", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::VisualStateManagerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManagerFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateManagerFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManagerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateManagerStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::VisualStateManagerFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IVisualStateManager** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateManager);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT DirectUI::VisualStateManagerFactory::GetVisualStateGroupsStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualStateGroup*>** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pObj), KnownPropertyIndex::VisualStateManager_VisualStateGroups, ppValue));
}

_Check_return_ HRESULT DirectUI::VisualStateManagerFactory::SetVisualStateGroupsStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualStateGroup*>* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pObj), KnownPropertyIndex::VisualStateManager_VisualStateGroups, pValue));
}



IFACEMETHODIMP DirectUI::VisualStateManagerFactory::GetVisualStateGroups(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualStateGroup*>** ppValue)
{
    RRETURN(GetVisualStateGroupsStatic(pObj, ppValue));
}

IFACEMETHODIMP DirectUI::VisualStateManagerFactory::SetVisualStateGroups(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualStateGroup*>* pValue)
{
    RRETURN(SetVisualStateGroupsStatic(pObj, pValue));
}
_Check_return_ HRESULT DirectUI::VisualStateManagerFactory::GetCustomVisualStateManagerStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualStateManager** ppValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pObj), KnownPropertyIndex::VisualStateManager_CustomVisualStateManager, ppValue));
}

_Check_return_ HRESULT DirectUI::VisualStateManagerFactory::SetCustomVisualStateManagerStatic(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualStateManager* pValue)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::FrameworkElement*>(pObj), KnownPropertyIndex::VisualStateManager_CustomVisualStateManager, pValue));
}


IFACEMETHODIMP DirectUI::VisualStateManagerFactory::get_CustomVisualStateManagerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::VisualStateManager_CustomVisualStateManager, ppValue));
}


IFACEMETHODIMP DirectUI::VisualStateManagerFactory::GetCustomVisualStateManager(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualStateManager** ppValue)
{
    RRETURN(GetCustomVisualStateManagerStatic(pObj, ppValue));
}

IFACEMETHODIMP DirectUI::VisualStateManagerFactory::SetCustomVisualStateManager(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pObj, _In_opt_ ABI::Microsoft::UI::Xaml::IVisualStateManager* pValue)
{
    RRETURN(SetCustomVisualStateManagerStatic(pObj, pValue));
}

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::VisualStateManagerFactory::GoToState(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IControl* pControl, _In_opt_ HSTRING stateName, _In_ BOOLEAN useTransitions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "VisualStateManager_GoToState", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(GoToStateImpl(pControl, stateName, useTransitions, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "VisualStateManager_GoToState", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_VisualStateManager()
    {
        RRETURN(ctl::ActivationFactoryCreator<VisualStateManagerFactory>::CreateActivationFactory());
    }
}
