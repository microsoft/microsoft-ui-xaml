// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "InteractionBase.g.h"
#include "DoubleTappedRoutedEventArgs.g.h"
#include "DragEventArgs.g.h"
#include "HoldingRoutedEventArgs.g.h"
#include "KeyRoutedEventArgs.g.h"
#include "PointerRoutedEventArgs.g.h"
#include "RightTappedRoutedEventArgs.g.h"
#include "TappedRoutedEventArgs.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::InteractionBaseGenerated::InteractionBaseGenerated()
{
}

DirectUI::InteractionBaseGenerated::~InteractionBaseGenerated()
{
}

HRESULT DirectUI::InteractionBaseGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::InteractionBase)))
    {
        *ppObject = static_cast<DirectUI::InteractionBase*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IInteractionBase)) && Feature_Xaml2018::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IInteractionBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides)) && Feature_Xaml2018::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::GetSupportedEvents(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::RoutedEvent*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_GetSupportedEvents", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->GetSupportedEventsImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_GetSupportedEvents", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::GetSupportedEventsCore(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::RoutedEvent*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_GetSupportedEventsCore", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->GetSupportedEventsCoreImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_GetSupportedEventsCore", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::GetSupportedEventsCoreProtected(_Outptr_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::RoutedEvent*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetSupportedEventsCore(ppReturnValue));
    }
    else
    {
        IFC(GetSupportedEventsCore(ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnDoubleTapped(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDoubleTapped", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnDoubleTappedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDoubleTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnDoubleTappedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDoubleTapped(pSender, pArgs));
    }
    else
    {
        IFC(OnDoubleTapped(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnDragEnter(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragEnter", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnDragEnterImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragEnter", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnDragEnterProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragEnter(pSender, pArgs));
    }
    else
    {
        IFC(OnDragEnter(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnDragLeave(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragLeave", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnDragLeaveImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragLeave", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnDragLeaveProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragLeave(pSender, pArgs));
    }
    else
    {
        IFC(OnDragLeave(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnDragOver(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragOver", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnDragOverImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDragOver", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnDragOverProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDragOver(pSender, pArgs));
    }
    else
    {
        IFC(OnDragOver(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnDrop(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDrop", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnDropImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnDrop", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnDropProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::IDragEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDrop(pSender, pArgs));
    }
    else
    {
        IFC(OnDrop(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnHolding(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnHolding", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnHoldingImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnHolding", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnHoldingProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnHolding(pSender, pArgs));
    }
    else
    {
        IFC(OnHolding(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnKeyDown(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnKeyDown", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnKeyDownImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnKeyDown", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnKeyDownProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnKeyDown(pSender, pArgs));
    }
    else
    {
        IFC(OnKeyDown(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnKeyUp(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnKeyUp", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnKeyUpImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnKeyUp", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnKeyUpProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnKeyUp(pSender, pArgs));
    }
    else
    {
        IFC(OnKeyUp(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerCanceled(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerCanceled", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerCanceledImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerCanceled", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerCanceledProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerCanceled(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerCanceled(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerCaptureLost(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerCaptureLost", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerCaptureLostImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerCaptureLost", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerCaptureLostProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerCaptureLost(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerCaptureLost(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerEntered(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerEntered", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerEnteredImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerEntered", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerEnteredProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerEntered(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerEntered(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerExited(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerExited", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerExitedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerExited", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerExitedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerExited(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerExited(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerMoved(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerMoved", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerMovedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerMoved", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerMovedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerMoved(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerMoved(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerPressed(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerPressed", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerPressedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerPressed", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerPressedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerPressed(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerPressed(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerReleased(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerReleased", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerReleasedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerReleased", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerReleasedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerReleased(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerReleased(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnPointerWheelChanged(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerWheelChanged", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnPointerWheelChangedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnPointerWheelChanged", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnPointerWheelChangedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnPointerWheelChanged(pSender, pArgs));
    }
    else
    {
        IFC(OnPointerWheelChanged(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnRightTapped(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnRightTapped", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnRightTappedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnRightTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnRightTappedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnRightTapped(pSender, pArgs));
    }
    else
    {
        IFC(OnRightTapped(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::InteractionBaseGenerated::OnTapped(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "InteractionBase_OnTapped", 0);
    }
    ARG_NOTNULL(pSender, "sender");
    ARG_NOTNULL(pArgs, "args");
    IFC(CheckThread());
    IFC(static_cast<InteractionBase*>(this)->OnTappedImpl(pSender, pArgs));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "InteractionBase_OnTapped", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::InteractionBaseGenerated::OnTappedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pSender, _In_ ABI::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs* pArgs)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::IInteractionBaseOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnTapped(pSender, pArgs));
    }
    else
    {
        IFC(OnTapped(pSender, pArgs));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::InteractionBaseFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IInteractionBaseFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IInteractionBaseFactory*>(this);
    }
    else
#endif
    {
        RRETURN(ctl::AggregableAbstractActivationFactory<DirectUI::InteractionBase>::QueryInterfaceImpl(iid, ppObject));
    }

#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    AddRefOuter();
    RRETURN(S_OK);
#endif
}


// Factory methods.
IFACEMETHODIMP DirectUI::InteractionBaseFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IInteractionBase** ppInstance)
{
    if (!Feature_Xaml2018::IsEnabled()) IFC_RETURN(E_NOTIMPL);


    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithAggregableAbstractActivationFactory<DirectUI::InteractionBase,ABI::Microsoft::UI::Xaml::IInteractionBase>(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_InteractionBase()
    {
        RRETURN(ctl::ActivationFactoryCreator<InteractionBaseFactory>::CreateActivationFactory());
    }
}
