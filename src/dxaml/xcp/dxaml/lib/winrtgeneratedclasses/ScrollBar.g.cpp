// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ScrollBar.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ScrollBarGenerated::ScrollBarGenerated()
{
}

DirectUI::ScrollBarGenerated::~ScrollBarGenerated()
{
}

HRESULT DirectUI::ScrollBarGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ScrollBar)))
    {
        *ppObject = static_cast<DirectUI::ScrollBar*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar*>(this);
    }
    else
    {
        RRETURN(DirectUI::RangeBase::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ScrollBarGenerated::get_IndicatorMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollBar_IndicatorMode, pValue));
}
IFACEMETHODIMP DirectUI::ScrollBarGenerated::put_IndicatorMode(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollBar_IndicatorMode, value));
}
IFACEMETHODIMP DirectUI::ScrollBarGenerated::get_Orientation(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollBar_Orientation, pValue));
}
IFACEMETHODIMP DirectUI::ScrollBarGenerated::put_Orientation(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollBar_Orientation, value));
}
IFACEMETHODIMP DirectUI::ScrollBarGenerated::get_ViewportSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ScrollBar_ViewportSize, pValue));
}
IFACEMETHODIMP DirectUI::ScrollBarGenerated::put_ViewportSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ScrollBar_ViewportSize, value));
}

// Events.
_Check_return_ HRESULT DirectUI::ScrollBarGenerated::GetScrollEventSourceNoRef(_Outptr_ ScrollEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollBar_Scroll, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ScrollEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollBar_Scroll, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollBar_Scroll, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollBarGenerated::add_Scroll(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ScrollEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetScrollEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ScrollBarGenerated::remove_Scroll(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ScrollEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetScrollEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollBar_Scroll));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollBarGenerated::GetThumbDragCompletedEventSourceNoRef(_Outptr_ ThumbDragCompletedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollBar_ThumbDragCompleted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ThumbDragCompletedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollBar_ThumbDragCompleted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollBar_ThumbDragCompleted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::add_ThumbDragCompleted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ThumbDragCompletedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetThumbDragCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::remove_ThumbDragCompleted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ThumbDragCompletedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(GetThumbDragCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollBar_ThumbDragCompleted));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ScrollBarGenerated::GetThumbDragStartedEventSourceNoRef(_Outptr_ ThumbDragStartedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ScrollBar_ThumbDragStarted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ThumbDragStartedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ScrollBar_ThumbDragStarted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ScrollBar_ThumbDragStarted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::add_ThumbDragStarted(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ThumbDragStartedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));

    IFC(GetThumbDragStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::remove_ThumbDragStarted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ThumbDragStartedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(GetThumbDragStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ScrollBar_ThumbDragStarted));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ScrollBar_Scroll:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ScrollEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetScrollEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::RangeBaseGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ScrollBarGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ScrollBar_Scroll:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ScrollEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetScrollEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::RangeBaseGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ScrollBarFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ScrollBarFactory::get_OrientationProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollBar_Orientation, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollBarFactory::get_ViewportSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollBar_ViewportSize, ppValue));
}
IFACEMETHODIMP DirectUI::ScrollBarFactory::get_IndicatorModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ScrollBar_IndicatorMode, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ScrollBar()
    {
        RRETURN(ctl::ActivationFactoryCreator<ScrollBarFactory>::CreateActivationFactory());
    }
}
