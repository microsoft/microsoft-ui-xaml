// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi) 
#define FEATURE_EXPERIMENTALAPI_OVERRIDE override
#else
#define FEATURE_EXPERIMENTALAPI_OVERRIDE
#endif
#define __XamlIsland_GUID "0eb21081-a1b7-4942-925d-23cf4bafd8e1"

#pragma region forwarders
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi)
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::IXamlIsland, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::IXamlIsland, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_Content)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override { return This()->get_Content(ppValue); }
        IFACEMETHOD(put_Content)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override { return This()->put_Content(pValue); }
        IFACEMETHOD(get_ContentIsland)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Content::IContentIsland** ppValue) override { return This()->get_ContentIsland(ppValue); }
        IFACEMETHOD(get_SystemBackdrop)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue) override { return This()->get_SystemBackdrop(ppValue); }
        IFACEMETHOD(put_SystemBackdrop)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue) override { return This()->put_SystemBackdrop(pValue); }
    };
}
#endif
#pragma endregion

namespace DirectUI
{
    class XamlIsland;
    class SystemBackdrop;
    class UIElement;

    class __declspec(novtable) XamlIslandGenerated:
        public ctl::WeakReferenceSource
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi)
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::IXamlIsland, XamlIslandGenerated >
        , public ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop
        , public ABI::Windows::Foundation::IClosable
#endif
    {
        friend class DirectUI::XamlIsland;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.XamlIsland");

        BEGIN_INTERFACE_MAP(XamlIslandGenerated, ctl::WeakReferenceSource)
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi)
            INTERFACE_ENTRY(XamlIslandGenerated, ABI::Microsoft::UI::Xaml::IXamlIsland)
            INTERFACE_ENTRY(XamlIslandGenerated, ABI::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop)
            INTERFACE_ENTRY(XamlIslandGenerated, ABI::Windows::Foundation::IClosable)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(XamlIslandGenerated, ctl::WeakReferenceSource)

    public:
        XamlIslandGenerated();
        ~XamlIslandGenerated() override;

        // Event source typedefs.


        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Content(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_Content(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_ContentIsland(_Outptr_result_maybenull_ ABI::Microsoft::UI::Content::IContentIsland** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_SystemBackdrop(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop** ppValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE put_SystemBackdrop(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISystemBackdrop* pValue);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "XamlIsland_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) XamlIslandFactory:
       public ctl::AggregableActivationFactory<DirectUI::XamlIsland>
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi)
        , public ABI::Microsoft::UI::Xaml::IXamlIslandFactory
#endif
    {
        BEGIN_INTERFACE_MAP(XamlIslandFactory, ctl::AggregableActivationFactory<DirectUI::XamlIsland>)
#if WI_IS_FEATURE_PRESENT(Feature_ExperimentalApi)
            INTERFACE_ENTRY(XamlIslandFactory, ABI::Microsoft::UI::Xaml::IXamlIslandFactory)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(XamlIslandFactory, ctl::AggregableActivationFactory<DirectUI::XamlIsland>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IXamlIsland** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
