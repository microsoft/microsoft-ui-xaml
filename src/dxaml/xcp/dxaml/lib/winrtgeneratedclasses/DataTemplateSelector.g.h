// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __DataTemplateSelector_GUID "37dcb56e-5a34-499d-974d-d0a00b1c5188"

namespace DirectUI
{
    class DataTemplateSelector;
    class DataTemplate;
    class ElementFactoryGetArgs;
    class ElementFactoryRecycleArgs;
    class UIElement;

    class __declspec(novtable) DataTemplateSelectorGenerated:
        public ctl::WeakReferenceSource
        , public ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector
        , public ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides
        , public ABI::Microsoft::UI::Xaml::IElementFactory
    {
        friend class DirectUI::DataTemplateSelector;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.DataTemplateSelector");

        BEGIN_INTERFACE_MAP(DataTemplateSelectorGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(DataTemplateSelectorGenerated, ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector)
            INTERFACE_ENTRY(DataTemplateSelectorGenerated, ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides)
            INTERFACE_ENTRY(DataTemplateSelectorGenerated, ABI::Microsoft::UI::Xaml::IElementFactory)
        END_INTERFACE_MAP(DataTemplateSelectorGenerated, ctl::WeakReferenceSource)

    public:
        DataTemplateSelectorGenerated();
        ~DataTemplateSelectorGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::DataTemplateSelector;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::DataTemplateSelector;
        }

        // Properties.

        // Events.

        // Methods.
        IFACEMETHOD(GetElement)(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryGetArgs* pArgs, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppReturnValue) override;
        IFACEMETHOD(RecycleElement)(_In_ ABI::Microsoft::UI::Xaml::IElementFactoryRecycleArgs* pArgs) override;
        IFACEMETHOD(SelectTemplate)(_In_opt_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppReturnValue) override;
        IFACEMETHOD(SelectTemplateCore)(_In_opt_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pContainer, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppReturnValue) override;
        IFACEMETHOD(SelectTemplateForItem)(_In_opt_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppReturnValue) override;
        IFACEMETHOD(SelectTemplateForItemCore)(_In_opt_ IInspectable* pItem, _Outptr_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppReturnValue) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "DataTemplateSelector_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) DataTemplateSelectorFactory:
       public ctl::AggregableActivationFactory<DirectUI::DataTemplateSelector>
        , public ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory
    {
        BEGIN_INTERFACE_MAP(DataTemplateSelectorFactory, ctl::AggregableActivationFactory<DirectUI::DataTemplateSelector>)
            INTERFACE_ENTRY(DataTemplateSelectorFactory, ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory)
        END_INTERFACE_MAP(DataTemplateSelectorFactory, ctl::AggregableActivationFactory<DirectUI::DataTemplateSelector>)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::DataTemplateSelector;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
