// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "PasswordBox.g.h"
#include "DataTemplate.g.h"
#include "FlyoutBase.g.h"
#include "InputScope.g.h"
#include "InputValidationCommand.g.h"
#include "InputValidationContext.g.h"
#include "SolidColorBrush.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::PasswordBoxGenerated::PasswordBoxGenerated()
{
}

DirectUI::PasswordBoxGenerated::~PasswordBoxGenerated()
{
}

HRESULT DirectUI::PasswordBoxGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::PasswordBox)))
    {
        *ppObject = static_cast<DirectUI::PasswordBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPasswordBox)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IPasswordBox*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_CanPasteClipboardContent(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_CanPasteClipboardContent, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_Description(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_Description(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Description, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_ErrorTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_ErrorTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ErrorTemplate, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_HasValidationErrors(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_HasValidationErrors, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Header, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_InputScope(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::IInputScope** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<PasswordBox*>(this)->get_InputScopeImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_InputScope(_In_opt_ ABI::Microsoft::UI::Xaml::Input::IInputScope* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<PasswordBox*>(this)->put_InputScopeImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_InputValidationKind(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_InputValidationKind, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_InputValidationKind(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_InputValidationKind, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_InputValidationMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_InputValidationMode, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_InputValidationMode(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_InputValidationMode, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_IsPasswordRevealButtonEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_IsPasswordRevealButtonEnabled, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_IsPasswordRevealButtonEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_IsPasswordRevealButtonEnabled, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_MaxLength(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_MaxLength, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_MaxLength(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_MaxLength, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_Password(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Password, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_Password(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_Password, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_PasswordChar(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PasswordChar, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_PasswordChar(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PasswordChar, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_PasswordRevealMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::PasswordRevealMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PasswordRevealMode, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_PasswordRevealMode(_In_ ABI::Microsoft::UI::Xaml::Controls::PasswordRevealMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PasswordRevealMode, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_PlaceholderText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PlaceholderText, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_PlaceholderText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PlaceholderText, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_PreventKeyboardDisplayOnProgrammaticFocus(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PreventKeyboardDisplayOnProgrammaticFocus, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_PreventKeyboardDisplayOnProgrammaticFocus(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_PreventKeyboardDisplayOnProgrammaticFocus, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_SelectionFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_SelectionFlyout(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_SelectionFlyout, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_SelectionHighlightColor(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_SelectionHighlightColor(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_SelectionHighlightColor, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_TextReadingOrder(_Out_ ABI::Microsoft::UI::Xaml::TextReadingOrder* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_TextReadingOrder, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_TextReadingOrder(_In_ ABI::Microsoft::UI::Xaml::TextReadingOrder value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_TextReadingOrder, value));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_ValidationCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ValidationCommand, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_ValidationCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ValidationCommand, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_ValidationContext(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ValidationContext, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::put_ValidationContext(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ValidationContext, pValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::get_ValidationErrors(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<ABI::Microsoft::UI::Xaml::Controls::InputValidationError*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::PasswordBox_ValidationErrors, ppValue));
}

// Events.
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetContextMenuOpeningEventSourceNoRef(_Outptr_ ContextMenuOpeningEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_ContextMenuOpening, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContextMenuOpeningEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_ContextMenuOpening, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_ContextMenuOpening, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_ContextMenuOpening(_In_ ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_ContextMenuOpening(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_ContextMenuOpening));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetHasValidationErrorsChangedEventSourceNoRef(_Outptr_ HasValidationErrorsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_HasValidationErrorsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HasValidationErrorsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_HasValidationErrorsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_HasValidationErrorsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_HasValidationErrorsChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_HasValidationErrorsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_HasValidationErrorsChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetPasswordChangedEventSourceNoRef(_Outptr_ PasswordChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_PasswordChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PasswordChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_PasswordChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_PasswordChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_PasswordChanged(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PasswordChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasswordChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_PasswordChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PasswordChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasswordChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_PasswordChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetPasswordChangingEventSourceNoRef(_Outptr_ PasswordChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_PasswordChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PasswordChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_PasswordChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_PasswordChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_PasswordChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PasswordBox*, ABI::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PasswordChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasswordChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_PasswordChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PasswordChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PasswordBox*, ABI::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::PasswordBox*, ABI::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasswordChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_PasswordChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetPasteEventSourceNoRef(_Outptr_ PasteEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_Paste, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PasteEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_Paste, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_Paste, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_Paste(_In_ ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_Paste(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_Paste));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::PasswordBoxGenerated::GetValidationErrorEventSourceNoRef(_Outptr_ ValidationErrorEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::PasswordBox_ValidationError, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ValidationErrorEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::PasswordBox_ValidationError, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::PasswordBox_ValidationError, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::add_ValidationError(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::PasswordBoxGenerated::remove_ValidationError(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::PasswordBox_ValidationError));
    }

Cleanup:
    RRETURN(hr);
}
#endif

// Methods.
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::PasteFromClipboard()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "PasswordBox_PasteFromClipboard", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<PasswordBox*>(this)->PasteFromClipboardImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "PasswordBox_PasteFromClipboard", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::PasswordBoxGenerated::SelectAll()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "PasswordBox_SelectAll", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CPasswordBox*>(GetHandle())->SelectAll());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "PasswordBox_SelectAll", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::PasswordBoxFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStaticsFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStaticsFeature_InputValidation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IPasswordBoxStaticsFeature_InputValidation*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_PasswordProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_Password, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_PasswordCharProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_PasswordChar, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_IsPasswordRevealButtonEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_IsPasswordRevealButtonEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_MaxLengthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_MaxLength, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_PlaceholderTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_PlaceholderText, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_SelectionHighlightColorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_PreventKeyboardDisplayOnProgrammaticFocusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_PreventKeyboardDisplayOnProgrammaticFocus, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_PasswordRevealModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_PasswordRevealMode, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_TextReadingOrderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_TextReadingOrder, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_InputScopeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_InputScope, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_CanPasteClipboardContentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_CanPasteClipboardContent, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_SelectionFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_DescriptionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_HeaderPlacement, ppValue));
}



IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_ErrorTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_InputValidationModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_InputValidationMode, ppValue));
}
IFACEMETHODIMP DirectUI::PasswordBoxFactory::get_InputValidationKindProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::PasswordBox_InputValidationKind, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_PasswordBox()
    {
        RRETURN(ctl::ActivationFactoryCreator<PasswordBoxFactory>::CreateActivationFactory());
    }
}
