// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Brush.g.h"
#include "Transform.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::BrushGenerated::BrushGenerated()
{
}

DirectUI::BrushGenerated::~BrushGenerated()
{
}

HRESULT DirectUI::BrushGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Brush)))
    {
        *ppObject = static_cast<DirectUI::Brush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IBrush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrushOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IBrushOverrides*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Composition::IAnimationObject)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Composition::IAnimationObject*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks)) && Feature_XamlMotionSystemHoldbacks::IsEnabled())
    {
        *ppObject = ctl::interface_cast<ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::BrushGenerated::get_Opacity(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Brush_Opacity, pValue));
}
IFACEMETHODIMP DirectUI::BrushGenerated::put_Opacity(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Brush_Opacity, value));
}
IFACEMETHODIMP DirectUI::BrushGenerated::get_RelativeTransform(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ITransform** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Brush_RelativeTransform, ppValue));
}
IFACEMETHODIMP DirectUI::BrushGenerated::put_RelativeTransform(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ITransform* pValue)
{
    IFC_RETURN(NonStrictOnlyApiCheck(this, L"RelativeTransform"));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Brush_RelativeTransform, pValue));
}
IFACEMETHODIMP DirectUI::BrushGenerated::get_Transform(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ITransform** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Brush_Transform, ppValue));
}
IFACEMETHODIMP DirectUI::BrushGenerated::put_Transform(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ITransform* pValue)
{
    IFC_RETURN(NonStrictOnlyApiCheck(this, L"Transform"));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Brush_Transform, pValue));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::BrushGenerated::PopulatePropertyInfoOverride(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Brush_PopulatePropertyInfoOverride", 0);
    }
    ARG_NOTNULL(propertyName, "propertyName");
    ARG_NOTNULL(pAnimationPropertyInfo, "animationPropertyInfo");
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"PopulatePropertyInfoOverride"));
    IFC(static_cast<Brush*>(this)->PopulatePropertyInfoOverrideImpl(propertyName, pAnimationPropertyInfo));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Brush_PopulatePropertyInfoOverride", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::BrushGenerated::PopulatePropertyInfoOverrideProtected(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Media::IBrushOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));
    }
    else
    {
        IFC(PopulatePropertyInfoOverride(propertyName, pAnimationPropertyInfo));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::BrushGenerated::StartAnimation(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Brush_StartAnimation", 0);
    }
    ARG_NOTNULL(pAnimation, "animation");
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"StartAnimation"));
    IFC(static_cast<Brush*>(this)->StartAnimationImpl(pAnimation));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Brush_StartAnimation", hr);
    }
    RRETURN(hr);
}
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
_Check_return_ HRESULT STDMETHODCALLTYPE DirectUI::BrushGenerated::StopAnimation(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Brush_StopAnimation", 0);
    }
    ARG_NOTNULL(pAnimation, "animation");
    IFC(CheckThread());
    IFC(StrictOnlyApiCheck(this, L"StopAnimation"));
    IFC(static_cast<Brush*>(this)->StopAnimationImpl(pAnimation));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Brush_StopAnimation", hr);
    }
    RRETURN(hr);
}
#endif

HRESULT DirectUI::BrushFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrushFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IBrushFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrushStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IBrushStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::BrushFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::BrushFactory::get_OpacityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Brush_Opacity, ppValue));
}
IFACEMETHODIMP DirectUI::BrushFactory::get_TransformProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Brush_Transform, ppValue));
}
IFACEMETHODIMP DirectUI::BrushFactory::get_RelativeTransformProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Brush_RelativeTransform, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Brush()
    {
        RRETURN(ctl::ActivationFactoryCreator<BrushFactory>::CreateActivationFactory());
    }
}
