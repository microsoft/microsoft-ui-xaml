// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __XamlLight_GUID "dc77f7b0-d742-474a-9104-6612c0a1a951"

namespace DirectUI
{
    class XamlLight;
    class Brush;
    class UIElement;

    class __declspec(novtable) __declspec(uuid(__XamlLight_GUID)) XamlLight:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Media::IXamlLight
        , public ABI::Microsoft::UI::Xaml::Media::IXamlLightProtected
        , public ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.XamlLight");

        BEGIN_INTERFACE_MAP(XamlLight, DirectUI::DependencyObject)
            INTERFACE_ENTRY(XamlLight, ABI::Microsoft::UI::Xaml::Media::IXamlLight)
            INTERFACE_ENTRY(XamlLight, ABI::Microsoft::UI::Xaml::Media::IXamlLightProtected)
            INTERFACE_ENTRY(XamlLight, ABI::Microsoft::UI::Xaml::Media::IXamlLightOverrides)
        END_INTERFACE_MAP(XamlLight, DirectUI::DependencyObject)

    public:
        XamlLight();
        ~XamlLight() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlLight;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::XamlLight;
        }

        // Properties.
        IFACEMETHOD(get_CompositionLight)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Composition::ICompositionLight** ppValue) override;
        IFACEMETHOD(put_CompositionLight)(_In_opt_ ABI::Microsoft::UI::Composition::ICompositionLight* pValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(GetId)(_Out_ HSTRING* pReturnValue) override;
        _Check_return_ HRESULT GetIdProtected(_Out_ HSTRING* pReturnValue);
        IFACEMETHOD(OnConnected)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pNewElement) override;
        _Check_return_ HRESULT OnConnectedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pNewElement);
        IFACEMETHOD(OnDisconnected)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pOldElement) override;
        _Check_return_ HRESULT OnDisconnectedProtected(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pOldElement);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.
         _Check_return_ HRESULT get_CompositionLightImpl(_Outptr_result_maybenull_ ABI::Microsoft::UI::Composition::ICompositionLight** ppValue); 
         _Check_return_ HRESULT put_CompositionLightImpl(_In_opt_ ABI::Microsoft::UI::Composition::ICompositionLight* pValue); 

        // Customized methods.
         _Check_return_ HRESULT GetIdImpl(_Out_ HSTRING* pReturnValue); 
         _Check_return_ HRESULT OnConnectedImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pNewElement); 
         _Check_return_ HRESULT OnDisconnectedImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pOldElement); 

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) XamlLightFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::IXamlLightFactory
        , public ABI::Microsoft::UI::Xaml::Media::IXamlLightStatics
    {
        BEGIN_INTERFACE_MAP(XamlLightFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(XamlLightFactory, ABI::Microsoft::UI::Xaml::Media::IXamlLightFactory)
            INTERFACE_ENTRY(XamlLightFactory, ABI::Microsoft::UI::Xaml::Media::IXamlLightStatics)
        END_INTERFACE_MAP(XamlLightFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IXamlLight** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.
        IFACEMETHOD(AddTargetElement)(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement) override;
        IFACEMETHOD(RemoveTargetElement)(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement) override;
        IFACEMETHOD(AddTargetBrush)(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush) override;
        IFACEMETHOD(RemoveTargetBrush)(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlLight;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT AddTargetElementImpl(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement); 
         _Check_return_ HRESULT RemoveTargetElementImpl(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement); 
         _Check_return_ HRESULT AddTargetBrushImpl(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush); 
         _Check_return_ HRESULT RemoveTargetBrushImpl(_In_ HSTRING lightId, _In_ ABI::Microsoft::UI::Xaml::Media::IBrush* pBrush); 
    };
}
