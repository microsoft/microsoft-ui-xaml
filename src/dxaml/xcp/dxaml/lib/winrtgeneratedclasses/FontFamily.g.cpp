// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FontFamily.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FontFamily::FontFamily()
{
}

DirectUI::FontFamily::~FontFamily()
{
}

HRESULT DirectUI::FontFamily::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FontFamily)))
    {
        *ppObject = static_cast<DirectUI::FontFamily*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IFontFamily)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IFontFamily*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FontFamily::get_Source(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;

    xstring_ptr valueCore;

    ARG_VALIDRETURNPOINTER(pValue);

    IFC(CheckThread());

    IFC(static_cast<CFontFamily*>(GetHandle())->get_Source(&valueCore));

    IFC(CValueBoxer::ConvertToFramework(valueCore, pValue, /* fReleaseCoreValue */ TRUE));

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::FontFamily::put_Source(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;

    xephemeral_string_ptr valueCore(value);

    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CFontFamily*>(GetHandle())->put_Source(valueCore));


Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.

HRESULT DirectUI::FontFamilyFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IFontFamilyFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IFontFamilyFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IFontFamilyStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IFontFamilyStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::FontFamilyFactory::CreateInstanceWithName(_In_ HSTRING familyName, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(familyName, "familyName");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithNameImpl(familyName, pOuter, ppInner, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::FontFamilyFactory::get_XamlAutoFontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckActivationAllowed());
    IFC(get_XamlAutoFontFamilyImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FontFamily()
    {
        RRETURN(ctl::ActivationFactoryCreator<FontFamilyFactory>::CreateActivationFactory());
    }
}
