// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __GroupStyle_GUID "13e262c0-7e62-48f5-85af-294ffc3748b7"

namespace DirectUI
{
    class GroupStyle;
    class DataTemplate;
    class DataTemplateSelector;
    class ItemsPanelTemplate;
    class Style;
    class StyleSelector;

    class __declspec(novtable) GroupStyleGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Controls::IGroupStyle
        , public ABI::Microsoft::UI::Xaml::Data::INotifyPropertyChanged
    {
        friend class DirectUI::GroupStyle;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.GroupStyle");

        BEGIN_INTERFACE_MAP(GroupStyleGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(GroupStyleGenerated, ABI::Microsoft::UI::Xaml::Controls::IGroupStyle)
            INTERFACE_ENTRY(GroupStyleGenerated, ABI::Microsoft::UI::Xaml::Data::INotifyPropertyChanged)
        END_INTERFACE_MAP(GroupStyleGenerated, DirectUI::DependencyObject)

    public:
        GroupStyleGenerated();
        ~GroupStyleGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventArgs> PropertyChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::GroupStyle;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::GroupStyle;
        }

        // Properties.
        IFACEMETHOD(get_ContainerStyle)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue) override;
        IFACEMETHOD(put_ContainerStyle)(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue) override;
        IFACEMETHOD(get_ContainerStyleSelector)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector** ppValue) override;
        IFACEMETHOD(put_ContainerStyleSelector)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IStyleSelector* pValue) override;
        IFACEMETHOD(get_HeaderContainerStyle)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue) override;
        IFACEMETHOD(put_HeaderContainerStyle)(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue) override;
        IFACEMETHOD(get_HeaderTemplate)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue) override;
        IFACEMETHOD(put_HeaderTemplate)(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue) override;
        IFACEMETHOD(get_HeaderTemplateSelector)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector** ppValue) override;
        IFACEMETHOD(put_HeaderTemplateSelector)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IDataTemplateSelector* pValue) override;
        IFACEMETHOD(get_HidesIfEmpty)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_HidesIfEmpty)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_Panel)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate** ppValue) override;
        IFACEMETHOD(put_Panel)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate* pValue) override;

        // Events.
        _Check_return_ HRESULT GetPropertyChangedEventSourceNoRef(_Outptr_ PropertyChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_PropertyChanged)(_In_ ABI::Microsoft::UI::Xaml::Data::IPropertyChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_PropertyChanged)(_In_ EventRegistrationToken token) override;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "GroupStyle_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) GroupStyleFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IGroupStyleFactory
    {
        BEGIN_INTERFACE_MAP(GroupStyleFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(GroupStyleFactory, ABI::Microsoft::UI::Xaml::Controls::IGroupStyleFactory)
        END_INTERFACE_MAP(GroupStyleFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IGroupStyle** ppInstance);

        // Static properties.

        // Dependency properties.
        
        
        
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::GroupStyle;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
