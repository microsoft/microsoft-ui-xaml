// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "VisualState.g.h"
#include "SetterBaseCollection.g.h"
#include "Storyboard.g.h"
#include "TemplateContent.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::VisualState::VisualState()
{
}

DirectUI::VisualState::~VisualState()
{
}

HRESULT DirectUI::VisualState::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::VisualState)))
    {
        *ppObject = static_cast<DirectUI::VisualState*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualState)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualState*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::VisualState::get___DeferredSetters(_Outptr_result_maybenull_ DirectUI::TemplateContent** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualState___DeferredSetters, ppValue));
}
_Check_return_ HRESULT DirectUI::VisualState::put___DeferredSetters(_In_opt_ DirectUI::TemplateContent* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::VisualState___DeferredSetters, pValue));
}
_Check_return_ HRESULT DirectUI::VisualState::get___DeferredStoryboard(_Outptr_result_maybenull_ DirectUI::TemplateContent** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualState___DeferredStoryboard, ppValue));
}
_Check_return_ HRESULT DirectUI::VisualState::put___DeferredStoryboard(_In_opt_ DirectUI::TemplateContent* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::VisualState___DeferredStoryboard, pValue));
}
IFACEMETHODIMP DirectUI::VisualState::get_Name(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<VisualState*>(this)->get_NameImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualState::get_Setters(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::ISetterBaseCollection** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualState_Setters, ppValue));
}
IFACEMETHODIMP DirectUI::VisualState::get_StateTriggers(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::StateTriggerBase*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualState_StateTriggers, ppValue));
}
IFACEMETHODIMP DirectUI::VisualState::get_Storyboard(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboard** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualState_Storyboard, ppValue));
}
IFACEMETHODIMP DirectUI::VisualState::put_Storyboard(_In_opt_ ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboard* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::VisualState_Storyboard, pValue));
}

// Events.

// Methods.

// Factory methods.

// Dependency properties.






// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_VisualState()
    {
        RRETURN(ctl::ActivationFactoryCreator<VisualStateFactory>::CreateActivationFactory());
    }
}
