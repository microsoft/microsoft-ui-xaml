// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Control.g.h"

#define __Thumb_GUID "dfe8786a-b69e-4138-9bc6-8cc643ba04b4"

namespace DirectUI
{
    class Thumb;

    class __declspec(novtable) ThumbGenerated:
        public DirectUI::Control
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumb
    {
        friend class DirectUI::Thumb;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Primitives.Thumb");

        BEGIN_INTERFACE_MAP(ThumbGenerated, DirectUI::Control)
            INTERFACE_ENTRY(ThumbGenerated, ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumb)
        END_INTERFACE_MAP(ThumbGenerated, DirectUI::Control)

    public:
        ThumbGenerated();
        ~ThumbGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs> DragStartedEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs> DragDeltaEventSourceType;
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs> DragCompletedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Thumb;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Thumb;
        }

        // Properties.
        IFACEMETHOD(get_IsDragging)(_Out_ BOOLEAN* pValue) override;
        _Check_return_ HRESULT put_IsDragging(_In_ BOOLEAN value);
        _Check_return_ HRESULT get_IsPointerOver(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT put_IsPointerOver(_In_ BOOLEAN value);

        // Events.
        _Check_return_ HRESULT GetDragCompletedEventSourceNoRef(_Outptr_ DragCompletedEventSourceType** ppEventSource);
        IFACEMETHOD(add_DragCompleted)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_DragCompleted)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetDragDeltaEventSourceNoRef(_Outptr_ DragDeltaEventSourceType** ppEventSource);
        IFACEMETHOD(add_DragDelta)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_DragDelta)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetDragStartedEventSourceNoRef(_Outptr_ DragStartedEventSourceType** ppEventSource);
        IFACEMETHOD(add_DragStarted)(_In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_DragStarted)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(CancelDrag)() override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
        BOOLEAN m_isPointerOver;
    };
}

#include "Thumb_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ThumbFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics
    {
        BEGIN_INTERFACE_MAP(ThumbFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(ThumbFactory, ABI::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics)
        END_INTERFACE_MAP(ThumbFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_IsDraggingProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Thumb;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
