// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "TranslateTransform.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::TranslateTransform::TranslateTransform()
{
}

DirectUI::TranslateTransform::~TranslateTransform()
{
}

HRESULT DirectUI::TranslateTransform::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::TranslateTransform)))
    {
        *ppObject = static_cast<DirectUI::TranslateTransform*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ITranslateTransform)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ITranslateTransform*>(this);
    }
    else
    {
        RRETURN(DirectUI::Transform::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::TranslateTransform::get_X(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_X, pValue));
}
IFACEMETHODIMP DirectUI::TranslateTransform::put_X(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_X, value));
}
_Check_return_ HRESULT DirectUI::TranslateTransform::get_XAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_XAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::TranslateTransform::put_XAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_XAnimation, pValue));
}
IFACEMETHODIMP DirectUI::TranslateTransform::get_Y(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_Y, pValue));
}
IFACEMETHODIMP DirectUI::TranslateTransform::put_Y(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_Y, value));
}
_Check_return_ HRESULT DirectUI::TranslateTransform::get_YAnimation(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_YAnimation, ppValue));
}
_Check_return_ HRESULT DirectUI::TranslateTransform::put_YAnimation(_In_opt_ IInspectable* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TranslateTransform_YAnimation, pValue));
}

// Events.

// Methods.

HRESULT DirectUI::TranslateTransformFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ITranslateTransformStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ITranslateTransformStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::TranslateTransformFactory::get_XProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TranslateTransform_X, ppValue));
}

IFACEMETHODIMP DirectUI::TranslateTransformFactory::get_YProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TranslateTransform_Y, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_TranslateTransform()
    {
        RRETURN(ctl::ActivationFactoryCreator<TranslateTransformFactory>::CreateActivationFactory());
    }
}
