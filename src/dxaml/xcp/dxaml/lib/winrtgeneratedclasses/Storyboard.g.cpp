// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Storyboard.g.h"
#include "Timeline.g.h"
#include "TimelineCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::StoryboardGenerated::StoryboardGenerated()
{
}

DirectUI::StoryboardGenerated::~StoryboardGenerated()
{
}

HRESULT DirectUI::StoryboardGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Storyboard)))
    {
        *ppObject = static_cast<DirectUI::Storyboard*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboard)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboard*>(this);
    }
    else
    {
        RRETURN(DirectUI::ParallelTimeline::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::StoryboardGenerated::get_Children(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Timeline*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Storyboard_Children, ppValue));
}
_Check_return_ HRESULT DirectUI::StoryboardGenerated::get_IsEssential(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Storyboard_IsEssential, pValue));
}
_Check_return_ HRESULT DirectUI::StoryboardGenerated::put_IsEssential(_In_ BOOLEAN value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Storyboard_IsEssential, value));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::StoryboardGenerated::Begin()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_Begin", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CStoryboard*>(GetHandle())->Begin());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_Begin", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::GetCurrentState(_Out_ ABI::Microsoft::UI::Xaml::Media::Animation::ClockState* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_GetCurrentState", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Storyboard*>(this)->GetCurrentStateImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_GetCurrentState", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::GetCurrentTime(_Out_ ABI::Windows::Foundation::TimeSpan* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_GetCurrentTime", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Storyboard*>(this)->GetCurrentTimeImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_GetCurrentTime", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::Pause()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_Pause", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CStoryboard*>(GetHandle())->Pause());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_Pause", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::Resume()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_Resume", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CStoryboard*>(GetHandle())->Resume());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_Resume", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::Seek(_In_ ABI::Windows::Foundation::TimeSpan offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_Seek", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Storyboard*>(this)->SeekImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_Seek", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::SeekAlignedToLastTick(_In_ ABI::Windows::Foundation::TimeSpan offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_SeekAlignedToLastTick", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Storyboard*>(this)->SeekAlignedToLastTickImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_SeekAlignedToLastTick", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::SkipToFill()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_SkipToFill", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CStoryboard*>(GetHandle())->SkipToFill());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_SkipToFill", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::StoryboardGenerated::Stop()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Storyboard_Stop", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CStoryboard*>(GetHandle())->Stop());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Storyboard_Stop", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::StoryboardFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.



// Attached properties.
_Check_return_ HRESULT DirectUI::StoryboardFactory::GetTargetPropertyStatic(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _Out_ HSTRING* pPath)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::Timeline*>(pElement), KnownPropertyIndex::Storyboard_TargetProperty, pPath));
}

_Check_return_ HRESULT DirectUI::StoryboardFactory::SetTargetPropertyStatic(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _In_opt_ HSTRING path)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::Timeline*>(pElement), KnownPropertyIndex::Storyboard_TargetProperty, path));
}


IFACEMETHODIMP DirectUI::StoryboardFactory::get_TargetPropertyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Storyboard_TargetProperty, ppValue));
}


IFACEMETHODIMP DirectUI::StoryboardFactory::GetTargetProperty(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _Out_ HSTRING* pPath)
{
    RRETURN(GetTargetPropertyStatic(pElement, pPath));
}

IFACEMETHODIMP DirectUI::StoryboardFactory::SetTargetProperty(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _In_opt_ HSTRING path)
{
    RRETURN(SetTargetPropertyStatic(pElement, path));
}
_Check_return_ HRESULT DirectUI::StoryboardFactory::GetTargetNameStatic(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _Out_ HSTRING* pName)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::Timeline*>(pElement), KnownPropertyIndex::Storyboard_TargetName, pName));
}

_Check_return_ HRESULT DirectUI::StoryboardFactory::SetTargetNameStatic(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _In_opt_ HSTRING name)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::Timeline*>(pElement), KnownPropertyIndex::Storyboard_TargetName, name));
}


IFACEMETHODIMP DirectUI::StoryboardFactory::get_TargetNameProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Storyboard_TargetName, ppValue));
}


IFACEMETHODIMP DirectUI::StoryboardFactory::GetTargetName(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _Out_ HSTRING* pName)
{
    RRETURN(GetTargetNameStatic(pElement, pName));
}

IFACEMETHODIMP DirectUI::StoryboardFactory::SetTargetName(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pElement, _In_opt_ HSTRING name)
{
    RRETURN(SetTargetNameStatic(pElement, name));
}

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::StoryboardFactory::SetTarget(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::ITimeline* pTimeline, _In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pTarget)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "Storyboard_SetTarget", 0);
    }
    ARG_NOTNULL(pTimeline, "timeline");
    ARG_NOTNULL(pTarget, "target");
    IFC(CheckActivationAllowed());
    IFC(SetTargetImpl(pTimeline, pTarget));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "Storyboard_SetTarget", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Storyboard()
    {
        RRETURN(ctl::ActivationFactoryCreator<StoryboardFactory>::CreateActivationFactory());
    }
}
