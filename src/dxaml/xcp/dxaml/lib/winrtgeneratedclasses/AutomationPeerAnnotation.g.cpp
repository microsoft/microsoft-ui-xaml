// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "AutomationPeerAnnotation.g.h"
#include "AutomationPeer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::AutomationPeerAnnotation::AutomationPeerAnnotation()
{
}

DirectUI::AutomationPeerAnnotation::~AutomationPeerAnnotation()
{
}

HRESULT DirectUI::AutomationPeerAnnotation::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::AutomationPeerAnnotation)))
    {
        *ppObject = static_cast<DirectUI::AutomationPeerAnnotation*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::AutomationPeerAnnotation::get_Peer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::AutomationPeerAnnotation_Peer, ppValue));
}
IFACEMETHODIMP DirectUI::AutomationPeerAnnotation::put_Peer(_In_opt_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::AutomationPeerAnnotation_Peer, pValue));
}
IFACEMETHODIMP DirectUI::AutomationPeerAnnotation::get_Type(_Out_ ABI::Microsoft::UI::Xaml::Automation::AnnotationType* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::AutomationPeerAnnotation_Type, pValue));
}
IFACEMETHODIMP DirectUI::AutomationPeerAnnotation::put_Type(_In_ ABI::Microsoft::UI::Xaml::Automation::AnnotationType value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::AutomationPeerAnnotation_Type, value));
}

// Events.

// Methods.

HRESULT DirectUI::AutomationPeerAnnotationFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::AutomationPeerAnnotationFactory::CreateInstance(_In_ ABI::Microsoft::UI::Xaml::Automation::AnnotationType type, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(type, ppInstance));
Cleanup:
    return hr;
}
IFACEMETHODIMP DirectUI::AutomationPeerAnnotationFactory::CreateWithPeerParameter(_In_ ABI::Microsoft::UI::Xaml::Automation::AnnotationType type, _In_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer* pPeer, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pPeer, "peer");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateWithPeerParameterImpl(type, pPeer, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::AutomationPeerAnnotationFactory::get_TypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::AutomationPeerAnnotation_Type, ppValue));
}
IFACEMETHODIMP DirectUI::AutomationPeerAnnotationFactory::get_PeerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::AutomationPeerAnnotation_Peer, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_AutomationPeerAnnotation()
    {
        RRETURN(ctl::ActivationFactoryCreator<AutomationPeerAnnotationFactory>::CreateActivationFactory());
    }
}
