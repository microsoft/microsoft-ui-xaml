// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "ErrorEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::ErrorEventArgs::ErrorEventArgs(): m_errorCode(), m_errorType()
{
}

DirectUI::ErrorEventArgs::~ErrorEventArgs()
{
}

HRESULT DirectUI::ErrorEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ErrorEventArgs)))
    {
        *ppObject = static_cast<DirectUI::ErrorEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
_Check_return_ HRESULT DirectUI::ErrorEventArgs::get_ErrorMessage(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(m_errorMessage.CopyTo(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ErrorEventArgs::put_ErrorMessage(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(m_errorMessage.Set(value));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ErrorEventArgs::get_ErrorCode(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_errorCode, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ErrorEventArgs::put_ErrorCode(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_errorCode));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ErrorEventArgs::get_ErrorType(_Out_ DirectUI::ErrorType* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_errorType, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ErrorEventArgs::put_ErrorType(_In_ DirectUI::ErrorType value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_errorType));
Cleanup:
    RRETURN(hr);
}

// Methods.


