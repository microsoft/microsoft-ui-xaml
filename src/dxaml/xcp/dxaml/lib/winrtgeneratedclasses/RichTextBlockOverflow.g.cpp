// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "RichTextBlockOverflow.g.h"
#include "RichTextBlock.g.h"
#include "TextPointer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::RichTextBlockOverflowGenerated::RichTextBlockOverflowGenerated()
{
}

DirectUI::RichTextBlockOverflowGenerated::~RichTextBlockOverflowGenerated()
{
}

HRESULT DirectUI::RichTextBlockOverflowGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::RichTextBlockOverflow)))
    {
        *ppObject = static_cast<DirectUI::RichTextBlockOverflow*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow*>(this);
    }
    else
    {
        RRETURN(DirectUI::FrameworkElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_BaselineOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<RichTextBlockOverflow*>(this)->get_BaselineOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_ContentEnd(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<RichTextBlockOverflow*>(this)->get_ContentEndImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_ContentSource(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlock** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<RichTextBlockOverflow*>(this)->get_ContentSourceImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_ContentStart(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<RichTextBlockOverflow*>(this)->get_ContentStartImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_HasOverflowContent(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_HasOverflowContent, pValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_IsTextTrimmed(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_IsTextTrimmed, pValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_MaxLines(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_MaxLines, pValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::put_MaxLines(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_MaxLines, value));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_OverflowContentTarget(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_OverflowContentTarget, ppValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::put_OverflowContentTarget(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_OverflowContentTarget, pValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::get_Padding(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_Padding, pValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::put_Padding(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichTextBlockOverflow_Padding, value));
}

// Events.
_Check_return_ HRESULT DirectUI::RichTextBlockOverflowGenerated::GetIsTextTrimmedChangedEventSourceNoRef(_Outptr_ IsTextTrimmedChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichTextBlockOverflow_IsTextTrimmedChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<IsTextTrimmedChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichTextBlockOverflow_IsTextTrimmedChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichTextBlockOverflow_IsTextTrimmedChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::add_IsTextTrimmedChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    IsTextTrimmedChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetIsTextTrimmedChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::remove_IsTextTrimmedChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    IsTextTrimmedChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetIsTextTrimmedChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichTextBlockOverflow_IsTextTrimmedChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::RichTextBlockOverflowGenerated::GetPositionFromPoint(_In_ ABI::Windows::Foundation::Point point, _Outptr_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "RichTextBlockOverflow_GetPositionFromPoint", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<RichTextBlockOverflow*>(this)->GetPositionFromPointImpl(point, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "RichTextBlockOverflow_GetPositionFromPoint", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::RichTextBlockOverflowFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::RichTextBlockOverflowFactory::get_OverflowContentTargetProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichTextBlockOverflow_OverflowContentTarget, ppValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowFactory::get_PaddingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichTextBlockOverflow_Padding, ppValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowFactory::get_HasOverflowContentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichTextBlockOverflow_HasOverflowContent, ppValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowFactory::get_MaxLinesProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichTextBlockOverflow_MaxLines, ppValue));
}
IFACEMETHODIMP DirectUI::RichTextBlockOverflowFactory::get_IsTextTrimmedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichTextBlockOverflow_IsTextTrimmed, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_RichTextBlockOverflow()
    {
        RRETURN(ctl::ActivationFactoryCreator<RichTextBlockOverflowFactory>::CreateActivationFactory());
    }
}
