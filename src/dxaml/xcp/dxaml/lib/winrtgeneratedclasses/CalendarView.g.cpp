// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CalendarView.g.h"
#include "Brush.g.h"
#include "CalendarViewTemplateSettings.g.h"
#include "FontFamily.g.h"
#include "Style.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CalendarViewGenerated::CalendarViewGenerated()
{
}

DirectUI::CalendarViewGenerated::~CalendarViewGenerated()
{
}

HRESULT DirectUI::CalendarViewGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CalendarView)))
    {
        *ppObject = static_cast<DirectUI::CalendarView*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICalendarView)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICalendarView*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_BlackoutBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_BlackoutBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_BlackoutForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_BlackoutForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_BlackoutStrikethroughBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutStrikethroughBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_BlackoutStrikethroughBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_BlackoutStrikethroughBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarIdentifier(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarIdentifier, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarIdentifier(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarIdentifier, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemBorderThickness(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBorderThickness, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemBorderThickness(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemBorderThickness, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemCornerRadius(_Out_ ABI::Microsoft::UI::Xaml::CornerRadius* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemCornerRadius, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemCornerRadius(_In_ ABI::Microsoft::UI::Xaml::CornerRadius value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemCornerRadius, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemDisabledBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemDisabledBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemDisabledBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemDisabledBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemHoverBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemHoverBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemHoverBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemHoverBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarItemPressedBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemPressedBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarItemPressedBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarItemPressedBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_CalendarViewDayItemStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarViewDayItemStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_CalendarViewDayItemStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_CalendarViewDayItemStyle, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayItemFontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayItemFontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontFamily, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayItemFontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontSize, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayItemFontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontSize, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayItemFontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontStyle, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayItemFontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontStyle, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayItemFontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontWeight, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayItemFontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemFontWeight, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayItemMargin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemMargin, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayItemMargin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayItemMargin, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DayOfWeekFormat(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayOfWeekFormat, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DayOfWeekFormat(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DayOfWeekFormat, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DisabledForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DisabledForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DisabledForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DisabledForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_DisplayMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_DisplayMode, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_DisplayMode(_In_ ABI::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_DisplayMode, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstDayOfWeek(_Out_ ABI::Windows::Globalization::DayOfWeek* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstDayOfWeek, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstDayOfWeek(_In_ ABI::Windows::Globalization::DayOfWeek value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstDayOfWeek, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfMonthLabelFontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfMonthLabelFontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontFamily, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfMonthLabelFontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontSize, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfMonthLabelFontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontSize, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfMonthLabelFontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontStyle, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfMonthLabelFontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontStyle, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfMonthLabelFontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontWeight, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfMonthLabelFontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontWeight, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfMonthLabelMargin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelMargin, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfMonthLabelMargin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfMonthLabelMargin, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfYearDecadeLabelFontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfYearDecadeLabelFontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontFamily, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfYearDecadeLabelFontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontSize, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfYearDecadeLabelFontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontSize, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfYearDecadeLabelFontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontStyle, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfYearDecadeLabelFontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontStyle, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfYearDecadeLabelFontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontWeight, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfYearDecadeLabelFontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontWeight, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FirstOfYearDecadeLabelMargin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelMargin, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FirstOfYearDecadeLabelMargin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelMargin, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_FocusBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_FocusBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_FocusBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_FocusBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_HorizontalDayItemAlignment(_Out_ ABI::Microsoft::UI::Xaml::HorizontalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_HorizontalDayItemAlignment, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_HorizontalDayItemAlignment(_In_ ABI::Microsoft::UI::Xaml::HorizontalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_HorizontalDayItemAlignment, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_HorizontalFirstOfMonthLabelAlignment(_Out_ ABI::Microsoft::UI::Xaml::HorizontalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_HorizontalFirstOfMonthLabelAlignment, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_HorizontalFirstOfMonthLabelAlignment(_In_ ABI::Microsoft::UI::Xaml::HorizontalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_HorizontalFirstOfMonthLabelAlignment, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_HoverBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_HoverBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_HoverBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_HoverBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_IsGroupLabelVisible(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsGroupLabelVisible, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_IsGroupLabelVisible(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsGroupLabelVisible, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_IsOutOfScopeEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsOutOfScopeEnabled, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_IsOutOfScopeEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsOutOfScopeEnabled, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_IsTodayHighlighted(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsTodayHighlighted, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_IsTodayHighlighted(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_IsTodayHighlighted, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MaxDate(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MaxDate, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MaxDate(_In_ ABI::Windows::Foundation::DateTime value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MaxDate, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MinDate(_Out_ ABI::Windows::Foundation::DateTime* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MinDate, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MinDate(_In_ ABI::Windows::Foundation::DateTime value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MinDate, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MonthYearItemFontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MonthYearItemFontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontFamily, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MonthYearItemFontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontSize, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MonthYearItemFontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontSize, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MonthYearItemFontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontStyle, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MonthYearItemFontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontStyle, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MonthYearItemFontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontWeight, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MonthYearItemFontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemFontWeight, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_MonthYearItemMargin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemMargin, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_MonthYearItemMargin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_MonthYearItemMargin, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_NumberOfWeeksInView(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_NumberOfWeeksInView, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_NumberOfWeeksInView(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_NumberOfWeeksInView, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_OutOfScopeBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_OutOfScopeBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_OutOfScopeForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_OutOfScopeForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_OutOfScopeHoverForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeHoverForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_OutOfScopeHoverForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopeHoverForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_OutOfScopePressedForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopePressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_OutOfScopePressedForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_OutOfScopePressedForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_PressedBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_PressedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_PressedBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_PressedBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_PressedForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_PressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_PressedForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_PressedForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedDates(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::DateTime>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDates, ppValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::put_SelectedDates(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::DateTime>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDates, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedDisabledBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDisabledBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedDisabledBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDisabledBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedDisabledForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDisabledForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedDisabledForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedDisabledForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedHoverBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedHoverBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedHoverBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedHoverBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedHoverForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedHoverForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedHoverForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedHoverForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedPressedBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedPressedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedPressedBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedPressedBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectedPressedForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedPressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectedPressedForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectedPressedForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_SelectionMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectionMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectionMode, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_SelectionMode(_In_ ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectionMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_SelectionMode, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TemplateSettings(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TemplateSettings, ppValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::put_TemplateSettings(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TemplateSettings, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayBlackoutBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBlackoutBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayBlackoutBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBlackoutBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayBlackoutForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBlackoutForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayBlackoutForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayBlackoutForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayDisabledBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayDisabledBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayDisabledBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayDisabledBackground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayFontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayFontWeight, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayFontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayFontWeight, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayForeground, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayHoverBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayHoverBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayHoverBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayHoverBackground, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::get_TodayHoverBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayHoverBorderBrush, ppValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::put_TodayHoverBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayHoverBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodayPressedBackground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayPressedBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodayPressedBackground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayPressedBackground, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::get_TodayPressedBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayPressedBorderBrush, ppValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::put_TodayPressedBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodayPressedBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_TodaySelectedInnerBorderBrush(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodaySelectedInnerBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_TodaySelectedInnerBorderBrush(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_TodaySelectedInnerBorderBrush, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_VerticalDayItemAlignment(_Out_ ABI::Microsoft::UI::Xaml::VerticalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_VerticalDayItemAlignment, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_VerticalDayItemAlignment(_In_ ABI::Microsoft::UI::Xaml::VerticalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_VerticalDayItemAlignment, value));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::get_VerticalFirstOfMonthLabelAlignment(_Out_ ABI::Microsoft::UI::Xaml::VerticalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarView_VerticalFirstOfMonthLabelAlignment, pValue));
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::put_VerticalFirstOfMonthLabelAlignment(_In_ ABI::Microsoft::UI::Xaml::VerticalAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarView_VerticalFirstOfMonthLabelAlignment, value));
}

// Events.
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::GetCalendarViewDayItemChangingEventSourceNoRef(_Outptr_ CalendarViewDayItemChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::CalendarView_CalendarViewDayItemChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CalendarViewDayItemChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::CalendarView_CalendarViewDayItemChanging, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::CalendarView_CalendarViewDayItemChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CalendarViewGenerated::add_CalendarViewDayItemChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CalendarViewDayItemChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCalendarViewDayItemChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CalendarViewGenerated::remove_CalendarViewDayItemChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CalendarViewDayItemChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCalendarViewDayItemChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::CalendarView_CalendarViewDayItemChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::CalendarViewGenerated::GetSelectedDatesChangedEventSourceNoRef(_Outptr_ SelectedDatesChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::CalendarView_SelectedDatesChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectedDatesChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::CalendarView_SelectedDatesChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::CalendarView_SelectedDatesChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CalendarViewGenerated::add_SelectedDatesChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectedDatesChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectedDatesChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::CalendarViewGenerated::remove_SelectedDatesChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectedDatesChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectedDatesChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::CalendarView_SelectedDatesChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::CalendarViewGenerated::SetDisplayDate(_In_ ABI::Windows::Foundation::DateTime date)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CalendarView_SetDisplayDate", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CalendarView*>(this)->SetDisplayDateImpl(date));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CalendarView_SetDisplayDate", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CalendarViewGenerated::SetYearDecadeDisplayDimensions(_In_ INT columns, _In_ INT rows)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CalendarView_SetYearDecadeDisplayDimensions", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<CalendarView*>(this)->SetYearDecadeDisplayDimensionsImpl(columns, rows));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CalendarView_SetYearDecadeDisplayDimensions", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::CalendarViewGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::CalendarView_CalendarViewDayItemChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                CalendarViewDayItemChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetCalendarViewDayItemChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::CalendarView_SelectedDatesChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SelectedDatesChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSelectedDatesChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::CalendarViewGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::CalendarView_CalendarViewDayItemChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                CalendarViewDayItemChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetCalendarViewDayItemChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::CalendarView_SelectedDatesChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::CalendarView*, ABI::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SelectedDatesChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSelectedDatesChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::CalendarViewFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICalendarViewFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICalendarViewFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICalendarViewStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ICalendarViewStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::CalendarViewFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ICalendarView** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::ICalendarView);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarIdentifierProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarIdentifier, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayOfWeekFormatProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayOfWeekFormat, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_IsGroupLabelVisibleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_IsGroupLabelVisible, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DisplayModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DisplayMode, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstDayOfWeekProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstDayOfWeek, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_IsOutOfScopeEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_IsOutOfScopeEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_IsTodayHighlightedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_IsTodayHighlighted, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MaxDateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MaxDate, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MinDateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MinDate, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_NumberOfWeeksInViewProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_NumberOfWeeksInView, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedDatesProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedDates, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectionModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectionMode, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TemplateSettingsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TemplateSettings, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FocusBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FocusBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedHoverBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedHoverBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedPressedBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedPressedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedDisabledBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedDisabledBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_HoverBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_HoverBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_PressedBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_PressedBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodaySelectedInnerBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodaySelectedInnerBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_BlackoutStrikethroughBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_BlackoutStrikethroughBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemBorderBrushProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemBorderBrush, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_BlackoutBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_BlackoutBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_OutOfScopeBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_OutOfScopeBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemHoverBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemHoverBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemPressedBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemPressedBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemDisabledBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemDisabledBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayBlackoutBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayBlackoutBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayHoverBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayHoverBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayPressedBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayPressedBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayDisabledBackgroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayDisabledBackground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_PressedForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_PressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_BlackoutForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_BlackoutForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayBlackoutForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayBlackoutForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedHoverForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedHoverForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedPressedForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedPressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_SelectedDisabledForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_SelectedDisabledForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_OutOfScopeForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_OutOfScopeForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_OutOfScopeHoverForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_OutOfScopeHoverForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_OutOfScopePressedForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_OutOfScopePressedForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DisabledForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DisabledForeground, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayItemFontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayItemFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayItemFontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayItemFontSize, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayItemFontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayItemFontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayItemFontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayItemFontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_TodayFontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_TodayFontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfMonthLabelFontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfMonthLabelFontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontSize, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfMonthLabelFontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfMonthLabelFontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfMonthLabelFontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MonthYearItemFontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MonthYearItemFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MonthYearItemFontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MonthYearItemFontSize, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MonthYearItemFontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MonthYearItemFontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MonthYearItemFontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MonthYearItemFontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfYearDecadeLabelFontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfYearDecadeLabelFontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontSize, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfYearDecadeLabelFontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfYearDecadeLabelFontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelFontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_DayItemMarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_DayItemMargin, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_MonthYearItemMarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_MonthYearItemMargin, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfMonthLabelMarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfMonthLabelMargin, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_FirstOfYearDecadeLabelMarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_FirstOfYearDecadeLabelMargin, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_HorizontalDayItemAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_HorizontalDayItemAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_VerticalDayItemAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_VerticalDayItemAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_HorizontalFirstOfMonthLabelAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_HorizontalFirstOfMonthLabelAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_VerticalFirstOfMonthLabelAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_VerticalFirstOfMonthLabelAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemBorderThicknessProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemBorderThickness, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarViewDayItemStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarViewDayItemStyle, ppValue));
}
IFACEMETHODIMP DirectUI::CalendarViewFactory::get_CalendarItemCornerRadiusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::CalendarView_CalendarItemCornerRadius, ppValue));
}



// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_CalendarView()
    {
        RRETURN(ctl::ActivationFactoryCreator<CalendarViewFactory>::CreateActivationFactory());
    }
}
