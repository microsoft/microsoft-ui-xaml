// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "WindowChrome.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::WindowChromeGenerated::WindowChromeGenerated()
{
}

DirectUI::WindowChromeGenerated::~WindowChromeGenerated()
{
}

HRESULT DirectUI::WindowChromeGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::WindowChrome)))
    {
        *ppObject = static_cast<DirectUI::WindowChrome*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IWindowChrome)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IWindowChrome*>(this);
    }
    else
    {
        RRETURN(DirectUI::ContentControl::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::WindowChromeGenerated::get_CaptionVisibility(_Out_ ABI::Microsoft::UI::Xaml::Visibility* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::WindowChrome_CaptionVisibility, pValue));
}
_Check_return_ HRESULT DirectUI::WindowChromeGenerated::put_CaptionVisibility(_In_ ABI::Microsoft::UI::Xaml::Visibility value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::WindowChrome_CaptionVisibility, value));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::WindowChromeGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pCloseButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pLayoutRootPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pMaximizeButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pMinimizeButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pMinMaxCloseContainerPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pTitleBarMinMaxCloseContainerPart;

    IFC(DirectUI::ContentControl::OnApplyTemplate());

    // First try to resolve all parts.
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"CloseButton").Get(), &pCloseButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"LayoutRoot").Get(), &pLayoutRootPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"MaximizeButton").Get(), &pMaximizeButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"MinimizeButton").Get(), &pMinimizeButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"MinMaxCloseContainer").Get(), &pMinMaxCloseContainerPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"TitleBarMinMaxCloseContainer").Get(), &pTitleBarMinMaxCloseContainerPart));

    // If everything succeeded, store the references.
    SetPtrValueWithQIOrNull(m_tpCloseButtonPart, pCloseButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpLayoutRootPart, pLayoutRootPart.Get());
    SetPtrValueWithQIOrNull(m_tpMaximizeButtonPart, pMaximizeButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpMinimizeButtonPart, pMinimizeButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpMinMaxCloseContainerPart, pMinMaxCloseContainerPart.Get());
    SetPtrValueWithQIOrNull(m_tpTitleBarMinMaxCloseContainerPart, pTitleBarMinMaxCloseContainerPart.Get());

Cleanup:
    RRETURN(hr);
}

HRESULT DirectUI::WindowChromeFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IWindowChromeFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IWindowChromeFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IWindowChromeStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IWindowChromeStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::WindowChromeFactory::CreateInstance(_In_ ABI::Microsoft::UI::Xaml::IWindow* pParent, _Outptr_ ABI::Microsoft::UI::Xaml::IWindowChrome** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pParent, "parent");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(pParent, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::WindowChromeFactory::get_CaptionVisibilityProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::WindowChrome_CaptionVisibility, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_WindowChrome()
    {
        RRETURN(ctl::ActivationFactoryCreator<WindowChromeFactory>::CreateActivationFactory());
    }
}
