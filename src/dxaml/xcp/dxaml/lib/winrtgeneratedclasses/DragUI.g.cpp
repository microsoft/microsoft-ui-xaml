// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "DragUI.g.h"
#include "BitmapImage.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::DragUIGenerated::DragUIGenerated()
{
}

DirectUI::DragUIGenerated::~DragUIGenerated()
{
}

HRESULT DirectUI::DragUIGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::DragUI)))
    {
        *ppObject = static_cast<DirectUI::DragUI*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IDragUI)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IDragUI*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::DragUIGenerated::SetContentFromBitmapImage(_In_ ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage* pBitmapImage)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromBitmapImage", 0);
    }
    ARG_NOTNULL(pBitmapImage, "bitmapImage");
    IFC(CheckThread());
    IFC(static_cast<DragUI*>(this)->SetContentFromBitmapImageImpl(pBitmapImage));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromBitmapImage", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DragUIGenerated::SetContentFromBitmapImageWithAnchorPoint(_In_ ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage* pBitmapImage, _In_ ABI::Windows::Foundation::Point anchorPoint)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromBitmapImageWithAnchorPoint", 0);
    }
    ARG_NOTNULL(pBitmapImage, "bitmapImage");
    IFC(CheckThread());
    IFC(static_cast<DragUI*>(this)->SetContentFromBitmapImageWithAnchorPointImpl(pBitmapImage, anchorPoint));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromBitmapImageWithAnchorPoint", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DragUIGenerated::SetContentFromDataPackage()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromDataPackage", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<DragUI*>(this)->SetContentFromDataPackageImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromDataPackage", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DragUIGenerated::SetContentFromSoftwareBitmap(_In_ ABI::Windows::Graphics::Imaging::ISoftwareBitmap* pSoftwareBitmap)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromSoftwareBitmap", 0);
    }
    ARG_NOTNULL(pSoftwareBitmap, "softwareBitmap");
    IFC(CheckThread());
    IFC(static_cast<DragUI*>(this)->SetContentFromSoftwareBitmapImpl(pSoftwareBitmap));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromSoftwareBitmap", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DragUIGenerated::SetContentFromSoftwareBitmapWithAnchorPoint(_In_ ABI::Windows::Graphics::Imaging::ISoftwareBitmap* pSoftwareBitmap, _In_ ABI::Windows::Foundation::Point anchorPoint)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromSoftwareBitmapWithAnchorPoint", 0);
    }
    ARG_NOTNULL(pSoftwareBitmap, "softwareBitmap");
    IFC(CheckThread());
    IFC(static_cast<DragUI*>(this)->SetContentFromSoftwareBitmapWithAnchorPointImpl(pSoftwareBitmap, anchorPoint));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "DragUI_SetContentFromSoftwareBitmapWithAnchorPoint", hr);
    }
    RRETURN(hr);
}


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_DragUI()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
