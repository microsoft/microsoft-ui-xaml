// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "OrientedVirtualizingPanel.g.h"

#define __VirtualizingStackPanel_GUID "6546b3de-b086-4913-af0b-d70231a8a826"

namespace DirectUI
{
    class VirtualizingStackPanel;
    class CleanUpVirtualizedItemEventArgs;

    class __declspec(novtable) VirtualizingStackPanelGenerated:
        public DirectUI::OrientedVirtualizingPanel
        , public ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel
        , public ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides
    {
        friend class DirectUI::VirtualizingStackPanel;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.VirtualizingStackPanel");

        BEGIN_INTERFACE_MAP(VirtualizingStackPanelGenerated, DirectUI::OrientedVirtualizingPanel)
            INTERFACE_ENTRY(VirtualizingStackPanelGenerated, ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel)
            INTERFACE_ENTRY(VirtualizingStackPanelGenerated, ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides)
        END_INTERFACE_MAP(VirtualizingStackPanelGenerated, DirectUI::OrientedVirtualizingPanel)

    public:
        VirtualizingStackPanelGenerated();
        ~VirtualizingStackPanelGenerated() override;

        // Event source typedefs.
        typedef CRoutedEventSource<ABI::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> CleanUpVirtualizedItemEventEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::VirtualizingStackPanel;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::VirtualizingStackPanel;
        }

        // Properties.
        IFACEMETHOD(get_AreScrollSnapPointsRegular)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_AreScrollSnapPointsRegular)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_Orientation)(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue) override;
        IFACEMETHOD(put_Orientation)(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value) override;

        // Events.
        _Check_return_ HRESULT GetCleanUpVirtualizedItemEventEventSourceNoRef(_Outptr_ CleanUpVirtualizedItemEventEventSourceType** ppEventSource);
        IFACEMETHOD(add_CleanUpVirtualizedItemEvent)(_In_ ABI::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_CleanUpVirtualizedItemEvent)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(OnCleanUpVirtualizedItem)(_In_ ABI::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs* pE) override;
        _Check_return_ HRESULT OnCleanUpVirtualizedItemProtected(_In_ ABI::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs* pE);


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;
        _Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo) override;
        _Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler) override;

    private:

        // Fields.
    };
}

#include "VirtualizingStackPanel_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) VirtualizingStackPanelFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics
    {
        BEGIN_INTERFACE_MAP(VirtualizingStackPanelFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(VirtualizingStackPanelFactory, ABI::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics)
        END_INTERFACE_MAP(VirtualizingStackPanelFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_AreScrollSnapPointsRegularProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_OrientationProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.
        static _Check_return_ HRESULT GetVirtualizationModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::VirtualizationMode* pValue);
        static _Check_return_ HRESULT SetVirtualizationModeStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::VirtualizationMode value);
        IFACEMETHOD(get_VirtualizationModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(GetVirtualizationMode)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _Out_ ABI::Microsoft::UI::Xaml::Controls::VirtualizationMode* pValue);
        IFACEMETHOD(SetVirtualizationMode)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::Controls::VirtualizationMode value);
        static _Check_return_ HRESULT GetIsVirtualizingStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pO, _Out_ BOOLEAN* pValue);
        static _Check_return_ HRESULT SetIsVirtualizingStatic(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pO, _In_ BOOLEAN value);
        IFACEMETHOD(get_IsVirtualizingProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(GetIsVirtualizing)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pO, _Out_ BOOLEAN* pValue);
        IFACEMETHOD(SetIsVirtualizing)(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pO, _In_ BOOLEAN value);
        static _Check_return_ HRESULT GetIsContainerGeneratedForInsertStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Out_ BOOLEAN* pValue);
        static _Check_return_ HRESULT SetIsContainerGeneratedForInsertStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _In_ BOOLEAN value);

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::VirtualizingStackPanel;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
