// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "PointKeyFrame.g.h"

#define __SplinePointKeyFrame_GUID "0eebbcc3-d99d-4562-8fc4-e0bc8ec996e6"

namespace DirectUI
{
    class SplinePointKeyFrame;
    class KeySpline;

    class __declspec(novtable) __declspec(uuid(__SplinePointKeyFrame_GUID)) SplinePointKeyFrame:
        public DirectUI::PointKeyFrame
        , public ABI::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame");

        BEGIN_INTERFACE_MAP(SplinePointKeyFrame, DirectUI::PointKeyFrame)
            INTERFACE_ENTRY(SplinePointKeyFrame, ABI::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame)
        END_INTERFACE_MAP(SplinePointKeyFrame, DirectUI::PointKeyFrame)

    public:
        SplinePointKeyFrame();
        ~SplinePointKeyFrame() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SplinePointKeyFrame;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::SplinePointKeyFrame;
        }

        // Properties.
        IFACEMETHOD(get_KeySpline)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::Animation::IKeySpline** ppValue) override;
        IFACEMETHOD(put_KeySpline)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::Animation::IKeySpline* pValue) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SplinePointKeyFrameFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics
    {
        BEGIN_INTERFACE_MAP(SplinePointKeyFrameFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(SplinePointKeyFrameFactory, ABI::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics)
        END_INTERFACE_MAP(SplinePointKeyFrameFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_KeySplineProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SplinePointKeyFrame;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
