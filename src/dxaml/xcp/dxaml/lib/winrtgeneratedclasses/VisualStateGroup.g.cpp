// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "VisualStateGroup.g.h"
#include "VisualState.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::VisualStateGroupGenerated::VisualStateGroupGenerated()
{
}

DirectUI::VisualStateGroupGenerated::~VisualStateGroupGenerated()
{
}

HRESULT DirectUI::VisualStateGroupGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::VisualStateGroup)))
    {
        *ppObject = static_cast<DirectUI::VisualStateGroup*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IVisualStateGroup)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IVisualStateGroup*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::get_CurrentState(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualState** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<VisualStateGroup*>(this)->get_CurrentStateImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::get_Name(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<VisualStateGroup*>(this)->get_NameImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::get_States(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualState*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualStateGroup_States, ppValue));
}
_Check_return_ HRESULT DirectUI::VisualStateGroupGenerated::put_States(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualState*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::VisualStateGroup_States, pValue));
}
IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::get_Transitions(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualTransition*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::VisualStateGroup_Transitions, ppValue));
}

// Events.
_Check_return_ HRESULT DirectUI::VisualStateGroupGenerated::GetCurrentStateChangedEventSourceNoRef(_Outptr_ CurrentStateChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::VisualStateGroup_CurrentStateChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CurrentStateChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::VisualStateGroup_CurrentStateChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::VisualStateGroup_CurrentStateChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::add_CurrentStateChanged(_In_ ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CurrentStateChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCurrentStateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::remove_CurrentStateChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CurrentStateChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCurrentStateChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::VisualStateGroup_CurrentStateChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::VisualStateGroupGenerated::GetCurrentStateChangingEventSourceNoRef(_Outptr_ CurrentStateChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::VisualStateGroup_CurrentStateChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CurrentStateChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::VisualStateGroup_CurrentStateChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::VisualStateGroup_CurrentStateChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::add_CurrentStateChanging(_In_ ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CurrentStateChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCurrentStateChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::VisualStateGroupGenerated::remove_CurrentStateChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CurrentStateChangingEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCurrentStateChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::VisualStateGroup_CurrentStateChanging));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

// Factory methods.

// Dependency properties.



// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_VisualStateGroup()
    {
        RRETURN(ctl::ActivationFactoryCreator<VisualStateGroupFactory>::CreateActivationFactory());
    }
}
