// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __XamlUICommand_GUID "78459458-687e-45d3-b3aa-6e4706934bb7"

namespace DirectUI
{
    class XamlUICommand;
    class IconSource;

    class __declspec(novtable) XamlUICommandGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Input::IXamlUICommand
        , public ABI::Microsoft::UI::Xaml::Input::ICommand
    {
        friend class DirectUI::XamlUICommand;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Input.XamlUICommand");

        BEGIN_INTERFACE_MAP(XamlUICommandGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(XamlUICommandGenerated, ABI::Microsoft::UI::Xaml::Input::IXamlUICommand)
            INTERFACE_ENTRY(XamlUICommandGenerated, ABI::Microsoft::UI::Xaml::Input::ICommand)
        END_INTERFACE_MAP(XamlUICommandGenerated, DirectUI::DependencyObject)

    public:
        XamlUICommandGenerated();
        ~XamlUICommandGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Input::XamlUICommand*, ABI::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs*>, ABI::Microsoft::UI::Xaml::Input::IXamlUICommand, ABI::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs> ExecuteRequestedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Input::XamlUICommand*, ABI::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs*>, ABI::Microsoft::UI::Xaml::Input::IXamlUICommand, ABI::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs> CanExecuteRequestedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::IEventHandler<IInspectable*>, IInspectable, IInspectable> CanExecuteChangedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlUICommand;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::XamlUICommand;
        }

        // Properties.
        IFACEMETHOD(get_AccessKey)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_AccessKey)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_Command)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::ICommand** ppValue) override;
        IFACEMETHOD(put_Command)(_In_opt_ ABI::Microsoft::UI::Xaml::Input::ICommand* pValue) override;
        IFACEMETHOD(get_Description)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_Description)(_In_opt_ HSTRING value) override;
        IFACEMETHOD(get_IconSource)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IIconSource** ppValue) override;
        IFACEMETHOD(put_IconSource)(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IIconSource* pValue) override;
        IFACEMETHOD(get_KeyboardAccelerators)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Input::KeyboardAccelerator*>** ppValue) override;
        IFACEMETHOD(get_Label)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(put_Label)(_In_opt_ HSTRING value) override;

        // Events.
        _Check_return_ HRESULT GetCanExecuteChangedEventSourceNoRef(_Outptr_ CanExecuteChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_CanExecuteChanged)(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_CanExecuteChanged)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetCanExecuteRequestedEventSourceNoRef(_Outptr_ CanExecuteRequestedEventSourceType** ppEventSource);
        IFACEMETHOD(add_CanExecuteRequested)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Input::XamlUICommand*, ABI::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_CanExecuteRequested)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetExecuteRequestedEventSourceNoRef(_Outptr_ ExecuteRequestedEventSourceType** ppEventSource);
        IFACEMETHOD(add_ExecuteRequested)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Input::XamlUICommand*, ABI::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_ExecuteRequested)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(CanExecute)(_In_opt_ IInspectable* pParameter, _Out_ BOOLEAN* pReturnValue) override;
        IFACEMETHOD(Execute)(_In_opt_ IInspectable* pParameter) override;
        IFACEMETHOD(NotifyCanExecuteChanged)() override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "XamlUICommand_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) XamlUICommandFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Input::IXamlUICommandFactory
        , public ABI::Microsoft::UI::Xaml::Input::IXamlUICommandStatics
    {
        BEGIN_INTERFACE_MAP(XamlUICommandFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(XamlUICommandFactory, ABI::Microsoft::UI::Xaml::Input::IXamlUICommandFactory)
            INTERFACE_ENTRY(XamlUICommandFactory, ABI::Microsoft::UI::Xaml::Input::IXamlUICommandStatics)
        END_INTERFACE_MAP(XamlUICommandFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Input::IXamlUICommand** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_LabelProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IconSourceProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_KeyboardAcceleratorsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_AccessKeyProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_DescriptionProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_CommandProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::XamlUICommand;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
