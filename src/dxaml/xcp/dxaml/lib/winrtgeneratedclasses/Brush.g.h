// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks) 
#define FEATURE_XAMLMOTIONSYSTEMHOLDBACKS_OVERRIDE override
#else
#define FEATURE_XAMLMOTIONSYSTEMHOLDBACKS_OVERRIDE
#endif
#define __Brush_GUID "b42803d2-98fd-4ade-adc0-427c144a79e7"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(StartAnimation)(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation) override { return This()->StartAnimation(pAnimation); }
        IFACEMETHOD(StopAnimation)(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation) override { return This()->StopAnimation(pAnimation); }
    };
}
#pragma endregion

namespace DirectUI
{
    class Brush;
    class Transform;

    class __declspec(novtable) BrushGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::Media::IBrush
        , public ABI::Microsoft::UI::Xaml::Media::IBrushOverrides
        , public ABI::Microsoft::UI::Composition::IAnimationObject
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks, BrushGenerated >
#endif
    {
        friend class DirectUI::Brush;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Media.Brush");

        BEGIN_INTERFACE_MAP(BrushGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(BrushGenerated, ABI::Microsoft::UI::Xaml::Media::IBrush)
            INTERFACE_ENTRY(BrushGenerated, ABI::Microsoft::UI::Xaml::Media::IBrushOverrides)
            INTERFACE_ENTRY(BrushGenerated, ABI::Microsoft::UI::Composition::IAnimationObject)
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
            INTERFACE_ENTRY(BrushGenerated, ABI::Microsoft::UI::Xaml::Media::IBrushFeature_XamlMotionSystemHoldbacks)
#endif
        END_INTERFACE_MAP(BrushGenerated, DirectUI::DependencyObject)

    public:
        BrushGenerated();
        ~BrushGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Brush;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Brush;
        }

        // Properties.
        IFACEMETHOD(get_Opacity)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_Opacity)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_RelativeTransform)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ITransform** ppValue) override;
        IFACEMETHOD(put_RelativeTransform)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ITransform* pValue) override;
        IFACEMETHOD(get_Transform)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ITransform** ppValue) override;
        IFACEMETHOD(put_Transform)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ITransform* pValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(PopulatePropertyInfoOverride)(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo) override;
        _Check_return_ HRESULT PopulatePropertyInfoOverrideProtected(_In_ HSTRING propertyName, _In_ ABI::Microsoft::UI::Composition::IAnimationPropertyInfo* pAnimationPropertyInfo);
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT STDMETHODCALLTYPE StartAnimation(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation);
#endif
#if WI_IS_FEATURE_PRESENT(Feature_XamlMotionSystemHoldbacks)
        _Check_return_ HRESULT STDMETHODCALLTYPE StopAnimation(_In_ ABI::Microsoft::UI::Composition::ICompositionAnimationBase* pAnimation);
#endif


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "Brush_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) BrushFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Media::IBrushFactory
        , public ABI::Microsoft::UI::Xaml::Media::IBrushStatics
    {
        BEGIN_INTERFACE_MAP(BrushFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(BrushFactory, ABI::Microsoft::UI::Xaml::Media::IBrushFactory)
            INTERFACE_ENTRY(BrushFactory, ABI::Microsoft::UI::Xaml::Media::IBrushStatics)
        END_INTERFACE_MAP(BrushFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_OpacityProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_TransformProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_RelativeTransformProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Brush;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
