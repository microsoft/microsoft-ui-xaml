// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkElement.g.h"
#include "CornerRadius.g.h"
#include "Thickness.g.h"
#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_WUXCPreviewTypes) 
#define FEATURE_WUXCPREVIEWTYPES_OVERRIDE override
#else
#define FEATURE_WUXCPREVIEWTYPES_OVERRIDE
#endif
#define __Panel_GUID "357584cc-0daf-4784-990a-00d725888abb"

namespace DirectUI
{
    class Panel;
    class Brush;
    class BrushTransition;
    class TransitionCollection;
    class UIElementCollection;

    class __declspec(novtable) PanelGenerated:
        public DirectUI::FrameworkElement
        , public ABI::Microsoft::UI::Xaml::Controls::IPanel
#if WI_IS_FEATURE_PRESENT(Feature_WUXCPreviewTypes)
        , public ABI::Microsoft::UI::Xaml::Controls::IPanelProtectedFeature_WUXCPreviewTypes
#endif
    {
        friend class DirectUI::Panel;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Panel");

        BEGIN_INTERFACE_MAP(PanelGenerated, DirectUI::FrameworkElement)
            INTERFACE_ENTRY(PanelGenerated, ABI::Microsoft::UI::Xaml::Controls::IPanel)
#if WI_IS_FEATURE_PRESENT(Feature_WUXCPreviewTypes)
            INTERFACE_ENTRY(PanelGenerated, ABI::Microsoft::UI::Xaml::Controls::IPanelProtectedFeature_WUXCPreviewTypes)
#endif
        END_INTERFACE_MAP(PanelGenerated, DirectUI::FrameworkElement)

    public:
        PanelGenerated();
        ~PanelGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Panel;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Panel;
        }

        // Properties.
        IFACEMETHOD(get_Background)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) override;
        IFACEMETHOD(put_Background)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) override;
        IFACEMETHOD(get_BackgroundTransition)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IBrushTransition** ppValue) override;
        IFACEMETHOD(put_BackgroundTransition)(_In_opt_ ABI::Microsoft::UI::Xaml::IBrushTransition* pValue) override;
        IFACEMETHOD(get_BorderBrushProtected)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        IFACEMETHOD(put_BorderBrushProtected)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        IFACEMETHOD(get_BorderThicknessProtected)(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        IFACEMETHOD(put_BorderThicknessProtected)(_In_ ABI::Microsoft::UI::Xaml::Thickness value) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        IFACEMETHOD(get_Children)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::UIElement*>** ppValue) override;
        IFACEMETHOD(get_ChildrenTransitions)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>** ppValue) override;
        IFACEMETHOD(put_ChildrenTransitions)(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>* pValue) override;
        IFACEMETHOD(get_CornerRadiusProtected)(_Out_ ABI::Microsoft::UI::Xaml::CornerRadius* pValue) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        IFACEMETHOD(put_CornerRadiusProtected)(_In_ ABI::Microsoft::UI::Xaml::CornerRadius value) FEATURE_WUXCPREVIEWTYPES_OVERRIDE;
        _Check_return_ HRESULT get_IsIgnoringTransitions(_Out_ BOOLEAN* pValue);
        _Check_return_ HRESULT put_IsIgnoringTransitions(_In_ BOOLEAN value);
        IFACEMETHOD(get_IsItemsHost)(_Out_ BOOLEAN* pValue) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "Panel_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) PanelFactory:
       public ctl::BetterAggregableAbstractCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IPanelFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IPanelStatics
    {
        BEGIN_INTERFACE_MAP(PanelFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)
            INTERFACE_ENTRY(PanelFactory, ABI::Microsoft::UI::Xaml::Controls::IPanelFactory)
            INTERFACE_ENTRY(PanelFactory, ABI::Microsoft::UI::Xaml::Controls::IPanelStatics)
        END_INTERFACE_MAP(PanelFactory, ctl::BetterAggregableAbstractCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IPanel** ppInstance);

        // Static properties.

        // Dependency properties.
        
        IFACEMETHOD(get_BackgroundProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsItemsHostProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        IFACEMETHOD(get_ChildrenTransitionsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        
        
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Panel;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
