// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include <FeatureFlags.h>
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation) 
#define FEATURE_INPUTVALIDATION_OVERRIDE override
#else
#define FEATURE_INPUTVALIDATION_OVERRIDE
#endif
#define __InputValidationCommand_GUID "4a8b17ef-c73f-428c-a646-81f02a300901"

namespace DirectUI
{
    class InputValidationCommand;

    class __declspec(novtable) __declspec(uuid(__InputValidationCommand_GUID)) InputValidationCommand:
        public DirectUI::DependencyObject
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
        , public ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand
        , public ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommandOverrides
#endif
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.InputValidationCommand");

        BEGIN_INTERFACE_MAP(InputValidationCommand, DirectUI::DependencyObject)
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
            INTERFACE_ENTRY(InputValidationCommand, ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand)
            INTERFACE_ENTRY(InputValidationCommand, ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommandOverrides)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(InputValidationCommand, DirectUI::DependencyObject)

    public:
        InputValidationCommand();
        ~InputValidationCommand() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::InputValidationCommand;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::InputValidationCommand;
        }

        // Properties.
        IFACEMETHOD(get_InputValidationKind)(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind* pValue) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(put_InputValidationKind)(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind value) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(get_InputValidationMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode* pValue) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(put_InputValidationMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode value) FEATURE_INPUTVALIDATION_OVERRIDE;

        // Events.

        // Methods.
        IFACEMETHOD(CanValidate)(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl, _Out_ BOOLEAN* pResult) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(CanValidateCore)(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl, _Out_ BOOLEAN* pResult) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(Validate)(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl) FEATURE_INPUTVALIDATION_OVERRIDE;
        IFACEMETHOD(ValidateCore)(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl) FEATURE_INPUTVALIDATION_OVERRIDE;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.
         _Check_return_ HRESULT CanValidateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl, _Out_ BOOLEAN* pResult); 
         _Check_return_ HRESULT ValidateCoreImpl(_In_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl* pValidationControl); 

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) InputValidationCommandFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
        , public ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommandFactory
#endif
    {
        BEGIN_INTERFACE_MAP(InputValidationCommandFactory, ctl::BetterAggregableCoreObjectActivationFactory)
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
            INTERFACE_ENTRY(InputValidationCommandFactory, ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommandFactory)
#else
            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)
#endif
        END_INTERFACE_MAP(InputValidationCommandFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand** ppInstance);

        // Static properties.

        // Dependency properties.
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::InputValidationCommand;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
