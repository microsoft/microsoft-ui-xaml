// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "LoadedImageSurface.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::LoadedImageSurfaceGenerated::LoadedImageSurfaceGenerated()
{
}

DirectUI::LoadedImageSurfaceGenerated::~LoadedImageSurfaceGenerated()
{
}

HRESULT DirectUI::LoadedImageSurfaceGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::LoadedImageSurface)))
    {
        *ppObject = static_cast<DirectUI::LoadedImageSurface*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Composition::ICompositionSurface)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Composition::ICompositionSurface*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Windows::Foundation::IClosable)))
    {
        *ppObject = static_cast<ABI::Windows::Foundation::IClosable*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::LoadedImageSurfaceGenerated::get_DecodedPhysicalSize(_Out_ ABI::Windows::Foundation::Size* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_DecodedPhysicalSize, pValue));
}
_Check_return_ HRESULT DirectUI::LoadedImageSurfaceGenerated::put_DecodedPhysicalSize(_In_ ABI::Windows::Foundation::Size value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_DecodedPhysicalSize, value));
}
IFACEMETHODIMP DirectUI::LoadedImageSurfaceGenerated::get_DecodedSize(_Out_ ABI::Windows::Foundation::Size* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_DecodedSize, pValue));
}
_Check_return_ HRESULT DirectUI::LoadedImageSurfaceGenerated::put_DecodedSize(_In_ ABI::Windows::Foundation::Size value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_DecodedSize, value));
}
IFACEMETHODIMP DirectUI::LoadedImageSurfaceGenerated::get_NaturalSize(_Out_ ABI::Windows::Foundation::Size* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_NaturalSize, pValue));
}
_Check_return_ HRESULT DirectUI::LoadedImageSurfaceGenerated::put_NaturalSize(_In_ ABI::Windows::Foundation::Size value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::LoadedImageSurface_NaturalSize, value));
}

// Events.
_Check_return_ HRESULT DirectUI::LoadedImageSurfaceGenerated::GetLoadCompletedEventSourceNoRef(_Outptr_ LoadCompletedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::LoadedImageSurface_LoadCompleted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<LoadCompletedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::LoadedImageSurface_LoadCompleted, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::LoadedImageSurface_LoadCompleted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::LoadedImageSurfaceGenerated::add_LoadCompleted(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LoadedImageSurface*, ABI::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    LoadCompletedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::LoadedImageSurfaceGenerated::remove_LoadCompleted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    LoadCompletedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LoadedImageSurface*, ABI::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Media::LoadedImageSurface*, ABI::Microsoft::UI::Xaml::Media::LoadedImageSourceLoadCompletedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetLoadCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::LoadedImageSurface_LoadCompleted));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

HRESULT DirectUI::LoadedImageSurfaceFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurfaceStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurfaceStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.




// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::LoadedImageSurfaceFactory::StartLoadFromUriWithSize(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LoadedImageSurface_StartLoadFromUriWithSize", 0);
    }
    ARG_NOTNULL(pUri, "uri");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(StartLoadFromUriWithSizeImpl(pUri, desiredMaxSize, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LoadedImageSurface_StartLoadFromUriWithSize", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LoadedImageSurfaceFactory::StartLoadFromUri(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUri, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LoadedImageSurface_StartLoadFromUri", 0);
    }
    ARG_NOTNULL(pUri, "uri");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(StartLoadFromUriImpl(pUri, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LoadedImageSurface_StartLoadFromUri", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LoadedImageSurfaceFactory::StartLoadFromStreamWithSize(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _In_ ABI::Windows::Foundation::Size desiredMaxSize, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LoadedImageSurface_StartLoadFromStreamWithSize", 0);
    }
    ARG_NOTNULL(pStream, "stream");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(StartLoadFromStreamWithSizeImpl(pStream, desiredMaxSize, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LoadedImageSurface_StartLoadFromStreamWithSize", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::LoadedImageSurfaceFactory::StartLoadFromStream(_In_ ABI::Windows::Storage::Streams::IRandomAccessStream* pStream, _Outptr_ ABI::Microsoft::UI::Xaml::Media::ILoadedImageSurface** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "LoadedImageSurface_StartLoadFromStream", 0);
    }
    ARG_NOTNULL(pStream, "stream");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(StartLoadFromStreamImpl(pStream, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "LoadedImageSurface_StartLoadFromStream", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_LoadedImageSurface()
    {
        RRETURN(ctl::ActivationFactoryCreator<LoadedImageSurfaceFactory>::CreateActivationFactory());
    }
}
