// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "XamlReader.g.h"
#include "XamlTelemetry.h"


HRESULT DirectUI::XamlReaderFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IXamlReaderStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IXamlReaderStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::XamlReaderFactory::Load(_In_ HSTRING xaml, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlReader_Load", 0);
    }
    ARG_NOTNULL(xaml, "xaml");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(LoadImpl(xaml, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlReader_Load", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::XamlReaderFactory::LoadWithInitialTemplateValidation(_In_ HSTRING xaml, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "XamlReader_LoadWithInitialTemplateValidation", 0);
    }
    ARG_NOTNULL(xaml, "xaml");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(LoadWithInitialTemplateValidationImpl(xaml, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "XamlReader_LoadWithInitialTemplateValidation", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_XamlReader()
    {
        RRETURN(ctl::ActivationFactoryCreator<XamlReaderFactory>::CreateActivationFactory());
    }
}
