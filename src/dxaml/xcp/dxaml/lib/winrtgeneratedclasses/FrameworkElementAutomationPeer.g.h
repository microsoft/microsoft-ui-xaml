// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "AutomationPeer.g.h"

#define __FrameworkElementAutomationPeer_GUID "5386ff01-f630-485d-b78d-7faff4bf303a"

namespace DirectUI
{
    class FrameworkElementAutomationPeer;
    class UIElement;

    class __declspec(novtable) FrameworkElementAutomationPeerGenerated:
        public DirectUI::AutomationPeer
        , public ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer
        , public ABI::Microsoft::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeerPrivate
    {
        friend class DirectUI::FrameworkElementAutomationPeer;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer");

        BEGIN_INTERFACE_MAP(FrameworkElementAutomationPeerGenerated, DirectUI::AutomationPeer)
            INTERFACE_ENTRY(FrameworkElementAutomationPeerGenerated, ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer)
            INTERFACE_ENTRY(FrameworkElementAutomationPeerGenerated, ABI::Microsoft::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeerPrivate)
        END_INTERFACE_MAP(FrameworkElementAutomationPeerGenerated, DirectUI::AutomationPeer)

    public:
        FrameworkElementAutomationPeerGenerated();
        ~FrameworkElementAutomationPeerGenerated() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::FrameworkElementAutomationPeer;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::FrameworkElementAutomationPeer;
        }

        // Properties.
        IFACEMETHOD(get_Owner)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override;

        // Events.

        // Methods.
        IFACEMETHOD(GetAutomationPeersForChildrenOfElement)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Automation::Peers::AutomationPeer*>** ppResult) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "FrameworkElementAutomationPeer_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) FrameworkElementAutomationPeerFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory
        , public ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics
    {
        BEGIN_INTERFACE_MAP(FrameworkElementAutomationPeerFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(FrameworkElementAutomationPeerFactory, ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory)
            INTERFACE_ENTRY(FrameworkElementAutomationPeerFactory, ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics)
        END_INTERFACE_MAP(FrameworkElementAutomationPeerFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstanceWithOwner)(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pOwner, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer** ppInstance);

        // Static properties.

        // Dependency properties.
        

        // Attached properties.

        // Static methods.
        IFACEMETHOD(FromElement)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue) override;
        IFACEMETHOD(CreatePeerForElement)(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue) override;

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::FrameworkElementAutomationPeer;
        }


    private:
        _Check_return_ HRESULT CreateInstanceWithOwnerImpl(_In_ ABI::Microsoft::UI::Xaml::IFrameworkElement* pOwner, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer** ppInstance);

        // Customized static properties.

        // Customized static  methods.
         _Check_return_ HRESULT FromElementImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue); 
         _Check_return_ HRESULT CreatePeerForElementImpl(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Outptr_ ABI::Microsoft::UI::Xaml::Automation::Peers::IAutomationPeer** ppReturnValue); 
    };
}
