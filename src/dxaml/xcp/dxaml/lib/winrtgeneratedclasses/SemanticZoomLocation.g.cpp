// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "SemanticZoomLocation.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::SemanticZoomLocationGenerated::SemanticZoomLocationGenerated(): m_zoomPoint(), m_bounds(), m_remainder()
{
}

DirectUI::SemanticZoomLocationGenerated::~SemanticZoomLocationGenerated()
{
}

HRESULT DirectUI::SemanticZoomLocationGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::SemanticZoomLocation)))
    {
        *ppObject = static_cast<DirectUI::SemanticZoomLocation*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::SemanticZoomLocationGenerated::get_Bounds(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_bounds, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SemanticZoomLocationGenerated::put_Bounds(_In_ ABI::Windows::Foundation::Rect value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_bounds));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SemanticZoomLocationGenerated::get_Item(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pItem.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SemanticZoomLocationGenerated::put_Item(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pItem, pValue);
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SemanticZoomLocationGenerated::get_Remainder(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_remainder, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SemanticZoomLocationGenerated::put_Remainder(_In_ ABI::Windows::Foundation::Rect value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_remainder));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SemanticZoomLocationGenerated::get_ZoomPoint(_Out_ ABI::Windows::Foundation::Point* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_zoomPoint, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SemanticZoomLocationGenerated::put_ZoomPoint(_In_ ABI::Windows::Foundation::Point value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_zoomPoint));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_SemanticZoomLocation()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::SemanticZoomLocation>>::CreateActivationFactory());
    }
}
