// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "SelectionChangedEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::SelectionChangedEventArgsGenerated::SelectionChangedEventArgsGenerated()
{
}

DirectUI::SelectionChangedEventArgsGenerated::~SelectionChangedEventArgsGenerated()
{
}

HRESULT DirectUI::SelectionChangedEventArgsGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::SelectionChangedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::SelectionChangedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::RoutedEventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::SelectionChangedEventArgsGenerated::get_AddedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<SelectionChangedEventArgs*>(this)->get_AddedItemsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SelectionChangedEventArgsGenerated::put_AddedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<SelectionChangedEventArgs*>(this)->put_AddedItemsImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SelectionChangedEventArgsGenerated::get_RemovedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<SelectionChangedEventArgs*>(this)->get_RemovedItemsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::SelectionChangedEventArgsGenerated::put_RemovedItems(_In_opt_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(static_cast<SelectionChangedEventArgs*>(this)->put_RemovedItemsImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Methods.

HRESULT DirectUI::SelectionChangedEventArgsFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AggregableActivationFactory<DirectUI::SelectionChangedEventArgs>::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::SelectionChangedEventArgsFactory::CreateInstanceWithRemovedItemsAndAddedItems(_In_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pRemovedItems, _In_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>* pAddedItems, _In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pRemovedItems, "removedItems");
    ARG_NOTNULL(pAddedItems, "addedItems");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithRemovedItemsAndAddedItemsImpl(pRemovedItems, pAddedItems, pOuter, ppInner, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateSelectionChangedEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::SelectionChangedEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_SelectionChangedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<SelectionChangedEventArgsFactory>::CreateActivationFactory());
    }
}
