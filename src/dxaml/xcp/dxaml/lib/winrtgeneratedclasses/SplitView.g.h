// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "Control.g.h"

#define __SplitView_GUID "abe890c2-bd57-423e-98f3-dd3ccd2d974c"

namespace DirectUI
{
    class SplitView;
    class Brush;
    class SplitViewTemplateSettings;
    class UIElement;

    class __declspec(novtable) SplitViewGenerated:
        public DirectUI::Control
        , public ABI::Microsoft::UI::Xaml::Controls::ISplitView
        , public ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener
    {
        friend class DirectUI::SplitView;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.SplitView");

        BEGIN_INTERFACE_MAP(SplitViewGenerated, DirectUI::Control)
            INTERFACE_ENTRY(SplitViewGenerated, ABI::Microsoft::UI::Xaml::Controls::ISplitView)
            INTERFACE_ENTRY(SplitViewGenerated, ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)
        END_INTERFACE_MAP(SplitViewGenerated, DirectUI::Control)

    public:
        SplitViewGenerated();
        ~SplitViewGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, ABI::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs*>, ABI::Microsoft::UI::Xaml::Controls::ISplitView, ABI::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> PaneClosingEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>, ABI::Microsoft::UI::Xaml::Controls::ISplitView, IInspectable> PaneClosedEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>, ABI::Microsoft::UI::Xaml::Controls::ISplitView, IInspectable> PaneOpeningEventSourceType;
        typedef CEventSource<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>, ABI::Microsoft::UI::Xaml::Controls::ISplitView, IInspectable> PaneOpenedEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SplitView;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::SplitView;
        }

        // Properties.
        IFACEMETHOD(get_CompactPaneLength)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_CompactPaneLength)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_Content)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override;
        IFACEMETHOD(put_Content)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override;
        IFACEMETHOD(get_DisplayMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::SplitViewDisplayMode* pValue) override;
        IFACEMETHOD(put_DisplayMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::SplitViewDisplayMode value) override;
        IFACEMETHOD(get_IsPaneOpen)(_Out_ BOOLEAN* pValue) override;
        IFACEMETHOD(put_IsPaneOpen)(_In_ BOOLEAN value) override;
        IFACEMETHOD(get_LightDismissOverlayMode)(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue) override;
        IFACEMETHOD(put_LightDismissOverlayMode)(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value) override;
        IFACEMETHOD(get_OpenPaneLength)(_Out_ DOUBLE* pValue) override;
        IFACEMETHOD(put_OpenPaneLength)(_In_ DOUBLE value) override;
        IFACEMETHOD(get_Pane)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override;
        IFACEMETHOD(put_Pane)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override;
        IFACEMETHOD(get_PaneBackground)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue) override;
        IFACEMETHOD(put_PaneBackground)(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue) override;
        IFACEMETHOD(get_PanePlacement)(_Out_ ABI::Microsoft::UI::Xaml::Controls::SplitViewPanePlacement* pValue) override;
        IFACEMETHOD(put_PanePlacement)(_In_ ABI::Microsoft::UI::Xaml::Controls::SplitViewPanePlacement value) override;
        IFACEMETHOD(get_TemplateSettings)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings** ppValue) override;

        // Events.
        _Check_return_ HRESULT GetPaneClosedEventSourceNoRef(_Outptr_ PaneClosedEventSourceType** ppEventSource);
        IFACEMETHOD(add_PaneClosed)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_PaneClosed)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetPaneClosingEventSourceNoRef(_Outptr_ PaneClosingEventSourceType** ppEventSource);
        IFACEMETHOD(add_PaneClosing)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, ABI::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_PaneClosing)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetPaneOpenedEventSourceNoRef(_Outptr_ PaneOpenedEventSourceType** ppEventSource);
        IFACEMETHOD(add_PaneOpened)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_PaneOpened)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetPaneOpeningEventSourceNoRef(_Outptr_ PaneOpeningEventSourceType** ppEventSource);
        IFACEMETHOD(add_PaneOpening)(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::SplitView*, IInspectable*>* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_PaneOpening)(_In_ EventRegistrationToken token) override;

        // Methods.
        IFACEMETHOD(OnBackButtonPressed)(_Out_ BOOLEAN* pResult) override;


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "SplitView_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) SplitViewFactory:
       public ctl::BetterAggregableCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::ISplitViewFactory
        , public ABI::Microsoft::UI::Xaml::Controls::ISplitViewStatics
    {
        BEGIN_INTERFACE_MAP(SplitViewFactory, ctl::BetterAggregableCoreObjectActivationFactory)
            INTERFACE_ENTRY(SplitViewFactory, ABI::Microsoft::UI::Xaml::Controls::ISplitViewFactory)
            INTERFACE_ENTRY(SplitViewFactory, ABI::Microsoft::UI::Xaml::Controls::ISplitViewStatics)
        END_INTERFACE_MAP(SplitViewFactory, ctl::BetterAggregableCoreObjectActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::ISplitView** ppInstance);

        // Static properties.

        // Dependency properties.
        IFACEMETHOD(get_ContentProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_PaneProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_IsPaneOpenProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_OpenPaneLengthProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_CompactPaneLengthProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_PanePlacementProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_DisplayModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_TemplateSettingsProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_PaneBackgroundProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_LightDismissOverlayModeProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::SplitView;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
