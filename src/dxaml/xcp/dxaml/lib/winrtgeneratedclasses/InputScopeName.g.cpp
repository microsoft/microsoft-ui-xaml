// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "InputScopeName.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::InputScopeName::InputScopeName()
{
}

DirectUI::InputScopeName::~InputScopeName()
{
}

HRESULT DirectUI::InputScopeName::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::InputScopeName)))
    {
        *ppObject = static_cast<DirectUI::InputScopeName*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IInputScopeName)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IInputScopeName*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::InputScopeName::get_NameValue(_Out_ ABI::Microsoft::UI::Xaml::Input::InputScopeNameValue* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::InputScopeName_NameValue, pValue));
}
IFACEMETHODIMP DirectUI::InputScopeName::put_NameValue(_In_ ABI::Microsoft::UI::Xaml::Input::InputScopeNameValue value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::InputScopeName_NameValue, value));
}

// Events.

// Methods.

HRESULT DirectUI::InputScopeNameFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IInputScopeNameFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IInputScopeNameFactory*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::InputScopeNameFactory::CreateInstance(_In_ ABI::Microsoft::UI::Xaml::Input::InputScopeNameValue nameValue, _Outptr_ ABI::Microsoft::UI::Xaml::Input::IInputScopeName** ppInstance)
{
    HRESULT hr = S_OK;
    
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(nameValue, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_InputScopeName()
    {
        RRETURN(ctl::ActivationFactoryCreator<InputScopeNameFactory>::CreateActivationFactory());
    }
}
