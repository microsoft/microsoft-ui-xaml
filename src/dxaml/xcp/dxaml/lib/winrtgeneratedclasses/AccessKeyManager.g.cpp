// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "AccessKeyManager.g.h"
#include "XamlRoot.g.h"
#include "XamlTelemetry.h"


HRESULT DirectUI::AccessKeyManagerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::AccessKeyManagerFactory::get_IsDisplayModeEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_IsDisplayModeEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AccessKeyManagerFactory::get_AreKeyTipsEnabled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_AreKeyTipsEnabledImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AccessKeyManagerFactory::put_AreKeyTipsEnabled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckActivationAllowed());
    IFC(put_AreKeyTipsEnabledImpl(value));
Cleanup:
    RRETURN(hr);
}

// Static methods.
IFACEMETHODIMP DirectUI::AccessKeyManagerFactory::ExitDisplayMode()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "AccessKeyManager_ExitDisplayMode", 0);
    }
    
    IFC(CheckActivationAllowed());
    IFC(ExitDisplayModeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "AccessKeyManager_ExitDisplayMode", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::AccessKeyManagerFactory::EnterDisplayModeForXamlRoot(_In_ ABI::Microsoft::UI::Xaml::IXamlRoot* pXamlRoot)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "AccessKeyManager_EnterDisplayModeForXamlRoot", 0);
    }
    ARG_NOTNULL(pXamlRoot, "XamlRoot");
    IFC(CheckActivationAllowed());
    IFC(EnterDisplayModeForXamlRootImpl(pXamlRoot));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "AccessKeyManager_EnterDisplayModeForXamlRoot", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_AccessKeyManager()
    {
        RRETURN(ctl::ActivationFactoryCreator<AccessKeyManagerFactory>::CreateActivationFactory());
    }
}
