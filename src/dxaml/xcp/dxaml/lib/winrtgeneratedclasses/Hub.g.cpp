// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "Hub.g.h"
#include "DataTemplate.g.h"
#include "HubSection.g.h"
#include "SemanticZoom.g.h"
#include "SemanticZoomLocation.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::HubGenerated::HubGenerated()
{
}

DirectUI::HubGenerated::~HubGenerated()
{
}

HRESULT DirectUI::HubGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::Hub)))
    {
        *ppObject = static_cast<DirectUI::Hub*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IHub)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IHub*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation*>(this);
    }
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::HubGenerated::get_DefaultSectionIndex(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_DefaultSectionIndex, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_DefaultSectionIndex(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_DefaultSectionIndex, value));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_Header, ppValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_Header, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_IsActiveView(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_IsActiveView, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_IsActiveView(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_IsActiveView, value));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_IsZoomedInView(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_IsZoomedInView, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_IsZoomedInView(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_IsZoomedInView, value));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_Orientation(_Out_ ABI::Microsoft::UI::Xaml::Controls::Orientation* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_Orientation, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_Orientation(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_Orientation, value));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_SectionHeaders(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<Hub*>(this)->get_SectionHeadersImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::get_Sections(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Controls::HubSection*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_Sections, ppValue));
}
_Check_return_ HRESULT DirectUI::HubGenerated::put_Sections(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Controls::HubSection*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_Sections, pValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::get_SectionsInView(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Controls::HubSection*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<Hub*>(this)->get_SectionsInViewImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::get_SemanticZoomOwner(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoom** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::Hub_SemanticZoomOwner, ppValue));
}
IFACEMETHODIMP DirectUI::HubGenerated::put_SemanticZoomOwner(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoom* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::Hub_SemanticZoomOwner, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::HubGenerated::GetSectionHeaderClickEventSourceNoRef(_Outptr_ SectionHeaderClickEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Hub_SectionHeaderClick, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SectionHeaderClickEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Hub_SectionHeaderClick, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Hub_SectionHeaderClick, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::HubGenerated::add_SectionHeaderClick(_In_ ABI::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SectionHeaderClickEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSectionHeaderClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::HubGenerated::remove_SectionHeaderClick(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SectionHeaderClickEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSectionHeaderClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Hub_SectionHeaderClick));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::HubGenerated::GetSectionsInViewChangedEventSourceNoRef(_Outptr_ SectionsInViewChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::Hub_SectionsInViewChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SectionsInViewChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::Hub_SectionsInViewChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::Hub_SectionsInViewChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::HubGenerated::add_SectionsInViewChanged(_In_ ABI::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SectionsInViewChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSectionsInViewChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::HubGenerated::remove_SectionsInViewChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SectionsInViewChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSectionsInViewChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::Hub_SectionsInViewChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::HubGenerated::CompleteViewChange()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChange", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->CompleteViewChangeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChange", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::CompleteViewChangeFrom(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChangeFrom", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->CompleteViewChangeFromImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChangeFrom", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::CompleteViewChangeTo(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChangeTo", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->CompleteViewChangeToImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_CompleteViewChangeTo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::InitializeViewChange()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_InitializeViewChange", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->InitializeViewChangeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_InitializeViewChange", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_MakeVisible", 0);
    }
    ARG_NOTNULL(pItem, "item");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->MakeVisibleImpl(pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::ScrollToSection(_In_ ABI::Microsoft::UI::Xaml::Controls::IHubSection* pSection)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_ScrollToSection", 0);
    }
    ARG_NOTNULL(pSection, "section");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->ScrollToSectionImpl(pSection));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_ScrollToSection", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::StartViewChangeFrom(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_StartViewChangeFrom", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->StartViewChangeFromImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_StartViewChangeFrom", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::HubGenerated::StartViewChangeTo(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "Hub_StartViewChangeTo", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<Hub*>(this)->StartViewChangeToImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "Hub_StartViewChangeTo", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::HubGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Hub_SectionHeaderClick:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SectionHeaderClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSectionHeaderClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Hub_SectionsInViewChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SectionsInViewChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSectionsInViewChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::HubGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::Hub_SectionHeaderClick:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SectionHeaderClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSectionHeaderClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::Hub_SectionsInViewChanged:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                SectionsInViewChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetSectionsInViewChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::HubFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IHubFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IHubFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IHubStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IHubStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::HubFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IHub** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IHub);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::HubFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_Header, ppValue));
}
IFACEMETHODIMP DirectUI::HubFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::HubFactory::get_OrientationProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_Orientation, ppValue));
}
IFACEMETHODIMP DirectUI::HubFactory::get_DefaultSectionIndexProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_DefaultSectionIndex, ppValue));
}



IFACEMETHODIMP DirectUI::HubFactory::get_SemanticZoomOwnerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_SemanticZoomOwner, ppValue));
}
IFACEMETHODIMP DirectUI::HubFactory::get_IsActiveViewProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_IsActiveView, ppValue));
}
IFACEMETHODIMP DirectUI::HubFactory::get_IsZoomedInViewProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::Hub_IsZoomedInView, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_Hub()
    {
        RRETURN(ctl::ActivationFactoryCreator<HubFactory>::CreateActivationFactory());
    }
}
