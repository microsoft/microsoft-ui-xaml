// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ChoosingGroupHeaderContainerEventArgs.g.h"
#include "ListViewBaseHeaderItem.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ChoosingGroupHeaderContainerEventArgs::ChoosingGroupHeaderContainerEventArgs(): m_groupIndex()
{
}

DirectUI::ChoosingGroupHeaderContainerEventArgs::~ChoosingGroupHeaderContainerEventArgs()
{
}

HRESULT DirectUI::ChoosingGroupHeaderContainerEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ChoosingGroupHeaderContainerEventArgs)))
    {
        *ppObject = static_cast<DirectUI::ChoosingGroupHeaderContainerEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ChoosingGroupHeaderContainerEventArgs::get_Group(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pGroup.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ChoosingGroupHeaderContainerEventArgs::put_Group(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pGroup, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingGroupHeaderContainerEventArgs::get_GroupHeaderContainer(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(m_pGroupHeaderContainer.CopyTo(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingGroupHeaderContainerEventArgs::put_GroupHeaderContainer(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem* pValue)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    SetPtrValue(m_pGroupHeaderContainer, pValue);
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ChoosingGroupHeaderContainerEventArgs::get_GroupIndex(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_groupIndex, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ChoosingGroupHeaderContainerEventArgs::put_GroupIndex(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_groupIndex));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ChoosingGroupHeaderContainerEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::ActivationFactory<DirectUI::ChoosingGroupHeaderContainerEventArgs>>::CreateActivationFactory());
    }
}
