// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "BitmapImage.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::BitmapImageGenerated::BitmapImageGenerated()
{
}

DirectUI::BitmapImageGenerated::~BitmapImageGenerated()
{
}

HRESULT DirectUI::BitmapImageGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::BitmapImage)))
    {
        *ppObject = static_cast<DirectUI::BitmapImage*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage*>(this);
    }
    else
    {
        RRETURN(DirectUI::BitmapSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_AutoPlay(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_AutoPlay, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_AutoPlay(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_AutoPlay, value));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_CreateOptions(_Out_ ABI::Microsoft::UI::Xaml::Media::Imaging::BitmapCreateOptions* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_CreateOptions, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_CreateOptions(_In_ ABI::Microsoft::UI::Xaml::Media::Imaging::BitmapCreateOptions value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_CreateOptions, value));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_DecodePixelHeight(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelHeight, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_DecodePixelHeight(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelHeight, value));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_DecodePixelType(_Out_ ABI::Microsoft::UI::Xaml::Media::Imaging::DecodePixelType* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelType, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_DecodePixelType(_In_ ABI::Microsoft::UI::Xaml::Media::Imaging::DecodePixelType value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelType, value));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_DecodePixelWidth(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelWidth, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_DecodePixelWidth(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_DecodePixelWidth, value));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_IsAnimatedBitmap(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_IsAnimatedBitmap, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_IsPlaying(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_IsPlaying, pValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::get_UriSource(_Outptr_result_maybenull_ ABI::Windows::Foundation::IUriRuntimeClass** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::BitmapImage_UriSource, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::put_UriSource(_In_opt_ ABI::Windows::Foundation::IUriRuntimeClass* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::BitmapImage_UriSource, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::BitmapImageGenerated::GetDownloadProgressEventSourceNoRef(_Outptr_ DownloadProgressEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::BitmapImage_DownloadProgress, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DownloadProgressEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::BitmapImage_DownloadProgress, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::BitmapImage_DownloadProgress, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::add_DownloadProgress(_In_ ABI::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DownloadProgressEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDownloadProgressEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::remove_DownloadProgress(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DownloadProgressEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDownloadProgressEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::BitmapImage_DownloadProgress));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::BitmapImageGenerated::GetImageFailedEventSourceNoRef(_Outptr_ ImageFailedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::BitmapImage_ImageFailed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ImageFailedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::BitmapImage_ImageFailed, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::BitmapImage_ImageFailed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::add_ImageFailed(_In_ ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ImageFailedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageFailedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::remove_ImageFailed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ImageFailedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageFailedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::BitmapImage_ImageFailed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::BitmapImageGenerated::GetImageOpenedEventSourceNoRef(_Outptr_ ImageOpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::BitmapImage_ImageOpened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ImageOpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::BitmapImage_ImageOpened, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::BitmapImage_ImageOpened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::add_ImageOpened(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ImageOpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::BitmapImageGenerated::remove_ImageOpened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ImageOpenedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::BitmapImage_ImageOpened));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::BitmapImageGenerated::Play()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "BitmapImage_Play", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<BitmapImage*>(this)->PlayImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "BitmapImage_Play", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BitmapImageGenerated::Stop()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "BitmapImage_Stop", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<BitmapImage*>(this)->StopImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "BitmapImage_Stop", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::BitmapImageFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::BitmapImageFactory::CreateInstanceWithUriSource(_In_ ABI::Windows::Foundation::IUriRuntimeClass* pUriSource, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(pUriSource, "uriSource");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceWithUriSourceImpl(pUriSource, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_CreateOptionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_CreateOptions, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_UriSourceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_UriSource, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_DecodePixelWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_DecodePixelWidth, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_DecodePixelHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_DecodePixelHeight, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_DecodePixelTypeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_DecodePixelType, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_IsAnimatedBitmapProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_IsAnimatedBitmap, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_IsPlayingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_IsPlaying, ppValue));
}
IFACEMETHODIMP DirectUI::BitmapImageFactory::get_AutoPlayProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::BitmapImage_AutoPlay, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_BitmapImage()
    {
        RRETURN(ctl::ActivationFactoryCreator<BitmapImageFactory>::CreateActivationFactory());
    }
}
