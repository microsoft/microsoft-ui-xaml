// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ImageBrush.g.h"
#include "ImageSource.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ImageBrush::ImageBrush()
{
}

DirectUI::ImageBrush::~ImageBrush()
{
}

HRESULT DirectUI::ImageBrush::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ImageBrush)))
    {
        *ppObject = static_cast<DirectUI::ImageBrush*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IImageBrush)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IImageBrush*>(this);
    }
    else
    {
        RRETURN(DirectUI::TileBrush::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ImageBrush::get_ImageSource(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IImageSource** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ImageBrush_ImageSource, ppValue));
}
IFACEMETHODIMP DirectUI::ImageBrush::put_ImageSource(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IImageSource* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ImageBrush_ImageSource, pValue));
}

// Events.
_Check_return_ HRESULT DirectUI::ImageBrush::GetImageFailedEventSourceNoRef(_Outptr_ ImageFailedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ImageBrush_ImageFailed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ImageFailedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ImageBrush_ImageFailed, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::ImageBrush_ImageFailed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ImageBrush::add_ImageFailed(_In_ ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ImageFailedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageFailedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ImageBrush::remove_ImageFailed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ImageFailedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IExceptionRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageFailedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ImageBrush_ImageFailed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ImageBrush::GetImageOpenedEventSourceNoRef(_Outptr_ ImageOpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ImageBrush_ImageOpened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ImageOpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ImageBrush_ImageOpened, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::ImageBrush_ImageOpened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ImageBrush::add_ImageOpened(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ImageOpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ImageBrush::remove_ImageOpened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ImageOpenedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetImageOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ImageBrush_ImageOpened));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.

HRESULT DirectUI::ImageBrushFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Media::IImageBrushStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Media::IImageBrushStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::ImageBrushFactory::get_ImageSourceProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ImageBrush_ImageSource, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ImageBrush()
    {
        RRETURN(ctl::ActivationFactoryCreator<ImageBrushFactory>::CreateActivationFactory());
    }
}
