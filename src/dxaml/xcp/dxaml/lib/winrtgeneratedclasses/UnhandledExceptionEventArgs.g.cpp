// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "UnhandledExceptionEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::UnhandledExceptionEventArgs::UnhandledExceptionEventArgs(): m_exception(), m_handled()
{
}

DirectUI::UnhandledExceptionEventArgs::~UnhandledExceptionEventArgs()
{
}

HRESULT DirectUI::UnhandledExceptionEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::UnhandledExceptionEventArgs)))
    {
        *ppObject = static_cast<DirectUI::UnhandledExceptionEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IUnhandledExceptionEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IUnhandledExceptionEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::UnhandledExceptionEventArgs::get_Exception(_Out_ HRESULT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(CValueBoxer::CopyValue(m_exception, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::UnhandledExceptionEventArgs::put_Exception(_In_ HRESULT value)
{
    HRESULT hr = S_OK;
    
    IFC(CValueBoxer::CopyValue(value, &m_exception));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::UnhandledExceptionEventArgs::get_Message(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(m_message.CopyTo(pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::UnhandledExceptionEventArgs::put_Message(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;
    
    IFC(m_message.Set(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::UnhandledExceptionEventArgs::get_Handled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    
    IFC(CValueBoxer::CopyValue(m_handled, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::UnhandledExceptionEventArgs::put_Handled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CValueBoxer::CopyValue(value, &m_handled));
Cleanup:
    RRETURN(hr);
}

// Methods.

_Check_return_ HRESULT DirectUI::UnhandledExceptionEventArgsFactory::CheckActivationAllowed()
{
    RRETURN(S_OK);
}

// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateUnhandledExceptionEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::UnhandledExceptionEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_UnhandledExceptionEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<UnhandledExceptionEventArgsFactory>::CreateActivationFactory());
    }
}
