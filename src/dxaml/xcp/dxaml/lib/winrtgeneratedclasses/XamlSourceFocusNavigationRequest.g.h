// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __XamlSourceFocusNavigationRequest_GUID "9ac12b98-d130-43a2-b20d-13516945bbbd"

#pragma region forwarders
namespace ctl
{
    template<typename impl_type>
    class interface_forwarder< ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest, impl_type> final
        : public ctl::iinspectable_forwarder_base< ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest, impl_type>
    {
        impl_type* This() { return this->This_helper<impl_type>(); }
        IFACEMETHOD(get_CorrelationId)(_Out_ GUID* pValue) override { return This()->get_CorrelationId(pValue); }
        IFACEMETHOD(get_HintRect)(_Out_ ABI::Windows::Foundation::Rect* pValue) override { return This()->get_HintRect(pValue); }
        IFACEMETHOD(get_Reason)(_Out_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason* pValue) override { return This()->get_Reason(pValue); }
    };
}
#pragma endregion

namespace DirectUI
{
    class XamlSourceFocusNavigationRequest;

    class __declspec(novtable) XamlSourceFocusNavigationRequestGenerated:
        public ctl::WeakReferenceSource
        , public ctl::forwarder_holder< ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest, XamlSourceFocusNavigationRequestGenerated >
    {
        friend class DirectUI::XamlSourceFocusNavigationRequest;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest");

        BEGIN_INTERFACE_MAP(XamlSourceFocusNavigationRequestGenerated, ctl::WeakReferenceSource)
            INTERFACE_ENTRY(XamlSourceFocusNavigationRequestGenerated, ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest)
        END_INTERFACE_MAP(XamlSourceFocusNavigationRequestGenerated, ctl::WeakReferenceSource)

    public:
        XamlSourceFocusNavigationRequestGenerated();
        ~XamlSourceFocusNavigationRequestGenerated() override;

        // Event source typedefs.


        // Properties.
        _Check_return_ HRESULT STDMETHODCALLTYPE get_CorrelationId(_Out_ GUID* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_HintRect(_Out_ ABI::Windows::Foundation::Rect* pValue);
        _Check_return_ HRESULT STDMETHODCALLTYPE get_Reason(_Out_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason* pValue);

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "XamlSourceFocusNavigationRequest_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) XamlSourceFocusNavigationRequestFactory:
       public ctl::AbstractActivationFactory
        , public ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequestFactory
    {
        BEGIN_INTERFACE_MAP(XamlSourceFocusNavigationRequestFactory, ctl::AbstractActivationFactory)
            INTERFACE_ENTRY(XamlSourceFocusNavigationRequestFactory, ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequestFactory)
        END_INTERFACE_MAP(XamlSourceFocusNavigationRequestFactory, ctl::AbstractActivationFactory)

    public:
        // Factory methods.
        IFACEMETHOD(CreateInstance)(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);
        IFACEMETHOD(CreateInstanceWithHintRect)(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _In_ ABI::Windows::Foundation::Rect hintRect, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);
        IFACEMETHOD(CreateInstanceWithHintRectAndCorrelationId)(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _In_ ABI::Windows::Foundation::Rect hintRect, _In_ GUID correlationId, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);

        // Static properties.

        // Dependency properties.

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;


        _Check_return_ HRESULT CheckActivationAllowed() override;

    private:
        _Check_return_ HRESULT CreateInstanceImpl(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);
        _Check_return_ HRESULT CreateInstanceWithHintRectImpl(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _In_ ABI::Windows::Foundation::Rect hintRect, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);
        _Check_return_ HRESULT CreateInstanceWithHintRectAndCorrelationIdImpl(_In_ ABI::Microsoft::UI::Xaml::Hosting::XamlSourceFocusNavigationReason reason, _In_ ABI::Windows::Foundation::Rect hintRect, _In_ GUID correlationId, _Outptr_ ABI::Microsoft::UI::Xaml::Hosting::IXamlSourceFocusNavigationRequest** ppInstance);

        // Customized static properties.

        // Customized static  methods.
    };
}
