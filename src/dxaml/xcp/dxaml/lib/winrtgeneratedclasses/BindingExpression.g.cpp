// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "BindingExpression.g.h"
#include "Binding.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::BindingExpressionGenerated::BindingExpressionGenerated()
{
}

DirectUI::BindingExpressionGenerated::~BindingExpressionGenerated()
{
}

HRESULT DirectUI::BindingExpressionGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::BindingExpression)))
    {
        *ppObject = static_cast<DirectUI::BindingExpression*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::IBindingExpression)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::IBindingExpression*>(this);
    }
    else
    {
        RRETURN(DirectUI::BindingExpressionBase::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::BindingExpressionGenerated::get_DataItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<BindingExpression*>(this)->get_DataItemImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::BindingExpressionGenerated::get_ParentBinding(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Data::IBinding** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<BindingExpression*>(this)->get_ParentBindingImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::BindingExpressionGenerated::UpdateSource()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "BindingExpression_UpdateSource", 0);
    }
    
    IFC(CheckThread());
    IFC(static_cast<BindingExpression*>(this)->UpdateSourceImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "BindingExpression_UpdateSource", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::BindingExpressionFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::IBindingExpressionFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::IBindingExpressionFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AggregableActivationFactory<DirectUI::BindingExpression>::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_BindingExpression()
    {
        RRETURN(ctl::ActivationFactoryCreator<BindingExpressionFactory>::CreateActivationFactory());
    }
}
