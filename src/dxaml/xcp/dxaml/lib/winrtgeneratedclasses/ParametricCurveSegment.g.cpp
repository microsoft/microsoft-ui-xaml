// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ParametricCurveSegment.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ParametricCurveSegment::ParametricCurveSegment()
{
}

DirectUI::ParametricCurveSegment::~ParametricCurveSegment()
{
}

HRESULT DirectUI::ParametricCurveSegment::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ParametricCurveSegment)))
    {
        *ppObject = static_cast<DirectUI::ParametricCurveSegment*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::get_BeginOffset(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_BeginOffset, pValue));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::put_BeginOffset(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_BeginOffset, value));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::get_ConstantCoefficient(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_ConstantCoefficient, pValue));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::put_ConstantCoefficient(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_ConstantCoefficient, value));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::get_CubicCoefficient(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_CubicCoefficient, pValue));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::put_CubicCoefficient(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_CubicCoefficient, value));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::get_LinearCoefficient(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_LinearCoefficient, pValue));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::put_LinearCoefficient(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_LinearCoefficient, value));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::get_QuadraticCoefficient(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_QuadraticCoefficient, pValue));
}
_Check_return_ HRESULT DirectUI::ParametricCurveSegment::put_QuadraticCoefficient(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ParametricCurveSegment_QuadraticCoefficient, value));
}

// Events.

// Methods.


namespace DirectUI
{
}
