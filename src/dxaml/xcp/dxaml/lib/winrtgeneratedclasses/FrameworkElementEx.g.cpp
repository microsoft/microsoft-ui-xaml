// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FrameworkElementEx.g.h"
#include "UIElementCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::FrameworkElementEx::FrameworkElementEx()
{
}

DirectUI::FrameworkElementEx::~FrameworkElementEx()
{
}

HRESULT DirectUI::FrameworkElementEx::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::FrameworkElementEx)))
    {
        *ppObject = static_cast<DirectUI::FrameworkElementEx*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementEx)) && Feature_Xaml2018::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementEx*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementExProtected)) && Feature_Xaml2018::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementExProtected*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::UIElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_ActualHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_ActualHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_ActualWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_ActualWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_Children(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::UIElement*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Children, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_Height(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Height, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_Height(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Height, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_HorizontalAlignment(_Out_ ABI::Microsoft::UI::Xaml::HorizontalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_HorizontalAlignment, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_HorizontalAlignment(_In_ ABI::Microsoft::UI::Xaml::HorizontalAlignment value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_HorizontalAlignment, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_Margin(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Margin, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_Margin(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Margin, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_MaxHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MaxHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_MaxHeight(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MaxHeight, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_MaxWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MaxWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_MaxWidth(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MaxWidth, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_MinHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MinHeight, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_MinHeight(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MinHeight, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_MinWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MinWidth, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_MinWidth(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_MinWidth, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_VerticalAlignment(_Out_ ABI::Microsoft::UI::Xaml::VerticalAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_VerticalAlignment, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_VerticalAlignment(_In_ ABI::Microsoft::UI::Xaml::VerticalAlignment value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_VerticalAlignment, value));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::get_Width(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Width, pValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementEx::put_Width(_In_ DOUBLE value)
{
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::FrameworkElementEx_Width, value));
}

// Events.

// Methods.

HRESULT DirectUI::FrameworkElementExFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementExFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementExFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementExStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IFrameworkElementExStatics*>(this);
    }
    else
#endif
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

#if WI_IS_FEATURE_PRESENT(Feature_Xaml2018)
    AddRefOuter();
    RRETURN(S_OK);
#endif
}


// Factory methods.
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::IFrameworkElementEx** ppInstance)
{
    if (!Feature_Xaml2018::IsEnabled()) IFC_RETURN(E_NOTIMPL);

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::IFrameworkElementEx);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_ActualWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_ActualWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_ActualHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_ActualHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_WidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_Width, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_HeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_Height, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_MinWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_MinWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_MaxWidthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_MaxWidth, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_MinHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_MinHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_MaxHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_MaxHeight, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_HorizontalAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_HorizontalAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_VerticalAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_VerticalAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::FrameworkElementExFactory::get_MarginProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::FrameworkElementEx_Margin, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FrameworkElementEx()
    {
        RRETURN(ctl::ActivationFactoryCreator<FrameworkElementExFactory>::CreateActivationFactory());
    }
}
