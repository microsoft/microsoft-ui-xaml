// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "DataErrorsChangedEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::DataErrorsChangedEventArgs::DataErrorsChangedEventArgs()
{
}

DirectUI::DataErrorsChangedEventArgs::~DataErrorsChangedEventArgs()
{
}

HRESULT DirectUI::DataErrorsChangedEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::DataErrorsChangedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::DataErrorsChangedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::IDataErrorsChangedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::IDataErrorsChangedEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::DataErrorsChangedEventArgs::get_PropertyName(_Out_ HSTRING* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(m_pPropertyName.CopyTo(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::DataErrorsChangedEventArgs::put_PropertyName(_In_opt_ HSTRING value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(m_pPropertyName.Set(value));
Cleanup:
    RRETURN(hr);
}

// Methods.

HRESULT DirectUI::DataErrorsChangedEventArgsFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Data::IDataErrorsChangedEventArgsFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Data::IDataErrorsChangedEventArgsFactory*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::DataErrorsChangedEventArgsFactory::CreateInstance(_In_ HSTRING name, _Outptr_ ABI::Microsoft::UI::Xaml::Data::IDataErrorsChangedEventArgs** ppInstance)
{
    HRESULT hr = S_OK;
    ARG_NOTNULL(name, "name");
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(CreateInstanceImpl(name, ppInstance));
Cleanup:
    return hr;
}

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateDataErrorsChangedEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::DataErrorsChangedEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_DataErrorsChangedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<DataErrorsChangedEventArgsFactory>::CreateActivationFactory());
    }
}
