// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ComboBox.g.h"
#include "Brush.g.h"
#include "ComboBoxTemplateSettings.g.h"
#include "DataTemplate.g.h"
#include "InputValidationCommand.g.h"
#include "InputValidationContext.g.h"
#include "Style.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ComboBoxGenerated::ComboBoxGenerated()
{
}

DirectUI::ComboBoxGenerated::~ComboBoxGenerated()
{
}

HRESULT DirectUI::ComboBoxGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ComboBox)))
    {
        *ppObject = static_cast<DirectUI::ComboBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBox)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxOverrides*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)))
    {
        *ppObject = static_cast<ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl2*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Selector::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_Description(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_Description(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_Description, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_ErrorTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_ErrorTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_ErrorTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_HasValidationErrors(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_HasValidationErrors, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_Header, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_InputValidationKind(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_InputValidationKind, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_InputValidationKind(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationKind value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_InputValidationKind, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_InputValidationMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_InputValidationMode, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_InputValidationMode(_In_ ABI::Microsoft::UI::Xaml::Controls::InputValidationMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_InputValidationMode, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_IsDropDownOpen(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsDropDownOpen, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_IsDropDownOpen(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsDropDownOpen, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_IsEditable(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsEditable, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_IsEditable(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsEditable, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_IsSelectionBoxHighlighted(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsSelectionBoxHighlighted, pValue));
}
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::put_IsSelectionBoxHighlighted(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsSelectionBoxHighlighted, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_IsTextSearchEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsTextSearchEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_IsTextSearchEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_IsTextSearchEnabled, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_LightDismissOverlayMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_LightDismissOverlayMode, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_LightDismissOverlayMode(_In_ ABI::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_LightDismissOverlayMode, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_MaxDropDownHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_MaxDropDownHeight, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_MaxDropDownHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_MaxDropDownHeight, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_PlaceholderForeground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_PlaceholderForeground, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_PlaceholderForeground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_PlaceholderForeground, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_PlaceholderText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_PlaceholderText, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_PlaceholderText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_PlaceholderText, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_SelectionBoxItem(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionBoxItem, ppValue));
}
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::put_SelectionBoxItem(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionBoxItem, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_SelectionBoxItemTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionBoxItemTemplate, ppValue));
}
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::put_SelectionBoxItemTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionBoxItemTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_SelectionChangedTrigger(_Out_ ABI::Microsoft::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionChangedTrigger, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_SelectionChangedTrigger(_In_ ABI::Microsoft::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_SelectionChangedTrigger, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_TemplateSettings(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_TemplateSettings, ppValue));
}
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::put_TemplateSettings(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_TemplateSettings, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_Text(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_Text, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_Text(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_Text, value));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_TextBoxStyle(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IStyle** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_TextBoxStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_TextBoxStyle(_In_opt_ ABI::Microsoft::UI::Xaml::IStyle* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_TextBoxStyle, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_ValidationCommand(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_ValidationCommand, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_ValidationCommand(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationCommand* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_ValidationCommand, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_ValidationContext(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_ValidationContext, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::put_ValidationContext(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IInputValidationContext* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ComboBox_ValidationContext, pValue));
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::get_ValidationErrors(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IObservableVector<ABI::Microsoft::UI::Xaml::Controls::InputValidationError*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ComboBox_ValidationErrors, ppValue));
}

// Events.
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::GetDropDownClosedEventSourceNoRef(_Outptr_ DropDownClosedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ComboBox_DropDownClosed, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DropDownClosedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ComboBox_DropDownClosed, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ComboBox_DropDownClosed, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::add_DropDownClosed(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DropDownClosedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDropDownClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::remove_DropDownClosed(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DropDownClosedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDropDownClosedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ComboBox_DropDownClosed));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::GetDropDownOpenedEventSourceNoRef(_Outptr_ DropDownOpenedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ComboBox_DropDownOpened, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DropDownOpenedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ComboBox_DropDownOpened, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ComboBox_DropDownOpened, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::add_DropDownOpened(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DropDownOpenedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDropDownOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::remove_DropDownOpened(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DropDownOpenedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDropDownOpenedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ComboBox_DropDownOpened));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::GetHasValidationErrorsChangedEventSourceNoRef(_Outptr_ HasValidationErrorsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ComboBox_HasValidationErrorsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HasValidationErrorsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ComboBox_HasValidationErrorsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ComboBox_HasValidationErrorsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::add_HasValidationErrorsChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::remove_HasValidationErrorsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HasValidationErrorsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHasValidationErrorsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ComboBox_HasValidationErrorsChanged));
    }

Cleanup:
    RRETURN(hr);
}
#endif
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::GetTextSubmittedEventSourceNoRef(_Outptr_ TextSubmittedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ComboBox_TextSubmitted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextSubmittedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ComboBox_TextSubmitted, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::ComboBox_TextSubmitted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::add_TextSubmitted(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ComboBox*, ABI::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextSubmittedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextSubmittedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::remove_TextSubmitted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextSubmittedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ComboBox*, ABI::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ComboBox*, ABI::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextSubmittedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ComboBox_TextSubmitted));
    }

Cleanup:
    RRETURN(hr);
}
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
_Check_return_ HRESULT DirectUI::ComboBoxGenerated::GetValidationErrorEventSourceNoRef(_Outptr_ ValidationErrorEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ComboBox_ValidationError, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ValidationErrorEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ComboBox_ValidationError, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::ComboBox_ValidationError, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::add_ValidationError(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ComboBoxGenerated::remove_ValidationError(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ValidationErrorEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::IInputValidationControl*, ABI::Microsoft::UI::Xaml::Controls::InputValidationErrorEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetValidationErrorEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ComboBox_ValidationError));
    }

Cleanup:
    RRETURN(hr);
}
#endif

// Methods.
IFACEMETHODIMP DirectUI::ComboBoxGenerated::OnApplyTemplate()
{
    HRESULT hr = S_OK;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pBackgroundPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pContentPresenterPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pDropDownOverlayPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pEditableTextPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pFlyoutButtonPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pItemsPresenterHostPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pItemsPresenterPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pItemsPresenterTranslateTransformPart;
    ctl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> pPopupPart;

    IFC(DirectUI::Selector::OnApplyTemplate());

    // First try to resolve all parts.
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Background").Get(), &pBackgroundPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ContentPresenter").Get(), &pContentPresenterPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"DropDownOverlay").Get(), &pDropDownOverlayPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"EditableText").Get(), &pEditableTextPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"FlyoutButton").Get(), &pFlyoutButtonPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ItemsPresenterHost").Get(), &pItemsPresenterHostPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ItemsPresenter").Get(), &pItemsPresenterPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"ItemsPresenterTranslateTransform").Get(), &pItemsPresenterTranslateTransformPart));
    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L"Popup").Get(), &pPopupPart));

    // If everything succeeded, store the references.
    SetPtrValueWithQIOrNull(m_tpBackgroundPart, pBackgroundPart.Get());
    SetPtrValueWithQIOrNull(m_tpContentPresenterPart, pContentPresenterPart.Get());
    SetPtrValueWithQIOrNull(m_tpDropDownOverlayPart, pDropDownOverlayPart.Get());
    SetPtrValueWithQIOrNull(m_tpEditableTextPart, pEditableTextPart.Get());
    SetPtrValueWithQIOrNull(m_tpFlyoutButtonPart, pFlyoutButtonPart.Get());
    SetPtrValueWithQIOrNull(m_tpItemsPresenterHostPart, pItemsPresenterHostPart.Get());
    SetPtrValueWithQIOrNull(m_tpItemsPresenterPart, pItemsPresenterPart.Get());
    SetPtrValueWithQIOrNull(m_tpItemsPresenterTranslateTransformPart, pItemsPresenterTranslateTransformPart.Get());
    SetPtrValueWithQIOrNull(m_tpPopupPart, pPopupPart.Get());

Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::OnBackButtonPressed(_Out_ BOOLEAN* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ComboBox_OnBackButtonPressed", 0);
    }
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ComboBox*>(this)->OnBackButtonPressedImpl(pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ComboBox_OnBackButtonPressed", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::OnDropDownClosed(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ComboBox_OnDropDownClosed", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ComboBox*>(this)->OnDropDownClosedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ComboBox_OnDropDownClosed", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ComboBoxGenerated::OnDropDownClosedProtected(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IComboBoxOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDropDownClosed(pE));
    }
    else
    {
        IFC(OnDropDownClosed(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ComboBoxGenerated::OnDropDownOpened(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ComboBox_OnDropDownOpened", 0);
    }
    ARG_NOTNULL(pE, "e");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ComboBox*>(this)->OnDropDownOpenedImpl(pE));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ComboBox_OnDropDownOpened", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ComboBoxGenerated::OnDropDownOpenedProtected(_In_ IInspectable* pE)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Controls::IComboBoxOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->OnDropDownOpened(pE));
    }
    else
    {
        IFC(OnDropDownOpened(pE));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ComboBoxGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ComboBox_DropDownClosed:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DropDownClosedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDropDownClosedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ComboBox_DropDownOpened:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DropDownOpenedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDropDownOpenedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::SelectorGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ComboBoxGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ComboBox_DropDownClosed:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DropDownClosedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDropDownClosedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ComboBox_DropDownOpened:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DropDownOpenedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDropDownOpenedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::SelectorGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ComboBoxFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxStaticsFeature_HeaderPlacement*>(this);
    }
#endif
#if WI_IS_FEATURE_PRESENT(Feature_InputValidation)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBoxStaticsFeature_InputValidation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IComboBoxStaticsFeature_InputValidation*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ComboBoxFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IComboBox** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IComboBox);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_IsDropDownOpenProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_IsDropDownOpen, ppValue));
}


IFACEMETHODIMP DirectUI::ComboBoxFactory::get_MaxDropDownHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_MaxDropDownHeight, ppValue));
}



IFACEMETHODIMP DirectUI::ComboBoxFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_PlaceholderTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_PlaceholderText, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_LightDismissOverlayModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_LightDismissOverlayMode, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_IsTextSearchEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_IsTextSearchEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_SelectionChangedTriggerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_SelectionChangedTrigger, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_PlaceholderForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_PlaceholderForeground, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_TextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_Text, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_TextBoxStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_TextBoxStyle, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_DescriptionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_HeaderPlacement, ppValue));
}



IFACEMETHODIMP DirectUI::ComboBoxFactory::get_ErrorTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_ErrorTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_InputValidationModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_InputValidationMode, ppValue));
}
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_InputValidationKindProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ComboBox_InputValidationKind, ppValue));
}


// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::ComboBoxFactory::get_IsEditableProperty(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckActivationAllowed());
    IFC(get_IsEditablePropertyImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ComboBox()
    {
        RRETURN(ctl::ActivationFactoryCreator<ComboBoxFactory>::CreateActivationFactory());
    }
}
