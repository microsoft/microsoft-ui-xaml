// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ParserServiceProvider.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ParserServiceProviderGenerated::ParserServiceProviderGenerated()
{
}

DirectUI::ParserServiceProviderGenerated::~ParserServiceProviderGenerated()
{
}

HRESULT DirectUI::ParserServiceProviderGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ParserServiceProvider)))
    {
        *ppObject = static_cast<DirectUI::ParserServiceProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::IXamlServiceProvider)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::IXamlServiceProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IProvideValueTarget)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IProvideValueTarget*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IRootObjectProvider)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IRootObjectProvider*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IUriContext)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IUriContext*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Markup::IXamlTypeResolver)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Markup::IXamlTypeResolver*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::get_BaseUri(_Outptr_result_maybenull_ ABI::Windows::Foundation::IUriRuntimeClass** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->get_BaseUriImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::get_RootObject(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->get_RootObjectImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::get_TargetObject(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->get_TargetObjectImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::get_TargetProperty(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->get_TargetPropertyImpl(ppValue));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::GetService(_In_ ABI::Windows::UI::Xaml::Interop::TypeName type, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ParserServiceProvider_GetService", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->GetServiceImpl(type, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ParserServiceProvider_GetService", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ParserServiceProviderGenerated::Resolve(_In_ HSTRING qualifiedTypeName, _Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ParserServiceProvider_Resolve", 0);
    }
    ARG_NOTNULL(qualifiedTypeName, "qualifiedTypeName");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ParserServiceProvider*>(this)->ResolveImpl(qualifiedTypeName, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ParserServiceProvider_Resolve", hr);
    }
    RRETURN(hr);
}


