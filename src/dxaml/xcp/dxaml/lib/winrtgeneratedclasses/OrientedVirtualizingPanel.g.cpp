// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "OrientedVirtualizingPanel.g.h"
#include "UIElement.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::OrientedVirtualizingPanelGenerated::OrientedVirtualizingPanelGenerated()
{
}

DirectUI::OrientedVirtualizingPanelGenerated::~OrientedVirtualizingPanelGenerated()
{
}

HRESULT DirectUI::OrientedVirtualizingPanelGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::OrientedVirtualizingPanel)))
    {
        *ppObject = static_cast<DirectUI::OrientedVirtualizingPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IInsertionPanel)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IInsertionPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IItemLookupPanel)))
    {
        *ppObject = static_cast<DirectUI::IItemLookupPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IOrientedPanel)))
    {
        *ppObject = static_cast<DirectUI::IOrientedPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IPaginatedPanel)))
    {
        *ppObject = static_cast<DirectUI::IPaginatedPanel*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::IScrollInfo)))
    {
        *ppObject = static_cast<DirectUI::IScrollInfo*>(this);
    }
    else
    {
        RRETURN(DirectUI::VirtualizingPanel::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_AreHorizontalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_AreHorizontalSnapPointsRegularImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_AreVerticalSnapPointsRegular(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_AreVerticalSnapPointsRegularImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_CanHorizontallyScroll(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_CanHorizontallyScrollImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::put_CanHorizontallyScroll(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->put_CanHorizontallyScrollImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_CanVerticallyScroll(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_CanVerticallyScrollImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::put_CanVerticallyScroll(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->put_CanVerticallyScrollImpl(value));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_ExtentHeight(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_ExtentHeightImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_ExtentWidth(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_ExtentWidthImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_HorizontalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_HorizontalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_MinHorizontalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_MinHorizontalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_MinVerticalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_MinVerticalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_ScrollOwner(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_ScrollOwnerImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::put_ScrollOwner(_In_opt_ IInspectable* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->put_ScrollOwnerImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_VerticalOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_VerticalOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_ViewportHeight(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_ViewportHeightImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::get_ViewportWidth(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->get_ViewportWidthImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Events.
_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelGenerated::GetHorizontalSnapPointsChangedEventSourceNoRef(_Outptr_ HorizontalSnapPointsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<HorizontalSnapPointsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::add_HorizontalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::remove_HorizontalSnapPointsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelGenerated::GetVerticalSnapPointsChangedEventSourceNoRef(_Outptr_ VerticalSnapPointsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<VerticalSnapPointsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::add_VerticalSnapPointsChanged(_In_ ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::remove_VerticalSnapPointsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::IEventHandler<IInspectable*>* pValue = (ABI::Windows::Foundation::IEventHandler<IInspectable*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::GetInsertionIndexes(_In_ ABI::Windows::Foundation::Point position, _Out_ INT* pFirst, _Out_ INT* pSecond)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetInsertionIndexes", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->GetInsertionIndexesImpl(position, pFirst, pSecond));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetInsertionIndexes", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::GetIrregularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Outptr_ ABI::Windows::Foundation::Collections::IVectorView<FLOAT>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetIrregularSnapPoints", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->GetIrregularSnapPointsImpl(orientation, alignment, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetIrregularSnapPoints", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::GetRegularSnapPoints(_In_ ABI::Microsoft::UI::Xaml::Controls::Orientation orientation, _In_ ABI::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, _Out_ FLOAT* pOffset, _Out_ FLOAT* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetRegularSnapPoints", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->GetRegularSnapPointsImpl(orientation, alignment, pOffset, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_GetRegularSnapPoints", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::LineDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->LineDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::LineLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->LineLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::LineRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->LineRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::LineUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->LineUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_LineUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pVisual, _In_ ABI::Windows::Foundation::Rect rectangle, _Out_ ABI::Windows::Foundation::Rect* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MakeVisible", 0);
    }
    ARG_NOTNULL(pVisual, "visual");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MakeVisibleImpl(pVisual, rectangle, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pVisual, _In_ ABI::Windows::Foundation::Rect rectangle, _In_ BOOLEAN useAnimation, _In_ DOUBLE horizontalAlignmentRatio, _In_ DOUBLE verticalAlignmentRatio, _In_ DOUBLE offsetX, _In_ DOUBLE offsetY, _Out_ ABI::Windows::Foundation::Rect* pResultRectangle, _Out_ DOUBLE* pAppliedOffsetX, _Out_ DOUBLE* pAppliedOffsetY)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MakeVisible", 0);
    }
    ARG_NOTNULL(pVisual, "visual");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MakeVisibleImpl(pVisual, rectangle, useAnimation, horizontalAlignmentRatio, verticalAlignmentRatio, offsetX, offsetY, pResultRectangle, pAppliedOffsetX, pAppliedOffsetY));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MouseWheelDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MouseWheelDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MouseWheelLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MouseWheelLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MouseWheelRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MouseWheelRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::MouseWheelUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->MouseWheelUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_MouseWheelUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::PageDown()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageDown", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->PageDownImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageDown", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::PageLeft()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageLeft", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->PageLeftImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageLeft", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::PageRight()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageRight", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->PageRightImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageRight", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::PageUp()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageUp", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->PageUpImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_PageUp", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::SetHorizontalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_SetHorizontalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->SetHorizontalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_SetHorizontalOffset", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::OrientedVirtualizingPanelGenerated::SetVerticalOffset(_In_ DOUBLE offset)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_SetVerticalOffset", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<OrientedVirtualizingPanel*>(this)->SetVerticalOffsetImpl(offset));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "OrientedVirtualizingPanel_SetVerticalOffset", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::VirtualizingPanelGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::OrientedVirtualizingPanel_HorizontalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                HorizontalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetHorizontalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::OrientedVirtualizingPanel_VerticalSnapPointsChanged:
        {
            ctl::ComPtr<ABI::Windows::Foundation::IEventHandler<IInspectable*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                VerticalSnapPointsChangedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetVerticalSnapPointsChangedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::VirtualizingPanelGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::OrientedVirtualizingPanelFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.
_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelFactory::GetIsContainerGeneratedForInsertStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _Out_ BOOLEAN* pValue)
{
    RRETURN(DependencyObject::GetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::OrientedVirtualizingPanel_IsContainerGeneratedForInsert, pValue));
}

_Check_return_ HRESULT DirectUI::OrientedVirtualizingPanelFactory::SetIsContainerGeneratedForInsertStatic(_In_ ABI::Microsoft::UI::Xaml::IUIElement* pElement, _In_ BOOLEAN value)
{
    RRETURN(DependencyObject::SetAttachedValueByKnownIndex(static_cast<DirectUI::UIElement*>(pElement), KnownPropertyIndex::OrientedVirtualizingPanel_IsContainerGeneratedForInsert, value));
}

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_OrientedVirtualizingPanel()
    {
        RRETURN(ctl::ActivationFactoryCreator<OrientedVirtualizingPanelFactory>::CreateActivationFactory());
    }
}
