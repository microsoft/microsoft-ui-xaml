// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CalendarViewTemplateSettings.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CalendarViewTemplateSettings::CalendarViewTemplateSettings()
{
}

DirectUI::CalendarViewTemplateSettings::~CalendarViewTemplateSettings()
{
}

HRESULT DirectUI::CalendarViewTemplateSettings::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CalendarViewTemplateSettings)))
    {
        *ppObject = static_cast<DirectUI::CalendarViewTemplateSettings*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings*>(this);
    }
    else
    {
        RRETURN(DirectUI::DependencyObject::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_CenterX(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_CenterX, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_CenterX(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_CenterX, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_CenterY(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_CenterY, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_CenterY(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_CenterY, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_ClipRect(_Out_ ABI::Windows::Foundation::Rect* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_ClipRect, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_ClipRect(_In_ ABI::Windows::Foundation::Rect value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_ClipRect, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_HasMoreContentAfter(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreContentAfter, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_HasMoreContentAfter(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreContentAfter, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_HasMoreContentBefore(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreContentBefore, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_HasMoreContentBefore(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreContentBefore, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_HasMoreViews(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreViews, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_HasMoreViews(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HasMoreViews, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_HeaderText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HeaderText, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_HeaderText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_HeaderText, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_MinViewWidth(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_MinViewWidth, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_MinViewWidth(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_MinViewWidth, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay1(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay1, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay1(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay1, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay2(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay2, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay2(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay2, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay3(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay3, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay3(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay3, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay4(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay4, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay4(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay4, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay5(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay5, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay5(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay5, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay6(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay6, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay6(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay6, value));
}
IFACEMETHODIMP DirectUI::CalendarViewTemplateSettings::get_WeekDay7(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay7, pValue));
}
_Check_return_ HRESULT DirectUI::CalendarViewTemplateSettings::put_WeekDay7(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::CalendarViewTemplateSettings_WeekDay7, value));
}

// Events.

// Methods.

// Factory methods.

// Dependency properties.
















// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_CalendarViewTemplateSettings()
    {
        RRETURN(ctl::ActivationFactoryCreator<CalendarViewTemplateSettingsFactory>::CreateActivationFactory());
    }
}
