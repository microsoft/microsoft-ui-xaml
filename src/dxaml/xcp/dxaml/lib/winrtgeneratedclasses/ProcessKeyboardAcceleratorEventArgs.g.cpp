// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ProcessKeyboardAcceleratorEventArgs.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ProcessKeyboardAcceleratorEventArgs::ProcessKeyboardAcceleratorEventArgs(): m_key(), m_modifiers(), m_handled(), m_handledShouldNotImpedeTextInput()
{
}

DirectUI::ProcessKeyboardAcceleratorEventArgs::~ProcessKeyboardAcceleratorEventArgs()
{
}

HRESULT DirectUI::ProcessKeyboardAcceleratorEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ProcessKeyboardAcceleratorEventArgs)))
    {
        *ppObject = static_cast<DirectUI::ProcessKeyboardAcceleratorEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ProcessKeyboardAcceleratorEventArgs::get_Handled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_handled, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ProcessKeyboardAcceleratorEventArgs::put_Handled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_handled));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ProcessKeyboardAcceleratorEventArgs::get_HandledShouldNotImpedeTextInput(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_handledShouldNotImpedeTextInput, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ProcessKeyboardAcceleratorEventArgs::put_HandledShouldNotImpedeTextInput(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_handledShouldNotImpedeTextInput));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ProcessKeyboardAcceleratorEventArgs::get_Key(_Out_ ABI::Windows::System::VirtualKey* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_key, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ProcessKeyboardAcceleratorEventArgs::put_Key(_In_ ABI::Windows::System::VirtualKey value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_key));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ProcessKeyboardAcceleratorEventArgs::get_Modifiers(_Out_ ABI::Windows::System::VirtualKeyModifiers* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_modifiers, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ProcessKeyboardAcceleratorEventArgs::put_Modifiers(_In_ ABI::Windows::System::VirtualKeyModifiers value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_modifiers));
Cleanup:
    RRETURN(hr);
}

// Events.

// Methods.


namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ProcessKeyboardAcceleratorEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
