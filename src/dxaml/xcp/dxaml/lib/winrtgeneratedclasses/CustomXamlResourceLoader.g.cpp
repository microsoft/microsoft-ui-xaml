// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "CustomXamlResourceLoader.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::CustomXamlResourceLoader::CustomXamlResourceLoader()
{
}

DirectUI::CustomXamlResourceLoader::~CustomXamlResourceLoader()
{
}

HRESULT DirectUI::CustomXamlResourceLoader::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::CustomXamlResourceLoader)))
    {
        *ppObject = static_cast<DirectUI::CustomXamlResourceLoader*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides*>(this);
    }
    else
    {
        RRETURN(ctl::WeakReferenceSource::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.

// Events.

// Methods.
IFACEMETHODIMP DirectUI::CustomXamlResourceLoader::GetResource(_In_ HSTRING resourceId, _In_ HSTRING objectType, _In_ HSTRING propertyName, _In_ HSTRING propertyType, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "CustomXamlResourceLoader_GetResource", 0);
    }
    ARG_NOTNULL(resourceId, "resourceId");
    ARG_NOTNULL(objectType, "objectType");
    ARG_NOTNULL(propertyName, "propertyName");
    ARG_NOTNULL(propertyType, "propertyType");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<CustomXamlResourceLoader*>(this)->GetResourceImpl(resourceId, objectType, propertyName, propertyType, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "CustomXamlResourceLoader_GetResource", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::CustomXamlResourceLoader::GetResourceProtected(_In_ HSTRING resourceId, _In_ HSTRING objectType, _In_ HSTRING propertyName, _In_ HSTRING propertyType, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides* pVirtuals = NULL;

    if (IsComposed())
    {
        IFC(ctl::do_query_interface(pVirtuals, this));

        // SYNC_CALL_TO_APP DIRECT - This next line may directly call out to app code.
        IFC(pVirtuals->GetResource(resourceId, objectType, propertyName, propertyType, ppReturnValue));
    }
    else
    {
        IFC(GetResource(resourceId, objectType, propertyName, propertyType, ppReturnValue));
    }

Cleanup:
    ReleaseInterfaceNoNULL(pVirtuals);
    RRETURN(hr);
}

HRESULT DirectUI::CustomXamlResourceLoaderFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AggregableActivationFactory<DirectUI::CustomXamlResourceLoader>::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::CustomXamlResourceLoaderFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader** ppInstance)
{


    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithAggregableActivationFactory<DirectUI::CustomXamlResourceLoader,ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader>(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::CustomXamlResourceLoaderFactory::get_Current(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckActivationAllowed());
    IFC(get_CurrentImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::CustomXamlResourceLoaderFactory::put_Current(_In_opt_ ABI::Microsoft::UI::Xaml::Resources::ICustomXamlResourceLoader* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckActivationAllowed());
    IFC(put_CurrentImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_CustomXamlResourceLoader()
    {
        RRETURN(ctl::ActivationFactoryCreator<CustomXamlResourceLoaderFactory>::CreateActivationFactory());
    }
}
