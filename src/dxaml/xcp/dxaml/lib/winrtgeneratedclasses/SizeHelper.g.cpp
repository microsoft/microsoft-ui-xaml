// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "SizeHelper.g.h"
#include "XamlTelemetry.h"


HRESULT DirectUI::SizeHelperFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::ISizeHelperStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::ISizeHelperStatics*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.
IFACEMETHODIMP DirectUI::SizeHelperFactory::get_Empty(_Out_ ABI::Windows::Foundation::Size* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(get_EmptyImpl(pValue));
Cleanup:
    RRETURN(hr);
}

// Static methods.
IFACEMETHODIMP DirectUI::SizeHelperFactory::FromDimensions(_In_ FLOAT width, _In_ FLOAT height, _Out_ ABI::Windows::Foundation::Size* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SizeHelper_FromDimensions", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(FromDimensionsImpl(width, height, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SizeHelper_FromDimensions", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SizeHelperFactory::GetIsEmpty(_In_ ABI::Windows::Foundation::Size target, _Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SizeHelper_GetIsEmpty", 0);
    }
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckActivationAllowed());
    IFC(GetIsEmptyImpl(target, pValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SizeHelper_GetIsEmpty", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::SizeHelperFactory::Equals(_In_ ABI::Windows::Foundation::Size target, _In_ ABI::Windows::Foundation::Size value, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, 0, "SizeHelper_Equals", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(EqualsImpl(target, value, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, 0, "SizeHelper_Equals", hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_SizeHelper()
    {
        RRETURN(ctl::ActivationFactoryCreator<SizeHelperFactory>::CreateActivationFactory());
    }
}
