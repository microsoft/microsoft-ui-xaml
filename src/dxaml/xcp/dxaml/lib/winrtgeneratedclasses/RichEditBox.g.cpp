// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "RichEditBox.g.h"
#include "DataTemplate.g.h"
#include "FlyoutBase.g.h"
#include "InputScope.g.h"
#include "SolidColorBrush.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::RichEditBoxGenerated::RichEditBoxGenerated()
{
}

DirectUI::RichEditBoxGenerated::~RichEditBoxGenerated()
{
}

HRESULT DirectUI::RichEditBoxGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::RichEditBox)))
    {
        *ppObject = static_cast<DirectUI::RichEditBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBox)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichEditBox*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITelemetryCollectionPriv)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITelemetryCollectionPriv*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxFeature_HeaderPlacement)) && Feature_HeaderPlacement::IsEnabled())
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(DirectUI::Control::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_AcceptsReturn(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_AcceptsReturn, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_AcceptsReturn(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_AcceptsReturn, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_CharacterCasing(_Out_ ABI::Microsoft::UI::Xaml::Controls::CharacterCasing* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_CharacterCasing, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_CharacterCasing(_In_ ABI::Microsoft::UI::Xaml::Controls::CharacterCasing value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_CharacterCasing, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_ClipboardCopyFormat(_Out_ ABI::Microsoft::UI::Xaml::Controls::RichEditClipboardFormat* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_ClipboardCopyFormat, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_ClipboardCopyFormat(_In_ ABI::Microsoft::UI::Xaml::Controls::RichEditClipboardFormat value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_ClipboardCopyFormat, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_Description(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_Description(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_Description, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_DesiredCandidateWindowAlignment(_Out_ ABI::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_DesiredCandidateWindowAlignment, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_DesiredCandidateWindowAlignment(_In_ ABI::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_DesiredCandidateWindowAlignment, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_DisabledFormattingAccelerators(_Out_ ABI::Microsoft::UI::Xaml::Controls::DisabledFormattingAccelerators* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_DisabledFormattingAccelerators, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_DisabledFormattingAccelerators(_In_ ABI::Microsoft::UI::Xaml::Controls::DisabledFormattingAccelerators value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_DisabledFormattingAccelerators, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_Document(_Outptr_result_maybenull_ ABI::Microsoft::UI::Text::ITextDocument** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<RichEditBox*>(this)->get_DocumentImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_Header, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_HeaderPlacement(_Out_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HeaderPlacement, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_HeaderPlacement(_In_ ABI::Microsoft::UI::Xaml::Controls::ControlHeaderPlacement value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HeaderPlacement, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_HorizontalTextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HorizontalTextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_HorizontalTextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_HorizontalTextAlignment, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_InputScope(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Input::IInputScope** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_InputScope, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_InputScope(_In_opt_ ABI::Microsoft::UI::Xaml::Input::IInputScope* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_InputScope, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_IsColorFontEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsColorFontEnabled, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_IsColorFontEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsColorFontEnabled, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_IsReadOnly(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsReadOnly, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_IsReadOnly(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsReadOnly, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_IsSpellCheckEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsSpellCheckEnabled, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_IsSpellCheckEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsSpellCheckEnabled, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_IsTelemetryCollectionEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsTelemetryCollectionEnabled, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_IsTelemetryCollectionEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsTelemetryCollectionEnabled, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_IsTextPredictionEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsTextPredictionEnabled, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_IsTextPredictionEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_IsTextPredictionEnabled, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_MaxLength(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_MaxLength, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_MaxLength(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_MaxLength, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_PlaceholderText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_PlaceholderText, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_PlaceholderText(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_PlaceholderText, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_PreventKeyboardDisplayOnProgrammaticFocus(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_PreventKeyboardDisplayOnProgrammaticFocus, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_PreventKeyboardDisplayOnProgrammaticFocus(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_PreventKeyboardDisplayOnProgrammaticFocus, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_ProofingMenuFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_ProofingMenuFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_SelectionFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_SelectionFlyout(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionFlyout, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_SelectionHighlightColor(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_SelectionHighlightColor(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionHighlightColor, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_SelectionHighlightColorWhenNotFocused(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionHighlightColorWhenNotFocused, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_SelectionHighlightColorWhenNotFocused(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_SelectionHighlightColorWhenNotFocused, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_TextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_TextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextAlignment, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_TextDocument(_Outptr_result_maybenull_ ABI::Microsoft::UI::Text::ITextDocument** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<RichEditBox*>(this)->get_TextDocumentImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_TextReadingOrder(_Out_ ABI::Microsoft::UI::Xaml::TextReadingOrder* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextReadingOrder, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_TextReadingOrder(_In_ ABI::Microsoft::UI::Xaml::TextReadingOrder value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextReadingOrder, value));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::get_TextWrapping(_Out_ ABI::Microsoft::UI::Xaml::TextWrapping* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextWrapping, pValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::put_TextWrapping(_In_ ABI::Microsoft::UI::Xaml::TextWrapping value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::RichEditBox_TextWrapping, value));
}

// Events.
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetCandidateWindowBoundsChangedEventSourceNoRef(_Outptr_ CandidateWindowBoundsChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_CandidateWindowBoundsChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CandidateWindowBoundsChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_CandidateWindowBoundsChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_CandidateWindowBoundsChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_CandidateWindowBoundsChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CandidateWindowBoundsChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCandidateWindowBoundsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_CandidateWindowBoundsChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CandidateWindowBoundsChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCandidateWindowBoundsChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_CandidateWindowBoundsChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetContextMenuOpeningEventSourceNoRef(_Outptr_ ContextMenuOpeningEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_ContextMenuOpening, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContextMenuOpeningEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_ContextMenuOpening, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_ContextMenuOpening, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_ContextMenuOpening(_In_ ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_ContextMenuOpening(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_ContextMenuOpening));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetCopyingToClipboardEventSourceNoRef(_Outptr_ CopyingToClipboardEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_CopyingToClipboard, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CopyingToClipboardEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_CopyingToClipboard, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_CopyingToClipboard, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_CopyingToClipboard(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CopyingToClipboardEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCopyingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_CopyingToClipboard(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CopyingToClipboardEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCopyingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_CopyingToClipboard));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetCuttingToClipboardEventSourceNoRef(_Outptr_ CuttingToClipboardEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_CuttingToClipboard, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<CuttingToClipboardEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_CuttingToClipboard, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_CuttingToClipboard, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_CuttingToClipboard(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    CuttingToClipboardEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCuttingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_CuttingToClipboard(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    CuttingToClipboardEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetCuttingToClipboardEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_CuttingToClipboard));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetPasteEventSourceNoRef(_Outptr_ PasteEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_Paste, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<PasteEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_Paste, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_Paste, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_Paste(_In_ ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_Paste(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    PasteEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::ITextControlPasteEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetPasteEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_Paste));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetSelectionChangedEventSourceNoRef(_Outptr_ SelectionChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_SelectionChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectionChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_SelectionChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_SelectionChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_SelectionChanged(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_SelectionChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_SelectionChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetSelectionChangingEventSourceNoRef(_Outptr_ SelectionChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_SelectionChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectionChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_SelectionChanging, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_SelectionChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_SelectionChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectionChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_SelectionChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectionChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_SelectionChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetTextChangedEventSourceNoRef(_Outptr_ TextChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_TextChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_TextChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_TextChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_TextChanged(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_TextChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_TextChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetTextChangingEventSourceNoRef(_Outptr_ TextChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_TextChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_TextChanging, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_TextChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_TextChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_TextChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_TextChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetTextCompositionChangedEventSourceNoRef(_Outptr_ TextCompositionChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_TextCompositionChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_TextCompositionChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_TextCompositionChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_TextCompositionChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_TextCompositionChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_TextCompositionChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetTextCompositionEndedEventSourceNoRef(_Outptr_ TextCompositionEndedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_TextCompositionEnded, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionEndedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_TextCompositionEnded, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_TextCompositionEnded, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_TextCompositionEnded(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionEndedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionEndedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_TextCompositionEnded(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionEndedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionEndedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_TextCompositionEnded));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::GetTextCompositionStartedEventSourceNoRef(_Outptr_ TextCompositionStartedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::RichEditBox_TextCompositionStarted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<TextCompositionStartedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::RichEditBox_TextCompositionStarted, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::RichEditBox_TextCompositionStarted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::add_TextCompositionStarted(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    TextCompositionStartedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::RichEditBoxGenerated::remove_TextCompositionStarted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    TextCompositionStartedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetTextCompositionStartedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::RichEditBox_TextCompositionStarted));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::RichEditBoxGenerated::GetLinguisticAlternativesAsync(_Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Windows::Foundation::Collections::IVectorView<HSTRING>*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "RichEditBox_GetLinguisticAlternativesAsync", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<RichEditBox*>(this)->GetLinguisticAlternativesAsyncImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "RichEditBox_GetLinguisticAlternativesAsync", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::RichEditBox_TextChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                TextChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetTextChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::RichEditBoxGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::RichEditBox_TextChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::RichEditBox*, ABI::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                TextChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetTextChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::ControlGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::RichEditBoxFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics*>(this);
    }
#if WI_IS_FEATURE_PRESENT(Feature_HeaderPlacement)
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxStaticsFeature_HeaderPlacement)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IRichEditBoxStaticsFeature_HeaderPlacement*>(this);
    }
#endif
    else
    {
        RRETURN(ctl::BetterAggregableCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::RichEditBoxFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IRichEditBox** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IRichEditBox);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_IsReadOnlyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_IsReadOnly, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_AcceptsReturnProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_AcceptsReturn, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_TextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_TextAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_TextWrappingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_TextWrapping, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_IsSpellCheckEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_IsSpellCheckEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_IsTextPredictionEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_IsTextPredictionEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_InputScopeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_InputScope, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_Header, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_PlaceholderTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_PlaceholderText, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_SelectionHighlightColorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_PreventKeyboardDisplayOnProgrammaticFocusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_PreventKeyboardDisplayOnProgrammaticFocus, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_IsColorFontEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_IsColorFontEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_DesiredCandidateWindowAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_DesiredCandidateWindowAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_TextReadingOrderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_TextReadingOrder, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_ClipboardCopyFormatProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_ClipboardCopyFormat, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_SelectionHighlightColorWhenNotFocusedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_SelectionHighlightColorWhenNotFocused, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_MaxLengthProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_MaxLength, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_HorizontalTextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_HorizontalTextAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_CharacterCasingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_CharacterCasing, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_DisabledFormattingAcceleratorsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_DisabledFormattingAccelerators, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_SelectionFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_ProofingMenuFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_ProofingMenuFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_DescriptionProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_Description, ppValue));
}
IFACEMETHODIMP DirectUI::RichEditBoxFactory::get_HeaderPlacementProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::RichEditBox_HeaderPlacement, ppValue));
}


// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_RichEditBox()
    {
        RRETURN(ctl::ActivationFactoryCreator<RichEditBoxFactory>::CreateActivationFactory());
    }
}
