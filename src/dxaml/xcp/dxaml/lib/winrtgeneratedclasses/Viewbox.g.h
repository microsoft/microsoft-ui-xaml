// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once

#include "FrameworkElement.g.h"

#define __Viewbox_GUID "d3e3f989-57ae-43d0-a6e6-6e789d188657"

namespace DirectUI
{
    class Viewbox;
    class UIElement;

    class __declspec(novtable) __declspec(uuid(__Viewbox_GUID)) Viewbox:
        public DirectUI::FrameworkElement
        , public ABI::Microsoft::UI::Xaml::Controls::IViewbox
    {

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.Controls.Viewbox");

        BEGIN_INTERFACE_MAP(Viewbox, DirectUI::FrameworkElement)
            INTERFACE_ENTRY(Viewbox, ABI::Microsoft::UI::Xaml::Controls::IViewbox)
        END_INTERFACE_MAP(Viewbox, DirectUI::FrameworkElement)

    public:
        Viewbox();
        ~Viewbox() override;

        // Event source typedefs.

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Viewbox;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::Viewbox;
        }

        // Properties.
        IFACEMETHOD(get_Child)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IUIElement** ppValue) override;
        IFACEMETHOD(put_Child)(_In_opt_ ABI::Microsoft::UI::Xaml::IUIElement* pValue) override;
        IFACEMETHOD(get_Stretch)(_Out_ ABI::Microsoft::UI::Xaml::Media::Stretch* pValue) override;
        IFACEMETHOD(put_Stretch)(_In_ ABI::Microsoft::UI::Xaml::Media::Stretch value) override;
        IFACEMETHOD(get_StretchDirection)(_Out_ ABI::Microsoft::UI::Xaml::Controls::StretchDirection* pValue) override;
        IFACEMETHOD(put_StretchDirection)(_In_ ABI::Microsoft::UI::Xaml::Controls::StretchDirection value) override;

        // Events.

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:
        // Customized properties.

        // Customized methods.

        // Fields.
    };
}


namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ViewboxFactory:
       public ctl::BetterCoreObjectActivationFactory
        , public ABI::Microsoft::UI::Xaml::Controls::IViewboxStatics
    {
        BEGIN_INTERFACE_MAP(ViewboxFactory, ctl::BetterCoreObjectActivationFactory)
            INTERFACE_ENTRY(ViewboxFactory, ABI::Microsoft::UI::Xaml::Controls::IViewboxStatics)
        END_INTERFACE_MAP(ViewboxFactory, ctl::BetterCoreObjectActivationFactory)

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        
        IFACEMETHOD(get_StretchProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;
        IFACEMETHOD(get_StretchDirectionProperty)(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue) override;

        // Attached properties.

        // Static methods.

        // Static events.

    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::Viewbox;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
