// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "TextBlock.g.h"
#include "Brush.g.h"
#include "FlyoutBase.g.h"
#include "FontFamily.g.h"
#include "InlineCollection.g.h"
#include "SolidColorBrush.g.h"
#include "TextPointer.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::TextBlockGenerated::TextBlockGenerated()
{
}

DirectUI::TextBlockGenerated::~TextBlockGenerated()
{
}

HRESULT DirectUI::TextBlockGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::TextBlock)))
    {
        *ppObject = static_cast<DirectUI::TextBlock*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBlock)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBlock*>(this);
    }
    else
    {
        RRETURN(DirectUI::FrameworkElement::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_BaselineOffset(_Out_ DOUBLE* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<TextBlock*>(this)->get_BaselineOffsetImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_CharacterSpacing(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_CharacterSpacing, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_CharacterSpacing(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_CharacterSpacing, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_ContentEnd(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextBlock*>(this)->get_ContentEndImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_ContentStart(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextBlock*>(this)->get_ContentStartImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_FontFamily(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IFontFamily** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_FontFamily(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IFontFamily* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontFamily, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_FontSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontSize, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_FontSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontSize, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_FontStretch(_Out_ ABI::Windows::UI::Text::FontStretch* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontStretch, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_FontStretch(_In_ ABI::Windows::UI::Text::FontStretch value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontStretch, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_FontStyle(_Out_ ABI::Windows::UI::Text::FontStyle* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontStyle, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_FontStyle(_In_ ABI::Windows::UI::Text::FontStyle value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontStyle, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_FontWeight(_Out_ ABI::Windows::UI::Text::FontWeight* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontWeight, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_FontWeight(_In_ ABI::Windows::UI::Text::FontWeight value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_FontWeight, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_Foreground(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::IBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_Foreground(_In_opt_ ABI::Microsoft::UI::Xaml::Media::IBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_Foreground, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_HorizontalTextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_HorizontalTextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_HorizontalTextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_HorizontalTextAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_Inlines(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Documents::Inline*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_Inlines, ppValue));
}
_Check_return_ HRESULT DirectUI::TextBlockGenerated::put_Inlines(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Documents::Inline*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_Inlines, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_IsColorFontEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsColorFontEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_IsColorFontEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsColorFontEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_IsTextScaleFactorEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsTextScaleFactorEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_IsTextScaleFactorEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsTextScaleFactorEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_IsTextSelectionEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsTextSelectionEnabled, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_IsTextSelectionEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsTextSelectionEnabled, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_IsTextTrimmed(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_IsTextTrimmed, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_LineHeight(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_LineHeight, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_LineHeight(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_LineHeight, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_LineStackingStrategy(_Out_ ABI::Microsoft::UI::Xaml::LineStackingStrategy* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_LineStackingStrategy, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_LineStackingStrategy(_In_ ABI::Microsoft::UI::Xaml::LineStackingStrategy value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_LineStackingStrategy, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_MaxLines(_Out_ INT* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_MaxLines, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_MaxLines(_In_ INT value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_MaxLines, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_OpticalMarginAlignment(_Out_ ABI::Microsoft::UI::Xaml::OpticalMarginAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_OpticalMarginAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_OpticalMarginAlignment(_In_ ABI::Microsoft::UI::Xaml::OpticalMarginAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_OpticalMarginAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_Padding(_Out_ ABI::Microsoft::UI::Xaml::Thickness* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_Padding, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_Padding(_In_ ABI::Microsoft::UI::Xaml::Thickness value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_Padding, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_SelectedText(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_SelectedText, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_SelectionEnd(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextBlock*>(this)->get_SelectionEndImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_SelectionFlyout(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_SelectionFlyout, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_SelectionFlyout(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_SelectionFlyout, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_SelectionHighlightColor(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_SelectionHighlightColor(_In_opt_ ABI::Microsoft::UI::Xaml::Media::ISolidColorBrush* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_SelectionHighlightColor, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_SelectionStart(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<TextBlock*>(this)->get_SelectionStartImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_Text(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_Text, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_Text(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_Text, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextAlignment(_Out_ ABI::Microsoft::UI::Xaml::TextAlignment* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextAlignment, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextAlignment(_In_ ABI::Microsoft::UI::Xaml::TextAlignment value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextAlignment, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextDecorations(_Out_ ABI::Windows::UI::Text::TextDecorations* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextDecorations, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextDecorations(_In_ ABI::Windows::UI::Text::TextDecorations value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextDecorations, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextHighlighters(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Documents::TextHighlighter*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextHighlighters, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextLineBounds(_Out_ ABI::Microsoft::UI::Xaml::TextLineBounds* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextLineBounds, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextLineBounds(_In_ ABI::Microsoft::UI::Xaml::TextLineBounds value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextLineBounds, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextReadingOrder(_Out_ ABI::Microsoft::UI::Xaml::TextReadingOrder* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextReadingOrder, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextReadingOrder(_In_ ABI::Microsoft::UI::Xaml::TextReadingOrder value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextReadingOrder, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextTrimming(_Out_ ABI::Microsoft::UI::Xaml::TextTrimming* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextTrimming, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextTrimming(_In_ ABI::Microsoft::UI::Xaml::TextTrimming value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextTrimming, value));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::get_TextWrapping(_Out_ ABI::Microsoft::UI::Xaml::TextWrapping* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextWrapping, pValue));
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::put_TextWrapping(_In_ ABI::Microsoft::UI::Xaml::TextWrapping value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::TextBlock_TextWrapping, value));
}

// Events.
_Check_return_ HRESULT DirectUI::TextBlockGenerated::GetContextMenuOpeningEventSourceNoRef(_Outptr_ ContextMenuOpeningEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBlock_ContextMenuOpening, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContextMenuOpeningEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBlock_ContextMenuOpening, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBlock_ContextMenuOpening, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::add_ContextMenuOpening(_In_ ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::remove_ContextMenuOpening(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContextMenuOpeningEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IContextMenuOpeningEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContextMenuOpeningEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBlock_ContextMenuOpening));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBlockGenerated::GetIsTextTrimmedChangedEventSourceNoRef(_Outptr_ IsTextTrimmedChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBlock_IsTextTrimmedChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<IsTextTrimmedChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBlock_IsTextTrimmedChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBlock_IsTextTrimmedChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::add_IsTextTrimmedChanged(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBlock*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    IsTextTrimmedChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetIsTextTrimmedChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::remove_IsTextTrimmedChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    IsTextTrimmedChangedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBlock*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::TextBlock*, ABI::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetIsTextTrimmedChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBlock_IsTextTrimmedChanged));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBlockGenerated::GetSelectionChangedEventSourceNoRef(_Outptr_ SelectionChangedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::TextBlock_SelectionChanged, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<SelectionChangedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::TextBlock_SelectionChanged, this, /* bUseEventManager */ true);
        IFC(StoreEventSource(KnownEventIndex::TextBlock_SelectionChanged, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::add_SelectionChanged(_In_ ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::TextBlockGenerated::remove_SelectionChanged(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    SelectionChangedEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::IRoutedEventHandler* pValue = (ABI::Microsoft::UI::Xaml::IRoutedEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetSelectionChangedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::TextBlock_SelectionChanged));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::TextBlockGenerated::CopySelectionToClipboard()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBlock_CopySelectionToClipboard", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBlock*>(this)->CopySelectionToClipboardImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBlock_CopySelectionToClipboard", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::GetAlphaMask(_Outptr_ ABI::Microsoft::UI::Composition::ICompositionBrush** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBlock_GetAlphaMask", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBlock*>(this)->GetAlphaMaskImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBlock_GetAlphaMask", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::Select(_In_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer* pStart, _In_ ABI::Microsoft::UI::Xaml::Documents::ITextPointer* pEnd)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBlock_Select", 0);
    }
    ARG_NOTNULL(pStart, "start");
    ARG_NOTNULL(pEnd, "end");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<TextBlock*>(this)->SelectImpl(pStart, pEnd));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBlock_Select", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBlockGenerated::SelectAll()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "TextBlock_SelectAll", 0);
    }


    

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));

    IFC(static_cast<CTextBlock*>(GetHandle())->SelectAll());


Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "TextBlock_SelectAll", hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::TextBlockFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBlockStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBlockStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.
IFACEMETHODIMP DirectUI::TextBlockFactory::get_FontSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_FontSize, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_FontFamilyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_FontFamily, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_FontWeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_FontWeight, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_FontStyleProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_FontStyle, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_FontStretchProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_FontStretch, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_CharacterSpacingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_CharacterSpacing, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_ForegroundProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_Foreground, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextWrappingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextWrapping, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextTrimmingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextTrimming, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_Text, ppValue));
}

IFACEMETHODIMP DirectUI::TextBlockFactory::get_PaddingProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_Padding, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_LineHeightProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_LineHeight, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_LineStackingStrategyProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_LineStackingStrategy, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_IsTextSelectionEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_IsTextSelectionEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_SelectedTextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_SelectedText, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_SelectionHighlightColorProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_SelectionHighlightColor, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_MaxLinesProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_MaxLines, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextLineBoundsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextLineBounds, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_OpticalMarginAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_OpticalMarginAlignment, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_IsColorFontEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_IsColorFontEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextReadingOrderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextReadingOrder, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_IsTextScaleFactorEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_IsTextScaleFactorEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_TextDecorationsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_TextDecorations, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_IsTextTrimmedProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_IsTextTrimmed, ppValue));
}
IFACEMETHODIMP DirectUI::TextBlockFactory::get_HorizontalTextAlignmentProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_HorizontalTextAlignment, ppValue));
}

IFACEMETHODIMP DirectUI::TextBlockFactory::get_SelectionFlyoutProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::TextBlock_SelectionFlyout, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_TextBlock()
    {
        RRETURN(ctl::ActivationFactoryCreator<TextBlockFactory>::CreateActivationFactory());
    }
}
