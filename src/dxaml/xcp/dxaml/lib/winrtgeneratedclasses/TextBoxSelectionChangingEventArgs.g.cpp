// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "TextBoxSelectionChangingEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::TextBoxSelectionChangingEventArgs::TextBoxSelectionChangingEventArgs(): m_selectionStart(), m_selectionLength(), m_cancel()
{
}

DirectUI::TextBoxSelectionChangingEventArgs::~TextBoxSelectionChangingEventArgs()
{
}

HRESULT DirectUI::TextBoxSelectionChangingEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::TextBoxSelectionChangingEventArgs)))
    {
        *ppObject = static_cast<DirectUI::TextBoxSelectionChangingEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::TextBoxSelectionChangingEventArgs::get_SelectionStart(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_selectionStart, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxSelectionChangingEventArgs::put_SelectionStart(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_selectionStart));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxSelectionChangingEventArgs::get_SelectionLength(_Out_ INT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_selectionLength, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::TextBoxSelectionChangingEventArgs::put_SelectionLength(_In_ INT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_selectionLength));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxSelectionChangingEventArgs::get_Cancel(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_cancel, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::TextBoxSelectionChangingEventArgs::put_Cancel(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_cancel));
Cleanup:
    RRETURN(hr);
}

// Methods.


namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateTextBoxSelectionChangingEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::TextBoxSelectionChangingEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_TextBoxSelectionChangingEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
