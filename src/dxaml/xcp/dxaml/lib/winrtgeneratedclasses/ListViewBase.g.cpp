// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "ListViewBase.g.h"
#include "ConnectedAnimation.g.h"
#include "DataTemplate.g.h"
#include "ItemIndexRange.g.h"
#include "SemanticZoom.g.h"
#include "SemanticZoomLocation.g.h"
#include "TransitionCollection.g.h"
#include "XamlTelemetry.h"

// Constructors/destructors.
DirectUI::ListViewBaseGenerated::ListViewBaseGenerated(): m_isRegisteredForCallbacks()
{
}

DirectUI::ListViewBaseGenerated::~ListViewBaseGenerated()
{
}

HRESULT DirectUI::ListViewBaseGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ListViewBase)))
    {
        *ppObject = static_cast<DirectUI::ListViewBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListViewBase)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IListViewBase*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener)))
    {
        *ppObject = static_cast<ABI::Microsoft::Internal::FrameworkUdk::IBackButtonPressedListener*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListViewBasePrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IListViewBasePrivate*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(DirectUI::ITreeBuilder)))
    {
        *ppObject = static_cast<DirectUI::ITreeBuilder*>(this);
    }
    else
    {
        RRETURN(DirectUI::Selector::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_CanDragItems(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_CanDragItems, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_CanDragItems(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_CanDragItems, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_CanReorderItems(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_CanReorderItems, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_CanReorderItems(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_CanReorderItems, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_DataFetchSize(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_DataFetchSize, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_DataFetchSize(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_DataFetchSize, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_Footer(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_Footer, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_Footer(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_Footer, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_FooterTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_FooterTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_FooterTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_FooterTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_FooterTransitions(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_FooterTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_FooterTransitions(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_FooterTransitions, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_Header(_Outptr_result_maybenull_ IInspectable** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_Header(_In_opt_ IInspectable* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_Header, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_HeaderTemplate(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IDataTemplate** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_HeaderTemplate(_In_opt_ ABI::Microsoft::UI::Xaml::IDataTemplate* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_HeaderTemplate, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_HeaderTransitions(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_HeaderTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_HeaderTransitions(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Media::Animation::Transition*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_HeaderTransitions, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IncrementalLoadingThreshold(_Out_ DOUBLE* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IncrementalLoadingThreshold, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IncrementalLoadingThreshold(_In_ DOUBLE value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IncrementalLoadingThreshold, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IncrementalLoadingTrigger(_Out_ ABI::Microsoft::UI::Xaml::Controls::IncrementalLoadingTrigger* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IncrementalLoadingTrigger, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IncrementalLoadingTrigger(_In_ ABI::Microsoft::UI::Xaml::Controls::IncrementalLoadingTrigger value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IncrementalLoadingTrigger, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsActiveView(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsActiveView, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsActiveView(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsActiveView, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsItemClickEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsItemClickEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsItemClickEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsItemClickEnabled, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsMultiSelectCheckBoxEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsMultiSelectCheckBoxEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsMultiSelectCheckBoxEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsMultiSelectCheckBoxEnabled, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsRegisteredForCallbacks(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(m_isRegisteredForCallbacks, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsRegisteredForCallbacks(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(CValueBoxer::CopyValue(value, &m_isRegisteredForCallbacks));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsSwipeEnabled(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsSwipeEnabled, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsSwipeEnabled(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsSwipeEnabled, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_IsZoomedInView(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsZoomedInView, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_IsZoomedInView(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_IsZoomedInView, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_ReorderMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ListViewReorderMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_ReorderMode, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_ReorderMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ListViewReorderMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_ReorderMode, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_SelectedItems(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<IInspectable*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ListViewBase*>(this)->get_SelectedItemsImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_SelectedRanges(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::UI::Xaml::Data::ItemIndexRange*>** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<ListViewBase*>(this)->get_SelectedRangesImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_SelectionMode(_Out_ ABI::Microsoft::UI::Xaml::Controls::ListViewSelectionMode* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SelectionMode, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_SelectionMode(_In_ ABI::Microsoft::UI::Xaml::Controls::ListViewSelectionMode value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SelectionMode, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_SemanticZoomOwner(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoom** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SemanticZoomOwner, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_SemanticZoomOwner(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoom* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SemanticZoomOwner, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_ShowsScrollingPlaceholders(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_ShowsScrollingPlaceholders, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_ShowsScrollingPlaceholders(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_ShowsScrollingPlaceholders, value));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::get_SingleSelectionFollowsFocus(_Out_ BOOLEAN* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SingleSelectionFollowsFocus, pValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::put_SingleSelectionFollowsFocus(_In_ BOOLEAN value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::ListViewBase_SingleSelectionFollowsFocus, value));
}

// Events.
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetChoosingGroupHeaderContainerEventSourceNoRef(_Outptr_ ChoosingGroupHeaderContainerEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ChoosingGroupHeaderContainerEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_ChoosingGroupHeaderContainer(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ChoosingGroupHeaderContainerEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetChoosingGroupHeaderContainerEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_ChoosingGroupHeaderContainer(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ChoosingGroupHeaderContainerEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetChoosingGroupHeaderContainerEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetChoosingItemContainerEventSourceNoRef(_Outptr_ ChoosingItemContainerEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_ChoosingItemContainer, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ChoosingItemContainerEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_ChoosingItemContainer, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_ChoosingItemContainer, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_ChoosingItemContainer(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ChoosingItemContainerEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetChoosingItemContainerEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_ChoosingItemContainer(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ChoosingItemContainerEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetChoosingItemContainerEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_ChoosingItemContainer));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetContainerContentChangingEventSourceNoRef(_Outptr_ ContainerContentChangingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_ContainerContentChanging, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ContainerContentChangingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_ContainerContentChanging, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_ContainerContentChanging, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_ContainerContentChanging(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ContainerContentChangingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContainerContentChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_ContainerContentChanging(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ContainerContentChangingEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetContainerContentChangingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_ContainerContentChanging));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetDragItemsCompletedEventSourceNoRef(_Outptr_ DragItemsCompletedEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_DragItemsCompleted, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DragItemsCompletedEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_DragItemsCompleted, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_DragItemsCompleted, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_DragItemsCompleted(_In_ ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs*>* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DragItemsCompletedEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragItemsCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_DragItemsCompleted(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DragItemsCompletedEventSourceType* pEventSource = nullptr;
    ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs*>* pValue = (ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs*>*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragItemsCompletedEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_DragItemsCompleted));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetDragItemsStartingEventSourceNoRef(_Outptr_ DragItemsStartingEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_DragItemsStarting, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<DragItemsStartingEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_DragItemsStarting, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_DragItemsStarting, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_DragItemsStarting(_In_ ABI::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    DragItemsStartingEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragItemsStartingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_DragItemsStarting(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    DragItemsStartingEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetDragItemsStartingEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_DragItemsStarting));
    }

Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetItemClickEventSourceNoRef(_Outptr_ ItemClickEventSourceType** ppEventSource)
{
    HRESULT hr = S_OK;

    IFC(GetEventSourceNoRefWithArgumentValidation(KnownEventIndex::ListViewBase_ItemClick, reinterpret_cast<IUntypedEventSource**>(ppEventSource)));

    if (*ppEventSource == nullptr)
    {
        IFC(ctl::ComObject<ItemClickEventSourceType>::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));
        (*ppEventSource)->Initialize(KnownEventIndex::ListViewBase_ItemClick, this, /* bUseEventManager */ false);
        IFC(StoreEventSource(KnownEventIndex::ListViewBase_ItemClick, *ppEventSource));

        // The caller doesn't expect a ref, this function ends in "NoRef".  The ref is now owned by the map (inside StoreEventSource)
        ReleaseInterfaceNoNULL(ctl::iunknown_cast(*ppEventSource));
    }

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::add_ItemClick(_In_ ABI::Microsoft::UI::Xaml::Controls::IItemClickEventHandler* pValue, _Out_ EventRegistrationToken* ptToken)
{
    HRESULT hr = S_OK;
    ItemClickEventSourceType* pEventSource = nullptr;

    IFC(EventAddPreValidation(pValue, ptToken));
    IFC(DefaultStrictApiCheck(this));
    IFC(GetItemClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->AddHandler(pValue));

    ptToken->value = (INT64)pValue;

Cleanup:
    return hr;
}

IFACEMETHODIMP DirectUI::ListViewBaseGenerated::remove_ItemClick(_In_ EventRegistrationToken tToken)
{
    HRESULT hr = S_OK;
    ItemClickEventSourceType* pEventSource = nullptr;
    ABI::Microsoft::UI::Xaml::Controls::IItemClickEventHandler* pValue = (ABI::Microsoft::UI::Xaml::Controls::IItemClickEventHandler*)tToken.value;

    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(GetItemClickEventSourceNoRef(&pEventSource));
    IFC(pEventSource->RemoveHandler(pValue));

    if (!pEventSource->HasHandlers())
    {
        IFC(RemoveEventSource(KnownEventIndex::ListViewBase_ItemClick));
    }

Cleanup:
    RRETURN(hr);
}

// Methods.
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::BuildTree(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_BuildTree", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->BuildTreeImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_BuildTree", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::CompleteViewChange()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChange", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->CompleteViewChangeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChange", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::CompleteViewChangeFrom(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChangeFrom", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->CompleteViewChangeFromImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChangeFrom", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::CompleteViewChangeTo(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChangeTo", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->CompleteViewChangeToImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_CompleteViewChangeTo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::DeselectRange(_In_ ABI::Microsoft::UI::Xaml::Data::IItemIndexRange* pItemIndexRange)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_DeselectRange", 0);
    }
    ARG_NOTNULL(pItemIndexRange, "itemIndexRange");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->DeselectRangeImpl(pItemIndexRange));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_DeselectRange", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::GetRelativeScrollPosition(_In_ ABI::Microsoft::UI::Xaml::Controls::IListViewItemToKeyHandler* pItemToKeyProvider, _Out_ HSTRING* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_GetRelativeScrollPosition", 0);
    }
    ARG_NOTNULL(pItemToKeyProvider, "itemToKeyProvider");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ListViewBase*>(this)->GetRelativeScrollPositionImpl(pItemToKeyProvider, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_GetRelativeScrollPosition", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::InitializeViewChange()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_InitializeViewChange", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->InitializeViewChangeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_InitializeViewChange", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::IsBuildTreeSuspended(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_IsBuildTreeSuspended", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->IsBuildTreeSuspendedImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_IsBuildTreeSuspended", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::IsDragSource(_Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_IsDragSource", 0);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->IsDragSourceImpl(pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_IsDragSource", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::LoadMoreItemsAsync(_Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Data::LoadMoreItemsResult>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_LoadMoreItemsAsync", 0);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->LoadMoreItemsAsyncImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_LoadMoreItemsAsync", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::MakeVisible(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_MakeVisible", 0);
    }
    ARG_NOTNULL(pItem, "item");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->MakeVisibleImpl(pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_MakeVisible", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::OnBackButtonPressed(_Out_ BOOLEAN* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_OnBackButtonPressed", 0);
    }
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->OnBackButtonPressedImpl(pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_OnBackButtonPressed", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::PrepareConnectedAnimation(_In_ HSTRING key, _In_ IInspectable* pItem, _In_ HSTRING elementName, _Outptr_ ABI::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_PrepareConnectedAnimation", 0);
    }
    ARG_NOTNULL(key, "key");
    ARG_NOTNULL(pItem, "item");
    ARG_NOTNULL(elementName, "elementName");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->PrepareConnectedAnimationImpl(key, pItem, elementName, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_PrepareConnectedAnimation", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::ScrollIntoView(_In_opt_ IInspectable* pItem)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoView", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->ScrollIntoViewImpl(pItem));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoView", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::ScrollIntoViewWithAlignment(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollIntoViewAlignment alignment)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoViewWithAlignment", 0);
    }
    ARG_NOTNULL(pItem, "item");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->ScrollIntoViewWithAlignmentImpl(pItem, alignment));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoViewWithAlignment", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::ScrollIntoViewWithOptionalAnimation(_In_ IInspectable* pItem, _In_ ABI::Microsoft::UI::Xaml::Controls::ScrollIntoViewAlignment alignment, _In_ BOOLEAN disableAnimation)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoViewWithOptionalAnimation", 0);
    }
    ARG_NOTNULL(pItem, "item");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->ScrollIntoViewWithOptionalAnimationImpl(pItem, alignment, disableAnimation));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_ScrollIntoViewWithOptionalAnimation", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::SelectAll()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_SelectAll", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->SelectAllImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_SelectAll", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::SelectRange(_In_ ABI::Microsoft::UI::Xaml::Data::IItemIndexRange* pItemIndexRange)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_SelectRange", 0);
    }
    ARG_NOTNULL(pItemIndexRange, "itemIndexRange");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->SelectRangeImpl(pItemIndexRange));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_SelectRange", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::SetDesiredContainerUpdateDuration(_In_ ABI::Windows::Foundation::TimeSpan duration)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_SetDesiredContainerUpdateDuration", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->SetDesiredContainerUpdateDurationImpl(duration));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_SetDesiredContainerUpdateDuration", hr);
    }
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::SetRelativeScrollPositionAsync(_In_ HSTRING relativeScrollPosition, _In_ ABI::Microsoft::UI::Xaml::Controls::IListViewKeyToItemHandler* pKeyToItemProvider, _Outptr_ ABI::Windows::Foundation::IAsyncAction** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_SetRelativeScrollPositionAsync", 0);
    }
    ARG_NOTNULL(relativeScrollPosition, "relativeScrollPosition");
    ARG_NOTNULL(pKeyToItemProvider, "keyToItemProvider");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(static_cast<ListViewBase*>(this)->SetRelativeScrollPositionAsyncImpl(relativeScrollPosition, pKeyToItemProvider, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_SetRelativeScrollPositionAsync", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::ShutDownDeferredWork()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_ShutDownDeferredWork", 0);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->ShutDownDeferredWorkImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_ShutDownDeferredWork", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::StartViewChangeFrom(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_StartViewChangeFrom", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->StartViewChangeFromImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_StartViewChangeFrom", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::StartViewChangeTo(_In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pSource, _In_ ABI::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation* pDestination)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_StartViewChangeTo", 0);
    }
    ARG_NOTNULL(pSource, "source");
    ARG_NOTNULL(pDestination, "destination");
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->StartViewChangeToImpl(pSource, pDestination));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_StartViewChangeTo", hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::ListViewBaseGenerated::TryStartConnectedAnimationAsync(_In_ ABI::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation* pAnimation, _In_ IInspectable* pItem, _In_ HSTRING elementName, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<bool>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        XamlTelemetry::PublicApiCall(true, reinterpret_cast<uint64_t>(this), "ListViewBase_TryStartConnectedAnimationAsync", 0);
    }
    ARG_NOTNULL(pAnimation, "animation");
    ARG_NOTNULL(pItem, "item");
    ARG_NOTNULL(elementName, "elementName");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<ListViewBase*>(this)->TryStartConnectedAnimationAsyncImpl(pAnimation, pItem, elementName, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        XamlTelemetry::PublicApiCall(false, reinterpret_cast<uint64_t>(this), "ListViewBase_TryStartConnectedAnimationAsync", hr);
    }
    RRETURN(hr);
}

_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ChoosingGroupHeaderContainerEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetChoosingGroupHeaderContainerEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ChoosingItemContainer:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ChoosingItemContainerEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetChoosingItemContainerEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ContainerContentChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ContainerContentChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetContainerContentChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_DragItemsCompleted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragItemsCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragItemsCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_DragItemsStarting:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragItemsStartingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragItemsStartingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ItemClick:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemClickEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ItemClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetItemClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->AddHandler(spEventHandler.Get(), handledEventsToo));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::SelectorGenerated::EventAddHandlerByIndex(nEventIndex, pHandler, handledEventsToo));
        break;
    }

    return S_OK;
}

_Check_return_ HRESULT DirectUI::ListViewBaseGenerated::EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex, _In_ IInspectable* pHandler)
{
    switch (nEventIndex)
    {
    case KnownEventIndex::ListViewBase_ChoosingGroupHeaderContainer:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ChoosingGroupHeaderContainerEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetChoosingGroupHeaderContainerEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ChoosingItemContainer:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ChoosingItemContainerEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetChoosingItemContainerEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ContainerContentChanging:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ContainerContentChangingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetContainerContentChangingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_DragItemsCompleted:
        {
            ctl::ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::UI::Xaml::Controls::ListViewBase*, ABI::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs*>> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragItemsCompletedEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragItemsCompletedEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_DragItemsStarting:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                DragItemsStartingEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetDragItemsStartingEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    case KnownEventIndex::ListViewBase_ItemClick:
        {
            ctl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IItemClickEventHandler> spEventHandler;
            IValueBoxer::UnboxValue(pHandler, spEventHandler.ReleaseAndGetAddressOf());

            if (nullptr != spEventHandler)
            {
                ItemClickEventSourceType* pEventSource = nullptr;
                IFC_RETURN(GetItemClickEventSourceNoRef(&pEventSource));
                IFC_RETURN(pEventSource->RemoveHandler(spEventHandler.Get()));
            }
            else
            {
                IFC_RETURN(E_INVALIDARG);
            }
        }
        break;
    default:
        IFC_RETURN(DirectUI::SelectorGenerated::EventRemoveHandlerByIndex(nEventIndex, pHandler));
        break;
    }

    return S_OK;
}

HRESULT DirectUI::ListViewBaseFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListViewBaseFactory)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IListViewBaseFactory*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListViewBaseStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IListViewBaseStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterAggregableAbstractCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.
IFACEMETHODIMP DirectUI::ListViewBaseFactory::CreateInstance(_In_opt_ IInspectable* pOuter, _Outptr_ IInspectable** ppInner, _Outptr_ ABI::Microsoft::UI::Xaml::Controls::IListViewBase** ppInstance)
{

#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListViewBase);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWithBetterAggregableAbstractCoreObjectActivationFactory(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), false /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

// Dependency properties.

IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_SelectionModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_SelectionMode, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IsSwipeEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IsSwipeEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_CanDragItemsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_CanDragItems, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_CanReorderItemsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_CanReorderItems, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IsItemClickEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IsItemClickEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_DataFetchSizeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_DataFetchSize, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IncrementalLoadingThresholdProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IncrementalLoadingThreshold, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IncrementalLoadingTriggerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IncrementalLoadingTrigger, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_HeaderProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_Header, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_HeaderTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_HeaderTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_HeaderTransitionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_HeaderTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_FooterProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_Footer, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_FooterTemplateProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_FooterTemplate, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_FooterTransitionsProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_FooterTransitions, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_ShowsScrollingPlaceholdersProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_ShowsScrollingPlaceholders, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_ReorderModeProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_ReorderMode, ppValue));
}

IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IsMultiSelectCheckBoxEnabledProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IsMultiSelectCheckBoxEnabled, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_SingleSelectionFollowsFocusProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_SingleSelectionFollowsFocus, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_SemanticZoomOwnerProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_SemanticZoomOwner, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IsActiveViewProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IsActiveView, ppValue));
}
IFACEMETHODIMP DirectUI::ListViewBaseFactory::get_IsZoomedInViewProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::ListViewBase_IsZoomedInView, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_ListViewBase()
    {
        RRETURN(ctl::ActivationFactoryCreator<ListViewBaseFactory>::CreateActivationFactory());
    }
}
