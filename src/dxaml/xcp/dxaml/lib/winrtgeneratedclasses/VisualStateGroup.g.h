// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#pragma once


#define __VisualStateGroup_GUID "f4fa1e98-85c9-4ecd-a13b-2a7b1e236df5"

namespace DirectUI
{
    class VisualStateGroup;
    class VisualState;

    class __declspec(novtable) VisualStateGroupGenerated:
        public DirectUI::DependencyObject
        , public ABI::Microsoft::UI::Xaml::IVisualStateGroup
    {
        friend class DirectUI::VisualStateGroup;

        INSPECTABLE_CLASS(L"Microsoft.UI.Xaml.VisualStateGroup");

        BEGIN_INTERFACE_MAP(VisualStateGroupGenerated, DirectUI::DependencyObject)
            INTERFACE_ENTRY(VisualStateGroupGenerated, ABI::Microsoft::UI::Xaml::IVisualStateGroup)
        END_INTERFACE_MAP(VisualStateGroupGenerated, DirectUI::DependencyObject)

    public:
        VisualStateGroupGenerated();
        ~VisualStateGroupGenerated() override;

        // Event source typedefs.
        typedef CEventSource<ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IVisualStateChangedEventArgs> CurrentStateChangedEventSourceType;
        typedef CEventSource<ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler, IInspectable, ABI::Microsoft::UI::Xaml::IVisualStateChangedEventArgs> CurrentStateChangingEventSourceType;

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::VisualStateGroup;
        }

        static XCP_FORCEINLINE KnownTypeIndex GetTypeIndexStatic()
        {
            return KnownTypeIndex::VisualStateGroup;
        }

        // Properties.
        IFACEMETHOD(get_CurrentState)(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::IVisualState** ppValue) override;
        IFACEMETHOD(get_Name)(_Out_ HSTRING* pValue) override;
        IFACEMETHOD(get_States)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualState*>** ppValue) override;
        _Check_return_ HRESULT put_States(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualState*>* pValue);
        IFACEMETHOD(get_Transitions)(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::VisualTransition*>** ppValue) override;

        // Events.
        _Check_return_ HRESULT GetCurrentStateChangedEventSourceNoRef(_Outptr_ CurrentStateChangedEventSourceType** ppEventSource);
        IFACEMETHOD(add_CurrentStateChanged)(_In_ ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_CurrentStateChanged)(_In_ EventRegistrationToken token) override;
        _Check_return_ HRESULT GetCurrentStateChangingEventSourceNoRef(_Outptr_ CurrentStateChangingEventSourceType** ppEventSource);
        IFACEMETHOD(add_CurrentStateChanging)(_In_ ABI::Microsoft::UI::Xaml::IVisualStateChangedEventHandler* pValue, _Out_ EventRegistrationToken* pToken) override;
        IFACEMETHOD(remove_CurrentStateChanging)(_In_ EventRegistrationToken token) override;

        // Methods.


    protected:
        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) override;

    private:

        // Fields.
    };
}

#include "VisualStateGroup_Partial.h"

namespace DirectUI
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) VisualStateGroupFactory:
       public ctl::BetterCoreObjectActivationFactory
    {

    public:
        // Factory methods.

        // Static properties.

        // Dependency properties.
        
        

        // Attached properties.

        // Static methods.

        // Static events.

    protected:

        KnownTypeIndex GetTypeIndex() const override
        {
            return KnownTypeIndex::VisualStateGroup;
        }


    private:

        // Customized static properties.

        // Customized static  methods.
    };
}
