// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "NavigationFailedEventArgs.g.h"
#include "CoreEventArgsGroup.h"

using namespace DirectUI;

// Constructors/destructors.
DirectUI::NavigationFailedEventArgs::NavigationFailedEventArgs(): m_exception(), m_handled(), m_sourcePageType()
{
}

DirectUI::NavigationFailedEventArgs::~NavigationFailedEventArgs()
{
}

HRESULT DirectUI::NavigationFailedEventArgs::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::NavigationFailedEventArgs)))
    {
        *ppObject = static_cast<DirectUI::NavigationFailedEventArgs*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Navigation::INavigationFailedEventArgs)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Navigation::INavigationFailedEventArgs*>(this);
    }
    else
    {
        RRETURN(DirectUI::EventArgs::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Properties.
IFACEMETHODIMP DirectUI::NavigationFailedEventArgs::get_Exception(_Out_ HRESULT* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_exception, pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::NavigationFailedEventArgs::put_Exception(_In_ HRESULT value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_exception));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::NavigationFailedEventArgs::get_Handled(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_handled, pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::NavigationFailedEventArgs::put_Handled(_In_ BOOLEAN value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, &m_handled));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::NavigationFailedEventArgs::get_SourcePageType(_Out_ ABI::Windows::UI::Xaml::Interop::TypeName* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(m_sourcePageType.Get(), pValue));
Cleanup:
    RRETURN(hr);
}
_Check_return_ HRESULT DirectUI::NavigationFailedEventArgs::put_SourcePageType(_In_ ABI::Windows::UI::Xaml::Interop::TypeName value)
{
    HRESULT hr = S_OK;
    IFC(CheckThread());
    IFC(CValueBoxer::CopyValue(value, m_sourcePageType.ReleaseAndGetAddressOf()));
Cleanup:
    RRETURN(hr);
}

// Methods.


namespace DirectUI
{
    _Check_return_ HRESULT OnFrameworkCreateNavigationFailedEventArgs(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)
    {
        HRESULT hr = S_OK;
        ctl::ComPtr<DirectUI::NavigationFailedEventArgs> spInstance;
        *ppNewInstance = nullptr;
        IFC(ctl::make(pCoreObject, &spInstance));
        *ppNewInstance = ctl::iinspectable_cast(spInstance.Detach());
    Cleanup:
        RRETURN(hr);
    }
    _Check_return_ IActivationFactory* CreateActivationFactory_NavigationFailedEventArgs()
    {
        RRETURN(ctl::ActivationFactoryCreator<ctl::AbstractActivationFactory>::CreateActivationFactory());
    }
}
