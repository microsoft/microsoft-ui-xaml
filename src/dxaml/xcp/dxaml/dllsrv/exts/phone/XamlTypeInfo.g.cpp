// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include "XamlTypeInfo.h"
#include "XamlTypeInfo.g.h"

#ifndef E_NOT_FOUND
#define E_NOT_FOUND HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
#endif

namespace Private {

//--------------------------------------------------------------------------
//
//  User type activation
//
//--------------------------------------------------------------------------
_Check_return_ HRESULT
XamlRuntimeType::ActivateInstance(
    _In_ UINT16 typeLabel,
    _Outptr_ IInspectable** instance) const
{
    switch(typeLabel)
    {
        case activate_CommonNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfo>(instance);
        case activate_ContinuumNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfo>(instance);
        case activate_DatePickedEventArgs:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgs>(instance);
        case activate_DatePickerFlyout:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyout>(instance);
        case activate_DatePickerFlyoutItem:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItem>(instance);
        case activate_DatePickerFlyoutPresenter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenter>(instance);
        case activate_DrillInNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::DrillInNavigationTransitionInfo>(instance);
        case activate_EntranceNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfo>(instance);
        case activate_ItemsPickedEventArgs:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>(instance);
        case activate_JumpListItemBackgroundConverter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverter>(instance);
        case activate_JumpListItemForegroundConverter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverter>(instance);
        case activate_ListPickerFlyout:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyout>(instance);
        case activate_ListPickerFlyoutPresenter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenter>(instance);
        case activate_LoopingSelector:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>(instance);
        case activate_LoopingSelectorItem:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorItem>(instance);
        case activate_LoopingSelectorPanel:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorPanel>(instance);
        case activate_NavigationThemeTransition:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransition>(instance);
        case activate_PickerConfirmedEventArgs:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>(instance);
        case activate_PickerFlyout:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::PickerFlyout>(instance);
        case activate_PickerFlyoutBase:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase>(instance);
        case activate_PickerFlyoutPresenter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::PickerFlyoutPresenter>(instance);
        case activate_Pivot:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Pivot>(instance);
        case activate_PivotHeaderItem:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem>(instance);
        case activate_PivotHeaderPanel:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderPanel>(instance);
        case activate_PivotItem:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::PivotItem>(instance);
        case activate_PivotItemEventArgs:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::PivotItemEventArgs>(instance);
        case activate_PivotPanel:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotPanel>(instance);
        case activate_SlideNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfo>(instance);
        case activate_SuppressNavigationTransitionInfo:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Media::Animation::SuppressNavigationTransitionInfo>(instance);
        case activate_TimePickedEventArgs:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgs>(instance);
        case activate_TimePickerFlyout:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyout>(instance);
        case activate_TimePickerFlyoutPresenter:
            return wrl::MakeAndInitialize<
                ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenter>(instance);
        default:
            *instance = nullptr;
            return E_NOT_FOUND;
    }
}

//--------------------------------------------------------------------------
//
//  User type member getters and setters
//
//--------------------------------------------------------------------------
_Check_return_ HRESULT
XamlRuntimeType::SetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* instance,
    _In_ IInspectable* value) const
{
    HRESULT hr = S_OK;

    switch(typeLabel)
    {
        case put_CommonNavigationTransitionInfo_IsStaggeringEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_IsStaggeringEnabled(prop));
            break;
        }
        case put_CommonNavigationTransitionInfo_AttachedIsStaggerElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsStaggerElementProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_ContinuumNavigationTransitionInfo_AttachedIsEntranceElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsEntranceElementProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_ContinuumNavigationTransitionInfo_ExitElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElement> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IUIElement),
                    &prop));
            }
            IFC(obj->put_ExitElement(prop.Get()));
            break;
        }
        case put_ContinuumNavigationTransitionInfo_AttachedIsExitElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsExitElementProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_ContinuumNavigationTransitionInfo_AttachedExitElementContainer:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_ExitElementContainerProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_DatePickerFlyout_CalendarIdentifier:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_CalendarIdentifier(prop.Get()));
            break;
        }
        case put_DatePickerFlyout_Date:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetDateTime(&prop));
            IFC(obj->put_Date(prop));
            break;
        }
        case put_DatePickerFlyout_DayVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_DayVisible(prop));
            break;
        }
        case put_DatePickerFlyout_MonthVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_MonthVisible(prop));
            break;
        }
        case put_DatePickerFlyout_YearVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_YearVisible(prop));
            break;
        }
        case put_DatePickerFlyout_MinYear:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetDateTime(&prop));
            IFC(obj->put_MinYear(prop));
            break;
        }
        case put_DatePickerFlyout_MaxYear:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetDateTime(&prop));
            IFC(obj->put_MaxYear(prop));
            break;
        }
        case put_DatePickerFlyout_DayFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_DayFormat(prop.Get()));
            break;
        }
        case put_DatePickerFlyout_MonthFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_MonthFormat(prop.Get()));
            break;
        }
        case put_DatePickerFlyout_YearFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_YearFormat(prop.Get()));
            break;
        }
        case put_DatePickerFlyoutItem_PrimaryText:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_PrimaryText(prop.Get()));
            break;
        }
        case put_DatePickerFlyoutItem_SecondaryText:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_SecondaryText(prop.Get()));
            break;
        }
        case put_DatePickerFlyoutPresenter_IsDefaultShadowEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_IsDefaultShadowEnabled(prop));
            break;
        }
        case put_EntranceNavigationTransitionInfo_AttachedIsTargetElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsTargetElementProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_JumpListItemBackgroundConverter_Enabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush),
                    &prop));
            }
            IFC(obj->put_Enabled(prop.Get()));
            break;
        }
        case put_JumpListItemBackgroundConverter_Disabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush),
                    &prop));
            }
            IFC(obj->put_Disabled(prop.Get()));
            break;
        }
        case put_JumpListItemForegroundConverter_Enabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush),
                    &prop));
            }
            IFC(obj->put_Enabled(prop.Get()));
            break;
        }
        case put_JumpListItemForegroundConverter_Disabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::Media::IBrush),
                    &prop));
            }
            IFC(obj->put_Disabled(prop.Get()));
            break;
        }
        case put_ListPickerFlyout_ItemsSource:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->put_ItemsSource(value));
            break;
        }
        case put_ListPickerFlyout_ItemTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_ItemTemplate(prop.Get()));
            break;
        }
        case put_ListPickerFlyout_DisplayMemberPath:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_DisplayMemberPath(prop.Get()));
            break;
        }
        case put_ListPickerFlyout_SelectionMode:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>> propertyValue;
            ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode selectionMode;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>),
                &propertyValue));
            IFC(propertyValue->get_Value(&selectionMode));
            IFC(obj->put_SelectionMode(selectionMode));
            break;
        }
        case put_ListPickerFlyout_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_SelectedIndex(prop));
            break;
        }
        case put_ListPickerFlyout_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->put_SelectedItem(value));
            break;
        }
        case put_ListPickerFlyout_SelectedValue:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->put_SelectedValue(value));
            break;
        }
        case put_ListPickerFlyout_SelectedValuePath:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_SelectedValuePath(prop.Get()));
            break;
        }
        case put_LoopingSelector_ShouldLoop:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_ShouldLoop(prop));
            break;
        }
        case put_LoopingSelector_Items:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::Collections::IVector<IInspectable*>> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Windows::Foundation::Collections::IObservableVector<IInspectable*>),
                    &prop));
            }
            IFC(obj->put_Items(prop.Get()));
            break;
        }
        case put_LoopingSelector_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_SelectedIndex(prop));
            break;
        }
        case put_LoopingSelector_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->put_SelectedItem(value));
            break;
        }
        case put_LoopingSelector_ItemWidth:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_ItemWidth(prop));
            break;
        }
        case put_LoopingSelector_ItemHeight:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_ItemHeight(prop));
            break;
        }
        case put_LoopingSelector_ItemTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_ItemTemplate(prop.Get()));
            break;
        }
        case put_NavigationThemeTransition_DefaultNavigationTransitionInfo:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo),
                    &prop));
            }
            IFC(obj->put_DefaultNavigationTransitionInfo(prop.Get()));
            break;
        }
        case put_PickerFlyout_Content:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElement> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IUIElement),
                    &prop));
            }
            IFC(obj->put_Content(prop.Get()));
            break;
        }
        case put_PickerFlyout_ConfirmationButtonsVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_ConfirmationButtonsVisible(prop));
            break;
        }
        case put_PickerFlyoutBase_AttachedTitle:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_TitleProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_Pivot_Title:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->put_Title(value));
            break;
        }
        case put_Pivot_TitleTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_TitleTemplate(prop.Get()));
            break;
        }
        case put_Pivot_LeftHeader:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->put_LeftHeader(value));
            break;
        }
        case put_Pivot_LeftHeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_LeftHeaderTemplate(prop.Get()));
            break;
        }
        case put_Pivot_RightHeader:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->put_RightHeader(value));
            break;
        }
        case put_Pivot_RightHeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_RightHeaderTemplate(prop.Get()));
            break;
        }
        case put_Pivot_HeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            if (value)
            {
                IFC(value->QueryInterface(
                    __uuidof(ABI::Microsoft::UI::Xaml::IDataTemplate),
                    &prop));
            }
            IFC(obj->put_HeaderTemplate(prop.Get()));
            break;
        }
        case put_Pivot_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_SelectedIndex(prop));
            break;
        }
        case put_Pivot_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->put_SelectedItem(value));
            break;
        }
        case put_Pivot_IsLocked:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_IsLocked(prop));
            break;
        }
        case put_Pivot_HeaderFocusVisualPlacement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>> propertyValue;
            ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement headerFocusVisualPlacement;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>),
                &propertyValue));
            IFC(propertyValue->get_Value(&headerFocusVisualPlacement));
            IFC(obj->put_HeaderFocusVisualPlacement(headerFocusVisualPlacement));
            break;
        }
        case put_Pivot_AttachedSlideInAnimationGroup:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivotStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                Microsoft::WRL::Wrappers::HStringReference(L"Microsoft.UI.Xaml.Controls.Pivot").Get(),
                statics.GetAddressOf()));
            IFC(statics->get_SlideInAnimationGroupProperty(
                &dependencyProp));
            IFC(dependencyObj->SetValue(
                dependencyProp.Get(),
                value));
            break;
          }
        case put_Pivot_IsHeaderItemsCarouselEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_IsHeaderItemsCarouselEnabled(prop));
            break;
        }
        case put_PivotItem_Header:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivotItem> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivotItem),
                &obj));
            IFC(obj->put_Header(value));
            break;
        }
        case put_SlideNavigationTransitionInfo_Effect:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect>> propertyValue;
            ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect effect;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IReference<ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect>),
                &propertyValue));
            IFC(propertyValue->get_Value(&effect));
            IFC(obj->put_Effect(effect));
            break;
        }
        case put_TimePickerFlyout_ClockIdentifier:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(Private::ValueBoxer::UnboxString(value, prop.GetAddressOf()));
            IFC(obj->put_ClockIdentifier(prop.Get()));
            break;
        }
        case put_TimePickerFlyout_Time:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::TimeSpan prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetTimeSpan(&prop));
            IFC(obj->put_Time(prop));
            break;
        }
        case put_TimePickerFlyout_MinuteIncrement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetInt32(&prop));
            IFC(obj->put_MinuteIncrement(prop));
            break;
        }
        case put_TimePickerFlyoutPresenter_IsDefaultShadowEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter),
                &obj));
            IFC(value->QueryInterface(
                __uuidof(ABI::Windows::Foundation::IPropertyValue),
                &propertyValue));
            IFC(propertyValue->GetBoolean(&prop));
            IFC(obj->put_IsDefaultShadowEnabled(prop));
            break;
        }
        default:
            IFC(E_NOT_FOUND);
    }
Cleanup:
    return hr;
}

_Check_return_ HRESULT
XamlRuntimeType::GetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* instance,
    _Outptr_result_maybenull_ IInspectable** value) const
{
    HRESULT hr = S_OK;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyObject> dependencyObj;
    wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDependencyProperty> dependencyProp;
    switch(typeLabel)
    {

        case get_CommonNavigationTransitionInfo_IsStaggeringEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo),
                &obj));
            IFC(obj->get_IsStaggeringEnabled(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_CommonNavigationTransitionInfo_AttachedIsStaggerElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsStaggerElementProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_ContinuumNavigationTransitionInfo_AttachedIsEntranceElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsEntranceElementProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_ContinuumNavigationTransitionInfo_ExitElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElement> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo),
                &obj));
            *value = nullptr;
            IFC(obj->get_ExitElement(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_ContinuumNavigationTransitionInfo_AttachedIsExitElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsExitElementProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_ContinuumNavigationTransitionInfo_AttachedExitElementContainer:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_ExitElementContainerProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_DatePickerFlyout_CalendarIdentifier:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_CalendarIdentifier(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_Date:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_Date(&prop));
            IFC(Private::ValueBoxer::CreateDateTime(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_DayVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_DayVisible(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_MonthVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_MonthVisible(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_YearVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_YearVisible(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_MinYear:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_MinYear(&prop));
            IFC(Private::ValueBoxer::CreateDateTime(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_MaxYear:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::DateTime prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_MaxYear(&prop));
            IFC(Private::ValueBoxer::CreateDateTime(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_DayFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_DayFormat(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_MonthFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_MonthFormat(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyout_YearFormat:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyout),
                &obj));
            IFC(obj->get_YearFormat(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyoutItem_PrimaryText:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem),
                &obj));
            IFC(obj->get_PrimaryText(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyoutItem_SecondaryText:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem),
                &obj));
            IFC(obj->get_SecondaryText(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_DatePickerFlyoutPresenter_IsDefaultShadowEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter),
                &obj));
            IFC(obj->get_IsDefaultShadowEnabled(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_EntranceNavigationTransitionInfo_AttachedIsTargetElement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_IsTargetElementProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_JumpListItemBackgroundConverter_Enabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter),
                &obj));
            *value = nullptr;
            IFC(obj->get_Enabled(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_JumpListItemBackgroundConverter_Disabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter),
                &obj));
            *value = nullptr;
            IFC(obj->get_Disabled(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_JumpListItemForegroundConverter_Enabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter),
                &obj));
            *value = nullptr;
            IFC(obj->get_Enabled(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_JumpListItemForegroundConverter_Disabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::IBrush> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter),
                &obj));
            *value = nullptr;
            IFC(obj->get_Disabled(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_ListPickerFlyout_ItemsSource:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_ItemsSource(value));
            break;
        }
        case get_ListPickerFlyout_ItemTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            *value = nullptr;
            IFC(obj->get_ItemTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_ListPickerFlyout_DisplayMemberPath:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_DisplayMemberPath(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_ListPickerFlyout_SelectionMode:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_SelectionMode(&prop));
            IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_ListPickerFlyout_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_SelectedIndex(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_ListPickerFlyout_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_SelectedItem(value));
            break;
        }
        case get_ListPickerFlyout_SelectedValue:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_SelectedValue(value));
            break;
        }
        case get_ListPickerFlyout_SelectedValuePath:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IListPickerFlyout),
                &obj));
            IFC(obj->get_SelectedValuePath(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_LoopingSelector_ShouldLoop:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->get_ShouldLoop(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_LoopingSelector_Items:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::Collections::IVector<IInspectable*>> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            *value = nullptr;
            IFC(obj->get_Items(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_LoopingSelector_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->get_SelectedIndex(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_LoopingSelector_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->get_SelectedItem(value));
            break;
        }
        case get_LoopingSelector_ItemWidth:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->get_ItemWidth(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_LoopingSelector_ItemHeight:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            IFC(obj->get_ItemHeight(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_LoopingSelector_ItemTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector),
                &obj));
            *value = nullptr;
            IFC(obj->get_ItemTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_NavigationThemeTransition_DefaultNavigationTransitionInfo:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition),
                &obj));
            *value = nullptr;
            IFC(obj->get_DefaultNavigationTransitionInfo(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_PickerFlyout_Content:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IUIElement> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout),
                &obj));
            *value = nullptr;
            IFC(obj->get_Content(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_PickerFlyout_ConfirmationButtonsVisible:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPickerFlyout),
                &obj));
            IFC(obj->get_ConfirmationButtonsVisible(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_PickerFlyoutBase_AttachedTitle:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_TitleProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_Pivot_Title:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_Title(value));
            break;
        }
        case get_Pivot_TitleTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            *value = nullptr;
            IFC(obj->get_TitleTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_Pivot_LeftHeader:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_LeftHeader(value));
            break;
        }
        case get_Pivot_LeftHeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            *value = nullptr;
            IFC(obj->get_LeftHeaderTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_Pivot_RightHeader:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_RightHeader(value));
            break;
        }
        case get_Pivot_RightHeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            *value = nullptr;
            IFC(obj->get_RightHeaderTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_Pivot_HeaderTemplate:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::IDataTemplate> prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            *value = nullptr;
            IFC(obj->get_HeaderTemplate(&prop));
            if (prop)
            {
                IFC(prop.CopyTo(value));
            }
            break;
        }
        case get_Pivot_SelectedIndex:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_SelectedIndex(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_Pivot_SelectedItem:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_SelectedItem(value));
            break;
        }
        case get_Pivot_IsLocked:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_IsLocked(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_Pivot_HeaderFocusVisualPlacement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_HeaderFocusVisualPlacement(&prop));
            IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_Pivot_AttachedSlideInAnimationGroup:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivotStatics> statics;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::IDependencyObject),
                &dependencyObj));
            static Microsoft::WRL::Wrappers::HStringReference typeName(L"Microsoft.UI.Xaml.Controls.Pivot");
            IFC(ABI::Windows::Foundation::GetActivationFactory(
                typeName.Get(),
                statics.GetAddressOf()));
            IFC(statics->get_SlideInAnimationGroupProperty(
                &dependencyProp));
            IFC(dependencyObj->GetValue(
                dependencyProp.Get(),
                value));
            break;
        }
        case get_Pivot_IsHeaderItemsCarouselEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivot> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivot),
                &obj));
            IFC(obj->get_IsHeaderItemsCarouselEnabled(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_PivotItem_Header:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::IPivotItem> obj;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::IPivotItem),
                &obj));
            IFC(obj->get_Header(value));
            break;
        }
        case get_SlideNavigationTransitionInfo_Effect:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo),
                &obj));
            IFC(obj->get_Effect(&prop));
            IFC(Private::ValueBoxer::CreateReference<ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect>(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_TimePickerFlyout_ClockIdentifier:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            Microsoft::WRL::Wrappers::HString prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(obj->get_ClockIdentifier(prop.GetAddressOf()));
                IFC(Private::ValueBoxer::CreateString(prop.Get(), &propertyValue));
                IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_TimePickerFlyout_Time:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            ABI::Windows::Foundation::TimeSpan prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(obj->get_Time(&prop));
            IFC(Private::ValueBoxer::CreateTimeSpan(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_TimePickerFlyout_MinuteIncrement:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            INT prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyout),
                &obj));
            IFC(obj->get_MinuteIncrement(&prop));
            IFC(Private::ValueBoxer::CreateInt32(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        case get_TimePickerFlyoutPresenter_IsDefaultShadowEnabled:
        {
            wrl::ComPtr<ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter> obj;
            wrl::ComPtr<ABI::Windows::Foundation::IPropertyValue> propertyValue;
            BOOLEAN prop;
            IFC(instance->QueryInterface(
                __uuidof(ABI::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter),
                &obj));
            IFC(obj->get_IsDefaultShadowEnabled(&prop));
            IFC(Private::ValueBoxer::CreateBoolean(prop, &propertyValue));
            IFC(propertyValue.CopyTo(value));
            break;
        }
        default:
            IFC(E_NOT_FOUND);
    }
Cleanup:
    return hr;
}

_Check_return_ HRESULT
XamlRuntimeType::BoxEnum(
    _In_ UINT16 typeLabel,
    _In_ UINT32 enumValue,
    _Outptr_ IInspectable **ppBoxedEnum) const
{
    switch(typeLabel)
    {
        case EnumBoxer_Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionEffect:
            return ValueBoxer::EnumBoxer<ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect>(enumValue, ppBoxedEnum);
        case EnumBoxer_Microsoft_UI_Xaml_Controls_ListPickerFlyoutSelectionMode:
            return ValueBoxer::EnumBoxer<ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>(enumValue, ppBoxedEnum);
        case EnumBoxer_Microsoft_UI_Xaml_Controls_PivotHeaderFocusVisualPlacement:
            return ValueBoxer::EnumBoxer<ABI::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>(enumValue, ppBoxedEnum);
        case EnumBoxer_Microsoft_UI_Xaml_Controls_PivotSlideInAnimationGroup:
            return ValueBoxer::EnumBoxer<ABI::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup>(enumValue, ppBoxedEnum);
        default:
            return E_NOT_FOUND;
    }
}

_Check_return_ HRESULT
XamlRuntimeType::AddToVector(
    _In_ UINT16 /*addToVectorId*/,
    _In_ IInspectable* /*instance*/,
    _In_ IInspectable* /*value*/) const
{
    return E_NOTIMPL;
}

_Check_return_ HRESULT
XamlRuntimeType::AddToMap(
    _In_ UINT16 /*addToMapId*/,
    _In_ IInspectable* /*instance*/,
    _In_ IInspectable* /*key*/,
    _In_ IInspectable* /*value*/) const
{
    return E_NOTIMPL;
}

// Call into each property and null it out, we initialize all our properties on-demand if needed. This should only be
// called during MetadataAPI::Reset.
void
XamlRuntimeType::ResetDependencyProperties() const
{
    ABI::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfoFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfoFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::DatePickedEventArgsFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItemFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenterFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfoFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgsFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverterFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverterFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenterFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransitionFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::PickerFlyoutFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBaseFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::PivotFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Automation::Peers::PivotAutomationPeerFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItemFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::PivotItemFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Automation::Peers::PivotItemAutomationPeerFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Automation::Peers::PivotItemDataAutomationPeerFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfoFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::TimePickedEventArgsFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutFactory::ClearProperties();
    ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenterFactory::ClearProperties();
}

// Called from XamlType::RunInitializer rather than relying on the factories RuntimeClassInitialize to do the registration
HRESULT
XamlRuntimeType::EnsureDependencyProperties(_In_ UINT16 typeLabel) const
{
  switch(typeLabel)
    {
        case activate_CommonNavigationTransitionInfo:
            return ABI::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfoFactory::EnsureProperties();
        case activate_ContinuumNavigationTransitionInfo:
            return ABI::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfoFactory::EnsureProperties();
        case activate_DatePickerFlyout:
            return ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutFactory::EnsureProperties();
        case activate_DatePickerFlyoutItem:
            return ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItemFactory::EnsureProperties();
        case activate_DatePickerFlyoutPresenter:
            return ABI::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenterFactory::EnsureProperties();
        case activate_EntranceNavigationTransitionInfo:
            return ABI::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfoFactory::EnsureProperties();
        case activate_JumpListItemBackgroundConverter:
            return ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverterFactory::EnsureProperties();
        case activate_JumpListItemForegroundConverter:
            return ABI::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverterFactory::EnsureProperties();
        case activate_ListPickerFlyout:
            return ABI::Microsoft::UI::Xaml::Controls::ListPickerFlyoutFactory::EnsureProperties();
        case activate_LoopingSelector:
            return ABI::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorFactory::EnsureProperties();
        case activate_NavigationThemeTransition:
            return ABI::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransitionFactory::EnsureProperties();
        case activate_PickerFlyout:
            return ABI::Microsoft::UI::Xaml::Controls::PickerFlyoutFactory::EnsureProperties();
        case activate_PickerFlyoutBase:
            return ABI::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBaseFactory::EnsureProperties();
        case activate_Pivot:
            return ABI::Microsoft::UI::Xaml::Controls::PivotFactory::EnsureProperties();
        case activate_PivotHeaderItem:
            return ABI::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItemFactory::EnsureProperties();
        case activate_PivotItem:
            return ABI::Microsoft::UI::Xaml::Controls::PivotItemFactory::EnsureProperties();
        case activate_SlideNavigationTransitionInfo:
            return ABI::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfoFactory::EnsureProperties();
        case activate_TimePickerFlyout:
            return ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutFactory::EnsureProperties();
        case activate_TimePickerFlyoutPresenter:
            return ABI::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenterFactory::EnsureProperties();
        default:
            return S_OK;
    }
}

} /* namespace Private */

