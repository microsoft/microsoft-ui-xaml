// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//
//  WindowsRuntimeAPISet

//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML WinRT APIs.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "sdkddkver.h"
#include <FeatureFlags.h>

import "oaidl.idl";
import "eventtoken.idl";
import "inspectable.idl";
import "microsoft.ui.composition.idl";
import "microsoft.ui.composition.SystemBackdrops.idl";
import "microsoft.ui.content.idl";
import "microsoft.UI.Dispatching.idl";
import "microsoft.ui.input.idl";
import "microsoft.ui.text.idl";
import "microsoft.ui.xaml.controls.controls.idl";
import "windows.foundation.idl";
import "windows.foundation.numerics.idl";
import "windows.globalization.idl";
import "windows.media.idl";
import "windows.media.playback.idl";
import "windows.ui.idl";

import "windows.applicationModel.datatransfer.dragdrop.idl";
import "windows.applicationModel.datatransfer.dragdrop.core.idl";
import "windows.foundation.customattributes.idl";
import "windows.ui.xaml.interop.idl";



namespace Microsoft.UI.Xaml.Controls
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AppBarClosedDisplayMode
    {
        Compact,
        Minimal,
        Hidden,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutoSuggestionBoxTextChangeReason
    {
        UserInput,
        ProgrammaticChange,
        SuggestionChosen,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CalendarViewDisplayMode
    {
        Month,
        Year,
        Decade,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CalendarViewSelectionMode
    {
        None,
        Single,
        Multiple,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CommandBarDefaultLabelPosition
    {
        Bottom,
        Right,
        Collapsed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CommandBarDynamicOverflowAction
    {
        AddingToOverflow,
        RemovingFromOverflow,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CommandBarLabelPosition
    {
        Default,
        Collapsed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum CommandBarOverflowButtonVisibility
    {
        Auto,
        Visible,
        Collapsed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ContentDialogButton
    {
        None,
        Primary,
        Secondary,
        Close,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ContentDialogPlacement
    {
        Popup,
        InPlace,
        [feature(Feature_ExperimentalApi)]
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        UnconstrainedPopup,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ContentDialogResult
    {
        None,
        Primary,
        Secondary,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SplitViewDisplayMode
    {
        Overlay,
        Inline,
        CompactOverlay,
        CompactInline,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SplitViewPanePlacement
    {
        Left,
        Right,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum Symbol
    {
        Previous = 57600,
        Next,
        Play,
        Pause,
        Edit,
        Save,
        Clear,
        Delete,
        Remove,
        Add,
        Cancel,
        Accept,
        More,
        Redo,
        Undo,
        Home,
        Up,
        Forward,
        Back,
        Favorite,
        Camera,
        Setting,
        Video,
        Sync,
        Download,
        Mail,
        Find,
        Help,
        Upload,
        Emoji,
        TwoPage,
        LeaveChat,
        MailForward,
        Clock,
        Send,
        Crop,
        RotateCamera,
        People,
        OpenPane,
        ClosePane,
        World,
        Flag,
        PreviewLink,
        Globe,
        Trim,
        AttachCamera,
        ZoomIn,
        Bookmarks,
        Document,
        ProtectedDocument,
        Page,
        Bullets,
        Comment,
        MailFilled,
        ContactInfo,
        HangUp,
        ViewAll,
        MapPin,
        Phone,
        VideoChat,
        Switch,
        Contact,
        Rename,
        Pin = 57665,
        MusicInfo,
        Go,
        Keyboard,
        DockLeft,
        DockRight,
        DockBottom,
        Remote,
        Refresh,
        Rotate,
        Shuffle,
        List,
        Shop,
        SelectAll,
        Orientation,
        Import,
        ImportAll,
        BrowsePhotos = 57685,
        WebCam,
        Pictures = 57688,
        SaveLocal,
        Caption,
        Stop,
        ShowResults,
        Volume,
        Repair,
        Message,
        Page2,
        CalendarDay,
        CalendarWeek,
        Calendar,
        Character,
        MailReplyAll,
        Read,
        Link,
        Account,
        ShowBcc,
        HideBcc,
        Cut,
        Attach,
        Paste,
        Filter,
        Copy,
        Emoji2,
        Important,
        MailReply,
        SlideShow,
        Sort,
        Manage = 57720,
        AllApps,
        DisconnectDrive,
        MapDrive,
        NewWindow,
        OpenWith,
        ContactPresence = 57729,
        Priority,
        GoToToday = 57732,
        Font,
        FontColor,
        Contact2,
        Folder,
        Audio,
        Placeholder,
        View,
        SetLockScreen,
        SetTile,
        ClosedCaption = 57744,
        StopSlideShow,
        Permissions,
        Highlight,
        DisableUpdates,
        UnFavorite,
        UnPin,
        OpenLocal,
        Mute,
        Italic,
        Underline,
        Bold,
        MoveToFolder,
        LikeDislike,
        Dislike,
        Like,
        AlignRight,
        AlignCenter,
        AlignLeft,
        Zoom,
        ZoomOut,
        OpenFile,
        OtherUser,
        Admin,
        Street = 57795,
        Map,
        ClearSelection,
        FontDecrease,
        FontIncrease,
        FontSize,
        CellPhone,
        ReShare,
        Tag,
        RepeatOne,
        RepeatAll,
        OutlineStar,
        SolidStar,
        Calculator,
        Directions,
        Target,
        Library,
        PhoneBook,
        Memo,
        Microphone,
        PostUpdate,
        BackToWindow,
        FullScreen,
        NewFolder,
        CalendarReply,
        UnSyncFolder = 57821,
        ReportHacked,
        SyncFolder,
        BlockContact,
        SwitchApps,
        AddFriend,
        TouchPointer,
        GoToStart,
        ZeroBars,
        OneBar,
        TwoBars,
        ThreeBars,
        FourBars,
        Scan = 58004,
        Preview,
        GlobalNavigationButton = 59136,
        Share = 59181,
        Print = 59209,
        XboxOneConsole = 59792,
    };
}
namespace Microsoft.UI.Xaml.Controls.Primitives
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ListViewItemPresenterCheckMode
    {
        Inline,
        Overlay,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ListViewItemPresenterSelectionIndicatorMode
    {
        Inline,
        Overlay,
    };
}


namespace Microsoft.UI.Xaml
{
    declare
    {
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.AppBarClosedDisplayMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CalendarViewSelectionMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CommandBarDynamicOverflowAction>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CommandBarLabelPosition>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CommandBarOverflowButtonVisibility>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ContentDialogButton>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ContentDialogPlacement>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ContentDialogResult>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.SplitViewDisplayMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.SplitViewPanePlacement>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Symbol>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Navigation.NavigatedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Navigation.NavigatingCancelEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Navigation.NavigationFailedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Navigation.NavigationStoppedEventHandler>;
        interface Windows.Foundation.IReference<Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarDatePicker*, Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandBar*, Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandingContainer*, Microsoft.UI.Xaml.Controls.CommandingContextChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePicker*, Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ScrollViewer*, Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePicker*, Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs*>*>;
    }
}

namespace Microsoft.UI.Xaml.Controls
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void CalendarViewDayItemChangingEventHandler(Microsoft.UI.Xaml.Controls.CalendarView sender, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void HubSectionHeaderClickEventHandler(Object sender, Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate String ListViewItemToKeyHandler(Object item);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate Windows.Foundation.IAsyncOperation<Object> ListViewKeyToItemHandler(String key);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void SectionsInViewChangedEventHandler(Object sender, Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs e);

}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass DispatcherTimer
    {
        [method_name("CreateInstance")] DispatcherTimer();
        Windows.Foundation.TimeSpan Interval;
        Boolean IsEnabled{ get; };
        event Windows.Foundation.EventHandler<Object> Tick;
        void Start();
        void Stop();
    };

}
namespace Microsoft.UI.Xaml.Input
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CanExecuteRequestedEventArgs
    {
        Object Parameter{ get; };
        Boolean CanExecute;
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_CommandingImprovements)]
        [interface_name("Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgsFeature_CommandingImprovements")]
        {
            Microsoft.UI.Xaml.DependencyObject CommandTarget{ get; };
            Microsoft.UI.Xaml.Controls.ItemsControl ListCommandTarget{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ExecuteRequestedEventArgs
    {
        Object Parameter{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_CommandingImprovements)]
        [interface_name("Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgsFeature_CommandingImprovements")]
        {
            Microsoft.UI.Xaml.DependencyObject CommandTarget{ get; };
            Microsoft.UI.Xaml.Controls.ItemsControl ListCommandTarget{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass XamlUICommand
        : Microsoft.UI.Xaml.DependencyObject
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Input.ICommand
    {
        [method_name("CreateInstance")] XamlUICommand();
        String Label;
        Microsoft.UI.Xaml.Controls.IconSource IconSource;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator> KeyboardAccelerators{ get; };
        String AccessKey;
        String Description;
        Microsoft.UI.Xaml.Input.ICommand Command;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand,Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs> ExecuteRequested;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand,Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs> CanExecuteRequested;
        void NotifyCanExecuteChanged();
        static Microsoft.UI.Xaml.DependencyProperty LabelProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IconSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AccessKeyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DescriptionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CommandProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass StandardUICommand
        : Microsoft.UI.Xaml.Input.XamlUICommand
    {
        [method_name("CreateInstance")] StandardUICommand();
        [method_name("CreateInstanceWithKind")] StandardUICommand(Microsoft.UI.Xaml.Input.StandardUICommandKind kind);
        Microsoft.UI.Xaml.Input.StandardUICommandKind Kind;
        static Microsoft.UI.Xaml.DependencyProperty KindProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Documents
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass HyperlinkClickEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Glyphs
        : Microsoft.UI.Xaml.FrameworkElement
    {
        Glyphs();
        String UnicodeString;
        String Indices;
        Windows.Foundation.Uri FontUri;
        Microsoft.UI.Xaml.Media.StyleSimulations StyleSimulations;
        Double FontRenderingEmSize;
        Double OriginX;
        Double OriginY;
        Microsoft.UI.Xaml.Media.Brush Fill;
        Boolean IsColorFontEnabled;
        Int32 ColorFontPaletteIndex;
        static Microsoft.UI.Xaml.DependencyProperty UnicodeStringProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IndicesProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontUriProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StyleSimulationsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontRenderingEmSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OriginXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OriginYProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FillProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsColorFontEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ColorFontPaletteIndexProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Hyperlink
        : Microsoft.UI.Xaml.Documents.Span
    {
        Hyperlink();
        Windows.Foundation.Uri NavigateUri;
        Microsoft.UI.Xaml.Documents.UnderlineStyle UnderlineStyle;
        Microsoft.UI.Xaml.DependencyObject XYFocusLeft;
        Microsoft.UI.Xaml.DependencyObject XYFocusRight;
        Microsoft.UI.Xaml.DependencyObject XYFocusUp;
        Microsoft.UI.Xaml.DependencyObject XYFocusDown;
        Microsoft.UI.Xaml.ElementSoundMode ElementSoundMode;
        Microsoft.UI.Xaml.FocusState FocusState{ get; };
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusUpNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusDownNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusLeftNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusRightNavigationStrategy;
        Boolean IsTabStop;
        Int32 TabIndex;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.Hyperlink,Microsoft.UI.Xaml.Documents.HyperlinkClickEventArgs> Click;
        event Microsoft.UI.Xaml.RoutedEventHandler GotFocus;
        event Microsoft.UI.Xaml.RoutedEventHandler LostFocus;
        Boolean Focus(Microsoft.UI.Xaml.FocusState value);
        static Microsoft.UI.Xaml.DependencyProperty NavigateUriProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty UnderlineStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusLeftProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusRightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusUpProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusDownProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ElementSoundModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusStateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusUpNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusDownNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusLeftNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusRightNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTabStopProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TabIndexProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Controls
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ICommandBarElement 
    {
        Boolean IsCompact;
        Boolean IsInOverflow{ get; };
        Int32 DynamicOverflowOrder;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AnchorRequestedEventArgs
    {
        Microsoft.UI.Xaml.UIElement Anchor;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement> AnchorCandidates{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CalendarDatePickerDateChangedEventArgs
    {
        Windows.Foundation.IReference<Windows.Foundation.DateTime> NewDate{ get; };
        Windows.Foundation.IReference<Windows.Foundation.DateTime> OldDate{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CalendarViewDayItemChangingEventArgs
    {
        Boolean InRecycleQueue{ get; };
        Microsoft.UI.Xaml.Controls.CalendarViewDayItem Item{ get; };
        UInt32 Phase{ get; };
        [method_name("RegisterUpdateCallback")] void RegisterUpdateCallback(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView,Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs> callback);
        [method_name("RegisterUpdateCallbackWithPhase")] void RegisterUpdateCallback(UInt32 callbackPhase, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView,Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs> callback);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CalendarViewSelectedDatesChangedEventArgs
    {
        Windows.Foundation.Collections.IVectorView<Windows.Foundation.DateTime> AddedDates{ get; };
        Windows.Foundation.Collections.IVectorView<Windows.Foundation.DateTime> RemovedDates{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_CommandingImprovements)]
    [webhosthidden]
    runtimeclass CommandingContextChangedEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject CommandTarget{ get; };
        Microsoft.UI.Xaml.Controls.ItemsControl ListCommandTarget{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentDialogButtonClickDeferral
    {
        void Complete();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentDialogButtonClickEventArgs
    {
        Boolean Cancel;
        Microsoft.UI.Xaml.Controls.ContentDialogButtonClickDeferral GetDeferral();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentDialogClosedEventArgs
    {
        Microsoft.UI.Xaml.Controls.ContentDialogResult Result{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentDialogClosingDeferral
    {
        void Complete();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentDialogClosingEventArgs
    {
        Microsoft.UI.Xaml.Controls.ContentDialogResult Result{ get; };
        Boolean Cancel;
        Microsoft.UI.Xaml.Controls.ContentDialogClosingDeferral GetDeferral();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ContentDialogOpenedEventArgs
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DatePickerSelectedValueChangedEventArgs
    {
        Windows.Foundation.IReference<Windows.Foundation.DateTime> OldDate{ get; };
        Windows.Foundation.IReference<Windows.Foundation.DateTime> NewDate{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DatePickerValueChangedEventArgs
    {
        Windows.Foundation.DateTime OldDate{ get; };
        Windows.Foundation.DateTime NewDate{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DynamicOverflowItemsChangingEventArgs
    {
        DynamicOverflowItemsChangingEventArgs();
        Microsoft.UI.Xaml.Controls.CommandBarDynamicOverflowAction Action{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass HubSectionCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection>
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass HubSectionHeaderClickEventArgs
    {
        HubSectionHeaderClickEventArgs();
        Microsoft.UI.Xaml.Controls.HubSection Section{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ListViewPersistenceHelper
    {
        static String GetRelativeScrollPosition(Microsoft.UI.Xaml.Controls.ListViewBase listViewBase, Microsoft.UI.Xaml.Controls.ListViewItemToKeyHandler itemToKeyHandler);
        static Windows.Foundation.IAsyncAction SetRelativeScrollPositionAsync(Microsoft.UI.Xaml.Controls.ListViewBase listViewBase, String relativeScrollPosition, Microsoft.UI.Xaml.Controls.ListViewKeyToItemHandler keyToItemHandler);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RichEditBoxSelectionChangingEventArgs
    {
        Int32 SelectionStart{ get; };
        Int32 SelectionLength{ get; };
        Boolean Cancel;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RichEditBoxTextChangingEventArgs
    {
        Boolean IsContentChanging{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScrollViewerView
    {
        Double HorizontalOffset{ get; };
        Double VerticalOffset{ get; };
        Single ZoomFactor{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScrollViewerViewChangedEventArgs
    {
        ScrollViewerViewChangedEventArgs();
        Boolean IsIntermediate{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScrollViewerViewChangingEventArgs
    {
        Microsoft.UI.Xaml.Controls.ScrollViewerView NextView{ get; };
        Microsoft.UI.Xaml.Controls.ScrollViewerView FinalView{ get; };
        Boolean IsInertial{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass SectionsInViewChangedEventArgs
    {
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection> AddedSections{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection> RemovedSections{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplitViewPaneClosingEventArgs
    {
        Boolean Cancel;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TimePickerSelectedValueChangedEventArgs
    {
        Windows.Foundation.IReference<Windows.Foundation.TimeSpan> OldTime{ get; };
        Windows.Foundation.IReference<Windows.Foundation.TimeSpan> NewTime{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TimePickerValueChangedEventArgs
    {
        Windows.Foundation.TimeSpan OldTime{ get; };
        Windows.Foundation.TimeSpan NewTime{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AutoSuggestBoxQuerySubmittedEventArgs
        : Microsoft.UI.Xaml.DependencyObject
    {
        AutoSuggestBoxQuerySubmittedEventArgs();
        String QueryText{ get; };
        Object ChosenSuggestion{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AutoSuggestBoxSuggestionChosenEventArgs
        : Microsoft.UI.Xaml.DependencyObject
    {
        AutoSuggestBoxSuggestionChosenEventArgs();
        Object SelectedItem{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AutoSuggestBoxTextChangedEventArgs
        : Microsoft.UI.Xaml.DependencyObject
    {
        AutoSuggestBoxTextChangedEventArgs();
        Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason Reason;
        Boolean CheckCurrent();
        static Microsoft.UI.Xaml.DependencyProperty ReasonProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Controls.IIconSourceFactory")]
    unsealed runtimeclass IconSource
        : Microsoft.UI.Xaml.DependencyObject
    {
        Microsoft.UI.Xaml.Media.Brush Foreground;
        Microsoft.UI.Xaml.Controls.IconElement CreateIconElement();
        static Microsoft.UI.Xaml.DependencyProperty ForegroundProperty{ get; };
        overridable Microsoft.UI.Xaml.Controls.IconElement CreateIconElementCore();
        overridable Microsoft.UI.Xaml.DependencyProperty GetIconElementPropertyCore(Microsoft.UI.Xaml.DependencyProperty iconSourceProperty);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass BitmapIconSource
        : Microsoft.UI.Xaml.Controls.IconSource
    {
        [method_name("CreateInstance")] BitmapIconSource();
        Windows.Foundation.Uri UriSource;
        Boolean ShowAsMonochrome;
        static Microsoft.UI.Xaml.DependencyProperty UriSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ShowAsMonochromeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Content")]
    unsealed runtimeclass Flyout
        : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
    {
        [method_name("CreateInstance")] Flyout();
        Microsoft.UI.Xaml.UIElement Content;
        Microsoft.UI.Xaml.Style FlyoutPresenterStyle;
        static Microsoft.UI.Xaml.DependencyProperty ContentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FlyoutPresenterStyleProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FontIconSource
        : Microsoft.UI.Xaml.Controls.IconSource
    {
        [method_name("CreateInstance")] FontIconSource();
        String Glyph;
        Double FontSize;
        Microsoft.UI.Xaml.Media.FontFamily FontFamily;
        Windows.UI.Text.FontWeight FontWeight;
        Windows.UI.Text.FontStyle FontStyle;
        Boolean IsTextScaleFactorEnabled;
        Boolean MirroredWhenRightToLeft;
        static Microsoft.UI.Xaml.DependencyProperty GlyphProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTextScaleFactorEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MirroredWhenRightToLeftProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Items")]
    unsealed runtimeclass MenuFlyout
        : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
    {
        [method_name("CreateInstance")] MenuFlyout();
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase> Items{ get; };
        Microsoft.UI.Xaml.Style MenuFlyoutPresenterStyle;
        void ShowAt(Microsoft.UI.Xaml.UIElement targetElement, Windows.Foundation.Point point);
        static Microsoft.UI.Xaml.DependencyProperty MenuFlyoutPresenterStyleProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass PathIconSource
        : Microsoft.UI.Xaml.Controls.IconSource
    {
        [method_name("CreateInstance")] PathIconSource();
        Microsoft.UI.Xaml.Media.Geometry Data;
        static Microsoft.UI.Xaml.DependencyProperty DataProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass SymbolIconSource
        : Microsoft.UI.Xaml.Controls.IconSource
    {
        [method_name("CreateInstance")] SymbolIconSource();
        Microsoft.UI.Xaml.Controls.Symbol Symbol;
        static Microsoft.UI.Xaml.DependencyProperty SymbolProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Controls.IIconElementFactory")]
    unsealed runtimeclass IconElement
        : Microsoft.UI.Xaml.FrameworkElement
    {
        Microsoft.UI.Xaml.Media.Brush Foreground;
        static Microsoft.UI.Xaml.DependencyProperty ForegroundProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
    [webhosthidden]
    unsealed runtimeclass MediaPlayerPresenter
        : Microsoft.UI.Xaml.FrameworkElement
    {
        [method_name("CreateInstance")] MediaPlayerPresenter();
        Windows.Media.Playback.MediaPlayer MediaPlayer;
        Microsoft.UI.Xaml.Media.Stretch Stretch;
        Boolean IsFullWindow;
        static Microsoft.UI.Xaml.DependencyProperty MediaPlayerProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StretchProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsFullWindowProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass AppBarSeparator
        : Microsoft.UI.Xaml.Controls.Control
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.ICommandBarElement
    {
        [method_name("CreateInstance")] AppBarSeparator();
        static Microsoft.UI.Xaml.DependencyProperty IsCompactProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsInOverflowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DynamicOverflowOrderProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass BitmapIcon
        : Microsoft.UI.Xaml.Controls.IconElement
    {
        [method_name("CreateInstance")] BitmapIcon();
        Windows.Foundation.Uri UriSource;
        Boolean ShowAsMonochrome;
        static Microsoft.UI.Xaml.DependencyProperty UriSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ShowAsMonochromeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass CalendarDatePicker
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] CalendarDatePicker();
        Windows.Foundation.IReference<Windows.Foundation.DateTime> Date;
        Boolean IsCalendarOpen;
        String DateFormat;
        String PlaceholderText;
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        Microsoft.UI.Xaml.Style CalendarViewStyle;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        Object Description;
        Windows.Foundation.DateTime MinDate;
        Windows.Foundation.DateTime MaxDate;
        Boolean IsTodayHighlighted;
        Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode DisplayMode;
        Windows.Globalization.DayOfWeek FirstDayOfWeek;
        String DayOfWeekFormat;
        String CalendarIdentifier;
        Boolean IsOutOfScopeEnabled;
        Boolean IsGroupLabelVisible;
        event Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler CalendarViewDayItemChanging;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarDatePicker,Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs> DateChanged;
        event Windows.Foundation.EventHandler<Object> Opened;
        event Windows.Foundation.EventHandler<Object> Closed;
        void SetDisplayDate(Windows.Foundation.DateTime date);
        void SetYearDecadeDisplayDimensions(Int32 columns, Int32 rows);
        static Microsoft.UI.Xaml.DependencyProperty DateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsCalendarOpenProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DateFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlaceholderTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarViewStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DescriptionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinDateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxDateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTodayHighlightedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisplayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstDayOfWeekProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayOfWeekFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarIdentifierProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsOutOfScopeEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsGroupLabelVisibleProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_HeaderPlacement)]
        [static_name("Microsoft.UI.Xaml.Controls.ICalendarDatePickerStaticsFeature_HeaderPlacement")]
        [interface_name("Microsoft.UI.Xaml.Controls.ICalendarDatePickerFeature_HeaderPlacement")]
        {
            Microsoft.UI.Xaml.Controls.ControlHeaderPlacement HeaderPlacement;
            static Microsoft.UI.Xaml.DependencyProperty HeaderPlacementProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass CalendarView
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] CalendarView();
        String CalendarIdentifier;
        String DayOfWeekFormat;
        Boolean IsGroupLabelVisible;
        Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode DisplayMode;
        Windows.Globalization.DayOfWeek FirstDayOfWeek;
        Boolean IsOutOfScopeEnabled;
        Boolean IsTodayHighlighted;
        Windows.Foundation.DateTime MaxDate;
        Windows.Foundation.DateTime MinDate;
        Int32 NumberOfWeeksInView;
        Windows.Foundation.Collections.IVector<Windows.Foundation.DateTime> SelectedDates{ get; };
        Microsoft.UI.Xaml.Controls.CalendarViewSelectionMode SelectionMode;
        Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings TemplateSettings{ get; };
        Microsoft.UI.Xaml.Media.Brush FocusBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedHoverBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedPressedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedDisabledBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush HoverBorderBrush;
        Microsoft.UI.Xaml.Media.Brush PressedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush TodaySelectedInnerBorderBrush;
        Microsoft.UI.Xaml.Media.Brush BlackoutStrikethroughBrush;
        Microsoft.UI.Xaml.Media.Brush CalendarItemBorderBrush;
        Microsoft.UI.Xaml.Media.Brush BlackoutBackground;
        Microsoft.UI.Xaml.Media.Brush OutOfScopeBackground;
        Microsoft.UI.Xaml.Media.Brush CalendarItemBackground;
        Microsoft.UI.Xaml.Media.Brush CalendarItemHoverBackground;
        Microsoft.UI.Xaml.Media.Brush CalendarItemPressedBackground;
        Microsoft.UI.Xaml.Media.Brush CalendarItemDisabledBackground;
        Microsoft.UI.Xaml.Media.Brush TodayBackground;
        Microsoft.UI.Xaml.Media.Brush TodayBlackoutBackground;
        Microsoft.UI.Xaml.Media.Brush TodayHoverBackground;
        Microsoft.UI.Xaml.Media.Brush TodayPressedBackground;
        Microsoft.UI.Xaml.Media.Brush TodayDisabledBackground;
        Microsoft.UI.Xaml.Media.Brush PressedForeground;
        Microsoft.UI.Xaml.Media.Brush TodayForeground;
        Microsoft.UI.Xaml.Media.Brush BlackoutForeground;
        Microsoft.UI.Xaml.Media.Brush TodayBlackoutForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedHoverForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedPressedForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedDisabledForeground;
        Microsoft.UI.Xaml.Media.Brush OutOfScopeForeground;
        Microsoft.UI.Xaml.Media.Brush OutOfScopeHoverForeground;
        Microsoft.UI.Xaml.Media.Brush OutOfScopePressedForeground;
        Microsoft.UI.Xaml.Media.Brush CalendarItemForeground;
        Microsoft.UI.Xaml.Media.Brush DisabledForeground;
        Microsoft.UI.Xaml.Media.FontFamily DayItemFontFamily;
        Double DayItemFontSize;
        Windows.UI.Text.FontStyle DayItemFontStyle;
        Windows.UI.Text.FontWeight DayItemFontWeight;
        Windows.UI.Text.FontWeight TodayFontWeight;
        Microsoft.UI.Xaml.Media.FontFamily FirstOfMonthLabelFontFamily;
        Double FirstOfMonthLabelFontSize;
        Windows.UI.Text.FontStyle FirstOfMonthLabelFontStyle;
        Windows.UI.Text.FontWeight FirstOfMonthLabelFontWeight;
        Microsoft.UI.Xaml.Media.FontFamily MonthYearItemFontFamily;
        Double MonthYearItemFontSize;
        Windows.UI.Text.FontStyle MonthYearItemFontStyle;
        Windows.UI.Text.FontWeight MonthYearItemFontWeight;
        Microsoft.UI.Xaml.Media.FontFamily FirstOfYearDecadeLabelFontFamily;
        Double FirstOfYearDecadeLabelFontSize;
        Windows.UI.Text.FontStyle FirstOfYearDecadeLabelFontStyle;
        Windows.UI.Text.FontWeight FirstOfYearDecadeLabelFontWeight;
        Microsoft.UI.Xaml.Thickness DayItemMargin;
        Microsoft.UI.Xaml.Thickness MonthYearItemMargin;
        Microsoft.UI.Xaml.Thickness FirstOfMonthLabelMargin;
        Microsoft.UI.Xaml.Thickness FirstOfYearDecadeLabelMargin;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalDayItemAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalDayItemAlignment;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalFirstOfMonthLabelAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalFirstOfMonthLabelAlignment;
        Microsoft.UI.Xaml.Thickness CalendarItemBorderThickness;
        Microsoft.UI.Xaml.Style CalendarViewDayItemStyle;
        Microsoft.UI.Xaml.CornerRadius CalendarItemCornerRadius;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView,Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs> CalendarViewDayItemChanging;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView,Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs> SelectedDatesChanged;
        void SetDisplayDate(Windows.Foundation.DateTime date);
        void SetYearDecadeDisplayDimensions(Int32 columns, Int32 rows);
        static Microsoft.UI.Xaml.DependencyProperty CalendarIdentifierProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayOfWeekFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsGroupLabelVisibleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisplayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstDayOfWeekProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsOutOfScopeEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTodayHighlightedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxDateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinDateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty NumberOfWeeksInViewProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDatesProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TemplateSettingsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedHoverBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPressedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HoverBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PressedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodaySelectedInnerBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BlackoutStrikethroughBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BlackoutBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OutOfScopeBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemHoverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemPressedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemDisabledBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayBlackoutBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayHoverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayPressedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayDisabledBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PressedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BlackoutForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayBlackoutForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedHoverForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPressedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDisabledForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OutOfScopeForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OutOfScopeHoverForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OutOfScopePressedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisabledForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayItemFontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayItemFontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayItemFontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayItemFontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TodayFontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfMonthLabelFontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfMonthLabelFontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfMonthLabelFontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfMonthLabelFontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthYearItemFontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthYearItemFontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthYearItemFontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthYearItemFontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelFontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelFontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelFontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelFontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayItemMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthYearItemMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfMonthLabelMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FirstOfYearDecadeLabelMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalDayItemAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalDayItemAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalFirstOfMonthLabelAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalFirstOfMonthLabelAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemBorderThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarViewDayItemStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarItemCornerRadiusProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass CalendarViewDayItem
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] CalendarViewDayItem();
        Boolean IsBlackout;
        Windows.Foundation.DateTime Date{ get; };
        void SetDensityColors(Windows.Foundation.Collections.IIterable<Windows.UI.Color> colors);
        static Microsoft.UI.Xaml.DependencyProperty IsBlackoutProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DateProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_CommandingImprovements)]
    [webhosthidden]
    unsealed runtimeclass CommandingContainer
        : Microsoft.UI.Xaml.Controls.ContentPresenter
    {
        [method_name("CreateInstance")] CommandingContainer();
        Microsoft.UI.Xaml.DependencyObject CommandingTarget;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandingContainer,Microsoft.UI.Xaml.Controls.CommandingContextChangedEventArgs> ContextChanged;
        static Microsoft.UI.Xaml.DependencyProperty CommandingTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CommandingContainerProperty{ get; };
        static Microsoft.UI.Xaml.Controls.CommandingContainer GetCommandingContainer(Microsoft.UI.Xaml.DependencyObject element);
        static void SetCommandingContainer(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.CommandingContainer value);
        static void NotifyContextChanged(Microsoft.UI.Xaml.DependencyObject commandTarget);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Header")]
    unsealed runtimeclass DatePicker
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] DatePicker();
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        String CalendarIdentifier;
        Windows.Foundation.DateTime Date;
        Boolean DayVisible;
        Boolean MonthVisible;
        Boolean YearVisible;
        String DayFormat;
        String MonthFormat;
        String YearFormat;
        Windows.Foundation.DateTime MinYear;
        Windows.Foundation.DateTime MaxYear;
        Microsoft.UI.Xaml.Controls.Orientation Orientation;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        Windows.Foundation.IReference<Windows.Foundation.DateTime> SelectedDate;
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs> DateChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePicker,Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs> SelectedDateChanged;
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CalendarIdentifierProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayVisibleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthVisibleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty YearVisibleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DayFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MonthFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty YearFormatProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinYearProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxYearProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDateProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_HeaderPlacement)]
        [static_name("Microsoft.UI.Xaml.Controls.IDatePickerStaticsFeature_HeaderPlacement")]
        [interface_name("Microsoft.UI.Xaml.Controls.IDatePickerFeature_HeaderPlacement")]
        {
            Microsoft.UI.Xaml.Controls.ControlHeaderPlacement HeaderPlacement;
            static Microsoft.UI.Xaml.DependencyProperty HeaderPlacementProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FontIcon
        : Microsoft.UI.Xaml.Controls.IconElement
    {
        [method_name("CreateInstance")] FontIcon();
        String Glyph;
        Double FontSize;
        Microsoft.UI.Xaml.Media.FontFamily FontFamily;
        Windows.UI.Text.FontWeight FontWeight;
        Windows.UI.Text.FontStyle FontStyle;
        Boolean IsTextScaleFactorEnabled;
        Boolean MirroredWhenRightToLeft;
        static Microsoft.UI.Xaml.DependencyProperty GlyphProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTextScaleFactorEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MirroredWhenRightToLeftProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Sections")]
    unsealed runtimeclass Hub
        : Microsoft.UI.Xaml.Controls.Control
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.ISemanticZoomInformation
    {
        [method_name("CreateInstance")] Hub();
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        Microsoft.UI.Xaml.Controls.Orientation Orientation;
        Int32 DefaultSectionIndex;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection> Sections{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection> SectionsInView{ get; };
        Windows.Foundation.Collections.IObservableVector<Object> SectionHeaders{ get; };
        event Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventHandler SectionHeaderClick;
        event Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventHandler SectionsInViewChanged;
        void ScrollToSection(Microsoft.UI.Xaml.Controls.HubSection section);
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DefaultSectionIndexProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SemanticZoomOwnerProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsActiveViewProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsZoomedInViewProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("ContentTemplate")]
    unsealed runtimeclass HubSection
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] HubSection();
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        Microsoft.UI.Xaml.DataTemplate ContentTemplate;
        Boolean IsHeaderInteractive;
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsHeaderInteractiveProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("IconSource")]
    unsealed runtimeclass IconSourceElement
        : Microsoft.UI.Xaml.Controls.IconElement
    {
        [method_name("CreateInstance")] IconSourceElement();
        Microsoft.UI.Xaml.Controls.IconSource IconSource;
        static Microsoft.UI.Xaml.DependencyProperty IconSourceProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ItemsStackPanel
        : Microsoft.UI.Xaml.Controls.Panel
    {
        ItemsStackPanel();
        Microsoft.UI.Xaml.Thickness GroupPadding;
        Microsoft.UI.Xaml.Controls.Orientation Orientation;
        Int32 FirstCacheIndex{ get; };
        Int32 FirstVisibleIndex{ get; };
        Int32 LastVisibleIndex{ get; };
        Int32 LastCacheIndex{ get; };
        Microsoft.UI.Xaml.Controls.PanelScrollingDirection ScrollingDirection{ get; };
        Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement GroupHeaderPlacement;
        Microsoft.UI.Xaml.Controls.ItemsUpdatingScrollMode ItemsUpdatingScrollMode;
        Double CacheLength;
        Boolean AreStickyGroupHeadersEnabled;
        static Microsoft.UI.Xaml.DependencyProperty GroupPaddingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty GroupHeaderPlacementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CacheLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AreStickyGroupHeadersEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ItemsWrapGrid
        : Microsoft.UI.Xaml.Controls.Panel
    {
        ItemsWrapGrid();
        Microsoft.UI.Xaml.Thickness GroupPadding;
        Microsoft.UI.Xaml.Controls.Orientation Orientation;
        Int32 MaximumRowsOrColumns;
        Double ItemWidth;
        Double ItemHeight;
        Int32 FirstCacheIndex{ get; };
        Int32 FirstVisibleIndex{ get; };
        Int32 LastVisibleIndex{ get; };
        Int32 LastCacheIndex{ get; };
        Microsoft.UI.Xaml.Controls.PanelScrollingDirection ScrollingDirection{ get; };
        Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement GroupHeaderPlacement;
        Double CacheLength;
        Boolean AreStickyGroupHeadersEnabled;
        static Microsoft.UI.Xaml.DependencyProperty GroupPaddingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaximumRowsOrColumnsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ItemWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ItemHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty GroupHeaderPlacementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CacheLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AreStickyGroupHeadersEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
    [webhosthidden]
    unsealed runtimeclass MediaPlayerElement
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] MediaPlayerElement();
        Windows.Media.Playback.IMediaPlaybackSource Source;
        Microsoft.UI.Xaml.Controls.MediaTransportControls TransportControls;
        Boolean AreTransportControlsEnabled;
        Microsoft.UI.Xaml.Media.ImageSource PosterSource;
        Microsoft.UI.Xaml.Media.Stretch Stretch;
        Boolean AutoPlay;
        Boolean IsFullWindow;
        Windows.Media.Playback.MediaPlayer MediaPlayer{ get; };
        void SetMediaPlayer(Windows.Media.Playback.MediaPlayer mediaPlayer);
        static Microsoft.UI.Xaml.DependencyProperty SourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AreTransportControlsEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PosterSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StretchProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AutoPlayProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsFullWindowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MediaPlayerProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MenuFlyoutItemBase
        : Microsoft.UI.Xaml.Controls.Control
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass PathIcon
        : Microsoft.UI.Xaml.Controls.IconElement
    {
        [method_name("CreateInstance")] PathIcon();
        Microsoft.UI.Xaml.Media.Geometry Data;
        static Microsoft.UI.Xaml.DependencyProperty DataProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass RichEditBox
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] RichEditBox();
        Boolean IsReadOnly;
        Boolean AcceptsReturn;
        Microsoft.UI.Xaml.TextAlignment TextAlignment;
        Microsoft.UI.Xaml.TextWrapping TextWrapping;
        Boolean IsSpellCheckEnabled;
        Boolean IsTextPredictionEnabled;
        Microsoft.UI.Text.RichEditTextDocument Document{ get; };
        Microsoft.UI.Xaml.Input.InputScope InputScope;
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        String PlaceholderText;
        Microsoft.UI.Xaml.Media.SolidColorBrush SelectionHighlightColor;
        Boolean PreventKeyboardDisplayOnProgrammaticFocus;
        Boolean IsColorFontEnabled;
        Microsoft.UI.Xaml.Media.SolidColorBrush SelectionHighlightColorWhenNotFocused;
        Int32 MaxLength;
        Microsoft.UI.Xaml.TextAlignment HorizontalTextAlignment;
        Microsoft.UI.Xaml.Controls.CharacterCasing CharacterCasing;
        Microsoft.UI.Xaml.Controls.DisabledFormattingAccelerators DisabledFormattingAccelerators;
        Microsoft.UI.Text.RichEditTextDocument TextDocument{ get; };
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase SelectionFlyout;
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase ProofingMenuFlyout{ get; };
        Object Description;
        event Microsoft.UI.Xaml.RoutedEventHandler TextChanged;
        event Microsoft.UI.Xaml.RoutedEventHandler SelectionChanged;
        event Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler ContextMenuOpening;
        event Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler Paste;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs> TextCompositionStarted;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs> TextCompositionChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs> TextCompositionEnded;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs> CopyingToClipboard;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs> CuttingToClipboard;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs> SelectionChanging;
        Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<String> > GetLinguisticAlternativesAsync();
        Microsoft.UI.Xaml.TextReadingOrder TextReadingOrder;
        Microsoft.UI.Xaml.Controls.RichEditClipboardFormat ClipboardCopyFormat;
        Microsoft.UI.Xaml.Controls.CandidateWindowAlignment DesiredCandidateWindowAlignment;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs> CandidateWindowBoundsChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox,Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs> TextChanging;
        static Microsoft.UI.Xaml.DependencyProperty IsReadOnlyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AcceptsReturnProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextWrappingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsSpellCheckEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTextPredictionEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty InputScopeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlaceholderTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionHighlightColorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsColorFontEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionHighlightColorWhenNotFocusedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalTextAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CharacterCasingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisabledFormattingAcceleratorsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionFlyoutProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ProofingMenuFlyoutProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DescriptionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DesiredCandidateWindowAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextReadingOrderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClipboardCopyFormatProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_HeaderPlacement)]
        [static_name("Microsoft.UI.Xaml.Controls.IRichEditBoxStaticsFeature_HeaderPlacement")]
        [interface_name("Microsoft.UI.Xaml.Controls.IRichEditBoxFeature_HeaderPlacement")]
        {
            Microsoft.UI.Xaml.Controls.ControlHeaderPlacement HeaderPlacement;
            static Microsoft.UI.Xaml.DependencyProperty HeaderPlacementProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScrollContentPresenter
        : Microsoft.UI.Xaml.Controls.ContentPresenter
    {
        ScrollContentPresenter();
        Boolean CanVerticallyScroll;
        Boolean CanHorizontallyScroll;
        Double ExtentWidth{ get; };
        Double ExtentHeight{ get; };
        Double ViewportWidth{ get; };
        Double ViewportHeight{ get; };
        Double HorizontalOffset{ get; };
        Double VerticalOffset{ get; };
        Object ScrollOwner;
        Boolean CanContentRenderOutsideBounds;
        Boolean SizesContentToTemplatedParent;
        void LineUp();
        void LineDown();
        void LineLeft();
        void LineRight();
        void PageUp();
        void PageDown();
        void PageLeft();
        void PageRight();
        void MouseWheelUp();
        void MouseWheelDown();
        void MouseWheelLeft();
        void MouseWheelRight();
        void SetHorizontalOffset(Double offset);
        void SetVerticalOffset(Double offset);
        Windows.Foundation.Rect MakeVisible(Microsoft.UI.Xaml.UIElement visual, Windows.Foundation.Rect rectangle);
        static Microsoft.UI.Xaml.DependencyProperty CanContentRenderOutsideBoundsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SizesContentToTemplatedParentProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Content")]
    unsealed runtimeclass SplitView
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] SplitView();
        Microsoft.UI.Xaml.UIElement Content;
        Microsoft.UI.Xaml.UIElement Pane;
        Boolean IsPaneOpen;
        Double OpenPaneLength;
        Double CompactPaneLength;
        Microsoft.UI.Xaml.Controls.SplitViewPanePlacement PanePlacement;
        Microsoft.UI.Xaml.Controls.SplitViewDisplayMode DisplayMode;
        Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings TemplateSettings{ get; };
        Microsoft.UI.Xaml.Media.Brush PaneBackground;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView,Microsoft.UI.Xaml.Controls.SplitViewPaneClosingEventArgs> PaneClosing;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView,Object> PaneClosed;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView,Object> PaneOpening;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView,Object> PaneOpened;
        static Microsoft.UI.Xaml.DependencyProperty ContentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PaneProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsPaneOpenProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OpenPaneLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CompactPaneLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PanePlacementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisplayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TemplateSettingsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PaneBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SymbolIcon
        : Microsoft.UI.Xaml.Controls.IconElement
    {
        SymbolIcon();
        [method_name("CreateInstanceWithSymbol")] SymbolIcon(Microsoft.UI.Xaml.Controls.Symbol symbol);
        Microsoft.UI.Xaml.Controls.Symbol Symbol;
        static Microsoft.UI.Xaml.DependencyProperty SymbolProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Header")]
    unsealed runtimeclass TimePicker
        : Microsoft.UI.Xaml.Controls.Control
    {
        [method_name("CreateInstance")] TimePicker();
        Object Header;
        Microsoft.UI.Xaml.DataTemplate HeaderTemplate;
        String ClockIdentifier;
        Int32 MinuteIncrement;
        Windows.Foundation.TimeSpan Time;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        Windows.Foundation.IReference<Windows.Foundation.TimeSpan> SelectedTime;
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs> TimeChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePicker,Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs> SelectedTimeChanged;
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClockIdentifierProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinuteIncrementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TimeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedTimeProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_HeaderPlacement)]
        [static_name("Microsoft.UI.Xaml.Controls.ITimePickerStaticsFeature_HeaderPlacement")]
        [interface_name("Microsoft.UI.Xaml.Controls.ITimePickerFeature_HeaderPlacement")]
        {
            Microsoft.UI.Xaml.Controls.ControlHeaderPlacement HeaderPlacement;
            static Microsoft.UI.Xaml.DependencyProperty HeaderPlacementProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass AppBar
        : Microsoft.UI.Xaml.Controls.ContentControl
    {
        [method_name("CreateInstance")] AppBar();
        Boolean IsOpen;
        Boolean IsSticky;
        Microsoft.UI.Xaml.Controls.AppBarClosedDisplayMode ClosedDisplayMode;
        Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings TemplateSettings{ get; };
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        event Windows.Foundation.EventHandler<Object> Opening;
        event Windows.Foundation.EventHandler<Object> Opened;
        event Windows.Foundation.EventHandler<Object> Closing;
        event Windows.Foundation.EventHandler<Object> Closed;
        static Microsoft.UI.Xaml.DependencyProperty IsOpenProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsStickyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedDisplayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        overridable void OnClosed(Object e);
        overridable void OnOpened(Object e);
        overridable void OnClosing(Object e);
        overridable void OnOpening(Object e);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass AppBarElementContainer
        : Microsoft.UI.Xaml.Controls.ContentControl
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.ICommandBarElement
    {
        [method_name("CreateInstance")] AppBarElementContainer();
        static Microsoft.UI.Xaml.DependencyProperty IsCompactProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsInOverflowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DynamicOverflowOrderProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [inputproperty("Text")]
    runtimeclass AutoSuggestBox
        : Microsoft.UI.Xaml.Controls.ItemsControl
        , [feature(Feature_InputValidation)]
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.IInputValidationControl
    {
        AutoSuggestBox();
        Double MaxSuggestionListHeight;
        Boolean IsSuggestionListOpen;
        String TextMemberPath;
        String Text;
        Boolean UpdateTextOnSelect;
        String PlaceholderText;
        Object Header;
        Boolean AutoMaximizeSuggestionArea;
        Microsoft.UI.Xaml.Style TextBoxStyle;
        Microsoft.UI.Xaml.Controls.IconElement QueryIcon;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        Object Description;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs> SuggestionChosen;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs> TextChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox,Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs> QuerySubmitted;
        static Microsoft.UI.Xaml.DependencyProperty MaxSuggestionListHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsSuggestionListOpenProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextMemberPathProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty UpdateTextOnSelectProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlaceholderTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AutoMaximizeSuggestionAreaProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TextBoxStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty QueryIconProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DescriptionProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_HeaderPlacement)]
        [static_name("Microsoft.UI.Xaml.Controls.IAutoSuggestBoxStaticsFeature_HeaderPlacement")]
        [interface_name("Microsoft.UI.Xaml.Controls.IAutoSuggestBoxFeature_HeaderPlacement")]
        {
            Microsoft.UI.Xaml.Controls.ControlHeaderPlacement HeaderPlacement;
            static Microsoft.UI.Xaml.DependencyProperty HeaderPlacementProperty{ get; };
        }
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_InputValidation)]
        [static_name("Microsoft.UI.Xaml.Controls.IAutoSuggestBoxStaticsFeature_InputValidation")]
        {
            static Microsoft.UI.Xaml.DependencyProperty ErrorTemplateProperty{ get; };
            static Microsoft.UI.Xaml.DependencyProperty InputValidationModeProperty{ get; };
            static Microsoft.UI.Xaml.DependencyProperty InputValidationKindProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass CommandBarOverflowPresenter
        : Microsoft.UI.Xaml.Controls.ItemsControl
    {
        [method_name("CreateInstance")] CommandBarOverflowPresenter();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ContentDialog
        : Microsoft.UI.Xaml.Controls.ContentControl
    {
        [method_name("CreateInstance")] ContentDialog();
        Object Title;
        Microsoft.UI.Xaml.DataTemplate TitleTemplate;
        Boolean FullSizeDesired;
        String PrimaryButtonText;
        String SecondaryButtonText;
        String CloseButtonText;
        Microsoft.UI.Xaml.Input.ICommand PrimaryButtonCommand;
        Microsoft.UI.Xaml.Input.ICommand SecondaryButtonCommand;
        Microsoft.UI.Xaml.Input.ICommand CloseButtonCommand;
        Object PrimaryButtonCommandParameter;
        Object SecondaryButtonCommandParameter;
        Object CloseButtonCommandParameter;
        Boolean IsPrimaryButtonEnabled;
        Boolean IsSecondaryButtonEnabled;
        Microsoft.UI.Xaml.Style PrimaryButtonStyle;
        Microsoft.UI.Xaml.Style SecondaryButtonStyle;
        Microsoft.UI.Xaml.Style CloseButtonStyle;
        Microsoft.UI.Xaml.Controls.ContentDialogButton DefaultButton;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs> Closing;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs> Closed;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs> Opened;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs> PrimaryButtonClick;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs> SecondaryButtonClick;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog,Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs> CloseButtonClick;
        void Hide();
        [method_name("ShowAsync")] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Controls.ContentDialogResult> ShowAsync();
        [method_name("ShowAsyncWithPlacement")] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Controls.ContentDialogResult> ShowAsync(Microsoft.UI.Xaml.Controls.ContentDialogPlacement placement);
        static Microsoft.UI.Xaml.DependencyProperty TitleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TitleTemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FullSizeDesiredProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PrimaryButtonTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SecondaryButtonTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CloseButtonTextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PrimaryButtonCommandProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SecondaryButtonCommandProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CloseButtonCommandProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PrimaryButtonCommandParameterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SecondaryButtonCommandParameterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CloseButtonCommandParameterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsPrimaryButtonEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsSecondaryButtonEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PrimaryButtonStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SecondaryButtonStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CloseButtonStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DefaultButtonProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FlyoutPresenter
        : Microsoft.UI.Xaml.Controls.ContentControl
    {
        [method_name("CreateInstance")] FlyoutPresenter();
        Boolean IsDefaultShadowEnabled;
        static Microsoft.UI.Xaml.DependencyProperty IsDefaultShadowEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Frame
        : Microsoft.UI.Xaml.Controls.ContentControl
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.INavigate
    {
        [method_name("CreateInstance")] Frame();
        Int32 CacheSize;
        Boolean CanGoBack{ get; };
        Boolean CanGoForward{ get; };
        Windows.UI.Xaml.Interop.TypeName CurrentSourcePageType{ get; };
        Windows.UI.Xaml.Interop.TypeName SourcePageType;
        Int32 BackStackDepth{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Navigation.PageStackEntry> BackStack{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Navigation.PageStackEntry> ForwardStack{ get; };
        Boolean IsNavigationStackEnabled;
        event Microsoft.UI.Xaml.Navigation.NavigatedEventHandler Navigated;
        event Microsoft.UI.Xaml.Navigation.NavigatingCancelEventHandler Navigating;
        event Microsoft.UI.Xaml.Navigation.NavigationFailedEventHandler NavigationFailed;
        event Microsoft.UI.Xaml.Navigation.NavigationStoppedEventHandler NavigationStopped;
        void GoBack();
        [method_name("GoBackWithTransitionInfo")] void GoBack(Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo transitionInfoOverride);
        void GoForward();
        Boolean Navigate(Windows.UI.Xaml.Interop.TypeName sourcePageType, Object parameter);
        [method_name("NavigateWithTransitionInfo")] Boolean Navigate(Windows.UI.Xaml.Interop.TypeName sourcePageType, Object parameter, Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo infoOverride);
        Boolean NavigateToType(Windows.UI.Xaml.Interop.TypeName sourcePageType, Object parameter, Microsoft.UI.Xaml.Navigation.FrameNavigationOptions navigationOptions);
        String GetNavigationState();
        [method_name("SetNavigationState")] void SetNavigationState(String navigationState);
        [method_name("SetNavigationStateWithNavigationControl")] void SetNavigationState(String navigationState, Boolean suppressNavigate);
        static Microsoft.UI.Xaml.DependencyProperty CacheSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CanGoBackProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CanGoForwardProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CurrentSourcePageTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SourcePageTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BackStackDepthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BackStackProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ForwardStackProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsNavigationStackEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Text")]
    unsealed runtimeclass MenuFlyoutItem
        : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
    {
        [method_name("CreateInstance")] MenuFlyoutItem();
        String Text;
        Microsoft.UI.Xaml.Input.ICommand Command;
        Object CommandParameter;
        Microsoft.UI.Xaml.Controls.IconElement Icon;
        String KeyboardAcceleratorTextOverride;
        Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings TemplateSettings{ get; };
        event Microsoft.UI.Xaml.RoutedEventHandler Click;
        static Microsoft.UI.Xaml.DependencyProperty TextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CommandProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CommandParameterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IconProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorTextOverrideProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass MenuFlyoutPresenter
        : Microsoft.UI.Xaml.Controls.ItemsControl
    {
        [method_name("CreateInstance")] MenuFlyoutPresenter();
        Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings TemplateSettings{ get; };
        Boolean IsDefaultShadowEnabled;
        static Microsoft.UI.Xaml.DependencyProperty IsDefaultShadowEnabledProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        {
            Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;
            static Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MenuFlyoutSeparator
        : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
    {
        [method_name("CreateInstance")] MenuFlyoutSeparator();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Items")]
    runtimeclass MenuFlyoutSubItem
        : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
    {
        MenuFlyoutSubItem();
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase> Items{ get; };
        String Text;
        Microsoft.UI.Xaml.Controls.IconElement Icon;
        static Microsoft.UI.Xaml.DependencyProperty TextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IconProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Page
        : Microsoft.UI.Xaml.Controls.UserControl
    {
        [method_name("CreateInstance")] Page();
        Microsoft.UI.Xaml.Controls.Frame Frame{ get; };
        Microsoft.UI.Xaml.Navigation.NavigationCacheMode NavigationCacheMode;
        Microsoft.UI.Xaml.Controls.AppBar TopAppBar;
        Microsoft.UI.Xaml.Controls.AppBar BottomAppBar;
        static Microsoft.UI.Xaml.DependencyProperty FrameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TopAppBarProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BottomAppBarProperty{ get; };
        overridable void OnNavigatedFrom(Microsoft.UI.Xaml.Navigation.NavigationEventArgs e);
        overridable void OnNavigatedTo(Microsoft.UI.Xaml.Navigation.NavigationEventArgs e);
        overridable void OnNavigatingFrom(Microsoft.UI.Xaml.Navigation.NavigatingCancelEventArgs e);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScrollViewer
        : Microsoft.UI.Xaml.Controls.ContentControl
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.IScrollAnchorProvider
    {
        ScrollViewer();
        Microsoft.UI.Xaml.Controls.ScrollBarVisibility HorizontalScrollBarVisibility;
        Microsoft.UI.Xaml.Controls.ScrollBarVisibility VerticalScrollBarVisibility;
        Boolean IsHorizontalRailEnabled;
        Boolean IsVerticalRailEnabled;
        Boolean IsHorizontalScrollChainingEnabled;
        Boolean IsVerticalScrollChainingEnabled;
        Boolean IsZoomChainingEnabled;
        Boolean IsScrollInertiaEnabled;
        Boolean IsZoomInertiaEnabled;
        Microsoft.UI.Xaml.Controls.ScrollMode HorizontalScrollMode;
        Microsoft.UI.Xaml.Controls.ScrollMode VerticalScrollMode;
        Microsoft.UI.Xaml.Controls.ZoomMode ZoomMode;
        Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment HorizontalSnapPointsAlignment;
        Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment VerticalSnapPointsAlignment;
        Microsoft.UI.Xaml.Controls.SnapPointsType HorizontalSnapPointsType;
        Microsoft.UI.Xaml.Controls.SnapPointsType VerticalSnapPointsType;
        Microsoft.UI.Xaml.Controls.SnapPointsType ZoomSnapPointsType;
        Double HorizontalOffset{ get; };
        Double ViewportWidth{ get; };
        Double ScrollableWidth{ get; };
        Microsoft.UI.Xaml.Visibility ComputedHorizontalScrollBarVisibility{ get; };
        Double ExtentWidth{ get; };
        Double VerticalOffset{ get; };
        Double ViewportHeight{ get; };
        Double ScrollableHeight{ get; };
        Microsoft.UI.Xaml.Visibility ComputedVerticalScrollBarVisibility{ get; };
        Double ExtentHeight{ get; };
        Single MinZoomFactor;
        Single MaxZoomFactor;
        Single ZoomFactor{ get; };
        Windows.Foundation.Collections.IVector<Single> ZoomSnapPoints{ get; };
        Microsoft.UI.Xaml.UIElement TopLeftHeader;
        Microsoft.UI.Xaml.UIElement LeftHeader;
        Microsoft.UI.Xaml.UIElement TopHeader;
        Boolean ReduceViewportForCoreInputViewOcclusions;
        Double HorizontalAnchorRatio;
        Double VerticalAnchorRatio;
        Boolean CanContentRenderOutsideBounds;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ScrollViewer,Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs> AnchorRequested;
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs> ViewChanging;
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs> ViewChanged;
        event Windows.Foundation.EventHandler<Object> DirectManipulationStarted;
        event Windows.Foundation.EventHandler<Object> DirectManipulationCompleted;
        [deprecated("ScrollToHorizontalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        void ScrollToHorizontalOffset(Double offset);
        [deprecated("ScrollToVerticalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        void ScrollToVerticalOffset(Double offset);
        [deprecated("ZoomToFactor may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        void ZoomToFactor(Single factor);
        [method_name("ChangeView")] Boolean ChangeView(Windows.Foundation.IReference<Double> horizontalOffset, Windows.Foundation.IReference<Double> verticalOffset, Windows.Foundation.IReference<Single> zoomFactor);
        [method_name("ChangeViewWithOptionalAnimation")] Boolean ChangeView(Windows.Foundation.IReference<Double> horizontalOffset, Windows.Foundation.IReference<Double> verticalOffset, Windows.Foundation.IReference<Single> zoomFactor, Boolean disableAnimation);
        void InvalidateScrollInfo();
        Boolean IsDeferredScrollingEnabled;
        Boolean BringIntoViewOnFocusChange;
        static Microsoft.UI.Xaml.DependencyProperty HorizontalSnapPointsAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalSnapPointsAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalSnapPointsTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalSnapPointsTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ZoomSnapPointsTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ViewportWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ScrollableWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ComputedHorizontalScrollBarVisibilityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExtentWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ViewportHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ScrollableHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ComputedVerticalScrollBarVisibilityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExtentHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinZoomFactorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxZoomFactorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ZoomFactorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ZoomSnapPointsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TopLeftHeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LeftHeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TopHeaderProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ReduceViewportForCoreInputViewOcclusionsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollBarVisibilityProperty{ get; };
        static Microsoft.UI.Xaml.Controls.ScrollBarVisibility GetHorizontalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject element);
        static void SetHorizontalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.ScrollBarVisibility horizontalScrollBarVisibility);
        static Microsoft.UI.Xaml.DependencyProperty VerticalScrollBarVisibilityProperty{ get; };
        static Microsoft.UI.Xaml.Controls.ScrollBarVisibility GetVerticalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject element);
        static void SetVerticalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.ScrollBarVisibility verticalScrollBarVisibility);
        static Microsoft.UI.Xaml.DependencyProperty IsHorizontalRailEnabledProperty{ get; };
        static Boolean GetIsHorizontalRailEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsHorizontalRailEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isHorizontalRailEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsVerticalRailEnabledProperty{ get; };
        static Boolean GetIsVerticalRailEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsVerticalRailEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isVerticalRailEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsHorizontalScrollChainingEnabledProperty{ get; };
        static Boolean GetIsHorizontalScrollChainingEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsHorizontalScrollChainingEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isHorizontalScrollChainingEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsVerticalScrollChainingEnabledProperty{ get; };
        static Boolean GetIsVerticalScrollChainingEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsVerticalScrollChainingEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isVerticalScrollChainingEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsZoomChainingEnabledProperty{ get; };
        static Boolean GetIsZoomChainingEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsZoomChainingEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isZoomChainingEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsScrollInertiaEnabledProperty{ get; };
        static Boolean GetIsScrollInertiaEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsScrollInertiaEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isScrollInertiaEnabled);
        static Microsoft.UI.Xaml.DependencyProperty IsZoomInertiaEnabledProperty{ get; };
        static Boolean GetIsZoomInertiaEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsZoomInertiaEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isZoomInertiaEnabled);
        static Microsoft.UI.Xaml.DependencyProperty HorizontalScrollModeProperty{ get; };
        static Microsoft.UI.Xaml.Controls.ScrollMode GetHorizontalScrollMode(Microsoft.UI.Xaml.DependencyObject element);
        static void SetHorizontalScrollMode(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.ScrollMode horizontalScrollMode);
        static Microsoft.UI.Xaml.DependencyProperty VerticalScrollModeProperty{ get; };
        static Microsoft.UI.Xaml.Controls.ScrollMode GetVerticalScrollMode(Microsoft.UI.Xaml.DependencyObject element);
        static void SetVerticalScrollMode(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.ScrollMode verticalScrollMode);
        static Microsoft.UI.Xaml.DependencyProperty ZoomModeProperty{ get; };
        static Microsoft.UI.Xaml.Controls.ZoomMode GetZoomMode(Microsoft.UI.Xaml.DependencyObject element);
        static void SetZoomMode(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Controls.ZoomMode zoomMode);
        static Microsoft.UI.Xaml.DependencyProperty CanContentRenderOutsideBoundsProperty{ get; };
        static Boolean GetCanContentRenderOutsideBounds(Microsoft.UI.Xaml.DependencyObject element);
        static void SetCanContentRenderOutsideBounds(Microsoft.UI.Xaml.DependencyObject element, Boolean canContentRenderOutsideBounds);
        static Microsoft.UI.Xaml.DependencyProperty IsDeferredScrollingEnabledProperty{ get; };
        static Boolean GetIsDeferredScrollingEnabled(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsDeferredScrollingEnabled(Microsoft.UI.Xaml.DependencyObject element, Boolean isDeferredScrollingEnabled);
        static Microsoft.UI.Xaml.DependencyProperty BringIntoViewOnFocusChangeProperty{ get; };
        static Boolean GetBringIntoViewOnFocusChange(Microsoft.UI.Xaml.DependencyObject element);
        static void SetBringIntoViewOnFocusChange(Microsoft.UI.Xaml.DependencyObject element, Boolean bringIntoViewOnFocusChange);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass SwapChainBackgroundPanel
        : Microsoft.UI.Xaml.Controls.Grid
    {
        [method_name("CreateInstance")] SwapChainBackgroundPanel();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass SwapChainPanel
        : Microsoft.UI.Xaml.Controls.Grid
    {
        [method_name("CreateInstance")] SwapChainPanel();
        Single CompositionScaleX{ get; };
        Single CompositionScaleY{ get; };
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwapChainPanel,Object> CompositionScaleChanged;
        Microsoft.UI.Input.InputPointerSource CreateCoreIndependentInputSource(Microsoft.UI.Input.InputPointerSourceDeviceKinds deviceKinds);
        static Microsoft.UI.Xaml.DependencyProperty CompositionScaleXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CompositionScaleYProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("PrimaryCommands")]
    unsealed runtimeclass CommandBar
        : Microsoft.UI.Xaml.Controls.AppBar
    {
        [method_name("CreateInstance")] CommandBar();
        Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement> PrimaryCommands{ get; };
        Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement> SecondaryCommands{ get; };
        Microsoft.UI.Xaml.Style CommandBarOverflowPresenterStyle;
        Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings CommandBarTemplateSettings{ get; };
        Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition DefaultLabelPosition;
        Microsoft.UI.Xaml.Controls.CommandBarOverflowButtonVisibility OverflowButtonVisibility;
        Boolean IsDynamicOverflowEnabled;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandBar,Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs> DynamicOverflowItemsChanging;
        static Microsoft.UI.Xaml.DependencyProperty PrimaryCommandsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SecondaryCommandsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CommandBarOverflowPresenterStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DefaultLabelPositionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OverflowButtonVisibilityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsDynamicOverflowEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridViewHeaderItem
        : Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem
    {
        [method_name("CreateInstance")] GridViewHeaderItem();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass GridViewItem
        : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
    {
        [method_name("CreateInstance")] GridViewItem();
        Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings TemplateSettings{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewHeaderItem
        : Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem
    {
        [method_name("CreateInstance")] ListViewHeaderItem();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ListViewItem
        : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
    {
        [method_name("CreateInstance")] ListViewItem();
        Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings TemplateSettings{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ToggleMenuFlyoutItem
        : Microsoft.UI.Xaml.Controls.MenuFlyoutItem
    {
        [method_name("CreateInstance")] ToggleMenuFlyoutItem();
        Boolean IsChecked;
        static Microsoft.UI.Xaml.DependencyProperty IsCheckedProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WrapGrid
        : Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel
    {
        WrapGrid();
        Double ItemWidth;
        Double ItemHeight;
        Microsoft.UI.Xaml.Controls.Orientation Orientation;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalChildrenAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalChildrenAlignment;
        Int32 MaximumRowsOrColumns;
        static Microsoft.UI.Xaml.DependencyProperty ItemWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ItemHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalChildrenAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalChildrenAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaximumRowsOrColumnsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass AppBarButton
        : Microsoft.UI.Xaml.Controls.Button
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.ICommandBarElement
    {
        [method_name("CreateInstance")] AppBarButton();
        String Label;
        Microsoft.UI.Xaml.Controls.IconElement Icon;
        Microsoft.UI.Xaml.Controls.CommandBarLabelPosition LabelPosition;
        String KeyboardAcceleratorTextOverride;
        Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings TemplateSettings{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LabelProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IconProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LabelPositionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorTextOverrideProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsCompactProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsInOverflowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DynamicOverflowOrderProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass AppBarToggleButton
        : Microsoft.UI.Xaml.Controls.Primitives.ToggleButton
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Controls.ICommandBarElement
    {
        [method_name("CreateInstance")] AppBarToggleButton();
        String Label;
        Microsoft.UI.Xaml.Controls.IconElement Icon;
        Microsoft.UI.Xaml.Controls.CommandBarLabelPosition LabelPosition;
        String KeyboardAcceleratorTextOverride;
        Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings TemplateSettings{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LabelProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IconProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LabelPositionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorTextOverrideProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsCompactProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsInOverflowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DynamicOverflowOrderProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridView
        : Microsoft.UI.Xaml.Controls.ListViewBase
    {
        [method_name("CreateInstance")] GridView();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListView
        : Microsoft.UI.Xaml.Controls.ListViewBase
    {
        [method_name("CreateInstance")] ListView();
    };

}
namespace Microsoft.UI.Xaml.Controls.Primitives
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AppBarButtonTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double KeyboardAcceleratorTextMinWidth{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AppBarTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Windows.Foundation.Rect ClipRect{ get; };
        Double CompactVerticalDelta{ get; };
        Microsoft.UI.Xaml.Thickness CompactRootMargin{ get; };
        Double MinimalVerticalDelta{ get; };
        Microsoft.UI.Xaml.Thickness MinimalRootMargin{ get; };
        Double HiddenVerticalDelta{ get; };
        Microsoft.UI.Xaml.Thickness HiddenRootMargin{ get; };
        Double NegativeCompactVerticalDelta{ get; };
        Double NegativeMinimalVerticalDelta{ get; };
        Double NegativeHiddenVerticalDelta{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AppBarToggleButtonTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double KeyboardAcceleratorTextMinWidth{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CalendarViewTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double MinViewWidth{ get; };
        String HeaderText{ get; };
        String WeekDay1{ get; };
        String WeekDay2{ get; };
        String WeekDay3{ get; };
        String WeekDay4{ get; };
        String WeekDay5{ get; };
        String WeekDay6{ get; };
        String WeekDay7{ get; };
        Boolean HasMoreContentAfter{ get; };
        Boolean HasMoreContentBefore{ get; };
        Boolean HasMoreViews{ get; };
        Windows.Foundation.Rect ClipRect{ get; };
        Double CenterX{ get; };
        Double CenterY{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CommandBarTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double ContentHeight{ get; };
        Windows.Foundation.Rect OverflowContentClipRect{ get; };
        Double OverflowContentMinWidth{ get; };
        Double OverflowContentMaxWidth{ get; };
        Double OverflowContentMaxHeight{ get; };
        Double OverflowContentHorizontalOffset{ get; };
        Double OverflowContentHeight{ get; };
        Double NegativeOverflowContentHeight{ get; };
        Microsoft.UI.Xaml.Visibility EffectiveOverflowButtonVisibility{ get; };
        Double OverflowContentCompactYTranslation{ get; };
        Double OverflowContentMinimalYTranslation{ get; };
        Double OverflowContentHiddenYTranslation{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass MenuFlyoutItemTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double KeyboardAcceleratorTextMinWidth{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplitViewTemplateSettings
        : Microsoft.UI.Xaml.DependencyObject
    {
        Double OpenPaneLength{ get; };
        Double NegativeOpenPaneLength{ get; };
        Double OpenPaneLengthMinusCompactLength{ get; };
        Double NegativeOpenPaneLengthMinusCompactLength{ get; };
        Microsoft.UI.Xaml.GridLength OpenPaneGridLength{ get; };
        Microsoft.UI.Xaml.GridLength CompactPaneGridLength{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass CalendarPanel
        : Microsoft.UI.Xaml.Controls.Panel
    {
        CalendarPanel();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass GridViewItemPresenter
        : Microsoft.UI.Xaml.Controls.ContentPresenter
    {
        [method_name("CreateInstance")] GridViewItemPresenter();
        Boolean SelectionCheckMarkVisualEnabled;
        Microsoft.UI.Xaml.Media.Brush CheckHintBrush;
        Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBrush;
        Microsoft.UI.Xaml.Media.Brush DragBackground;
        Microsoft.UI.Xaml.Media.Brush DragForeground;
        Microsoft.UI.Xaml.Media.Brush FocusBorderBrush;
        Microsoft.UI.Xaml.Media.Brush PlaceholderBackground;
        Microsoft.UI.Xaml.Media.Brush PointerOverBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush;
        Microsoft.UI.Xaml.Thickness SelectedBorderThickness;
        Double DisabledOpacity;
        Double DragOpacity;
        Double ReorderHintOffset;
        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of GridViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.HorizontalAlignment GridViewItemPresenterHorizontalContentAlignment;
        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of GridViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.VerticalAlignment GridViewItemPresenterVerticalContentAlignment;
        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Thickness GridViewItemPresenterPadding;
        Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin;
        Microsoft.UI.Xaml.Thickness ContentMargin;
        static Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty{ get; };
        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of GridViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterHorizontalContentAlignmentProperty{ get; };
        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of GridViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterVerticalContentAlignmentProperty{ get; };
        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty GridViewItemPresenterPaddingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ListViewItemPresenter
        : Microsoft.UI.Xaml.Controls.ContentPresenter
    {
        [method_name("CreateInstance")] ListViewItemPresenter();
        Boolean SelectionCheckMarkVisualEnabled;
        Microsoft.UI.Xaml.Media.Brush CheckHintBrush;
        Microsoft.UI.Xaml.Media.Brush CheckSelectingBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBrush;
        Microsoft.UI.Xaml.Media.Brush DragBackground;
        Microsoft.UI.Xaml.Media.Brush DragForeground;
        Microsoft.UI.Xaml.Media.Brush FocusBorderBrush;
        Microsoft.UI.Xaml.Media.Brush PlaceholderBackground;
        Microsoft.UI.Xaml.Media.Brush PointerOverBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedForeground;
        Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBackground;
        Microsoft.UI.Xaml.Media.Brush SelectedPointerOverBorderBrush;
        Microsoft.UI.Xaml.Thickness SelectedBorderThickness;
        Double DisabledOpacity;
        Double DragOpacity;
        Double ReorderHintOffset;
        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of ListViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.HorizontalAlignment ListViewItemPresenterHorizontalContentAlignment;
        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of ListViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.VerticalAlignment ListViewItemPresenterVerticalContentAlignment;
        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Thickness ListViewItemPresenterPadding;
        Microsoft.UI.Xaml.Thickness PointerOverBackgroundMargin;
        Microsoft.UI.Xaml.Thickness ContentMargin;
        Microsoft.UI.Xaml.Media.Brush SelectedPressedBackground;
        Microsoft.UI.Xaml.Media.Brush PressedBackground;
        Microsoft.UI.Xaml.Media.Brush CheckBoxBrush;
        Microsoft.UI.Xaml.Media.Brush FocusSecondaryBorderBrush;
        Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode CheckMode;
        Microsoft.UI.Xaml.Media.Brush PointerOverForeground;
        Microsoft.UI.Xaml.Media.Brush RevealBackground;
        Microsoft.UI.Xaml.Media.Brush RevealBorderBrush;
        Microsoft.UI.Xaml.Thickness RevealBorderThickness;
        Boolean RevealBackgroundShowsAboveContent;
        Microsoft.UI.Xaml.Media.Brush SelectedDisabledBackground;
        Microsoft.UI.Xaml.Media.Brush CheckPressedBrush;
        Microsoft.UI.Xaml.Media.Brush CheckDisabledBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPointerOverBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedPressedBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxSelectedDisabledBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxBorderBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxPointerOverBorderBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxPressedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush CheckBoxDisabledBorderBrush;
        Microsoft.UI.Xaml.CornerRadius CheckBoxCornerRadius;
        Microsoft.UI.Xaml.CornerRadius SelectionIndicatorCornerRadius;
        Boolean SelectionIndicatorVisualEnabled;
        Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode SelectionIndicatorMode;
        Microsoft.UI.Xaml.Media.Brush SelectionIndicatorBrush;
        Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPointerOverBrush;
        Microsoft.UI.Xaml.Media.Brush SelectionIndicatorPressedBrush;
        Microsoft.UI.Xaml.Media.Brush SelectionIndicatorDisabledBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedPressedBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedDisabledBorderBrush;
        Microsoft.UI.Xaml.Media.Brush SelectedInnerBorderBrush;
        Microsoft.UI.Xaml.Media.Brush PointerOverBorderBrush;
        static Microsoft.UI.Xaml.DependencyProperty SelectionCheckMarkVisualEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckHintBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckSelectingBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlaceholderBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPointerOverBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBorderThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DisabledOpacityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DragOpacityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ReorderHintOffsetProperty{ get; };
        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of ListViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterHorizontalContentAlignmentProperty{ get; };
        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of ListViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterVerticalContentAlignmentProperty{ get; };
        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        static Microsoft.UI.Xaml.DependencyProperty ListViewItemPresenterPaddingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverBackgroundMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPressedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PressedBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusSecondaryBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RevealBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RevealBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RevealBorderThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RevealBackgroundShowsAboveContentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckPressedBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckDisabledBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPointerOverBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedPressedBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxSelectedDisabledBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxPointerOverBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxPressedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxDisabledBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CheckBoxCornerRadiusProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorCornerRadiusProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorVisualEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPointerOverBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorPressedBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectionIndicatorDisabledBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedPressedBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedDisabledBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SelectedInnerBorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerOverBorderBrushProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Automation.Peers
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass AppBarAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IExpandCollapseProvider
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IToggleProvider
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IWindowProvider
    {
        [method_name("CreateInstanceWithOwner")] AppBarAutomationPeer(Microsoft.UI.Xaml.Controls.AppBar owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AutoSuggestBoxAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IInvokeProvider
    {
        [method_name("CreateInstanceWithOwner")] AutoSuggestBoxAutomationPeer(Microsoft.UI.Xaml.Controls.AutoSuggestBox owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass CalendarDatePickerAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IInvokeProvider
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IValueProvider
    {
        [method_name("CreateInstanceWithOwner")] CalendarDatePickerAutomationPeer(Microsoft.UI.Xaml.Controls.CalendarDatePicker owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass DatePickerAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] DatePickerAutomationPeer(Microsoft.UI.Xaml.Controls.DatePicker owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass FlyoutPresenterAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] FlyoutPresenterAutomationPeer(Microsoft.UI.Xaml.Controls.FlyoutPresenter owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridViewItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] GridViewItemAutomationPeer(Microsoft.UI.Xaml.Controls.GridViewItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass HubAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] HubAutomationPeer(Microsoft.UI.Xaml.Controls.Hub owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass HubSectionAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IScrollItemProvider
    {
        [method_name("CreateInstanceWithOwner")] HubSectionAutomationPeer(Microsoft.UI.Xaml.Controls.HubSection owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Automation.Peers.IListViewBaseHeaderItemAutomationPeerFactory")]
    [default_interface]
    unsealed runtimeclass ListViewBaseHeaderItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] protected ListViewBaseHeaderItemAutomationPeer(Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] ListViewItemAutomationPeer(Microsoft.UI.Xaml.Controls.ListViewItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MediaPlayerElementAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] MediaPlayerElementAutomationPeer(Microsoft.UI.Xaml.Controls.MediaPlayerElement owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MenuFlyoutItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IInvokeProvider
    {
        [method_name("CreateInstanceWithOwner")] MenuFlyoutItemAutomationPeer(Microsoft.UI.Xaml.Controls.MenuFlyoutItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass RichEditBoxAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] RichEditBoxAutomationPeer(Microsoft.UI.Xaml.Controls.RichEditBox owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ScrollViewerAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IScrollProvider
    {
        [method_name("CreateInstanceWithOwner")] ScrollViewerAutomationPeer(Microsoft.UI.Xaml.Controls.ScrollViewer owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass TimePickerAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] TimePickerAutomationPeer(Microsoft.UI.Xaml.Controls.TimePicker owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ToggleMenuFlyoutItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IToggleProvider
    {
        [method_name("CreateInstanceWithOwner")] ToggleMenuFlyoutItemAutomationPeer(Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridViewHeaderItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] GridViewHeaderItemAutomationPeer(Microsoft.UI.Xaml.Controls.GridViewHeaderItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridViewItemDataAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.SelectorItemAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IScrollItemProvider
    {
        [method_name("CreateInstanceWithParentAndItem")] GridViewItemDataAutomationPeer(Object item, Microsoft.UI.Xaml.Automation.Peers.GridViewAutomationPeer parent);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewHeaderItemAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] ListViewHeaderItemAutomationPeer(Microsoft.UI.Xaml.Controls.ListViewHeaderItem owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewItemDataAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.SelectorItemAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IScrollItemProvider
    {
        [method_name("CreateInstanceWithParentAndItem")] ListViewItemDataAutomationPeer(Object item, Microsoft.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer parent);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MenuFlyoutPresenterAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] MenuFlyoutPresenterAutomationPeer(Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass AppBarButtonAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ButtonAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IExpandCollapseProvider
    {
        [method_name("CreateInstanceWithOwner")] AppBarButtonAutomationPeer(Microsoft.UI.Xaml.Controls.AppBarButton owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass AppBarToggleButtonAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ToggleButtonAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] AppBarToggleButtonAutomationPeer(Microsoft.UI.Xaml.Controls.AppBarToggleButton owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewBaseAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.SelectorAutomationPeer
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Provider.IDropTargetProvider
    {
        [method_name("CreateInstanceWithOwner")] ListViewBaseAutomationPeer(Microsoft.UI.Xaml.Controls.ListViewBase owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass GridViewAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] GridViewAutomationPeer(Microsoft.UI.Xaml.Controls.GridView owner);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ListViewAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] ListViewAutomationPeer(Microsoft.UI.Xaml.Controls.ListView owner);
    };

}
namespace Microsoft.UI.Xaml.Data
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IItemsRangeInfo requires Windows.Foundation.IClosable
    {
        void RangesChanged(Microsoft.UI.Xaml.Data.ItemIndexRange visibleRange, Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Data.ItemIndexRange> trackedItems);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISelectionInfo 
    {
        void SelectRange(Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange);
        void DeselectRange(Microsoft.UI.Xaml.Data.ItemIndexRange itemIndexRange);
        Boolean IsSelected(Int32 index);
        Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Data.ItemIndexRange> GetSelectedRanges();
    };

}
namespace Microsoft.UI.Xaml.Navigation
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PageStackEntry
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] PageStackEntry(Windows.UI.Xaml.Interop.TypeName sourcePageType, Object parameter, Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo navigationTransitionInfo);
        Windows.UI.Xaml.Interop.TypeName SourcePageType{ get; };
        Object Parameter{ get; };
        Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo NavigationTransitionInfo{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SourcePageTypeProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Hosting
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ElementCompositionPreview
    {
        static Microsoft.UI.Composition.Visual GetElementVisual(Microsoft.UI.Xaml.UIElement element);
        static Microsoft.UI.Composition.Visual GetElementChildVisual(Microsoft.UI.Xaml.UIElement element);
        static void SetElementChildVisual(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Composition.Visual visual);
        static Microsoft.UI.Composition.CompositionPropertySet GetScrollViewerManipulationPropertySet(Microsoft.UI.Xaml.Controls.ScrollViewer scrollViewer);
        static void SetImplicitShowAnimation(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Composition.ICompositionAnimationBase animation);
        static void SetImplicitHideAnimation(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Composition.ICompositionAnimationBase animation);
        static void SetIsTranslationEnabled(Microsoft.UI.Xaml.UIElement element, Boolean value);
        static Microsoft.UI.Composition.CompositionPropertySet GetPointerPositionPropertySet(Microsoft.UI.Xaml.UIElement targetElement);
    };

}

