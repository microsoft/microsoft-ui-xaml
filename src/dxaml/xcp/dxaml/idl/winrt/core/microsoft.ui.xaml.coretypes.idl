// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//
//  WindowsRuntimeAPISet

//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML WinRT APIs.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "sdkddkver.h"
#include <FeatureFlags.h>

import "oaidl.idl";
import "eventtoken.idl";
import "inspectable.idl";
import "microsoft.ui.composition.idl";
import "microsoft.ui.composition.SystemBackdrops.idl";
import "microsoft.ui.content.idl";
import "microsoft.UI.Dispatching.idl";
import "microsoft.ui.input.idl";
import "Microsoft.Windows.ApplicationModel.Resources.idl";
import "windows.applicationmodel.core.idl";
import "windows.foundation.idl";
import "windows.foundation.numerics.idl";
import "windows.ui.idl";

import "windows.applicationModel.datatransfer.dragdrop.idl";
import "windows.applicationModel.datatransfer.dragdrop.core.idl";
import "windows.foundation.customattributes.idl";
import "windows.ui.xaml.interop.idl";

cpp_quote("#pragma push_macro(\"GetCurrentTime\")")
cpp_quote("#undef GetCurrentTime")

namespace Microsoft.UI.Xaml
{
    [contractversion(6)]
    apicontract WinUIContract{};
    [contractversion(6)]
    apicontract XamlContract{};
}

namespace Windows.UI.Text
{




}
namespace Microsoft.UI.Xaml
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
    [webhosthidden]
    enum DispatcherShutdownMode
    {
        OnLastWindowClose,
        OnExplicitShutdown,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum DurationType
    {
        Automatic,
        TimeSpan,
        Forever,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [flags]
    [webhosthidden]
    enum ElementHighContrastAdjustment
    {
        None,
        Application = 0x80000000,
        Auto = 0xFFFFFFFF,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementSoundKind
    {
        Focus,
        Invoke,
        Show,
        Hide,
        MovePrevious,
        MoveNext,
        GoBack,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementSoundMode
    {
        Default,
        FocusOnly,
        Off,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementTheme
    {
        Default,
        Light,
        Dark,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FlowDirection
    {
        LeftToRight,
        RightToLeft,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FocusState
    {
        Unfocused,
        Pointer,
        Keyboard,
        Programmatic,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FocusVisualKind
    {
        DottedLine,
        HighVisibility,
        Reveal,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum HorizontalAlignment
    {
        Left,
        Center,
        Right,
        Stretch,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [flags]
    [webhosthidden]
    enum Vector3TransitionComponents
    {
        X = 0x1,
        Y = 0x2,
        Z = 0x4,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum VerticalAlignment
    {
        Top,
        Center,
        Bottom,
        Stretch,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum Visibility
    {
        Visible,
        Collapsed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum WindowActivationState
    {
        CodeActivated,
        Deactivated,
        PointerActivated,
    };
}
namespace Microsoft.UI.Xaml.Media
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum BrushMappingMode
    {
        Absolute,
        RelativeToBoundingBox,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ColorInterpolationMode
    {
        ScRgbLinearInterpolation,
        SRgbLinearInterpolation,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementCompositeMode
    {
        Inherit,
        SourceOver,
        MinBlend,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
    [webhosthidden]
    enum FastPlayFallbackBehaviour
    {
        Skip,
        Hide,
        Disable,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FillRule
    {
        EvenOdd,
        Nonzero,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum GradientSpreadMethod
    {
        Pad,
        Reflect,
        Repeat,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum PenLineCap
    {
        Flat,
        Square,
        Round,
        Triangle,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum PenLineJoin
    {
        Miter,
        Bevel,
        Round,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum Stretch
    {
        None,
        Fill,
        Uniform,
        UniformToFill,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum StyleSimulations
    {
        None,
        BoldSimulation,
        ItalicSimulation,
        BoldItalicSimulation,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SweepDirection
    {
        Counterclockwise,
        Clockwise,
    };
}
namespace Microsoft.UI.Xaml.Media.Animation
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ClockState
    {
        Active,
        Filling,
        Stopped,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum EasingMode
    {
        EaseOut,
        EaseIn,
        EaseInOut,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FillBehavior
    {
        HoldEnd,
        Stop,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum RepeatBehaviorType
    {
        Count,
        Duration,
        Forever,
    };
}
namespace Microsoft.UI.Xaml.Input
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FocusInputDeviceKind
    {
        None,
        Mouse,
        Touch,
        Pen,
        Keyboard,
        GameController,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FocusNavigationDirection
    {
        Next,
        Previous,
        Up,
        Down,
        Left,
        Right,
        None,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum InputScopeNameValue
    {
        Default,
        Url,
        EmailSmtpAddress = 5,
        PersonalFullName = 7,
        CurrencyAmountAndSymbol = 20,
        CurrencyAmount,
        DateMonthNumber = 23,
        DateDayNumber,
        DateYear,
        Digits = 28,
        Number,
        Password = 31,
        TelephoneNumber,
        TelephoneCountryCode,
        TelephoneAreaCode,
        TelephoneLocalNumber,
        TimeHour = 37,
        TimeMinutesOrSeconds,
        NumberFullWidth,
        AlphanumericHalfWidth,
        AlphanumericFullWidth,
        Hiragana = 44,
        KatakanaHalfWidth,
        KatakanaFullWidth,
        Hanja,
        HangulHalfWidth,
        HangulFullWidth,
        Search,
        Formula,
        SearchIncremental,
        ChineseHalfWidth,
        ChineseFullWidth,
        NativeScript,
        Text = 57,
        Chat,
        NameOrPhoneNumber,
        EmailNameOrAddress,
        Maps = 62,
        NumericPassword,
        NumericPin,
        AlphanumericPin,
        FormulaNumber = 67,
        ChatWithoutEmoji,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum KeyboardAcceleratorPlacementMode
    {
        Auto,
        Hidden,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum KeyboardNavigationMode
    {
        Local,
        Cycle,
        Once,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum KeyTipPlacementMode
    {
        Auto,
        Bottom,
        Top,
        Left,
        Right,
        Center,
        Hidden,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [flags]
    [webhosthidden]
    enum ManipulationModes
    {
        None,
        TranslateX = 0x1,
        TranslateY = 0x2,
        TranslateRailsX = 0x4,
        TranslateRailsY = 0x8,
        Rotate = 0x10,
        Scale = 0x20,
        TranslateInertia = 0x40,
        RotateInertia = 0x80,
        ScaleInertia = 0x100,
        All = 0xFFFF,
        System = 0x10000,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum StandardUICommandKind
    {
        None,
        Cut,
        Copy,
        Paste,
        SelectAll,
        Delete,
        Share,
        Save,
        Open,
        Close,
        Pause,
        Play,
        Stop,
        Forward,
        Backward,
        Undo,
        Redo,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum XYFocusKeyboardNavigationMode
    {
        Auto,
        Enabled,
        Disabled,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum XYFocusNavigationStrategy
    {
        Auto,
        Projection,
        NavigationDirectionDistance,
        RectilinearDistance,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum XYFocusNavigationStrategyOverride
    {
        None,
        Auto,
        Projection,
        NavigationDirectionDistance,
        RectilinearDistance,
    };
}
namespace Microsoft.UI.Xaml.Controls
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum BackgroundSizing
    {
        InnerBorderEdge,
        OuterBorderEdge,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_HeaderPlacement)]
    [webhosthidden]
    enum ControlHeaderPlacement
    {
        Top,
        Left,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_InputValidation)]
    [webhosthidden]
    enum InputValidationErrorEventAction
    {
        Added,
        Removed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum LightDismissOverlayMode
    {
        Auto,
        On,
        Off,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum RequiresPointer
    {
        Never,
        WhenEngaged,
        WhenFocused,
    };
}
namespace Microsoft.UI.Xaml.Media.Imaging
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [flags]
    [webhosthidden]
    enum BitmapCreateOptions
    {
        None,
        IgnoreImageCache = 0x8,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum DecodePixelType
    {
        Physical,
        Logical,
    };
}
namespace Microsoft.UI.Xaml.Controls.Primitives
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AnimationDirection
    {
        Left,
        Top,
        Right,
        Bottom,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ComponentResourceLocation
    {
        Application,
        Nested,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum EdgeTransitionLocation
    {
        Left,
        Top,
        Right,
        Bottom,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FlyoutPlacementMode
    {
        Top,
        Bottom,
        Left,
        Right,
        Full,
        TopEdgeAlignedLeft,
        TopEdgeAlignedRight,
        BottomEdgeAlignedLeft,
        BottomEdgeAlignedRight,
        LeftEdgeAlignedTop,
        LeftEdgeAlignedBottom,
        RightEdgeAlignedTop,
        RightEdgeAlignedBottom,
        Auto,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FlyoutShowMode
    {
        Auto,
        Standard,
        Transient,
        TransientWithDismissOnPointerMoveAway,
    };

    [contract(Microsoft.UI.Xaml.XamlContract, 1)]
    [webhosthidden]
    enum PopupPlacementMode
    {
        Auto,
        Top,
        Bottom,
        Left,
        Right,
        TopEdgeAlignedLeft,
        TopEdgeAlignedRight,
        BottomEdgeAlignedLeft,
        BottomEdgeAlignedRight,
        LeftEdgeAlignedTop,
        LeftEdgeAlignedBottom,
        RightEdgeAlignedTop,
        RightEdgeAlignedBottom,
    };
}
namespace Microsoft.UI.Xaml.Automation
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AnnotationType
    {
        Unknown = 60000,
        SpellingError,
        GrammarError,
        Comment,
        FormulaError,
        TrackChanges,
        Header,
        Footer,
        Highlighted,
        Endnote,
        Footnote,
        InsertionChange,
        DeletionChange,
        MoveChange,
        FormatChange,
        UnsyncedChange,
        EditingLockedChange,
        ExternalChange,
        ConflictingChange,
        Author,
        AdvancedProofingIssue,
        DataValidationError,
        CircularReferenceError,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationTextEditChangeType
    {
        None,
        AutoCorrect,
        Composition,
        CompositionFinalized,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum DockPosition
    {
        Top,
        Left,
        Bottom,
        Right,
        Fill,
        None,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ExpandCollapseState
    {
        Collapsed,
        Expanded,
        PartiallyExpanded,
        LeafNode,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum RowOrColumnMajor
    {
        RowMajor,
        ColumnMajor,
        Indeterminate,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ScrollAmount
    {
        LargeDecrement,
        SmallDecrement,
        NoAmount,
        LargeIncrement,
        SmallIncrement,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SupportedTextSelection
    {
        None,
        Single,
        Multiple,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SynchronizedInputType
    {
        KeyUp = 1,
        KeyDown,
        LeftMouseUp = 4,
        LeftMouseDown = 8,
        RightMouseUp = 16,
        RightMouseDown = 32,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ToggleState
    {
        Off,
        On,
        Indeterminate,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum WindowInteractionState
    {
        Running,
        Closing,
        ReadyForUserInteraction,
        BlockedByModalWindow,
        NotResponding,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum WindowVisualState
    {
        Normal,
        Maximized,
        Minimized,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ZoomUnit
    {
        NoAmount,
        LargeDecrement,
        SmallDecrement,
        LargeIncrement,
        SmallIncrement,
    };
}
namespace Microsoft.UI.Xaml.Automation.Peers
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AccessibilityView
    {
        Raw,
        Control,
        Content,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationControlType
    {
        Button,
        Calendar,
        CheckBox,
        ComboBox,
        Edit,
        Hyperlink,
        Image,
        ListItem,
        List,
        Menu,
        MenuBar,
        MenuItem,
        ProgressBar,
        RadioButton,
        ScrollBar,
        Slider,
        Spinner,
        StatusBar,
        Tab,
        TabItem,
        Text,
        ToolBar,
        ToolTip,
        Tree,
        TreeItem,
        Custom,
        Group,
        Thumb,
        DataGrid,
        DataItem,
        Document,
        SplitButton,
        Window,
        Pane,
        Header,
        HeaderItem,
        Table,
        TitleBar,
        Separator,
        SemanticZoom,
        AppBar,
        [contract(Microsoft.UI.Xaml.WinUIContract, 4)]
        FlipView,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationEvents
    {
        ToolTipOpened,
        ToolTipClosed,
        MenuOpened,
        MenuClosed,
        AutomationFocusChanged,
        InvokePatternOnInvoked,
        SelectionItemPatternOnElementAddedToSelection,
        SelectionItemPatternOnElementRemovedFromSelection,
        SelectionItemPatternOnElementSelected,
        SelectionPatternOnInvalidated,
        TextPatternOnTextSelectionChanged,
        TextPatternOnTextChanged,
        AsyncContentLoaded,
        PropertyChanged,
        StructureChanged,
        DragStart,
        DragCancel,
        DragComplete,
        DragEnter,
        DragLeave,
        Dropped,
        LiveRegionChanged,
        InputReachedTarget,
        InputReachedOtherElement,
        InputDiscarded,
        WindowClosed,
        WindowOpened,
        ConversionTargetChanged,
        TextEditTextChanged,
        LayoutInvalidated,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationHeadingLevel
    {
        None,
        Level1,
        Level2,
        Level3,
        Level4,
        Level5,
        Level6,
        Level7,
        Level8,
        Level9,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationLandmarkType
    {
        None,
        Custom,
        Form,
        Main,
        Navigation,
        Search,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationLiveSetting
    {
        Off,
        Polite,
        Assertive,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationNavigationDirection
    {
        Parent,
        NextSibling,
        PreviousSibling,
        FirstChild,
        LastChild,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationNotificationKind
    {
        ItemAdded,
        ItemRemoved,
        ActionCompleted,
        ActionAborted,
        Other,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationNotificationProcessing
    {
        ImportantAll,
        ImportantMostRecent,
        All,
        MostRecent,
        CurrentThenMostRecent,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationOrientation
    {
        None,
        Horizontal,
        Vertical,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationStructureChangeType
    {
        ChildAdded,
        ChildRemoved,
        ChildrenInvalidated,
        ChildrenBulkAdded,
        ChildrenBulkRemoved,
        ChildrenReordered,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum PatternInterface
    {
        Invoke,
        Selection,
        Value,
        RangeValue,
        Scroll,
        ScrollItem,
        ExpandCollapse,
        Grid,
        GridItem,
        MultipleView,
        Window,
        SelectionItem,
        Dock,
        Table,
        TableItem,
        Toggle,
        Transform,
        Text,
        ItemContainer,
        VirtualizedItem,
        Text2,
        TextChild,
        TextRange,
        Annotation,
        Drag,
        DropTarget,
        ObjectModel,
        Spreadsheet,
        SpreadsheetItem,
        Styles,
        Transform2,
        SynchronizedInput,
        TextEdit,
        CustomNavigation,
    };
}
namespace Microsoft.UI.Xaml.Automation.Text
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextPatternRangeEndpoint
    {
        Start,
        End,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextUnit
    {
        Character,
        Format,
        Word,
        Line,
        Paragraph,
        Page,
        Document,
    };
}
namespace Microsoft.UI.Xaml.Data
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum BindingMode
    {
        OneWay = 1,
        OneTime,
        TwoWay,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum RelativeSourceMode
    {
        None,
        TemplatedParent,
        Self,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum UpdateSourceTrigger
    {
        Default,
        PropertyChanged,
        Explicit,
        LostFocus,
    };
}
namespace Windows.UI.Xaml.Interop
{


}

namespace Windows.UI.Text
{


}
namespace Microsoft.UI.Xaml
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct CornerRadius
    {
        Double TopLeft;
        Double TopRight;
        Double BottomRight;
        Double BottomLeft;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass CornerRadiusHelper
    {
        static Microsoft.UI.Xaml.CornerRadius FromRadii(Double topLeft, Double topRight, Double bottomRight, Double bottomLeft);
        static Microsoft.UI.Xaml.CornerRadius FromUniformRadius(Double uniformRadius);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct Duration
    {
        Windows.Foundation.TimeSpan TimeSpan;
        Microsoft.UI.Xaml.DurationType Type;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DurationHelper
    {
        static Microsoft.UI.Xaml.Duration Automatic{ get; };
        static Microsoft.UI.Xaml.Duration Forever{ get; };
        static Int32 Compare(Microsoft.UI.Xaml.Duration duration1, Microsoft.UI.Xaml.Duration duration2);
        static Microsoft.UI.Xaml.Duration FromTimeSpan(Windows.Foundation.TimeSpan timeSpan);
        static Boolean GetHasTimeSpan(Microsoft.UI.Xaml.Duration target);
        static Microsoft.UI.Xaml.Duration Add(Microsoft.UI.Xaml.Duration target, Microsoft.UI.Xaml.Duration duration);
        static Boolean Equals(Microsoft.UI.Xaml.Duration target, Microsoft.UI.Xaml.Duration value);
        static Microsoft.UI.Xaml.Duration Subtract(Microsoft.UI.Xaml.Duration target, Microsoft.UI.Xaml.Duration duration);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct Thickness
    {
        Double Left;
        Double Top;
        Double Right;
        Double Bottom;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ThicknessHelper
    {
        static Microsoft.UI.Xaml.Thickness FromLengths(Double left, Double top, Double right, Double bottom);
        static Microsoft.UI.Xaml.Thickness FromUniformLength(Double uniformLength);
    };
}
namespace Microsoft.UI.Xaml.Media
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct Matrix
    {
        Double M11;
        Double M12;
        Double M21;
        Double M22;
        Double OffsetX;
        Double OffsetY;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass MatrixHelper
    {
        static Microsoft.UI.Xaml.Media.Matrix Identity{ get; };
        static Microsoft.UI.Xaml.Media.Matrix FromElements(Double m11, Double m12, Double m21, Double m22, Double offsetX, Double offsetY);
        static Boolean GetIsIdentity(Microsoft.UI.Xaml.Media.Matrix target);
        static Windows.Foundation.Point Transform(Microsoft.UI.Xaml.Media.Matrix target, Windows.Foundation.Point point);
    };
}
namespace Microsoft.UI.Xaml.Media.Animation
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct KeyTime
    {
        Windows.Foundation.TimeSpan TimeSpan;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass KeyTimeHelper
    {
        static Microsoft.UI.Xaml.Media.Animation.KeyTime FromTimeSpan(Windows.Foundation.TimeSpan timeSpan);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct RepeatBehavior
    {
        Double Count;
        Windows.Foundation.TimeSpan Duration;
        Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType Type;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass RepeatBehaviorHelper
    {
        static Microsoft.UI.Xaml.Media.Animation.RepeatBehavior Forever{ get; };
        static Microsoft.UI.Xaml.Media.Animation.RepeatBehavior FromCount(Double count);
        static Microsoft.UI.Xaml.Media.Animation.RepeatBehavior FromDuration(Windows.Foundation.TimeSpan duration);
        static Boolean GetHasCount(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior target);
        static Boolean GetHasDuration(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior target);
        static Boolean Equals(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior target, Microsoft.UI.Xaml.Media.Animation.RepeatBehavior value);
    };
}
namespace Microsoft.UI.Xaml.Controls.Primitives
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct GeneratorPosition
    {
        Int32 Index;
        Int32 Offset;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass GeneratorPositionHelper
    {
        static Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition FromIndexAndOffset(Int32 index, Int32 offset);
    };
}
namespace Microsoft.UI.Xaml.Automation.Peers
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct RawElementProviderRuntimeId
    {
        UInt32 Part1;
        UInt32 Part2;
    };
}
namespace Microsoft.UI.Xaml.Data
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct LoadMoreItemsResult
    {
        UInt32 Count;
    };
}
namespace Microsoft.UI.Xaml.Media.Media3D
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct Matrix3D
    {
        Double M11;
        Double M12;
        Double M13;
        Double M14;
        Double M21;
        Double M22;
        Double M23;
        Double M24;
        Double M31;
        Double M32;
        Double M33;
        Double M34;
        Double OffsetX;
        Double OffsetY;
        Double OffsetZ;
        Double M44;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass Matrix3DHelper
    {
        static Microsoft.UI.Xaml.Media.Media3D.Matrix3D Identity{ get; };
        static Microsoft.UI.Xaml.Media.Media3D.Matrix3D Multiply(Microsoft.UI.Xaml.Media.Media3D.Matrix3D matrix1, Microsoft.UI.Xaml.Media.Media3D.Matrix3D matrix2);
        static Microsoft.UI.Xaml.Media.Media3D.Matrix3D FromElements(Double m11, Double m12, Double m13, Double m14, Double m21, Double m22, Double m23, Double m24, Double m31, Double m32, Double m33, Double m34, Double offsetX, Double offsetY, Double offsetZ, Double m44);
        static Boolean GetHasInverse(Microsoft.UI.Xaml.Media.Media3D.Matrix3D target);
        static Boolean GetIsIdentity(Microsoft.UI.Xaml.Media.Media3D.Matrix3D target);
        static Microsoft.UI.Xaml.Media.Media3D.Matrix3D Invert(Microsoft.UI.Xaml.Media.Media3D.Matrix3D target);
    };
}
namespace Windows.UI.Xaml.Interop
{


}

namespace Microsoft.UI.Xaml
{
    declare
    {
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.DispatcherShutdownMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.DurationType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementHighContrastAdjustment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementSoundKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementSoundMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementTheme>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FlowDirection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FocusState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FocusVisualKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.HorizontalAlignment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Vector3TransitionComponents>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.VerticalAlignment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Visibility>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.WindowActivationState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AnnotationType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationTextEditChangeType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.DockPosition>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.ExpandCollapseState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.RowOrColumnMajor>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.ScrollAmount>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.SupportedTextSelection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.SynchronizedInputType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.ToggleState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.WindowInteractionState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.WindowVisualState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.ZoomUnit>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AccessibilityView>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationControlType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationEvents>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationHeadingLevel>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationLandmarkType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationLiveSetting>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationNavigationDirection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationNotificationKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationNotificationProcessing>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationOrientation>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.AutomationStructureChangeType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Peers.PatternInterface>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.Text.TextUnit>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.BackgroundSizing>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ControlHeaderPlacement>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.InputValidationErrorEventAction>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.LightDismissOverlayMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.RequiresPointer>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Data.BindingMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Data.RelativeSourceMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Data.UpdateSourceTrigger>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.FocusInputDeviceKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.FocusNavigationDirection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.InputScopeNameValue>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.KeyTipPlacementMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationModes>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.StandardUICommandKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.BrushMappingMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.ColorInterpolationMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.ElementCompositeMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.FastPlayFallbackBehaviour>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.FillRule>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.GradientSpreadMethod>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.PenLineCap>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.PenLineJoin>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Stretch>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.StyleSimulations>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.SweepDirection>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.ClockState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.EasingMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.FillBehavior>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Imaging.DecodePixelType>;
        interface Windows.Foundation.IReference<Windows.UI.Text.FontStretch>;
        interface Windows.Foundation.IReference<Windows.UI.Text.FontStyle>;
        interface Windows.Foundation.IReference<Windows.UI.Xaml.Interop.TypeKind>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.DragEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.DoubleTappedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.HoldingEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.KeyEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.PointerEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.RightTappedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.TappedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.RoutedEventHandler>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.SizeChangedEventHandler>;
        interface Windows.Foundation.IReference<Windows.Foundation.EventHandler<IInspectable*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, Microsoft.UI.Xaml.DataContextChangedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DragStartingEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DropCompletedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.GettingFocusEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.LosingFocusEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs*>*>;
        interface Windows.Foundation.IReference<Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.RoutedEventArgs*>*>;
    }
}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [allowmultiple]
    [attributename("templatepart")]
    [webhosthidden]
    attribute TemplatePartAttribute
    {
        String Name;
        type Type;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ApplicationInitializationCallback(Microsoft.UI.Xaml.ApplicationInitializationCallbackParams p);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate Object CreateDefaultValueCallback();

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void DependencyPropertyChangedCallback(Microsoft.UI.Xaml.DependencyObject sender, Microsoft.UI.Xaml.DependencyProperty dp);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void DependencyPropertyChangedEventHandler(Object sender, Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void DragEventHandler(Object sender, Microsoft.UI.Xaml.DragEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void EnteredBackgroundEventHandler(Object sender, Windows.ApplicationModel.EnteredBackgroundEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ExceptionRoutedEventHandler(Object sender, Microsoft.UI.Xaml.ExceptionRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void LeavingBackgroundEventHandler(Object sender, Windows.ApplicationModel.LeavingBackgroundEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void PropertyChangedCallback(Microsoft.UI.Xaml.DependencyObject d, Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void RoutedEventHandler(Object sender, Microsoft.UI.Xaml.RoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void SizeChangedEventHandler(Object sender, Microsoft.UI.Xaml.SizeChangedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void SuspendingEventHandler(Object sender, Windows.ApplicationModel.SuspendingEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void UnhandledExceptionEventHandler(Object sender, Microsoft.UI.Xaml.UnhandledExceptionEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void VisualStateChangedEventHandler(Object sender, Microsoft.UI.Xaml.VisualStateChangedEventArgs e);

}
namespace Microsoft.UI.Xaml.Media.Animation
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_property)]
    [attributename("conditionallyindependentlyanimatable")]
    [webhosthidden]
    attribute ConditionallyIndependentlyAnimatableAttribute
    {
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_property)]
    [attributename("independentlyanimatable")]
    [webhosthidden]
    attribute IndependentlyAnimatableAttribute
    {
    };

}
namespace Microsoft.UI.Xaml.Input
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void DoubleTappedEventHandler(Object sender, Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void HoldingEventHandler(Object sender, Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void KeyEventHandler(Object sender, Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ManipulationCompletedEventHandler(Object sender, Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ManipulationDeltaEventHandler(Object sender, Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ManipulationInertiaStartingEventHandler(Object sender, Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ManipulationStartedEventHandler(Object sender, Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void ManipulationStartingEventHandler(Object sender, Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void PointerEventHandler(Object sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void RightTappedEventHandler(Object sender, Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void TappedEventHandler(Object sender, Microsoft.UI.Xaml.Input.TappedRoutedEventArgs e);

}
namespace Microsoft.UI.Xaml.Media.Imaging
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void DownloadProgressEventHandler(Object sender, Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs e);

}
namespace Microsoft.UI.Xaml.Data
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [attributename("bindable")]
    [webhosthidden]
    attribute BindableAttribute
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void CurrentChangingEventHandler(Object sender, Microsoft.UI.Xaml.Data.CurrentChangingEventArgs e);

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void PropertyChangedEventHandler(Object sender, Microsoft.UI.Xaml.Data.PropertyChangedEventArgs e);

}
namespace Microsoft.UI.Xaml.Markup
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [attributename("contentproperty")]
    [webhosthidden]
    attribute ContentPropertyAttribute
    {
        String Name;
    };

}
namespace Windows.Foundation.Metadata
{

}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IElementFactory 
    {
        Microsoft.UI.Xaml.UIElement GetElement(Microsoft.UI.Xaml.ElementFactoryGetArgs args);
        void RecycleElement(Microsoft.UI.Xaml.ElementFactoryRecycleArgs args);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ApplicationInitializationCallbackParams
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BringIntoViewOptions
    {
        BringIntoViewOptions();
        Boolean AnimationDesired;
        Windows.Foundation.IReference<Windows.Foundation.Rect> TargetRect;
        Double HorizontalAlignmentRatio;
        Double VerticalAlignmentRatio;
        Double HorizontalOffset;
        Double VerticalOffset;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass BrushTransition
    {
        [method_name("CreateInstance")] BrushTransition();
        Windows.Foundation.TimeSpan Duration;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DataContextChangedEventArgs
    {
        Object NewValue{ get; };
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass DataTemplateKey
    {
        [method_name("CreateInstance")] DataTemplateKey();
        [method_name("CreateInstanceWithType")] DataTemplateKey(Object dataType);
        Object DataType;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IDependencyObjectFactory")]
    unsealed runtimeclass DependencyObject
    {
        [method_name("CreateInstance")] protected DependencyObject();
        Object GetValue(Microsoft.UI.Xaml.DependencyProperty dp);
        void SetValue(Microsoft.UI.Xaml.DependencyProperty dp, Object value);
        void ClearValue(Microsoft.UI.Xaml.DependencyProperty dp);
        Object ReadLocalValue(Microsoft.UI.Xaml.DependencyProperty dp);
        Object GetAnimationBaseValue(Microsoft.UI.Xaml.DependencyProperty dp);
        Int64 RegisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty dp, Microsoft.UI.Xaml.DependencyPropertyChangedCallback callback);
        void UnregisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty dp, Int64 token);
        Windows.UI.Core.CoreDispatcher Dispatcher{ get; };
        Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DependencyProperty
    {
        Microsoft.UI.Xaml.PropertyMetadata GetMetadata(Windows.UI.Xaml.Interop.TypeName forType);
        static Object UnsetValue{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Register(String name, Windows.UI.Xaml.Interop.TypeName propertyType, Windows.UI.Xaml.Interop.TypeName ownerType, Microsoft.UI.Xaml.PropertyMetadata typeMetadata);
        static Microsoft.UI.Xaml.DependencyProperty RegisterAttached(String name, Windows.UI.Xaml.Interop.TypeName propertyType, Windows.UI.Xaml.Interop.TypeName ownerType, Microsoft.UI.Xaml.PropertyMetadata defaultMetadata);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DependencyPropertyChangedEventArgs
    {
        Microsoft.UI.Xaml.DependencyProperty Property{ get; };
        Object OldValue{ get; };
        Object NewValue{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragOperationDeferral
    {
        void Complete();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragUI
    {
        [method_name("SetContentFromBitmapImage")] void SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage);
        [method_name("SetContentFromBitmapImageWithAnchorPoint")] void SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, Windows.Foundation.Point anchorPoint);
        [method_name("SetContentFromSoftwareBitmap")] void SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
        [method_name("SetContentFromSoftwareBitmapWithAnchorPoint")] void SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, Windows.Foundation.Point anchorPoint);
        void SetContentFromDataPackage();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragUIOverride
    {
        String Caption;
        Boolean IsContentVisible;
        Boolean IsCaptionVisible;
        Boolean IsGlyphVisible;
        void Clear();
        [method_name("SetContentFromBitmapImage")] void SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage);
        [method_name("SetContentFromBitmapImageWithAnchorPoint")] void SetContentFromBitmapImage(Microsoft.UI.Xaml.Media.Imaging.BitmapImage bitmapImage, Windows.Foundation.Point anchorPoint);
        [method_name("SetContentFromSoftwareBitmap")] void SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
        [method_name("SetContentFromSoftwareBitmapWithAnchorPoint")] void SetContentFromSoftwareBitmap(Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap, Windows.Foundation.Point anchorPoint);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EffectiveViewportChangedEventArgs
    {
        Windows.Foundation.Rect EffectiveViewport{ get; };
        Windows.Foundation.Rect MaxViewport{ get; };
        Double BringIntoViewDistanceX{ get; };
        Double BringIntoViewDistanceY{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ElementFactoryGetArgs
    {
        [method_name("CreateInstance")] ElementFactoryGetArgs();
        Object Data;
        Microsoft.UI.Xaml.UIElement Parent;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ElementFactoryRecycleArgs
    {
        [method_name("CreateInstance")] ElementFactoryRecycleArgs();
        Microsoft.UI.Xaml.UIElement Element;
        Microsoft.UI.Xaml.UIElement Parent;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass FrameworkView
        : [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.ApplicationModel.Core.IFrameworkView
    {
        FrameworkView();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_Xaml2018)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IInteractionBaseFactory")]
    unsealed runtimeclass InteractionBase
    {
        [method_name("CreateInstance")] protected InteractionBase();
        Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.RoutedEvent> GetSupportedEvents();
        overridable Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.RoutedEvent> GetSupportedEventsCore();
        overridable void OnKeyDown(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.KeyRoutedEventArgs args);
        overridable void OnKeyUp(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.KeyRoutedEventArgs args);
        overridable void OnPointerEntered(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerExited(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerMoved(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerPressed(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerReleased(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerCaptureLost(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerCanceled(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnPointerWheelChanged(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs args);
        overridable void OnTapped(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.TappedRoutedEventArgs args);
        overridable void OnDoubleTapped(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs args);
        overridable void OnHolding(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs args);
        overridable void OnRightTapped(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs args);
        overridable void OnDragEnter(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.DragEventArgs args);
        overridable void OnDragLeave(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.DragEventArgs args);
        overridable void OnDragOver(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.DragEventArgs args);
        overridable void OnDrop(Microsoft.UI.Xaml.UIElement sender, Microsoft.UI.Xaml.DragEventArgs args);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass PropertyMetadata
    {
        [method_name("CreateInstanceWithDefaultValue")] PropertyMetadata(Object defaultValue);
        [method_name("CreateInstanceWithDefaultValueAndCallback")] PropertyMetadata(Object defaultValue, Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback);
        Object DefaultValue{ get; };
        Microsoft.UI.Xaml.CreateDefaultValueCallback CreateDefaultValueCallback{ get; };
        [method_name("CreateWithDefaultValue"), default_overload] static Microsoft.UI.Xaml.PropertyMetadata Create(Object defaultValue);
        [method_name("CreateWithDefaultValueAndCallback"), default_overload] static Microsoft.UI.Xaml.PropertyMetadata Create(Object defaultValue, Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback);
        [method_name("CreateWithFactory")] static Microsoft.UI.Xaml.PropertyMetadata Create(Microsoft.UI.Xaml.CreateDefaultValueCallback createDefaultValueCallback);
        [method_name("CreateWithFactoryAndCallback")] static Microsoft.UI.Xaml.PropertyMetadata Create(Microsoft.UI.Xaml.CreateDefaultValueCallback createDefaultValueCallback, Microsoft.UI.Xaml.PropertyChangedCallback propertyChangedCallback);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    runtimeclass ResourceManagerRequestedEventArgs
    {
        Microsoft.Windows.ApplicationModel.Resources.IResourceManager CustomResourceManager;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass RoutedEvent
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass RoutedEventArgs
    {
        [method_name("CreateInstance")] RoutedEventArgs();
        Object OriginalSource{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ScalarTransition
    {
        [method_name("CreateInstance")] ScalarTransition();
        Windows.Foundation.TimeSpan Duration;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SetterBaseCollection
        : [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase>
    {
        SetterBaseCollection();
        Boolean IsSealed{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TargetPropertyPath
    {
        TargetPropertyPath();
        [method_name("CreateInstance")] TargetPropertyPath(Microsoft.UI.Xaml.DependencyProperty targetProperty);
        Microsoft.UI.Xaml.PropertyPath Path;
        Object Target;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TriggerActionCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerAction>
    {
        TriggerActionCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TriggerCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase>
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass UIElementWeakCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement>
    {
        [method_name("CreateInstance")] UIElementWeakCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass UnhandledExceptionEventArgs
    {
        HRESULT Exception{ get; };
        String Message{ get; };
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Vector3Transition
    {
        [method_name("CreateInstance")] Vector3Transition();
        Windows.Foundation.TimeSpan Duration;
        Microsoft.UI.Xaml.Vector3TransitionComponents Components;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass VisualStateChangedEventArgs
    {
        VisualStateChangedEventArgs();
        Microsoft.UI.Xaml.VisualState OldState;
        Microsoft.UI.Xaml.VisualState NewState;
        Microsoft.UI.Xaml.Controls.Control Control;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
    [feature(Feature_ExperimentalApi)]
    [webhosthidden]
    unsealed runtimeclass XamlIsland
        : [feature(Feature_ExperimentalApi)]
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        Windows.Foundation.IClosable
    {
        [method_name("CreateInstance")] XamlIsland();
        Microsoft.UI.Xaml.UIElement Content;
        Microsoft.UI.Content.ContentIsland ContentIsland{ get; };
        Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass XamlRoot
    {
        Microsoft.UI.Xaml.UIElement Content{ get; };
        Windows.Foundation.Size Size{ get; };
        Double RasterizationScale{ get; };
        Boolean IsHostVisible{ get; };
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot,Microsoft.UI.Xaml.XamlRootChangedEventArgs> Changed;
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        {
            Microsoft.UI.Content.ContentIslandEnvironment ContentIslandEnvironment{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlRootChangedEventArgs
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BringIntoViewRequestedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Microsoft.UI.Xaml.UIElement TargetElement;
        Boolean AnimationDesired;
        Windows.Foundation.Rect TargetRect;
        Double HorizontalAlignmentRatio{ get; };
        Double VerticalAlignmentRatio{ get; };
        Double HorizontalOffset;
        Double VerticalOffset;
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass DependencyObjectCollection
        : Microsoft.UI.Xaml.DependencyObject
        ,[default] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.DependencyObject>
    {
        [method_name("CreateInstance")] DependencyObjectCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Boolean Handled;
        Windows.ApplicationModel.DataTransfer.DataPackage Data;
        Windows.ApplicationModel.DataTransfer.DataPackageView DataView{ get; };
        Microsoft.UI.Xaml.DragUIOverride DragUIOverride{ get; };
        Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers Modifiers{ get; };
        Windows.ApplicationModel.DataTransfer.DataPackageOperation AcceptedOperation;
        Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations{ get; };
        Microsoft.UI.Xaml.DragOperationDeferral GetDeferral();
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragStartingEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Boolean Cancel;
        Windows.ApplicationModel.DataTransfer.DataPackage Data{ get; };
        Microsoft.UI.Xaml.DragUI DragUI{ get; };
        Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations;
        Microsoft.UI.Xaml.DragOperationDeferral GetDeferral();
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DropCompletedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Windows.ApplicationModel.DataTransfer.DataPackageOperation DropResult{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ExceptionRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        String ErrorMessage{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Template")]
    [constructor_name("Microsoft.UI.Xaml.IFrameworkTemplateFactory")]
    [default_interface]
    unsealed runtimeclass FrameworkTemplate
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected FrameworkTemplate();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PropertyPath
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] PropertyPath(String path);
        String Path{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ResourceDictionary
        : Microsoft.UI.Xaml.DependencyObject
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.Foundation.Collections.IMap<Object,Object>
    {
        [method_name("CreateInstance")] ResourceDictionary();
        Windows.Foundation.Uri Source;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary> MergedDictionaries{ get; };
        Windows.Foundation.Collections.IMap<Object,Object> ThemeDictionaries{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.ISetterBaseFactory")]
    unsealed runtimeclass SetterBase
        : Microsoft.UI.Xaml.DependencyObject
    {
        Boolean IsSealed{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SizeChangedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Windows.Foundation.Size PreviousSize{ get; };
        Windows.Foundation.Size NewSize{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IStateTriggerBaseFactory")]
    [default_interface]
    unsealed runtimeclass StateTriggerBase
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected StateTriggerBase();
        protected void SetActive(Boolean IsActive);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Setters")]
    runtimeclass Style
        : Microsoft.UI.Xaml.DependencyObject
    {
        Style();
        [method_name("CreateInstance")] Style(Windows.UI.Xaml.Interop.TypeName targetType);
        Boolean IsSealed{ get; };
        Microsoft.UI.Xaml.SetterBaseCollection Setters{ get; };
        Windows.UI.Xaml.Interop.TypeName TargetType;
        Microsoft.UI.Xaml.Style BasedOn;
        void Seal();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.ITriggerActionFactory")]
    [default_interface]
    unsealed runtimeclass TriggerAction
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.ITriggerBaseFactory")]
    [default_interface]
    unsealed runtimeclass TriggerBase
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IUIElementFactory")]
    unsealed runtimeclass UIElement
        : Microsoft.UI.Xaml.DependencyObject
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Composition.IAnimationObject
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Composition.IVisualElement
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Composition.IVisualElement2
    {
        Windows.Foundation.Size DesiredSize{ get; };
        Boolean AllowDrop;
        Double Opacity;
        Microsoft.UI.Xaml.Media.RectangleGeometry Clip;
        Microsoft.UI.Xaml.Media.Transform RenderTransform;
        Microsoft.UI.Xaml.Media.Projection Projection;
        Microsoft.UI.Xaml.Media.Media3D.Transform3D Transform3D;
        Windows.Foundation.Point RenderTransformOrigin;
        Boolean IsHitTestVisible;
        Microsoft.UI.Xaml.Visibility Visibility;
        Windows.Foundation.Size RenderSize{ get; };
        Boolean UseLayoutRounding;
        Microsoft.UI.Xaml.Media.Animation.TransitionCollection Transitions;
        Microsoft.UI.Xaml.Media.CacheMode CacheMode;
        Boolean IsTapEnabled;
        Boolean IsDoubleTapEnabled;
        Boolean CanDrag;
        Boolean IsRightTapEnabled;
        Boolean IsHoldingEnabled;
        Microsoft.UI.Xaml.Input.ManipulationModes ManipulationMode;
        Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.Pointer> PointerCaptures{ get; };
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase ContextFlyout;
        Microsoft.UI.Xaml.Media.ElementCompositeMode CompositeMode;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight> Lights{ get; };
        Boolean CanBeScrollAnchor;
        Boolean ExitDisplayModeOnAccessKeyInvoked;
        Boolean IsAccessKeyScope;
        Microsoft.UI.Xaml.DependencyObject AccessKeyScopeOwner;
        String AccessKey;
        Microsoft.UI.Xaml.Input.KeyTipPlacementMode KeyTipPlacementMode;
        Double KeyTipHorizontalOffset;
        Double KeyTipVerticalOffset;
        Microsoft.UI.Xaml.DependencyObject KeyTipTarget;
        Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode XYFocusKeyboardNavigation;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusUpNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusDownNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusLeftNavigationStrategy;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy XYFocusRightNavigationStrategy;
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator> KeyboardAccelerators{ get; };
        Microsoft.UI.Xaml.DependencyObject KeyboardAcceleratorPlacementTarget;
        Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode;
        Microsoft.UI.Xaml.ElementHighContrastAdjustment HighContrastAdjustment;
        Microsoft.UI.Xaml.Input.KeyboardNavigationMode TabFocusNavigation;
        Microsoft.UI.Xaml.ScalarTransition OpacityTransition;
        Windows.Foundation.Numerics.Vector3 Translation;
        Microsoft.UI.Xaml.Vector3Transition TranslationTransition;
        Single Rotation;
        Microsoft.UI.Xaml.ScalarTransition RotationTransition;
        Windows.Foundation.Numerics.Vector3 Scale;
        Microsoft.UI.Xaml.Vector3Transition ScaleTransition;
        Windows.Foundation.Numerics.Matrix4x4 TransformMatrix;
        Windows.Foundation.Numerics.Vector3 CenterPoint;
        Windows.Foundation.Numerics.Vector3 RotationAxis;
        Windows.Foundation.Numerics.Vector3 ActualOffset{ get; };
        Windows.Foundation.Numerics.Vector2 ActualSize{ get; };
        Microsoft.UI.Xaml.XamlRoot XamlRoot;
        Microsoft.UI.Xaml.Media.Shadow Shadow;
        Double RasterizationScale;
        Microsoft.UI.Xaml.FocusState FocusState{ get; };
        Boolean UseSystemFocusVisuals;
        Microsoft.UI.Xaml.DependencyObject XYFocusLeft;
        Microsoft.UI.Xaml.DependencyObject XYFocusRight;
        Microsoft.UI.Xaml.DependencyObject XYFocusUp;
        Microsoft.UI.Xaml.DependencyObject XYFocusDown;
        Boolean IsTabStop;
        Int32 TabIndex;
        event Microsoft.UI.Xaml.Input.KeyEventHandler KeyUp;
        event Microsoft.UI.Xaml.Input.KeyEventHandler KeyDown;
        event Microsoft.UI.Xaml.RoutedEventHandler GotFocus;
        event Microsoft.UI.Xaml.RoutedEventHandler LostFocus;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DragStartingEventArgs> DragStarting;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DropCompletedEventArgs> DropCompleted;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> CharacterReceived;
        event Microsoft.UI.Xaml.DragEventHandler DragEnter;
        event Microsoft.UI.Xaml.DragEventHandler DragLeave;
        event Microsoft.UI.Xaml.DragEventHandler DragOver;
        event Microsoft.UI.Xaml.DragEventHandler Drop;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerPressed;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerMoved;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerReleased;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerEntered;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerExited;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerCaptureLost;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerCanceled;
        event Microsoft.UI.Xaml.Input.PointerEventHandler PointerWheelChanged;
        event Microsoft.UI.Xaml.Input.TappedEventHandler Tapped;
        event Microsoft.UI.Xaml.Input.DoubleTappedEventHandler DoubleTapped;
        event Microsoft.UI.Xaml.Input.HoldingEventHandler Holding;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ContextRequestedEventArgs> ContextRequested;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.RoutedEventArgs> ContextCanceled;
        event Microsoft.UI.Xaml.Input.RightTappedEventHandler RightTapped;
        event Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler ManipulationStarting;
        event Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler ManipulationInertiaStarting;
        event Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler ManipulationStarted;
        event Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler ManipulationDelta;
        event Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler ManipulationCompleted;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> AccessKeyDisplayRequested;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> AccessKeyDisplayDismissed;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs> AccessKeyInvoked;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> ProcessKeyboardAccelerators;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.GettingFocusEventArgs> GettingFocus;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.LosingFocusEventArgs> LosingFocus;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> NoFocusCandidateFound;
        event Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyDown;
        event Microsoft.UI.Xaml.Input.KeyEventHandler PreviewKeyUp;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs> BringIntoViewRequested;
        void Measure(Windows.Foundation.Size availableSize);
        void Arrange(Windows.Foundation.Rect finalRect);
        Boolean CapturePointer(Microsoft.UI.Xaml.Input.Pointer value);
        void ReleasePointerCapture(Microsoft.UI.Xaml.Input.Pointer value);
        void ReleasePointerCaptures();
        void AddHandler(Microsoft.UI.Xaml.RoutedEvent routedEvent, Object handler, Boolean handledEventsToo);
        void RemoveHandler(Microsoft.UI.Xaml.RoutedEvent routedEvent, Object handler);
        Microsoft.UI.Xaml.Media.GeneralTransform TransformToVisual(Microsoft.UI.Xaml.UIElement visual);
        void InvalidateMeasure();
        void InvalidateArrange();
        void UpdateLayout();
        Boolean CancelDirectManipulations();
        Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartDragAsync(Microsoft.UI.Input.PointerPoint pointerPoint);
        [method_name("StartBringIntoView")] void StartBringIntoView();
        [method_name("StartBringIntoViewWithOptions")] void StartBringIntoView(Microsoft.UI.Xaml.BringIntoViewOptions options);
        void TryInvokeKeyboardAccelerator(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        Boolean Focus(Microsoft.UI.Xaml.FocusState value);
        void StartAnimation(Microsoft.UI.Composition.ICompositionAnimationBase animation);
        void StopAnimation(Microsoft.UI.Composition.ICompositionAnimationBase animation);
        static Microsoft.UI.Xaml.RoutedEvent KeyDownEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent KeyUpEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerEnteredEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerPressedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerMovedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerReleasedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerExitedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerCaptureLostEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerCanceledEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PointerWheelChangedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent TappedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent DoubleTappedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent HoldingEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent RightTappedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ManipulationStartingEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ManipulationInertiaStartingEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ManipulationStartedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ManipulationDeltaEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ManipulationCompletedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent DragEnterEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent DragLeaveEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent DragOverEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent DropEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent GettingFocusEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent LosingFocusEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent NoFocusCandidateFoundEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PreviewKeyDownEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent CharacterReceivedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent PreviewKeyUpEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent BringIntoViewRequestedEvent{ get; };
        static Microsoft.UI.Xaml.RoutedEvent ContextRequestedEvent{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AllowDropProperty{ get; };
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty OpacityProperty{ get; };
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ClipProperty{ get; };
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RenderTransformProperty{ get; };
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ProjectionProperty{ get; };
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty Transform3DProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RenderTransformOriginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsHitTestVisibleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VisibilityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty UseLayoutRoundingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TransitionsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CacheModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTapEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsDoubleTapEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CanDragProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsRightTapEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsHoldingEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ManipulationModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointerCapturesProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContextFlyoutProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CompositeModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CanBeScrollAnchorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExitDisplayModeOnAccessKeyInvokedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsAccessKeyScopeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AccessKeyScopeOwnerProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AccessKeyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTipPlacementModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTipHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTipVerticalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTipTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusKeyboardNavigationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusUpNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusDownNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusLeftNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusRightNavigationStrategyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorPlacementTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyboardAcceleratorPlacementModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HighContrastAdjustmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TabFocusNavigationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ShadowProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusStateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty UseSystemFocusVisualsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusLeftProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusRightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusUpProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty XYFocusDownProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTabStopProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TabIndexProperty{ get; };
        static Boolean TryStartDirectManipulation(Microsoft.UI.Xaml.Input.Pointer value);
        static void RegisterAsScrollPort(Microsoft.UI.Xaml.UIElement element);
        protected Microsoft.UI.Input.InputCursor ProtectedCursor;
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer();
        overridable void OnDisconnectVisualChildren();
        overridable Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point> > FindSubElementsForTouchTargeting(Windows.Foundation.Point point, Windows.Foundation.Rect boundingRect);
        overridable Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject> GetChildrenInTabFocusOrder();
        overridable void OnKeyboardAcceleratorInvoked(Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs args);
        overridable void OnProcessKeyboardAccelerators(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        overridable void OnBringIntoViewRequested(Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs e);
        overridable void PopulatePropertyInfoOverride(String propertyName, Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_Xaml2018)]
        [interface_name("Microsoft.UI.Xaml.IUIElementFeature_Xaml2018")]
        {
            Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.InteractionBase> Interactions{ get; };
        }
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_XamlMotionSystemHoldbacks)]
        [interface_name("Microsoft.UI.Xaml.IUIElementFeature_XamlMotionSystemHoldbacks")]
        {
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> TranslationChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> RotationChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> ScaleChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> TransformMatrixChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> CenterPointChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Object> RotationAxisChanged;
            event Windows.Foundation.EventHandler<Object> Shown;
            event Windows.Foundation.EventHandler<Object> Hidden;
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Storyboard")]
    runtimeclass VisualState
        : Microsoft.UI.Xaml.DependencyObject
    {
        VisualState();
        String Name{ get; };
        Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard;
        Microsoft.UI.Xaml.SetterBaseCollection Setters{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.StateTriggerBase> StateTriggers{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("States")]
    runtimeclass VisualStateGroup
        : Microsoft.UI.Xaml.DependencyObject
    {
        VisualStateGroup();
        String Name{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualTransition> Transitions{ get; };
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualState> States{ get; };
        Microsoft.UI.Xaml.VisualState CurrentState{ get; };
        event Microsoft.UI.Xaml.VisualStateChangedEventHandler CurrentStateChanged;
        event Microsoft.UI.Xaml.VisualStateChangedEventHandler CurrentStateChanging;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Storyboard")]
    unsealed runtimeclass VisualTransition
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] VisualTransition();
        Microsoft.UI.Xaml.Duration GeneratedDuration;
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase GeneratedEasingFunction;
        String To;
        String From;
        Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass AdaptiveTrigger
        : Microsoft.UI.Xaml.StateTriggerBase
    {
        [method_name("CreateInstance")] AdaptiveTrigger();
        Double MinWindowWidth;
        Double MinWindowHeight;
        static Microsoft.UI.Xaml.DependencyProperty MinWindowWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinWindowHeightProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ColorPaletteResources
        : Microsoft.UI.Xaml.ResourceDictionary
    {
        [method_name("CreateInstance")] ColorPaletteResources();
        Windows.Foundation.IReference<Windows.UI.Color> AltHigh;
        Windows.Foundation.IReference<Windows.UI.Color> AltLow;
        Windows.Foundation.IReference<Windows.UI.Color> AltMedium;
        Windows.Foundation.IReference<Windows.UI.Color> AltMediumHigh;
        Windows.Foundation.IReference<Windows.UI.Color> AltMediumLow;
        Windows.Foundation.IReference<Windows.UI.Color> BaseHigh;
        Windows.Foundation.IReference<Windows.UI.Color> BaseLow;
        Windows.Foundation.IReference<Windows.UI.Color> BaseMedium;
        Windows.Foundation.IReference<Windows.UI.Color> BaseMediumHigh;
        Windows.Foundation.IReference<Windows.UI.Color> BaseMediumLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeAltLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeBlackHigh;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeBlackLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeBlackMediumLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeBlackMedium;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeDisabledHigh;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeDisabledLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeHigh;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeMedium;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeMediumLow;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeWhite;
        Windows.Foundation.IReference<Windows.UI.Color> ChromeGray;
        Windows.Foundation.IReference<Windows.UI.Color> ListLow;
        Windows.Foundation.IReference<Windows.UI.Color> ListMedium;
        Windows.Foundation.IReference<Windows.UI.Color> ErrorText;
        Windows.Foundation.IReference<Windows.UI.Color> Accent;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Actions")]
    runtimeclass EventTrigger
        : Microsoft.UI.Xaml.TriggerBase
    {
        EventTrigger();
        Microsoft.UI.Xaml.RoutedEvent RoutedEvent;
        Microsoft.UI.Xaml.TriggerActionCollection Actions{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IFrameworkElementFactory")]
    unsealed runtimeclass FrameworkElement
        : Microsoft.UI.Xaml.UIElement
    {
        [method_name("CreateInstance")] protected FrameworkElement();
        Microsoft.UI.Xaml.TriggerCollection Triggers{ get; };
        Microsoft.UI.Xaml.ResourceDictionary Resources;
        Object Tag;
        String Language;
        Double ActualWidth{ get; };
        Double ActualHeight{ get; };
        Double Width;
        Double Height;
        Double MinWidth;
        Double MaxWidth;
        Double MinHeight;
        Double MaxHeight;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalAlignment;
        Microsoft.UI.Xaml.Thickness Margin;
        String Name;
        Windows.Foundation.Uri BaseUri{ get; };
        Object DataContext;
        Boolean AllowFocusOnInteraction;
        Microsoft.UI.Xaml.Thickness FocusVisualMargin;
        Microsoft.UI.Xaml.Thickness FocusVisualSecondaryThickness;
        Microsoft.UI.Xaml.Thickness FocusVisualPrimaryThickness;
        Microsoft.UI.Xaml.Media.Brush FocusVisualSecondaryBrush;
        Microsoft.UI.Xaml.Media.Brush FocusVisualPrimaryBrush;
        Boolean AllowFocusWhenDisabled;
        Microsoft.UI.Xaml.Style Style;
        Microsoft.UI.Xaml.DependencyObject Parent{ get; };
        Microsoft.UI.Xaml.FlowDirection FlowDirection;
        Microsoft.UI.Xaml.ElementTheme RequestedTheme;
        Boolean IsLoaded{ get; };
        Microsoft.UI.Xaml.ElementTheme ActualTheme{ get; };
        event Microsoft.UI.Xaml.RoutedEventHandler Loaded;
        event Microsoft.UI.Xaml.RoutedEventHandler Unloaded;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.DataContextChangedEventArgs> DataContextChanged;
        event Microsoft.UI.Xaml.SizeChangedEventHandler SizeChanged;
        event Windows.Foundation.EventHandler<Object> LayoutUpdated;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Object> Loading;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Object> ActualThemeChanged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs> EffectiveViewportChanged;
        Object FindName(String name);
        void SetBinding(Microsoft.UI.Xaml.DependencyProperty dp, Microsoft.UI.Xaml.Data.BindingBase binding);
        Microsoft.UI.Xaml.Data.BindingExpression GetBindingExpression(Microsoft.UI.Xaml.DependencyProperty dp);
        static Microsoft.UI.Xaml.DependencyProperty TagProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LanguageProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty WidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty NameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DataContextProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AllowFocusOnInteractionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusVisualMarginProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusVisualSecondaryThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusVisualPrimaryThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusVisualSecondaryBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FocusVisualPrimaryBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AllowFocusWhenDisabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FlowDirectionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RequestedThemeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualThemeProperty{ get; };
        static void DeferTree(Microsoft.UI.Xaml.DependencyObject element);
        protected void InvalidateViewport();
        overridable Windows.Foundation.Size MeasureOverride(Windows.Foundation.Size availableSize);
        overridable Windows.Foundation.Size ArrangeOverride(Windows.Foundation.Size finalSize);
        overridable void OnApplyTemplate();
        overridable Boolean GoToElementStateCore(String stateName, Boolean useTransitions);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_Xaml2018)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.IFrameworkElementExFactory")]
    unsealed runtimeclass FrameworkElementEx
        : Microsoft.UI.Xaml.UIElement
    {
        [method_name("CreateInstance")] protected FrameworkElementEx();
        Double ActualWidth{ get; };
        Double ActualHeight{ get; };
        Double Width;
        Double Height;
        Double MinWidth;
        Double MaxWidth;
        Double MinHeight;
        Double MaxHeight;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalAlignment;
        Microsoft.UI.Xaml.Thickness Margin;
        static Microsoft.UI.Xaml.DependencyProperty ActualWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty WidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MarginProperty{ get; };
        protected Microsoft.UI.Xaml.Controls.UIElementCollection Children{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass MediaFailedRoutedEventArgs
        : Microsoft.UI.Xaml.ExceptionRoutedEventArgs
    {
        String ErrorTrace{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_Xaml2018)]
    [webhosthidden]
    [contentproperty("Children")]
    unsealed runtimeclass PanelEx
        : Microsoft.UI.Xaml.UIElement
    {
        [method_name("CreateInstance")] PanelEx();
        Double ActualWidth{ get; };
        Double ActualHeight{ get; };
        Double Width;
        Double Height;
        Double MinWidth;
        Double MaxWidth;
        Double MinHeight;
        Double MaxHeight;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalAlignment;
        Microsoft.UI.Xaml.Thickness Margin;
        Microsoft.UI.Xaml.Controls.UIElementCollection Children{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ActualHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty WidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MinHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MaxHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MarginProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Setter
        : Microsoft.UI.Xaml.SetterBase
    {
        Setter();
        [return_name("instance")] [method_name("CreateInstance")] Setter(Microsoft.UI.Xaml.DependencyProperty targetProperty, Object value);
        Microsoft.UI.Xaml.DependencyProperty Property;
        Object Value;
        Microsoft.UI.Xaml.TargetPropertyPath Target;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass StateTrigger
        : Microsoft.UI.Xaml.StateTriggerBase
    {
        StateTrigger();
        Boolean IsActive;
        static Microsoft.UI.Xaml.DependencyProperty IsActiveProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Media
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BrushCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Brush>
    {
        BrushCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass CompositionTarget
    {
        static event Windows.Foundation.EventHandler<Object> Rendering;
        static event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Media.RenderedEventArgs> Rendered;
        static event Windows.Foundation.EventHandler<Object> SurfaceContentsLost;
        static Microsoft.UI.Composition.Compositor GetCompositorForCurrentThread();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DoubleCollection
        :[default] Windows.Foundation.Collections.IVector<Double>
    {
        DoubleCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FontFamily
    {
        [method_name("CreateInstanceWithName")] FontFamily(String familyName);
        String Source{ get; };
        static Microsoft.UI.Xaml.Media.FontFamily XamlAutoFontFamily{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
    [webhosthidden]
    runtimeclass MediaTransportControlsThumbnailRequestedEventArgs
    {
        void SetThumbnailImage(Windows.Storage.Streams.IInputStream source);
        Windows.Foundation.Deferral GetDeferral();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointCollection
        :[default] Windows.Foundation.Collections.IVector<Windows.Foundation.Point>
    {
        PointCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RenderedEventArgs
    {
        Windows.Foundation.TimeSpan FrameDuration{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RenderingEventArgs
    {
        Windows.Foundation.TimeSpan RenderingTime{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TransformCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Transform>
    {
        TransformCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IBrushFactory")]
    unsealed runtimeclass Brush
        : Microsoft.UI.Xaml.DependencyObject
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Composition.IAnimationObject
    {
        [method_name("CreateInstance")] protected Brush();
        Double Opacity;
        Microsoft.UI.Xaml.Media.Transform Transform;
        Microsoft.UI.Xaml.Media.Transform RelativeTransform;
        static Microsoft.UI.Xaml.DependencyProperty OpacityProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TransformProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RelativeTransformProperty{ get; };
        overridable void PopulatePropertyInfoOverride(String propertyName, Microsoft.UI.Composition.AnimationPropertyInfo animationPropertyInfo);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_XamlMotionSystemHoldbacks)]
        [interface_name("Microsoft.UI.Xaml.Media.IBrushFeature_XamlMotionSystemHoldbacks")]
        {
            void StartAnimation(Microsoft.UI.Composition.ICompositionAnimationBase animation);
            void StopAnimation(Microsoft.UI.Composition.ICompositionAnimationBase animation);
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.ICacheModeFactory")]
    [default_interface]
    unsealed runtimeclass CacheMode
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected CacheMode();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IGeneralTransformFactory")]
    unsealed runtimeclass GeneralTransform
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected GeneralTransform();
        Microsoft.UI.Xaml.Media.GeneralTransform Inverse{ get; };
        Windows.Foundation.Point TransformPoint(Windows.Foundation.Point point);
        [return_name("returnValue")] Boolean TryTransform(Windows.Foundation.Point inPoint, out Windows.Foundation.Point outPoint);
        Windows.Foundation.Rect TransformBounds(Windows.Foundation.Rect rect);
        overridable Microsoft.UI.Xaml.Media.GeneralTransform InverseCore{ get; };
        [return_name("returnValue")] overridable Boolean TryTransformCore(Windows.Foundation.Point inPoint, out Windows.Foundation.Point outPoint);
        overridable Windows.Foundation.Rect TransformBoundsCore(Windows.Foundation.Rect rect);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IGeometryFactory")]
    unsealed runtimeclass Geometry
        : Microsoft.UI.Xaml.DependencyObject
    {
        Microsoft.UI.Xaml.Media.Transform Transform;
        Windows.Foundation.Rect Bounds{ get; };
        static Microsoft.UI.Xaml.Media.Geometry Empty{ get; };
        static Double StandardFlatteningTolerance{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TransformProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IImageSourceFactory")]
    [default_interface]
    unsealed runtimeclass ImageSource
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IPathSegmentFactory")]
    [default_interface]
    unsealed runtimeclass PathSegment
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IProjectionFactory")]
    [default_interface]
    unsealed runtimeclass Projection
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected Projection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IShadowFactory")]
    [default_interface]
    unsealed runtimeclass Shadow
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 4)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.ISystemBackdropFactory")]
    unsealed runtimeclass SystemBackdrop
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected SystemBackdrop();
        Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration GetDefaultSystemBackdropConfiguration(Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop target, Microsoft.UI.Xaml.XamlRoot xamlRoot);
        overridable void OnTargetConnected(Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop connectedTarget, Microsoft.UI.Xaml.XamlRoot xamlRoot);
        overridable void OnTargetDisconnected(Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop disconnectedTarget);
        overridable void OnDefaultSystemBackdropConfigurationChanged(Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop target, Microsoft.UI.Xaml.XamlRoot xamlRoot);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass XamlLight
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] XamlLight();
        static void AddTargetElement(String lightId, Microsoft.UI.Xaml.UIElement element);
        static void RemoveTargetElement(String lightId, Microsoft.UI.Xaml.UIElement element);
        static void AddTargetBrush(String lightId, Microsoft.UI.Xaml.Media.Brush brush);
        static void RemoveTargetBrush(String lightId, Microsoft.UI.Xaml.Media.Brush brush);
        protected Microsoft.UI.Composition.CompositionLight CompositionLight;
        overridable String GetId();
        overridable void OnConnected(Microsoft.UI.Xaml.UIElement newElement);
        overridable void OnDisconnected(Microsoft.UI.Xaml.UIElement oldElement);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass BitmapCache
        : Microsoft.UI.Xaml.Media.CacheMode
    {
        BitmapCache();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("ProjectionMatrix")]
    runtimeclass Matrix3DProjection
        : Microsoft.UI.Xaml.Media.Projection
    {
        Matrix3DProjection();
        Microsoft.UI.Xaml.Media.Media3D.Matrix3D ProjectionMatrix;
        static Microsoft.UI.Xaml.DependencyProperty ProjectionMatrixProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PlaneProjection
        : Microsoft.UI.Xaml.Media.Projection
    {
        PlaneProjection();
        Double LocalOffsetX;
        Double LocalOffsetY;
        Double LocalOffsetZ;
        Double RotationX;
        Double RotationY;
        Double RotationZ;
        Double CenterOfRotationX;
        Double CenterOfRotationY;
        Double CenterOfRotationZ;
        Double GlobalOffsetX;
        Double GlobalOffsetY;
        Double GlobalOffsetZ;
        Microsoft.UI.Xaml.Media.Media3D.Matrix3D ProjectionMatrix{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty LocalOffsetXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty LocalOffsetYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty LocalOffsetZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterOfRotationXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterOfRotationYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterOfRotationZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty GlobalOffsetXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty GlobalOffsetYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty GlobalOffsetZProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ProjectionMatrixProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RectangleGeometry
        : Microsoft.UI.Xaml.Media.Geometry
    {
        RectangleGeometry();
        Windows.Foundation.Rect Rect;
        static Microsoft.UI.Xaml.DependencyProperty RectProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Color")]
    runtimeclass SolidColorBrush
        : Microsoft.UI.Xaml.Media.Brush
    {
        SolidColorBrush();
        [method_name("CreateInstanceWithColor")] SolidColorBrush(Windows.UI.Color color);
        Windows.UI.Color Color;
        [independentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ColorProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ThemeShadow
        : Microsoft.UI.Xaml.Media.Shadow
    {
        [method_name("CreateInstance")] ThemeShadow();
        Microsoft.UI.Xaml.UIElementWeakCollection Receivers{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.ITransformFactory")]
    [default_interface]
    unsealed runtimeclass Transform
        : Microsoft.UI.Xaml.Media.GeneralTransform
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CompositeTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        CompositeTransform();
        Double CenterX;
        Double CenterY;
        Double ScaleX;
        Double ScaleY;
        Double SkewX;
        Double SkewY;
        Double Rotation;
        Double TranslateX;
        Double TranslateY;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty SkewXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty SkewYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TranslateXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TranslateYProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass MatrixTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        MatrixTransform();
        Microsoft.UI.Xaml.Media.Matrix Matrix;
        static Microsoft.UI.Xaml.DependencyProperty MatrixProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RotateTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        RotateTransform();
        Double CenterX;
        Double CenterY;
        Double Angle;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty AngleProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ScaleTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        ScaleTransform();
        Double CenterX;
        Double CenterY;
        Double ScaleX;
        Double ScaleY;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleYProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SkewTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        SkewTransform();
        Double CenterX;
        Double CenterY;
        Double AngleX;
        Double AngleY;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty AngleXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty AngleYProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Children")]
    runtimeclass TransformGroup
        : Microsoft.UI.Xaml.Media.Transform
    {
        TransformGroup();
        Microsoft.UI.Xaml.Media.TransformCollection Children;
        Microsoft.UI.Xaml.Media.Matrix Value{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ChildrenProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TranslateTransform
        : Microsoft.UI.Xaml.Media.Transform
    {
        TranslateTransform();
        Double X;
        Double Y;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty XProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty YProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Media.Animation
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DoubleKeyFrameCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>
    {
        DoubleKeyFrameCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ObjectKeyFrameCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>
    {
        ObjectKeyFrameCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TimelineCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Timeline>
    {
        TimelineCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TransitionCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Transition>
    {
        TransitionCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactory")]
    unsealed runtimeclass DoubleKeyFrame
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected DoubleKeyFrame();
        Double Value;
        Microsoft.UI.Xaml.Media.Animation.KeyTime KeyTime;
        static Microsoft.UI.Xaml.DependencyProperty ValueProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactory")]
    unsealed runtimeclass EasingFunctionBase
        : Microsoft.UI.Xaml.DependencyObject
    {
        Microsoft.UI.Xaml.Media.Animation.EasingMode EasingMode;
        Double Ease(Double normalizedTime);
        static Microsoft.UI.Xaml.DependencyProperty EasingModeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass KeySpline
        : Microsoft.UI.Xaml.DependencyObject
    {
        KeySpline();
        Windows.Foundation.Point ControlPoint1;
        Windows.Foundation.Point ControlPoint2;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactory")]
    [default_interface]
    unsealed runtimeclass NavigationTransitionInfo
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected NavigationTransitionInfo();
        overridable String GetNavigationStateCore();
        overridable void SetNavigationStateCore(String navigationState);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactory")]
    unsealed runtimeclass ObjectKeyFrame
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected ObjectKeyFrame();
        Object Value;
        Microsoft.UI.Xaml.Media.Animation.KeyTime KeyTime;
        static Microsoft.UI.Xaml.DependencyProperty ValueProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.ITimelineFactory")]
    unsealed runtimeclass Timeline
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected Timeline();
        Boolean AutoReverse;
        Windows.Foundation.IReference<Windows.Foundation.TimeSpan> BeginTime;
        Microsoft.UI.Xaml.Duration Duration;
        Double SpeedRatio;
        Microsoft.UI.Xaml.Media.Animation.FillBehavior FillBehavior;
        Microsoft.UI.Xaml.Media.Animation.RepeatBehavior RepeatBehavior;
        event Windows.Foundation.EventHandler<Object> Completed;
        static Boolean AllowDependentAnimations;
        static Microsoft.UI.Xaml.DependencyProperty AutoReverseProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BeginTimeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DurationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SpeedRatioProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FillBehaviorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RepeatBehaviorProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass Transition
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AddDeleteThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        AddDeleteThemeTransition();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BackEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        BackEase();
        Double Amplitude;
        static Microsoft.UI.Xaml.DependencyProperty AmplitudeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Storyboard")]
    runtimeclass BeginStoryboard
        : Microsoft.UI.Xaml.TriggerAction
    {
        BeginStoryboard();
        Microsoft.UI.Xaml.Media.Animation.Storyboard Storyboard;
        static Microsoft.UI.Xaml.DependencyProperty StoryboardProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BounceEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        BounceEase();
        Int32 Bounces;
        Double Bounciness;
        static Microsoft.UI.Xaml.DependencyProperty BouncesProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BouncinessProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass CircleEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        CircleEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ColorAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        ColorAnimation();
        Windows.Foundation.IReference<Windows.UI.Color> From;
        Windows.Foundation.IReference<Windows.UI.Color> To;
        Windows.Foundation.IReference<Windows.UI.Color> By;
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty FromProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ByProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContentThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        ContentThemeTransition();
        Double HorizontalOffset;
        Double VerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass CubicEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        CubicEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DiscreteDoubleKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame
    {
        DiscreteDoubleKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DiscreteObjectKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame
    {
        DiscreteObjectKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DoubleAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DoubleAnimation();
        Windows.Foundation.IReference<Double> From;
        Windows.Foundation.IReference<Double> To;
        Windows.Foundation.IReference<Double> By;
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty FromProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ByProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("KeyFrames")]
    runtimeclass DoubleAnimationUsingKeyFrames
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DoubleAnimationUsingKeyFrames();
        Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection KeyFrames{ get; };
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EasingDoubleKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame
    {
        EasingDoubleKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EdgeUIThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        EdgeUIThemeTransition();
        Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge;
        static Microsoft.UI.Xaml.DependencyProperty EdgeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ElasticEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        ElasticEase();
        Int32 Oscillations;
        Double Springiness;
        static Microsoft.UI.Xaml.DependencyProperty OscillationsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SpringinessProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EntranceThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        EntranceThemeTransition();
        Double FromHorizontalOffset;
        Double FromVerticalOffset;
        Boolean IsStaggeringEnabled;
        static Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ExponentialEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        ExponentialEase();
        Double Exponent;
        static Microsoft.UI.Xaml.DependencyProperty ExponentProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass LinearDoubleKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame
    {
        LinearDoubleKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("KeyFrames")]
    runtimeclass ObjectAnimationUsingKeyFrames
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        ObjectAnimationUsingKeyFrames();
        Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection KeyFrames{ get; };
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PaneThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        PaneThemeTransition();
        Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge;
        static Microsoft.UI.Xaml.DependencyProperty EdgeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PointAnimation();
        Windows.Foundation.IReference<Windows.Foundation.Point> From;
        Windows.Foundation.IReference<Windows.Foundation.Point> To;
        Windows.Foundation.IReference<Windows.Foundation.Point> By;
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty FromProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ByProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PopupThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        PopupThemeTransition();
        Double FromHorizontalOffset;
        Double FromVerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PowerEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        PowerEase();
        Double Power;
        static Microsoft.UI.Xaml.DependencyProperty PowerProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass QuadraticEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        QuadraticEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass QuarticEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        QuarticEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass QuinticEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        QuinticEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ReorderThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        ReorderThemeTransition();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RepositionThemeTransition
        : Microsoft.UI.Xaml.Media.Animation.Transition
    {
        RepositionThemeTransition();
        Boolean IsStaggeringEnabled;
        static Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SineEase
        : Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase
    {
        SineEase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplineDoubleKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame
    {
        SplineDoubleKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.KeySpline KeySpline;
        static Microsoft.UI.Xaml.DependencyProperty KeySplineProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Children")]
    runtimeclass Storyboard
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        Storyboard();
        Microsoft.UI.Xaml.Media.Animation.TimelineCollection Children{ get; };
        void Seek(Windows.Foundation.TimeSpan offset);
        void Stop();
        void Begin();
        void Pause();
        void Resume();
        Microsoft.UI.Xaml.Media.Animation.ClockState GetCurrentState();
        Windows.Foundation.TimeSpan GetCurrentTime();
        void SeekAlignedToLastTick(Windows.Foundation.TimeSpan offset);
        void SkipToFill();
        static Microsoft.UI.Xaml.DependencyProperty TargetPropertyProperty{ get; };
        static String GetTargetProperty(Microsoft.UI.Xaml.Media.Animation.Timeline element);
        static void SetTargetProperty(Microsoft.UI.Xaml.Media.Animation.Timeline element, String path);
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static String GetTargetName(Microsoft.UI.Xaml.Media.Animation.Timeline element);
        static void SetTargetName(Microsoft.UI.Xaml.Media.Animation.Timeline element, String name);
        static void SetTarget(Microsoft.UI.Xaml.Media.Animation.Timeline timeline, Microsoft.UI.Xaml.DependencyObject target);
    };

}
namespace Microsoft.UI.Xaml.Input
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [uuid(e5af3542-ca67-4081-995b-709dd13792df)]
    [webhosthidden]
    interface ICommand 
    {
        event Windows.Foundation.EventHandler<Object> CanExecuteChanged;
        Boolean CanExecute(Object parameter);
        void Execute(Object parameter);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AccessKeyDisplayDismissedEventArgs
    {
        AccessKeyDisplayDismissedEventArgs();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AccessKeyDisplayRequestedEventArgs
    {
        AccessKeyDisplayRequestedEventArgs();
        String PressedKeys{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AccessKeyInvokedEventArgs
    {
        AccessKeyInvokedEventArgs();
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AccessKeyManager
    {
        static Boolean IsDisplayModeEnabled{ get; };
        static Boolean AreKeyTipsEnabled;
        static event Windows.Foundation.TypedEventHandler<Object,Object> IsDisplayModeEnabledChanged;
        static void ExitDisplayMode();
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        {
            [method_name("EnterDisplayModeForXamlRoot")] static void EnterDisplayMode(Microsoft.UI.Xaml.XamlRoot XamlRoot);
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass InertiaExpansionBehavior
    {
        Double DesiredDeceleration;
        Double DesiredExpansion;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass InertiaRotationBehavior
    {
        Double DesiredDeceleration;
        Double DesiredRotation;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass InertiaTranslationBehavior
    {
        Double DesiredDeceleration;
        Double DesiredDisplacement;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass KeyboardAcceleratorInvokedEventArgs
    {
        Boolean Handled;
        Microsoft.UI.Xaml.DependencyObject Element{ get; };
        Microsoft.UI.Xaml.Input.KeyboardAccelerator KeyboardAccelerator{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ManipulationPivot
    {
        ManipulationPivot();
        [method_name("CreateInstanceWithCenterAndRadius")] ManipulationPivot(Windows.Foundation.Point center, Double radius);
        Windows.Foundation.Point Center;
        Double Radius;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Pointer
    {
        UInt32 PointerId{ get; };
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Boolean IsInContact{ get; };
        Boolean IsInRange{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ProcessKeyboardAcceleratorEventArgs
    {
        Windows.System.VirtualKey Key{ get; };
        Windows.System.VirtualKeyModifiers Modifiers{ get; };
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CharacterReceivedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Char Character{ get; };
        Windows.UI.Core.CorePhysicalKeyStatus KeyStatus{ get; };
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ContextRequestedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        ContextRequestedEventArgs();
        Boolean Handled;
        [return_name("returnValue")] Boolean TryGetPosition(Microsoft.UI.Xaml.UIElement relativeTo, out Windows.Foundation.Point point);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DoubleTappedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        DoubleTappedRoutedEventArgs();
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Boolean Handled;
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass GettingFocusEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject OldFocusedElement{ get; };
        Microsoft.UI.Xaml.DependencyObject NewFocusedElement;
        Microsoft.UI.Xaml.FocusState FocusState{ get; };
        Microsoft.UI.Xaml.Input.FocusNavigationDirection Direction{ get; };
        Boolean Handled;
        Microsoft.UI.Xaml.Input.FocusInputDeviceKind InputDevice{ get; };
        Boolean Cancel;
        Guid CorrelationId{ get; };
        Boolean TryCancel();
        Boolean TrySetNewFocusedElement(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass HoldingRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        HoldingRoutedEventArgs();
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Microsoft.UI.Input.HoldingState HoldingState{ get; };
        Boolean Handled;
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass InputScope
        : Microsoft.UI.Xaml.DependencyObject
    {
        InputScope();
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.InputScopeName> Names{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("NameValue")]
    runtimeclass InputScopeName
        : Microsoft.UI.Xaml.DependencyObject
    {
        InputScopeName();
        [method_name("CreateInstance")] InputScopeName(Microsoft.UI.Xaml.Input.InputScopeNameValue nameValue);
        Microsoft.UI.Xaml.Input.InputScopeNameValue NameValue;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass KeyboardAccelerator
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] KeyboardAccelerator();
        Windows.System.VirtualKey Key;
        Windows.System.VirtualKeyModifiers Modifiers;
        Boolean IsEnabled;
        Microsoft.UI.Xaml.DependencyObject ScopeOwner;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator,Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs> Invoked;
        static Microsoft.UI.Xaml.DependencyProperty KeyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ModifiersProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ScopeOwnerProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass KeyRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Windows.System.VirtualKey Key{ get; };
        Windows.UI.Core.CorePhysicalKeyStatus KeyStatus{ get; };
        Boolean Handled;
        Windows.System.VirtualKey OriginalKey{ get; };
        String DeviceId{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LosingFocusEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject OldFocusedElement{ get; };
        Microsoft.UI.Xaml.DependencyObject NewFocusedElement;
        Microsoft.UI.Xaml.FocusState FocusState{ get; };
        Microsoft.UI.Xaml.Input.FocusNavigationDirection Direction{ get; };
        Boolean Handled;
        Microsoft.UI.Xaml.Input.FocusInputDeviceKind InputDevice{ get; };
        Boolean Cancel;
        Guid CorrelationId{ get; };
        Boolean TryCancel();
        Boolean TrySetNewFocusedElement(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ManipulationCompletedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        ManipulationCompletedRoutedEventArgs();
        Microsoft.UI.Xaml.UIElement Container{ get; };
        Windows.Foundation.Point Position{ get; };
        Boolean IsInertial{ get; };
        Microsoft.UI.Input.ManipulationDelta Cumulative{ get; };
        Microsoft.UI.Input.ManipulationVelocities Velocities{ get; };
        Boolean Handled;
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ManipulationDeltaRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        ManipulationDeltaRoutedEventArgs();
        Microsoft.UI.Xaml.UIElement Container{ get; };
        Windows.Foundation.Point Position{ get; };
        Boolean IsInertial{ get; };
        Microsoft.UI.Input.ManipulationDelta Delta{ get; };
        Microsoft.UI.Input.ManipulationDelta Cumulative{ get; };
        Microsoft.UI.Input.ManipulationVelocities Velocities{ get; };
        Boolean Handled;
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        void Complete();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ManipulationInertiaStartingRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        ManipulationInertiaStartingRoutedEventArgs();
        Microsoft.UI.Xaml.UIElement Container{ get; };
        Microsoft.UI.Xaml.Input.InertiaExpansionBehavior ExpansionBehavior;
        Microsoft.UI.Xaml.Input.InertiaRotationBehavior RotationBehavior;
        Microsoft.UI.Xaml.Input.InertiaTranslationBehavior TranslationBehavior;
        Boolean Handled;
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Microsoft.UI.Input.ManipulationDelta Delta{ get; };
        Microsoft.UI.Input.ManipulationDelta Cumulative{ get; };
        Microsoft.UI.Input.ManipulationVelocities Velocities{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ManipulationStartedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        [method_name("CreateInstance")] ManipulationStartedRoutedEventArgs();
        Microsoft.UI.Xaml.UIElement Container{ get; };
        Windows.Foundation.Point Position{ get; };
        Boolean Handled;
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Microsoft.UI.Input.ManipulationDelta Cumulative{ get; };
        void Complete();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ManipulationStartingRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        ManipulationStartingRoutedEventArgs();
        Microsoft.UI.Xaml.Input.ManipulationModes Mode;
        Microsoft.UI.Xaml.UIElement Container;
        Microsoft.UI.Xaml.Input.ManipulationPivot Pivot;
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass NoFocusCandidateFoundEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Microsoft.UI.Xaml.Input.FocusNavigationDirection Direction{ get; };
        Boolean Handled;
        Microsoft.UI.Xaml.Input.FocusInputDeviceKind InputDevice{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointerRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Microsoft.UI.Xaml.Input.Pointer Pointer{ get; };
        Windows.System.VirtualKeyModifiers KeyModifiers{ get; };
        Boolean Handled;
        Boolean IsGenerated{ get; };
        Microsoft.UI.Input.PointerPoint GetCurrentPoint(Microsoft.UI.Xaml.UIElement relativeTo);
        Windows.Foundation.Collections.IVector<Microsoft.UI.Input.PointerPoint> GetIntermediatePoints(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RightTappedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        RightTappedRoutedEventArgs();
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Boolean Handled;
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass TappedRoutedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        TappedRoutedEventArgs();
        Microsoft.UI.Input.PointerDeviceType PointerDeviceType{ get; };
        Boolean Handled;
        Windows.Foundation.Point GetPosition(Microsoft.UI.Xaml.UIElement relativeTo);
    };

}
namespace Microsoft.UI.Xaml.Controls
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass UIElementCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement>
    {
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        {
            void Move(UInt32 oldIndex, UInt32 newIndex);
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass FocusDisengagedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FocusEngagedEventArgs
        : Microsoft.UI.Xaml.RoutedEventArgs
    {
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ControlTemplate
        : Microsoft.UI.Xaml.FrameworkTemplate
    {
        ControlTemplate();
        Windows.UI.Xaml.Interop.TypeName TargetType;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Controls.IControlFactory")]
    unsealed runtimeclass Control
        : Microsoft.UI.Xaml.FrameworkElement
    {
        [method_name("CreateInstance")] protected Control();
        Boolean IsFocusEngagementEnabled;
        Boolean IsFocusEngaged;
        Microsoft.UI.Xaml.Controls.RequiresPointer RequiresPointer;
        Double FontSize;
        Microsoft.UI.Xaml.Media.FontFamily FontFamily;
        Windows.UI.Text.FontWeight FontWeight;
        Windows.UI.Text.FontStyle FontStyle;
        Windows.UI.Text.FontStretch FontStretch;
        Int32 CharacterSpacing;
        Microsoft.UI.Xaml.Media.Brush Foreground;
        Boolean IsTextScaleFactorEnabled;
        Boolean IsEnabled;
        Microsoft.UI.Xaml.Input.KeyboardNavigationMode TabNavigation;
        Microsoft.UI.Xaml.Controls.ControlTemplate Template;
        Microsoft.UI.Xaml.Thickness Padding;
        Microsoft.UI.Xaml.HorizontalAlignment HorizontalContentAlignment;
        Microsoft.UI.Xaml.VerticalAlignment VerticalContentAlignment;
        Microsoft.UI.Xaml.Media.Brush Background;
        Microsoft.UI.Xaml.Controls.BackgroundSizing BackgroundSizing;
        Microsoft.UI.Xaml.Thickness BorderThickness;
        Microsoft.UI.Xaml.Media.Brush BorderBrush;
        Windows.Foundation.Uri DefaultStyleResourceUri;
        Microsoft.UI.Xaml.ElementSoundMode ElementSoundMode;
        Microsoft.UI.Xaml.CornerRadius CornerRadius;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs> FocusEngaged;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs> FocusDisengaged;
        event Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler IsEnabledChanged;
        void RemoveFocusEngagement();
        Boolean ApplyTemplate();
        static Microsoft.UI.Xaml.DependencyProperty IsFocusEngagementEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsFocusEngagedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RequiresPointerProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontSizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontFamilyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontWeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontStyleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FontStretchProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CharacterSpacingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ForegroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTextScaleFactorEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TabNavigationProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty TemplateProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PaddingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty HorizontalContentAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty VerticalContentAlignmentProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BackgroundProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BackgroundSizingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BorderThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty BorderBrushProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DefaultStyleKeyProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DefaultStyleResourceUriProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ElementSoundModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CornerRadiusProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsTemplateFocusTargetProperty{ get; };
        static Boolean GetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement element);
        static void SetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement element, Boolean value);
        static Microsoft.UI.Xaml.DependencyProperty IsTemplateKeyTipTargetProperty{ get; };
        static Boolean GetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject element, Boolean value);
        protected Object DefaultStyleKey;
        protected Microsoft.UI.Xaml.DependencyObject GetTemplateChild(String childName);
        overridable void OnPointerEntered(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerPressed(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerMoved(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerReleased(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerExited(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerCaptureLost(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerCanceled(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnPointerWheelChanged(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs e);
        overridable void OnTapped(Microsoft.UI.Xaml.Input.TappedRoutedEventArgs e);
        overridable void OnDoubleTapped(Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs e);
        overridable void OnHolding(Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs e);
        overridable void OnRightTapped(Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs e);
        overridable void OnManipulationStarting(Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs e);
        overridable void OnManipulationInertiaStarting(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs e);
        overridable void OnManipulationStarted(Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs e);
        overridable void OnManipulationDelta(Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs e);
        overridable void OnManipulationCompleted(Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs e);
        overridable void OnKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e);
        overridable void OnKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e);
        overridable void OnPreviewKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e);
        overridable void OnPreviewKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs e);
        overridable void OnGotFocus(Microsoft.UI.Xaml.RoutedEventArgs e);
        overridable void OnLostFocus(Microsoft.UI.Xaml.RoutedEventArgs e);
        overridable void OnCharacterReceived(Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs e);
        overridable void OnDragEnter(Microsoft.UI.Xaml.DragEventArgs e);
        overridable void OnDragLeave(Microsoft.UI.Xaml.DragEventArgs e);
        overridable void OnDragOver(Microsoft.UI.Xaml.DragEventArgs e);
        overridable void OnDrop(Microsoft.UI.Xaml.DragEventArgs e);
    };

}
namespace Microsoft.UI.Xaml.Media.Imaging
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DownloadProgressEventArgs
    {
        Int32 Progress;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory")]
    unsealed runtimeclass BitmapSource
        : Microsoft.UI.Xaml.Media.ImageSource
    {
        [method_name("CreateInstance")] protected BitmapSource();
        Int32 PixelWidth{ get; };
        Int32 PixelHeight{ get; };
        void SetSource(Windows.Storage.Streams.IRandomAccessStream streamSource);
        Windows.Foundation.IAsyncAction SetSourceAsync(Windows.Storage.Streams.IRandomAccessStream streamSource);
        static Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RenderTargetBitmap
        : Microsoft.UI.Xaml.Media.ImageSource
    {
        RenderTargetBitmap();
        Int32 PixelWidth{ get; };
        Int32 PixelHeight{ get; };
        [method_name("RenderAsync")] Windows.Foundation.IAsyncAction RenderAsync(Microsoft.UI.Xaml.UIElement element);
        [method_name("RenderToSizeAsync")] Windows.Foundation.IAsyncAction RenderAsync(Microsoft.UI.Xaml.UIElement element, Int32 scaledWidth, Int32 scaledHeight);
        Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer> GetPixelsAsync();
        static Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass SurfaceImageSource
        : Microsoft.UI.Xaml.Media.ImageSource
    {
        [method_name("CreateInstanceWithDimensions")] SurfaceImageSource(Int32 pixelWidth, Int32 pixelHeight);
        [method_name("CreateInstanceWithDimensionsAndOpacity")] SurfaceImageSource(Int32 pixelWidth, Int32 pixelHeight, Boolean isOpaque);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BitmapImage
        : Microsoft.UI.Xaml.Media.Imaging.BitmapSource
    {
        BitmapImage();
        [method_name("CreateInstanceWithUriSource")] BitmapImage(Windows.Foundation.Uri uriSource);
        Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions CreateOptions;
        Windows.Foundation.Uri UriSource;
        Int32 DecodePixelWidth;
        Int32 DecodePixelHeight;
        Microsoft.UI.Xaml.Media.Imaging.DecodePixelType DecodePixelType;
        Boolean IsAnimatedBitmap{ get; };
        Boolean IsPlaying{ get; };
        Boolean AutoPlay;
        event Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler DownloadProgress;
        event Microsoft.UI.Xaml.RoutedEventHandler ImageOpened;
        event Microsoft.UI.Xaml.ExceptionRoutedEventHandler ImageFailed;
        void Play();
        void Stop();
        static Microsoft.UI.Xaml.DependencyProperty CreateOptionsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty UriSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DecodePixelWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DecodePixelHeightProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DecodePixelTypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsAnimatedBitmapProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsPlayingProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AutoPlayProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass VirtualSurfaceImageSource
        : Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource
    {
        [method_name("CreateInstanceWithDimensions")] VirtualSurfaceImageSource(Int32 pixelWidth, Int32 pixelHeight);
        [method_name("CreateInstanceWithDimensionsAndOpacity")] VirtualSurfaceImageSource(Int32 pixelWidth, Int32 pixelHeight, Boolean isOpaque);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WriteableBitmap
        : Microsoft.UI.Xaml.Media.Imaging.BitmapSource
    {
        [method_name("CreateInstanceWithDimensions")] WriteableBitmap(Int32 pixelWidth, Int32 pixelHeight);
        Windows.Storage.Streams.IBuffer PixelBuffer{ get; };
        void Invalidate();
    };

}
namespace Microsoft.UI.Xaml.Controls.Primitives
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FlyoutBaseClosingEventArgs
    {
        Boolean Cancel;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FlyoutShowOptions
    {
        [method_name("CreateInstance")] FlyoutShowOptions();
        Windows.Foundation.IReference<Windows.Foundation.Point> Position;
        Windows.Foundation.IReference<Windows.Foundation.Rect> ExclusionRect;
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode ShowMode;
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode Placement;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory")]
    unsealed runtimeclass FlyoutBase
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected FlyoutBase();
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode Placement;
        Microsoft.UI.Xaml.FrameworkElement Target{ get; };
        Boolean AllowFocusOnInteraction;
        Microsoft.UI.Xaml.Controls.LightDismissOverlayMode LightDismissOverlayMode;
        Boolean AllowFocusWhenDisabled;
        Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode ShowMode;
        Boolean InputDevicePrefersPrimaryCommands{ get; };
        Boolean AreOpenCloseAnimationsEnabled;
        Boolean ShouldConstrainToRootBounds;
        Boolean IsConstrainedToRootBounds{ get; };
        Microsoft.UI.Xaml.ElementSoundMode ElementSoundMode;
        Microsoft.UI.Xaml.DependencyObject OverlayInputPassThroughElement;
        Boolean IsOpen{ get; };
        Microsoft.UI.Xaml.XamlRoot XamlRoot;
        event Windows.Foundation.EventHandler<Object> Opened;
        event Windows.Foundation.EventHandler<Object> Closed;
        event Windows.Foundation.EventHandler<Object> Opening;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase,Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs> Closing;
        void ShowAt(Microsoft.UI.Xaml.FrameworkElement placementTarget);
        [method_name("ShowAtWithOptions")] void ShowAt(Microsoft.UI.Xaml.DependencyObject placementTarget, Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions showOptions);
        void Hide();
        void TryInvokeKeyboardAccelerator(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
        static Microsoft.UI.Xaml.DependencyProperty TargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PlacementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AllowFocusOnInteractionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty LightDismissOverlayModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AllowFocusWhenDisabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ShowModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty InputDevicePrefersPrimaryCommandsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AreOpenCloseAnimationsEnabledProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ElementSoundModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OverlayInputPassThroughElementProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsOpenProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AttachedFlyoutProperty{ get; };
        static Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase GetAttachedFlyout(Microsoft.UI.Xaml.FrameworkElement element);
        static void SetAttachedFlyout(Microsoft.UI.Xaml.FrameworkElement element, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase value);
        static void ShowAttachedFlyout(Microsoft.UI.Xaml.FrameworkElement flyoutOwner);
        overridable Microsoft.UI.Xaml.Controls.Control CreatePresenter();
        overridable void OnProcessKeyboardAccelerators(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs args);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        {
            Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;
            static Microsoft.UI.Xaml.DependencyProperty SystemBackdropProperty{ get; };
        }
    };

}
namespace Microsoft.UI.Xaml.Automation
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AnnotationPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty AnnotationTypeIdProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty AnnotationTypeNameProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty AuthorProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty DateTimeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty TargetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AutomationElementIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty AcceleratorKeyProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty AccessKeyProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty AutomationIdProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty BoundingRectangleProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ClassNameProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ClickablePointProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ControlTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty HasKeyboardFocusProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty HelpTextProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsContentElementProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsControlElementProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsEnabledProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsKeyboardFocusableProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsOffscreenProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsPasswordProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsRequiredForFormProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ItemStatusProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ItemTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LabeledByProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LocalizedControlTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty NameProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty OrientationProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LiveSettingProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ControlledPeersProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty PositionInSetProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty SizeOfSetProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LevelProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty AnnotationsProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LandmarkTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LocalizedLandmarkTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsPeripheralProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsDataValidForFormProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FullDescriptionProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty DescribedByProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FlowsToProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FlowsFromProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty CultureProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty HeadingLevelProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsDialogProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AutomationProperties
    {
        static Microsoft.UI.Xaml.DependencyProperty AcceleratorKeyProperty{ get; };
        static String GetAcceleratorKey(Microsoft.UI.Xaml.DependencyObject element);
        static void SetAcceleratorKey(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty AccessKeyProperty{ get; };
        static String GetAccessKey(Microsoft.UI.Xaml.DependencyObject element);
        static void SetAccessKey(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty AutomationIdProperty{ get; };
        static String GetAutomationId(Microsoft.UI.Xaml.DependencyObject element);
        static void SetAutomationId(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty HelpTextProperty{ get; };
        static String GetHelpText(Microsoft.UI.Xaml.DependencyObject element);
        static void SetHelpText(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty IsRequiredForFormProperty{ get; };
        static Boolean GetIsRequiredForForm(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsRequiredForForm(Microsoft.UI.Xaml.DependencyObject element, Boolean value);
        static Microsoft.UI.Xaml.DependencyProperty ItemStatusProperty{ get; };
        static String GetItemStatus(Microsoft.UI.Xaml.DependencyObject element);
        static void SetItemStatus(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty ItemTypeProperty{ get; };
        static String GetItemType(Microsoft.UI.Xaml.DependencyObject element);
        static void SetItemType(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty LabeledByProperty{ get; };
        static Microsoft.UI.Xaml.UIElement GetLabeledBy(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLabeledBy(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.UIElement value);
        static Microsoft.UI.Xaml.DependencyProperty NameProperty{ get; };
        static String GetName(Microsoft.UI.Xaml.DependencyObject element);
        static void SetName(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty LiveSettingProperty{ get; };
        static Microsoft.UI.Xaml.Automation.Peers.AutomationLiveSetting GetLiveSetting(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLiveSetting(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Automation.Peers.AutomationLiveSetting value);
        static Microsoft.UI.Xaml.DependencyProperty AccessibilityViewProperty{ get; };
        static Microsoft.UI.Xaml.Automation.Peers.AccessibilityView GetAccessibilityView(Microsoft.UI.Xaml.DependencyObject element);
        static void SetAccessibilityView(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Automation.Peers.AccessibilityView value);
        static Microsoft.UI.Xaml.DependencyProperty ControlledPeersProperty{ get; };
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement> GetControlledPeers(Microsoft.UI.Xaml.DependencyObject element);
        static Microsoft.UI.Xaml.DependencyProperty PositionInSetProperty{ get; };
        static Int32 GetPositionInSet(Microsoft.UI.Xaml.DependencyObject element);
        static void SetPositionInSet(Microsoft.UI.Xaml.DependencyObject element, Int32 value);
        static Microsoft.UI.Xaml.DependencyProperty SizeOfSetProperty{ get; };
        static Int32 GetSizeOfSet(Microsoft.UI.Xaml.DependencyObject element);
        static void SetSizeOfSet(Microsoft.UI.Xaml.DependencyObject element, Int32 value);
        static Microsoft.UI.Xaml.DependencyProperty LevelProperty{ get; };
        static Int32 GetLevel(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLevel(Microsoft.UI.Xaml.DependencyObject element, Int32 value);
        static Microsoft.UI.Xaml.DependencyProperty AnnotationsProperty{ get; };
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.AutomationAnnotation> GetAnnotations(Microsoft.UI.Xaml.DependencyObject element);
        static Microsoft.UI.Xaml.DependencyProperty LandmarkTypeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.Peers.AutomationLandmarkType GetLandmarkType(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLandmarkType(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Automation.Peers.AutomationLandmarkType value);
        static Microsoft.UI.Xaml.DependencyProperty LocalizedLandmarkTypeProperty{ get; };
        static String GetLocalizedLandmarkType(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLocalizedLandmarkType(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty IsPeripheralProperty{ get; };
        static Boolean GetIsPeripheral(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsPeripheral(Microsoft.UI.Xaml.DependencyObject element, Boolean value);
        static Microsoft.UI.Xaml.DependencyProperty IsDataValidForFormProperty{ get; };
        static Boolean GetIsDataValidForForm(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsDataValidForForm(Microsoft.UI.Xaml.DependencyObject element, Boolean value);
        static Microsoft.UI.Xaml.DependencyProperty FullDescriptionProperty{ get; };
        static String GetFullDescription(Microsoft.UI.Xaml.DependencyObject element);
        static void SetFullDescription(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty LocalizedControlTypeProperty{ get; };
        static String GetLocalizedControlType(Microsoft.UI.Xaml.DependencyObject element);
        static void SetLocalizedControlType(Microsoft.UI.Xaml.DependencyObject element, String value);
        static Microsoft.UI.Xaml.DependencyProperty DescribedByProperty{ get; };
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.DependencyObject> GetDescribedBy(Microsoft.UI.Xaml.DependencyObject element);
        static Microsoft.UI.Xaml.DependencyProperty FlowsToProperty{ get; };
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.DependencyObject> GetFlowsTo(Microsoft.UI.Xaml.DependencyObject element);
        static Microsoft.UI.Xaml.DependencyProperty FlowsFromProperty{ get; };
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.DependencyObject> GetFlowsFrom(Microsoft.UI.Xaml.DependencyObject element);
        static Microsoft.UI.Xaml.DependencyProperty CultureProperty{ get; };
        static Int32 GetCulture(Microsoft.UI.Xaml.DependencyObject element);
        static void SetCulture(Microsoft.UI.Xaml.DependencyObject element, Int32 value);
        static Microsoft.UI.Xaml.DependencyProperty HeadingLevelProperty{ get; };
        static Microsoft.UI.Xaml.Automation.Peers.AutomationHeadingLevel GetHeadingLevel(Microsoft.UI.Xaml.DependencyObject element);
        static void SetHeadingLevel(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Automation.Peers.AutomationHeadingLevel value);
        static Microsoft.UI.Xaml.DependencyProperty IsDialogProperty{ get; };
        static Boolean GetIsDialog(Microsoft.UI.Xaml.DependencyObject element);
        static void SetIsDialog(Microsoft.UI.Xaml.DependencyObject element, Boolean value);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 3)]
        {
            static Microsoft.UI.Xaml.DependencyProperty AutomationControlTypeProperty{ get; };
            static Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetAutomationControlType(Microsoft.UI.Xaml.UIElement element);
            static void SetAutomationControlType(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Xaml.Automation.Peers.AutomationControlType value);
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass AutomationProperty
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DockPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty DockPositionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DragPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty DropEffectProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty DropEffectsProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty GrabbedItemsProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsGrabbedProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DropTargetPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty DropTargetEffectProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty DropTargetEffectsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ExpandCollapsePatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ExpandCollapseStateProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass GridItemPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ColumnProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ColumnSpanProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ContainingGridProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowSpanProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass GridPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ColumnCountProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowCountProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass MultipleViewPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty CurrentViewProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty SupportedViewsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass RangeValuePatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsReadOnlyProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty LargeChangeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty MaximumProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty MinimumProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty SmallChangeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ValueProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ScrollPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty HorizontallyScrollableProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty HorizontalScrollPercentProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty HorizontalViewSizeProperty{ get; };
        static Double NoScroll{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty VerticallyScrollableProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty VerticalScrollPercentProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty VerticalViewSizeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SelectionItemPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsSelectedProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty SelectionContainerProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SelectionPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanSelectMultipleProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsSelectionRequiredProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty SelectionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SpreadsheetItemPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty FormulaProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass StylesPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ExtendedPropertiesProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FillColorProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FillPatternColorProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty FillPatternStyleProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ShapeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty StyleIdProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty StyleNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass TableItemPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ColumnHeaderItemsProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowHeaderItemsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass TablePatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ColumnHeadersProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowHeadersProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty RowOrColumnMajorProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass TogglePatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty ToggleStateProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass TransformPattern2Identifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanZoomProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ZoomLevelProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty MaxZoomProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty MinZoomProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass TransformPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanMoveProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanResizeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanRotateProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ValuePatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsReadOnlyProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty ValueProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass WindowPatternIdentifiers
    {
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanMaximizeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty CanMinimizeProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsModalProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty IsTopmostProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty WindowInteractionStateProperty{ get; };
        static Microsoft.UI.Xaml.Automation.AutomationProperty WindowVisualStateProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AutomationAnnotation
        : Microsoft.UI.Xaml.DependencyObject
    {
        AutomationAnnotation();
        [method_name("CreateInstance")] AutomationAnnotation(Microsoft.UI.Xaml.Automation.AnnotationType type);
        [method_name("CreateWithElementParameter")] AutomationAnnotation(Microsoft.UI.Xaml.Automation.AnnotationType type, Microsoft.UI.Xaml.UIElement element);
        Microsoft.UI.Xaml.Automation.AnnotationType Type;
        Microsoft.UI.Xaml.UIElement Element;
        static Microsoft.UI.Xaml.DependencyProperty TypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ElementProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Automation.Peers
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerFactory")]
    unsealed runtimeclass AutomationPeer
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected AutomationPeer();
        Microsoft.UI.Xaml.Automation.Peers.AutomationPeer EventsSource;
        Object GetPattern(Microsoft.UI.Xaml.Automation.Peers.PatternInterface patternInterface);
        void RaiseAutomationEvent(Microsoft.UI.Xaml.Automation.Peers.AutomationEvents eventId);
        void RaisePropertyChangedEvent(Microsoft.UI.Xaml.Automation.AutomationProperty automationProperty, Object oldValue, Object newValue);
        String GetAcceleratorKey();
        String GetAccessKey();
        Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetAutomationControlType();
        String GetAutomationId();
        Windows.Foundation.Rect GetBoundingRectangle();
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetChildren();
        Object Navigate(Microsoft.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction);
        String GetClassName();
        Windows.Foundation.Point GetClickablePoint();
        String GetHelpText();
        String GetItemStatus();
        String GetItemType();
        Microsoft.UI.Xaml.Automation.Peers.AutomationPeer GetLabeledBy();
        String GetLocalizedControlType();
        String GetName();
        Microsoft.UI.Xaml.Automation.Peers.AutomationOrientation GetOrientation();
        Boolean HasKeyboardFocus();
        Boolean IsContentElement();
        Boolean IsControlElement();
        Boolean IsEnabled();
        Boolean IsKeyboardFocusable();
        Boolean IsOffscreen();
        Boolean IsPassword();
        Boolean IsRequiredForForm();
        void SetFocus();
        [deprecated("Consider using Navigate with AutomationNavigationDirection::Parent, which is an improved version of GetParent. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Peers.AutomationPeer GetParent();
        void InvalidatePeer();
        [deprecated("Consider using GetElementFromPoint, which is an improved version of GetPeerFromPoint. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Xaml.Automation.Peers.AutomationPeer GetPeerFromPoint(Windows.Foundation.Point point);
        Object GetElementFromPoint(Windows.Foundation.Point pointInWindowCoordinates);
        Object GetFocusedElement();
        Microsoft.UI.Xaml.Automation.Peers.AutomationLiveSetting GetLiveSetting();
        void ShowContextMenu();
        Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetControlledPeers();
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> GetAnnotations();
        void SetParent(Microsoft.UI.Xaml.Automation.Peers.AutomationPeer peer);
        void RaiseTextEditTextChangedEvent(Microsoft.UI.Xaml.Automation.AutomationTextEditChangeType automationTextEditChangeType, Windows.Foundation.Collections.IVectorView<String> changedData);
        Int32 GetPositionInSet();
        Int32 GetSizeOfSet();
        Int32 GetLevel();
        void RaiseStructureChangedEvent(Microsoft.UI.Xaml.Automation.Peers.AutomationStructureChangeType structureChangeType, Microsoft.UI.Xaml.Automation.Peers.AutomationPeer child);
        Microsoft.UI.Xaml.Automation.Peers.AutomationLandmarkType GetLandmarkType();
        String GetLocalizedLandmarkType();
        Boolean IsPeripheral();
        Boolean IsDataValidForForm();
        String GetFullDescription();
        Int32 GetCulture();
        void RaiseNotificationEvent(Microsoft.UI.Xaml.Automation.Peers.AutomationNotificationKind notificationKind, Microsoft.UI.Xaml.Automation.Peers.AutomationNotificationProcessing notificationProcessing, String displayString, String activityId);
        Microsoft.UI.Xaml.Automation.Peers.AutomationHeadingLevel GetHeadingLevel();
        Boolean IsDialog();
        static Boolean ListenerExists(Microsoft.UI.Xaml.Automation.Peers.AutomationEvents eventId);
        static Microsoft.UI.Xaml.Automation.Peers.RawElementProviderRuntimeId GenerateRawElementProviderRuntimeId();
        protected Microsoft.UI.Xaml.Automation.Peers.AutomationPeer PeerFromProvider(Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple provider);
        protected Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple ProviderFromPeer(Microsoft.UI.Xaml.Automation.Peers.AutomationPeer peer);
        overridable Object GetPatternCore(Microsoft.UI.Xaml.Automation.Peers.PatternInterface patternInterface);
        overridable String GetAcceleratorKeyCore();
        overridable String GetAccessKeyCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationControlType GetAutomationControlTypeCore();
        overridable String GetAutomationIdCore();
        overridable Windows.Foundation.Rect GetBoundingRectangleCore();
        overridable Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetChildrenCore();
        overridable Object NavigateCore(Microsoft.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction);
        overridable String GetClassNameCore();
        overridable Windows.Foundation.Point GetClickablePointCore();
        overridable String GetHelpTextCore();
        overridable String GetItemStatusCore();
        overridable String GetItemTypeCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationPeer GetLabeledByCore();
        overridable String GetLocalizedControlTypeCore();
        overridable String GetNameCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationOrientation GetOrientationCore();
        overridable Boolean HasKeyboardFocusCore();
        overridable Boolean IsContentElementCore();
        overridable Boolean IsControlElementCore();
        overridable Boolean IsEnabledCore();
        overridable Boolean IsKeyboardFocusableCore();
        overridable Boolean IsOffscreenCore();
        overridable Boolean IsPasswordCore();
        overridable Boolean IsRequiredForFormCore();
        overridable void SetFocusCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationPeer GetPeerFromPointCore(Windows.Foundation.Point point);
        overridable Object GetElementFromPointCore(Windows.Foundation.Point pointInWindowCoordinates);
        overridable Object GetFocusedElementCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationLiveSetting GetLiveSettingCore();
        overridable void ShowContextMenuCore();
        overridable Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetControlledPeersCore();
        overridable Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> GetAnnotationsCore();
        overridable Int32 GetPositionInSetCore();
        overridable Int32 GetSizeOfSetCore();
        overridable Int32 GetLevelCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationLandmarkType GetLandmarkTypeCore();
        overridable String GetLocalizedLandmarkTypeCore();
        overridable Boolean IsPeripheralCore();
        overridable Boolean IsDataValidForFormCore();
        overridable String GetFullDescriptionCore();
        overridable Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetDescribedByCore();
        overridable Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsToCore();
        overridable Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetFlowsFromCore();
        overridable Int32 GetCultureCore();
        overridable Microsoft.UI.Xaml.Automation.Peers.AutomationHeadingLevel GetHeadingLevelCore();
        overridable Boolean IsDialogCore();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass AutomationPeerAnnotation
        : Microsoft.UI.Xaml.DependencyObject
    {
        AutomationPeerAnnotation();
        [method_name("CreateInstance")] AutomationPeerAnnotation(Microsoft.UI.Xaml.Automation.AnnotationType type);
        [method_name("CreateWithPeerParameter")] AutomationPeerAnnotation(Microsoft.UI.Xaml.Automation.AnnotationType type, Microsoft.UI.Xaml.Automation.Peers.AutomationPeer peer);
        Microsoft.UI.Xaml.Automation.AnnotationType Type;
        Microsoft.UI.Xaml.Automation.Peers.AutomationPeer Peer;
        static Microsoft.UI.Xaml.DependencyProperty TypeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PeerProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass FrameworkElementAutomationPeer
        : Microsoft.UI.Xaml.Automation.Peers.AutomationPeer
    {
        [method_name("CreateInstanceWithOwner")] FrameworkElementAutomationPeer(Microsoft.UI.Xaml.FrameworkElement owner);
        Microsoft.UI.Xaml.UIElement Owner{ get; };
        static Microsoft.UI.Xaml.Automation.Peers.AutomationPeer FromElement(Microsoft.UI.Xaml.UIElement element);
        static Microsoft.UI.Xaml.Automation.Peers.AutomationPeer CreatePeerForElement(Microsoft.UI.Xaml.UIElement element);
    };

}
namespace Microsoft.UI.Xaml.Automation.Provider
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IAnnotationProvider 
    {
        Int32 AnnotationTypeId{ get; };
        String AnnotationTypeName{ get; };
        String Author{ get; };
        String DateTime{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple Target{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IDockProvider 
    {
        Microsoft.UI.Xaml.Automation.DockPosition DockPosition{ get; };
        void SetDockPosition(Microsoft.UI.Xaml.Automation.DockPosition dockPosition);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IDragProvider 
    {
        Boolean IsGrabbed{ get; };
        String DropEffect{ get; };
        String[] DropEffects{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetGrabbedItems();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IDropTargetProvider 
    {
        String DropEffect{ get; };
        String[] DropEffects{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IExpandCollapseProvider 
    {
        Microsoft.UI.Xaml.Automation.ExpandCollapseState ExpandCollapseState{ get; };
        void Collapse();
        void Expand();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IGridItemProvider 
    {
        Int32 Column{ get; };
        Int32 ColumnSpan{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple ContainingGrid{ get; };
        Int32 Row{ get; };
        Int32 RowSpan{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IGridProvider 
    {
        Int32 ColumnCount{ get; };
        Int32 RowCount{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple GetItem(Int32 row, Int32 column);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IInvokeProvider 
    {
        void Invoke();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IItemContainerProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple FindItemByProperty(Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple startAfter, Microsoft.UI.Xaml.Automation.AutomationProperty automationProperty, Object value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IMultipleViewProvider 
    {
        Int32 CurrentView{ get; };
        Int32[] GetSupportedViews();
        String GetViewName(Int32 viewId);
        void SetCurrentView(Int32 viewId);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IObjectModelProvider 
    {
        Object GetUnderlyingObjectModel();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IRangeValueProvider 
    {
        Boolean IsReadOnly{ get; };
        Double LargeChange{ get; };
        Double Maximum{ get; };
        Double Minimum{ get; };
        Double SmallChange{ get; };
        Double Value{ get; };
        void SetValue(Double value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IScrollItemProvider 
    {
        void ScrollIntoView();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IScrollProvider 
    {
        Boolean HorizontallyScrollable{ get; };
        Double HorizontalScrollPercent{ get; };
        Double HorizontalViewSize{ get; };
        Boolean VerticallyScrollable{ get; };
        Double VerticalScrollPercent{ get; };
        Double VerticalViewSize{ get; };
        void Scroll(Microsoft.UI.Xaml.Automation.ScrollAmount horizontalAmount, Microsoft.UI.Xaml.Automation.ScrollAmount verticalAmount);
        void SetScrollPercent(Double horizontalPercent, Double verticalPercent);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISelectionItemProvider 
    {
        Boolean IsSelected{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple SelectionContainer{ get; };
        void AddToSelection();
        void RemoveFromSelection();
        void Select();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISelectionProvider 
    {
        Boolean CanSelectMultiple{ get; };
        Boolean IsSelectionRequired{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetSelection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISpreadsheetItemProvider 
    {
        String Formula{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetAnnotationObjects();
        Microsoft.UI.Xaml.Automation.AnnotationType[] GetAnnotationTypes();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISpreadsheetProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple GetItemByName(String name);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IStylesProvider 
    {
        String ExtendedProperties{ get; };
        Windows.UI.Color FillColor{ get; };
        Windows.UI.Color FillPatternColor{ get; };
        String FillPatternStyle{ get; };
        String Shape{ get; };
        Int32 StyleId{ get; };
        String StyleName{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISynchronizedInputProvider 
    {
        void Cancel();
        void StartListening(Microsoft.UI.Xaml.Automation.SynchronizedInputType inputType);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITableItemProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetColumnHeaderItems();
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetRowHeaderItems();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITableProvider 
    {
        Microsoft.UI.Xaml.Automation.RowOrColumnMajor RowOrColumnMajor{ get; };
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetColumnHeaders();
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetRowHeaders();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextChildProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple TextContainer{ get; };
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider TextRange{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider DocumentRange{ get; };
        Microsoft.UI.Xaml.Automation.SupportedTextSelection SupportedTextSelection{ get; };
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider[] GetSelection();
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider[] GetVisibleRanges();
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider RangeFromChild(Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple childElement);
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider RangeFromPoint(Windows.Foundation.Point screenLocation);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextProvider2 requires Microsoft.UI.Xaml.Automation.Provider.ITextProvider
    {
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider RangeFromAnnotation(Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple annotationElement);
        [return_name("returnValue")] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider GetCaretRange(out Boolean isActive);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextRangeProvider 
    {
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider Clone();
        Boolean Compare(Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider textRangeProvider);
        Int32 CompareEndpoints(Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider textRangeProvider, Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
        void ExpandToEnclosingUnit(Microsoft.UI.Xaml.Automation.Text.TextUnit unit);
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider FindAttribute(Int32 attributeId, Object value, Boolean backward);
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider FindText(String text, Boolean backward, Boolean ignoreCase);
        Object GetAttributeValue(Int32 attributeId);
        void GetBoundingRectangles(out Double[] returnValue);
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple GetEnclosingElement();
        String GetText(Int32 maxLength);
        Int32 Move(Microsoft.UI.Xaml.Automation.Text.TextUnit unit, Int32 count);
        Int32 MoveEndpointByUnit(Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, Microsoft.UI.Xaml.Automation.Text.TextUnit unit, Int32 count);
        void MoveEndpointByRange(Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider textRangeProvider, Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
        void Select();
        void AddToSelection();
        void RemoveFromSelection();
        void ScrollIntoView(Boolean alignToTop);
        Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple[] GetChildren();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextRangeProvider2 requires Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider
    {
        void ShowContextMenu();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IToggleProvider 
    {
        Microsoft.UI.Xaml.Automation.ToggleState ToggleState{ get; };
        void Toggle();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITransformProvider 
    {
        Boolean CanMove{ get; };
        Boolean CanResize{ get; };
        Boolean CanRotate{ get; };
        void Move(Double x, Double y);
        void Resize(Double width, Double height);
        void Rotate(Double degrees);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITransformProvider2 requires Microsoft.UI.Xaml.Automation.Provider.ITransformProvider
    {
        Boolean CanZoom{ get; };
        Double ZoomLevel{ get; };
        Double MaxZoom{ get; };
        Double MinZoom{ get; };
        void Zoom(Double zoom);
        void ZoomByUnit(Microsoft.UI.Xaml.Automation.ZoomUnit zoomUnit);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IValueProvider 
    {
        Boolean IsReadOnly{ get; };
        String Value{ get; };
        void SetValue(String value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IVirtualizedItemProvider 
    {
        void Realize();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IWindowProvider 
    {
        Boolean IsModal{ get; };
        Boolean IsTopmost{ get; };
        Boolean Maximizable{ get; };
        Boolean Minimizable{ get; };
        Microsoft.UI.Xaml.Automation.WindowInteractionState InteractionState{ get; };
        Microsoft.UI.Xaml.Automation.WindowVisualState VisualState{ get; };
        void Close();
        void SetVisualState(Microsoft.UI.Xaml.Automation.WindowVisualState state);
        Boolean WaitForInputIdle(Int32 milliseconds);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass IRawElementProviderSimple
        : Microsoft.UI.Xaml.DependencyObject
    {
    };

}
namespace Microsoft.UI.Xaml.Data
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [uuid(30da92c0-23e8-42a0-ae7c-734a0e5d2782)]
    [webhosthidden]
    interface ICustomProperty 
    {
        Windows.UI.Xaml.Interop.TypeName Type{ get; };
        String Name{ get; };
        Object GetValue(Object target);
        void SetValue(Object target, Object value);
        Object GetIndexedValue(Object target, Object index);
        void SetIndexedValue(Object target, Object value, Object index);
        Boolean CanWrite{ get; };
        Boolean CanRead{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [uuid(7c925755-3e48-42b4-8677-76372267033f)]
    [webhosthidden]
    interface ICustomPropertyProvider 
    {
        Microsoft.UI.Xaml.Data.ICustomProperty GetCustomProperty(String name);
        Microsoft.UI.Xaml.Data.ICustomProperty GetIndexedProperty(String name, Windows.UI.Xaml.Interop.TypeName type);
        String GetStringRepresentation();
        Windows.UI.Xaml.Interop.TypeName Type{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface INotifyPropertyChanged 
    {
        event Microsoft.UI.Xaml.Data.PropertyChangedEventHandler PropertyChanged;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ISupportIncrementalLoading 
    {
        Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult> LoadMoreItemsAsync(UInt32 count);
        Boolean HasMoreItems{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IValueConverter 
    {
        Object Convert(Object value, Windows.UI.Xaml.Interop.TypeName targetType, Object parameter, String language);
        Object ConvertBack(Object value, Windows.UI.Xaml.Interop.TypeName targetType, Object parameter, String language);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactory")]
    [default_interface]
    unsealed runtimeclass BindingExpressionBase
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass BindingOperations
    {
        static void SetBinding(Microsoft.UI.Xaml.DependencyObject target, Microsoft.UI.Xaml.DependencyProperty dp, Microsoft.UI.Xaml.Data.BindingBase binding);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass CurrentChangingEventArgs
    {
        [method_name("CreateInstance")] CurrentChangingEventArgs();
        [method_name("CreateWithCancelableParameter")] CurrentChangingEventArgs(Boolean isCancelable);
        Boolean Cancel;
        Boolean IsCancelable{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass PropertyChangedEventArgs
    {
        [method_name("CreateInstance")] PropertyChangedEventArgs(String name);
        String PropertyName{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass BindingBase
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] BindingBase();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass BindingExpression
        : Microsoft.UI.Xaml.Data.BindingExpressionBase
    {
        Object DataItem{ get; };
        Microsoft.UI.Xaml.Data.Binding ParentBinding{ get; };
        void UpdateSource();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass RelativeSource
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] RelativeSource();
        Microsoft.UI.Xaml.Data.RelativeSourceMode Mode;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Binding
        : Microsoft.UI.Xaml.Data.BindingBase
    {
        [method_name("CreateInstance")] Binding();
        Microsoft.UI.Xaml.PropertyPath Path;
        Microsoft.UI.Xaml.Data.BindingMode Mode;
        Object Source;
        Microsoft.UI.Xaml.Data.RelativeSource RelativeSource;
        String ElementName;
        Microsoft.UI.Xaml.Data.IValueConverter Converter;
        Object ConverterParameter;
        String ConverterLanguage;
        Object FallbackValue;
        Object TargetNullValue;
        Microsoft.UI.Xaml.Data.UpdateSourceTrigger UpdateSourceTrigger;
    };

}
namespace Microsoft.UI.Xaml.Media.Media3D
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactory")]
    [default_interface]
    unsealed runtimeclass Transform3D
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected Transform3D();
    };

}
namespace Microsoft.UI.Xaml.Hosting
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
    [webhosthidden]
    runtimeclass XamlShutdownCompletedOnThreadEventArgs
    {
        Windows.Foundation.Deferral GetDispatcherQueueDeferral();
    };

}

cpp_quote("#pragma pop_macro(\"GetCurrentTime\")")
