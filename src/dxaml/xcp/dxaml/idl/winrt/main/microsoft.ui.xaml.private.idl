// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//
//  WindowsRuntimeAPISet

//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML WinRT APIs.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "sdkddkver.h"
#include <FeatureFlags.h>

import "oaidl.idl";
import "eventtoken.idl";
import "inspectable.idl";
import "microsoft.ui.composition.idl";
import "microsoft.ui.composition.SystemBackdrops.idl";
import "microsoft.ui.content.idl";
import "microsoft.UI.Dispatching.idl";
import "microsoft.ui.input.idl";
import "microsoft.ui.xaml.idl";
import "windows.foundation.idl";
import "windows.foundation.numerics.idl";
import "windows.ui.idl";

import "windows.applicationModel.datatransfer.dragdrop.idl";
import "windows.applicationModel.datatransfer.dragdrop.core.idl";
import "windows.foundation.customattributes.idl";
import "windows.ui.xaml.interop.idl";


namespace Microsoft.UI.Xaml
{
    [internal]
    [contractversion(1)]
    apicontract PrivateApiContract{};
}

namespace Microsoft.UI.Xaml
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum ShutdownModel
    {
        Version1 = 1,
        Version2,
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum TransitionParent
    {
        ParentToRoot,
        ParentToCommonParent,
        ParentToGrandParent,
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum TransitionTrigger
    {
        Load,
        Layout,
        Unload,
        Reparent,
    };
}
namespace Microsoft.UI.Xaml.Media.Animation
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum NavigationTrigger
    {
        NavigatingAway,
        NavigatingTo,
        BackNavigatingAway,
        BackNavigatingTo,
    };
}
namespace Microsoft.UI.Xaml.Input
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum LastInputDeviceType
    {
        None,
        Mouse,
        Touch,
        Pen,
        Keyboard,
        GamepadOrRemote,
    };
}
namespace Microsoft.UI.Xaml.Controls
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum ElementType
    {
        ItemContainer,
        GroupHeader,
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum IndexSearchHint
    {
        NoHint,
        Exact,
        SearchBackwards,
        SearchForwards,
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum KeyNavigationAction
    {
        Next,
        Previous,
        First,
        Last,
        Left,
        Right,
        Up,
        Down,
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum ReferenceIdentity
    {
        Myself,
        BeforeMe,
        AfterMe,
    };
}
namespace Microsoft.UI.Xaml.Data
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    enum EffectiveSourceType
    {
        None,
        Binding_Source,
        DataContext,
        Mentor_DataContext,
        Target,
        TemplatedParent,
        Mentor_TemplatedParent,
        ElementName,
        Mentor_ElementName,
    };
}

namespace Microsoft.UI.Xaml.Controls
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    struct EstimationReference
    {
        Microsoft.UI.Xaml.Controls.ElementType ElementType;
        Int32 ElementIndex;
        Windows.Foundation.Rect ElementBounds;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    struct LayoutReference
    {
        Microsoft.UI.Xaml.Controls.ReferenceIdentity RelativeLocation;
        Windows.Foundation.Rect ReferenceBounds;
        Windows.Foundation.Rect HeaderBounds;
        Boolean ReferenceIsHeader;
    };
}

namespace Microsoft.UI.Xaml
{
    declare
    {
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ShutdownModel>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TransitionParent>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TransitionTrigger>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ElementType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.IndexSearchHint>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.KeyNavigationAction>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Controls.ReferenceIdentity>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Data.EffectiveSourceType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Input.LastInputDeviceType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.NavigationTrigger>;
    }
}

namespace Microsoft.UI.Xaml.Input
{

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    delegate void FocusedElementRemovedEventHandler(Object sender, Microsoft.UI.Xaml.Input.FocusedElementRemovedEventArgs e);

}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IAtlasRequestCallback 
    {
        Boolean AtlasRequest(UInt32 width, UInt32 height, Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IElementSoundPlayerStaticsPrivate 
    {
        void RequestInteractionSoundForElement(Microsoft.UI.Xaml.ElementSoundKind sound, Microsoft.UI.Xaml.DependencyObject element);
        Microsoft.UI.Xaml.ElementSoundMode GetEffectiveSoundMode(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFrameworkApplicationPrivate 
    {
        Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Window> Windows{ get; };
        Microsoft.UI.Xaml.ShutdownModel ShutdownModel;
        void StartOnCurrentThread(Microsoft.UI.Xaml.ApplicationInitializationCallback callback);
        Microsoft.UI.Xaml.Hosting.XamlIslandRoot CreateIslandRoot();
        Microsoft.UI.Xaml.Hosting.XamlIslandRoot CreateIslandRootWithContentBridge(Object owner, Object contentBridge);
        void RemoveIsland(Microsoft.UI.Xaml.Hosting.XamlIslandRoot island);
        void SetSynchronizationWindow(UInt64 commitResizeWindow);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFrameworkApplicationStaticsPrivate 
    {
        void EnableFailFastOnStowedException();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IMemoryInfoPrivate 
    {
        UInt64 GetCountOfDescendantUIElements();
        UInt64 GetEstimatedSizeOfDescendantImages();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IRectHelperStaticsPrivate 
    {
        Windows.Foundation.Rect DipsRectToPhysicalRect(Windows.Foundation.Rect dipsRect);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ISourceInfoPrivate 
    {
        Int32 Line;
        Int32 Column;
        String ParseUri;
        String XbfHash;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IUIElementPrivate 
    {
        Boolean FocusNoActivate(Microsoft.UI.Xaml.FocusState value);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IUIElementStaticsPrivate 
    {
        Boolean InternalGetIsEnabled(Microsoft.UI.Xaml.UIElement element);
        void InternalPutIsEnabled(Microsoft.UI.Xaml.UIElement element, Boolean value);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IWindowPrivate 
    {
        Boolean TransparentBackground;
        void Show();
        void Hide();
        void MoveWindow(Int32 x, Int32 y, Int32 width, Int32 height);
        void SetAtlasSizeHint(UInt32 width, UInt32 height);
        void ReleaseGraphicsDeviceOnSuspend(Boolean enable);
        void SetAtlasRequestCallback(Microsoft.UI.Xaml.IAtlasRequestCallback callback);
        Windows.Foundation.Rect GetWindowContentBoundsForElement(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    runtimeclass ColorDisplayNameHelper
    {
        static String ToDisplayName(Windows.UI.Color color);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DxamlCoreTestHooks
    {
        DxamlCoreTestHooks();
        static Microsoft.UI.Xaml.DxamlCoreTestHooks GetForCurrentThread();
        static void PerformProcessWideLeakDetection(Int32 threshold);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass WindowChrome
        : Microsoft.UI.Xaml.Controls.ContentControl
    {
        [method_name("CreateInstance")] WindowChrome(Microsoft.UI.Xaml.Window parent);
        Microsoft.UI.Xaml.Visibility CaptionVisibility{ get; };
        static Microsoft.UI.Xaml.DependencyProperty CaptionVisibilityProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Media
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IThemeShadowStaticsPrivate 
    {
        Boolean IsDropShadowMode{ get; };
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IXamlCompositionBrushBaseOverridesPrivate 
    {
        void OnElementConnected(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IXamlCompositionBrushBasePrivates 
    {
        void SetBrushForXamlRoot(Object xamlRoot, Microsoft.UI.Composition.CompositionBrush brush);
        Microsoft.UI.Composition.CompositionBrush GetBrushForXamlRoot(Object xamlRoot);
        void ClearBrushForXamlRoot(Object xamlRoot, Microsoft.UI.Composition.CompositionBrush brush);
        void ClearCompositionBrushMap();
    };

}
namespace Microsoft.UI.Xaml.Media.Animation
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface INavigationTransitionInfoOverridesPrivate 
    {
        void CreateStoryboardsCore(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Xaml.Media.Animation.NavigationTrigger trigger, Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Storyboard> storyboards);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface INavigationTransitionInfoPrivate 
    {
        void CreateStoryboards(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Xaml.Media.Animation.NavigationTrigger trigger, Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Storyboard> storyboards);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ITransitionFactoryPrivate 
    {
        Microsoft.UI.Xaml.Media.Animation.Transition CreateInstance(Object outer, out Object inner);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ITransitionPrivate 
    {
        void CreateStoryboard(Microsoft.UI.Xaml.UIElement element, Windows.Foundation.Rect start, Windows.Foundation.Rect destination, Microsoft.UI.Xaml.TransitionTrigger transitionTrigger, Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Storyboard> storyboards, out Microsoft.UI.Xaml.TransitionParent parentForTransition);
        Boolean ParticipatesInTransition(Microsoft.UI.Xaml.UIElement element, Microsoft.UI.Xaml.TransitionTrigger transitonTrigger);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IThemeAnimationBaseFactory")]
    [default_interface]
    unsealed runtimeclass ThemeAnimationBase
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        [method_name("CreateInstance")] protected ThemeAnimationBase();
        overridable void CreateTimelinesInternal(Boolean onlyGenerateSteadyState, Microsoft.UI.Xaml.Media.Animation.TimelineCollection timelineCollection);
    };

}
namespace Microsoft.UI.Xaml.Input
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFindNextElementOptionsPrivate 
    {
        Boolean IgnoreOcclusivity;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFocusManagerStaticsPrivate 
    {
        event Microsoft.UI.Xaml.Input.FocusedElementRemovedEventHandler FocusedElementRemoved;
        Object FindNextFocusWithSearchRootIgnoreEngagement(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Object searchRoot);
        Object FindNextFocusWithSearchRootIgnoreEngagementWithHintRect(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Object searchRoot, Windows.Foundation.Rect hintRect, Windows.Foundation.Rect exclusionRect);
        Object FindNextFocusWithSearchRootIgnoreEngagementWithClip(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Object searchRoot, Boolean ignoreClipping, Boolean ignoreCone);
        void SetEngagedControl(Object engagedControl);
        [method_name("SetFocusedElementWithDirection")] Boolean SetFocusedElement(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.FocusState focusState, Boolean animateIfBringIntoView, Boolean forceBringIntoView, Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Boolean requestInputActivation);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass FocusedElementRemovedEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject OldFocusedElement{ get; };
        Microsoft.UI.Xaml.DependencyObject NewFocusedElement;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass InputManager
    {
        static Microsoft.UI.Xaml.Input.LastInputDeviceType GetLastInputDeviceType();
    };

}
namespace Microsoft.UI.Xaml.Controls
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ICommandBarLabeledElement 
    {
        void SetDefaultLabelPosition(Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition defaultLabelPosition);
        Boolean GetHasBottomLabel();
        Boolean GetHasRightLabel();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ICommandBarOverflowElement 
    {
        Boolean UseOverflowStyle;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ICommandBarStaticsPrivate 
    {
        Microsoft.UI.Xaml.Controls.CommandBar GetCurrentBottomCommandBar(Microsoft.UI.Xaml.XamlRoot xamlRoot);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IContentControlPrivate 
    {
        Windows.Foundation.Rect GetGlobalBounds();
        Single GetRasterizationScale();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFramePrivate 
    {
        void GetNavigationTransitionInfoOverride(out Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo infoOverride, out Boolean isBackNavigation, out Boolean isInitialPage);
        void SetNavigationTransitionInfoOverride(Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo infoOverride);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [feature(Feature_InputValidation)]
    [webhosthidden]
    interface IInputValidationControl2 
    {
        Microsoft.UI.Xaml.Controls.InputValidationCommand ValidationCommand;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ILayoutDataInfoProvider 
    {
        Int32 GetTotalItemCount();
        Int32 GetTotalGroupCount();
        void GetGroupInformationFromItemIndex(Int32 itemIndex, out Int32 indexOfGroup, out Int32 indexInsideGroup, out Int32 itemCountInGroup);
        void GetGroupInformationFromGroupIndex(Int32 groupIndex, out Int32 startItemIndex, out Int32 itemCountInGroup);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ILayoutStrategy 
    {
        void SetLayoutDataInfoProvider(Microsoft.UI.Xaml.Controls.ILayoutDataInfoProvider provider);
        void BeginMeasure();
        void EndMeasure();
        Windows.Foundation.Size GetElementMeasureSize(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Windows.Foundation.Rect windowConstraint);
        Windows.Foundation.Rect GetElementBounds(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Windows.Foundation.Size containerDesiredSize, Microsoft.UI.Xaml.Controls.LayoutReference referenceInformation, Windows.Foundation.Rect windowConstraint);
        Windows.Foundation.Rect GetElementArrangeBounds(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Windows.Foundation.Rect containerBounds, Windows.Foundation.Rect windowConstraint, Windows.Foundation.Size finalSize);
        Boolean ShouldContinueFillingUpSpace(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Microsoft.UI.Xaml.Controls.LayoutReference referenceInformation, Windows.Foundation.Rect windowToFill);
        Windows.Foundation.Point GetPositionOfFirstElement();
        Microsoft.UI.Xaml.Controls.Orientation GetVirtualizationDirection();
        Int32 EstimateElementIndex(Microsoft.UI.Xaml.Controls.ElementType elementType, Microsoft.UI.Xaml.Controls.EstimationReference headerReference, Microsoft.UI.Xaml.Controls.EstimationReference containerReference, Windows.Foundation.Rect window, out Windows.Foundation.Rect targetRect);
        Windows.Foundation.Rect EstimateElementBounds(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Microsoft.UI.Xaml.Controls.EstimationReference headerReference, Microsoft.UI.Xaml.Controls.EstimationReference containerReference, Windows.Foundation.Rect window);
        Windows.Foundation.Size EstimatePanelExtent(Microsoft.UI.Xaml.Controls.EstimationReference lastHeaderReference, Microsoft.UI.Xaml.Controls.EstimationReference lastContainerReference, Windows.Foundation.Rect windowConstraint);
        void EstimateIndexFromPoint(Boolean requestingInsertionIndex, Windows.Foundation.Point point, Microsoft.UI.Xaml.Controls.EstimationReference reference, Windows.Foundation.Rect windowConstraint, out Microsoft.UI.Xaml.Controls.IndexSearchHint searchHint, out Microsoft.UI.Xaml.Controls.ElementType elementType, out Int32 elementIndex);
        void GetTargetIndexFromNavigationAction(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Microsoft.UI.Xaml.Controls.KeyNavigationAction action, Windows.Foundation.Rect windowConstraint, Int32 itemIndexHintForHeaderNavigation, out Microsoft.UI.Xaml.Controls.ElementType targetElementType, out Int32 targetElementIndex);
        void IsIndexLayoutBoundary(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Windows.Foundation.Rect windowConstraint, out Boolean isLeftBoundary, out Boolean isTopBoundary, out Boolean isRightBoundary, out Boolean isBottomBoundary);
        Boolean GetRegularSnapPoints(out Single nearOffset, out Single farOffset, out Single spacing);
        Boolean HasIrregularSnapPoints(Microsoft.UI.Xaml.Controls.ElementType elementType);
        Boolean HasSnapPointOnElement(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex);
        Boolean GetIsWrappingStrategy();
        Windows.Foundation.Rect GetElementTransitionsBounds(Microsoft.UI.Xaml.Controls.ElementType elementType, Int32 elementIndex, Windows.Foundation.Rect windowConstraint);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IListViewBasePrivate 
    {
        void ScrollIntoViewWithOptionalAnimation(Object item, Microsoft.UI.Xaml.Controls.ScrollIntoViewAlignment alignment, Boolean disableAnimation);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IMenu 
    {
        Microsoft.UI.Xaml.Controls.IMenu ParentMenu;
        void Close();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IMenuPresenter 
    {
        Microsoft.UI.Xaml.Controls.IMenu OwningMenu;
        Microsoft.UI.Xaml.Controls.ISubMenuOwner Owner;
        Microsoft.UI.Xaml.Controls.IMenuPresenter SubPresenter;
        void CloseSubMenu();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IScrollViewerPrivate 
    {
        Boolean IsInDirectManipulation{ get; };
        Boolean ArePointerWheelEventsIgnored;
        Boolean IsRequestBringIntoViewIgnored;
        Boolean IsInActiveDirectManipulation{ get; };
        void DisableOverpan();
        void EnableOverpan();
        void SetIsNearVerticalAlignmentForced(Boolean enabled);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ISubMenuOwner 
    {
        Boolean IsSubMenuOpen{ get; };
        Boolean IsSubMenuPositionedAbsolutely{ get; };
        Microsoft.UI.Xaml.Controls.ISubMenuOwner ParentOwner;
        void PrepareSubMenu();
        void OpenSubMenu(Windows.Foundation.Point position);
        void PositionSubMenu(Windows.Foundation.Point position);
        void ClosePeerSubMenus();
        void CloseSubMenu();
        void CloseSubMenuTree();
        void DelayCloseSubMenu();
        void CancelCloseSubMenu();
        void RaiseAutomationPeerExpandCollapse(Boolean isOpen);
        void SetSubMenuDirection(Boolean isSubMenuDirectionUp);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ITelemetryCollectionPriv 
    {
        Boolean IsTelemetryCollectionEnabled;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ITextBoxPriv2 
    {
        Boolean IsDesktopPopupMenuEnabled;
        Boolean PreventEditFocusLoss;
        void ForceEditFocusLoss();
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface ITextBoxPrivate 
    {
        Boolean EnsureRectVisibleEnabled;
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [feature(Feature_InputValidation)]
    [webhosthidden]
    unsealed runtimeclass InputValidationCommand
    {
        [method_name("CreateInstance")] InputValidationCommand();
        Microsoft.UI.Xaml.Controls.InputValidationMode InputValidationMode;
        Microsoft.UI.Xaml.Controls.InputValidationKind InputValidationKind;
        Boolean CanValidate(Microsoft.UI.Xaml.Controls.IInputValidationControl validationControl);
        void Validate(Microsoft.UI.Xaml.Controls.IInputValidationControl validationControl);
        overridable Boolean CanValidateCore(Microsoft.UI.Xaml.Controls.IInputValidationControl validationControl);
        overridable void ValidateCore(Microsoft.UI.Xaml.Controls.IInputValidationControl validationControl);
    };

}
namespace Microsoft.UI.Xaml.Internal
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass LayoutTransitionElementUtilities
    {
        static Microsoft.UI.Xaml.UIElement CreateLayoutTransitionElement(Microsoft.UI.Xaml.UIElement source, Microsoft.UI.Xaml.UIElement parent);
        static void DestroyLayoutTransitionElement(Microsoft.UI.Xaml.UIElement source, Microsoft.UI.Xaml.UIElement parent, Microsoft.UI.Xaml.UIElement layoutTransitionElement);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass SecondaryContentRelationship
        : Microsoft.UI.Xaml.DependencyObject
    {
        void SetAuxiliaryDependencyPropertyHolder(Microsoft.UI.Xaml.DependencyObject auxiliaryDependencyPropertyHolder);
        void PrepareForCurveUpdate();
        void Apply();
        void Remove();
        void UpdateDependencyProperties();
        static Microsoft.UI.Xaml.Internal.SecondaryContentRelationship CreateStickyHeaderRelationship(Microsoft.UI.Xaml.UIElement scrollViewer, Microsoft.UI.Xaml.UIElement panelObject, Microsoft.UI.Xaml.DependencyObject panelTransform, Microsoft.UI.Xaml.DependencyObject headerTransform, Double groupTopY, Double groupBottomY, Double headerHeight);
        static Microsoft.UI.Xaml.Internal.SecondaryContentRelationship CreateClipTransformRelationship(Microsoft.UI.Xaml.UIElement scrollViewer, Microsoft.UI.Xaml.UIElement clipOwner, Microsoft.UI.Xaml.DependencyObject clipTransform, Double listExtentHeight, Double listViewportHeight);
        static Microsoft.UI.Xaml.Internal.SecondaryContentRelationship CreateParallaxRelationship(Microsoft.UI.Xaml.UIElement scrollViewer, Microsoft.UI.Xaml.UIElement headerObject, Microsoft.UI.Xaml.DependencyObject headerTransform, Double[] primaryOffsets, Double[] secondaryOffsets);
        static Microsoft.UI.Xaml.Internal.SecondaryContentRelationship CreateStaticElementRelationship(Microsoft.UI.Xaml.UIElement scrollViewer, Microsoft.UI.Xaml.UIElement staticElement, Microsoft.UI.Xaml.DependencyObject elementTransform, Boolean isHorizontallyStatic, Boolean isInverted);
    };

}
namespace Microsoft.UI.Xaml.Media.Imaging
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IXamlRenderingBackgroundTaskStaticsPrivate 
    {
        Microsoft.UI.Xaml.ResourceDictionary Resources{ get; };
        void EnableStandaloneHosting();
        void SetScalePercentage(UInt32 percentage);
    };

}
namespace Microsoft.UI.Xaml.Controls.Primitives
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IFlyoutBasePrivate 
    {
        Boolean UsePickerFlyoutTheme;
        Boolean IsLightDismissOverlayEnabled;
        void PlaceFlyoutForDateTimePicker(Windows.Foundation.Point point);
    };

}
namespace Microsoft.UI.Xaml.Automation.Peers
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface FrameworkElementAutomationPeerPrivate 
    {
        Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> GetAutomationPeersForChildrenOfElement(Microsoft.UI.Xaml.UIElement element);
    };

    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    interface IAutomationPeerPrivate 
    {
        void SetAutomationFocus();
    };

}
namespace Microsoft.UI.Xaml.Hosting
{
    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1)]
    [webhosthidden]
    runtimeclass XamlIslandRoot
        : Microsoft.UI.Xaml.Controls.Panel
    {
        XamlIslandRoot();
        Microsoft.UI.Xaml.UIElement Content;
        Object FocusController{ get; };
        void SetScreenOffsetOverride(Windows.Foundation.Point offsetOnScreen);
        Boolean TrySetFocus();
        static Microsoft.UI.Xaml.Hosting.XamlIslandRoot GetIslandFromElement(Microsoft.UI.Xaml.DependencyObject element);
    };

}

