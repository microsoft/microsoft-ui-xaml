// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class PropertySetterBodyReference : CppCodeGenerator<PropertyDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("wrl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyObject")));
            this.Write("> spThisAsDO;\r\nwrl::ComPtr<IInspectable> spValueAsII;\r\n\r\nIFC(GetComposableBase()." +
                    "As(&spThisAsDO));\r\n\r\nif (pValue != nullptr)\r\n{\r\n    IFC(pValue->QueryInterface(_" +
                    "_uuidof(IInspectable), &spValueAsII));\r\n}\r\nIFC(spThisAsDO->SetValue(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.FactoryTypeName));
            this.Write("::s_");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Property.Get(), spValueAsII.Get()));\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
