// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ClassFactory : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write(@"
{
    // Note that the ordering of the base types here is important - the base factory comes first, followed by all the
    // interfaces specific to this type.  By doing this, we allow every Factory's CreateInstance method to be more
    // COMDAT-folding-friendly.  Because this ensures that the first vfptr contains GetTypeIndex, it means that all
    // CreateInstance functions with the same base factory generate the same assembly instructions and thus will
    // fold together.  This is significant for binary size in Microsoft.UI.Xaml.dll so change this only with great
    // care.
    class __declspec(novtable) ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(":\r\n       public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseFactoryFullName(Model)));
            this.Write("\r\n");
 if (Model.VelocityVersion != 0) {
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
 } 
 foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
       if (VelocityFeatures.IsVelocityVersion(version.Version) &&
           (version.IdlClassInfo.HasFactoryMethods || version.IdlClassInfo.HasStaticMembers || version.FactoryExplicitlyImplementedInterfaces.GetEnumerator().Current != null)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
     }
       if (version.IdlClassInfo.HasFactoryMethods) { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullFactoryInterfaceName)));
            this.Write("\r\n");
     }
       if (version.IdlClassInfo.HasStaticMembers) { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullStaticMembersInterfaceName)));
            this.Write("\r\n");
     }
       foreach (var implementedInterface in version.FactoryExplicitlyImplementedInterfaces) { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write("\r\n");
     }
       if (VelocityFeatures.IsVelocityVersion(version.Version) &&
           (version.IdlClassInfo.HasFactoryMethods || version.IdlClassInfo.HasStaticMembers || version.FactoryExplicitlyImplementedInterfaces.GetEnumerator().Current != null)) { 
            this.Write("#endif\r\n");
         }
   } 
 if (Model.VelocityVersion != 0) {
            this.Write("#endif\r\n");
 } 
            this.Write("    {\r\n");
 if (Model.IdlClassInfo.HasAnyFactoryInterfaces) { 
            this.Write("        BEGIN_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseFactoryFullName(Model))));
            this.Write(")\r\n");
      if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
      }
 bool hasNonVelocityInterfaces = false; 
 foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) { 
 bool hasMembers = version.IdlClassInfo.HasFactoryMethods || version.IdlClassInfo.HasStaticMembers || version.FactoryExplicitlyImplementedInterfaces.GetEnumerator().Current != null; 
       if (VelocityFeatures.IsVelocityVersion(version.Version) && hasMembers) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
     } else if (hasMembers){ 
     hasNonVelocityInterfaces = true; 
     } 
     if (version.IdlClassInfo.HasFactoryMethods) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullFactoryInterfaceName))));
            this.Write(")\r\n");
     }
       if (version.IdlClassInfo.HasStaticMembers) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullStaticMembersInterfaceName))));
            this.Write(")\r\n");
     }
       foreach (var implementedInterface in version.FactoryExplicitlyImplementedInterfaces) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(implementedInterface.AbiFullName))));
            this.Write(")\r\n");
     }
       if (VelocityFeatures.IsVelocityVersion(version.Version) && hasMembers) { 
          if (!hasNonVelocityInterfaces) {
            this.Write("#else\r\n            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)\r\n");
          } 
            this.Write("#endif\r\n");
         }
   } 
     if (Model.VelocityVersion != 0) { 
            this.Write("#else\r\n            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)\r\n#endif\r\n");
     }
            this.Write("        END_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedFactoryName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseFactoryFullName(Model))));
            this.Write(")\r\n");
 } 
            this.Write("\r\n    public:\r\n        // Factory methods.\r\n");
 foreach (var ctor in Model.IdlClassInfo.CustomConstructors) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Constructor>(ctor)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Static properties.\r\n");
 foreach (var property in Model.StaticProperties.Where(m => m.GenerateStub)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(property)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Dependency properties.\r\n");
 foreach (var dp in Model.DependencyProperties) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<DependencyProperty>(dp)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Attached properties.\r\n");
 foreach (var dp in Model.DeclaredAttachedProperties) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<AttachedProperty>(dp)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Static methods.\r\n");
 foreach (var method in Model.StaticMethods.Where(m => m.GenerateStub)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(method)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Static events.\r\n");
 foreach (var e in Model.StaticEvents.Where(m => m.GenerateStub)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Event>(e)));
            this.Write("\r\n");
 } 
            this.Write("\r\n    protected:\r\n");
 if (Model.IdlClassInfo.HasAnyFactoryInterfaces) { 
            this.Write("        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject) ove" +
                    "rride;\r\n");
 } 
            this.Write("\r\n");
 if (!Model.IsExcludedFromTypeTable && !Model.IsAEventArgs) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName));
            this.Write(" GetTypeIndex() const override\r\n        {\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(";\r\n        }\r\n");
 } 
            this.Write("\r\n");
 if (Model.XamlClassFlags.IsFreeThreaded) { 
            this.Write("        _Check_return_ HRESULT CheckActivationAllowed() override;\r\n");
 } 
            this.Write("\r\n    private:\r\n");
 foreach (var ctor in Model.CustomConstructors) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ConstructorImpl>(ctor)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Customized static properties.\r\n");
 foreach (var property in Model.StaticProperties.Where(m => m.GenerateStub && !m.GenerateDefaultBody)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertyImpl>(property)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Customized static  methods.\r\n");
 foreach (var method in Model.StaticMethods.Where(m => m.GenerateStub && !m.GenerateDefaultBody)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<MethodImpl>(method)));
            this.Write("\r\n");
 } 
            this.Write("    };\r\n}\r\n\r\n");
 if (Model.GeneratePartialFactory) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FactoryCppHeaderFileName));
            this.Write("\"\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
