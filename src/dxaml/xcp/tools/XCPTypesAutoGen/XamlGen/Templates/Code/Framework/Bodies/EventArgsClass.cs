// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class EventArgsClass : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#include \"precomp.h\"\r\n#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CppFrameworkGeneratedHeaderFileName));
            this.Write("\"\r\n#include \"CoreEventArgsGroup.h\"\r\n\r\nusing namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write(";\r\n\r\n// Constructors/destructors.\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedClassFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("()");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFieldInitializerString(Model)));
            this.Write("\r\n{\r\n}\r\n\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedClassFullName)));
            this.Write("::~");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("()\r\n{\r\n}\r\n\r\nHRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedClassFullName)));
            this.Write("::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)\r\n{\r\n    if (Inlin" +
                    "eIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.AbiImplementationFullName)));
            this.Write(")))\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.AbiImplementationFullName)));
            this.Write("*>(this);\r\n    }\r\n");
     if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
     }
 foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
           if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
         }
       if (version.IdlClassInfo.HasPrimaryInterface) { 
            this.Write("    else if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write("))");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetQueryInterfaceClause(version.VelocityVersion)));
            this.Write(")\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write("*>(this);\r\n    }\r\n");
     }
       if (version.IdlClassInfo.HasProtectedMembers) { 
            this.Write("    else if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write("))");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetQueryInterfaceClause(version.VelocityVersion)));
            this.Write(")\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write("*>(this);\r\n    }\r\n");
     }
       if (version.IdlClassInfo.HasVirtualMembers) { 
            this.Write("    else if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write("))");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetQueryInterfaceClause(version.VelocityVersion)));
            this.Write(")\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write("*>(this);\r\n    }\r\n");
     }
       foreach (var implementedInterface in version.ImplementedInterfaces) { 
            this.Write("    else if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write("))");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetQueryInterfaceClause(version.VelocityVersion)));
            this.Write(")\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write("*>(this);\r\n    }\r\n");
     }
        if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#endif\r\n");
       }
   } 
     if (Model.VelocityVersion != 0) { 
            this.Write("#endif\r\n");
     }
            this.Write("    else\r\n    {\r\n        RRETURN(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseClassName(Model)));
            this.Write("::QueryInterfaceImpl(iid, ppObject));\r\n    }\r\n\r\n    AddRefOuter();\r\n    RRETURN(S" +
                    "_OK);\r\n}\r\n\r\n");
 if (Model.IdlClassInfo.IsActivatable && Model.IsEventArgsWithCorePeer) { 
            this.Write("CEventArgs* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedClassFullName)));
            this.Write("::CreateCorePeer()\r\n{\r\n");
     if (Model.XamlClassFlags.RequiresCoreServices) { 
            this.Write("    return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CoreName));
            this.Write("(DXamlCore::GetCurrent()->GetHandle());\r\n");
     } else { 
            this.Write("    return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CoreName));
            this.Write("();\r\n");
     } 
            this.Write("}\r\n");
 } 
            this.Write("\r\n// Properties.\r\n");
 foreach (var property in Model.InstanceProperties.Where(m => m.GenerateStub)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(property)));
            this.Write("\r\n");
 } 
            this.Write("\r\n// Methods.\r\n");
 foreach (var method in Model.InstanceMethods.Where(m => m.GenerateStub)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(method)));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 if (Model.HasCustomFactory) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ClassFactory>(Model)));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 if (Model.IsActivatable || Model.IdlClassInfo.HasRuntimeClass) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write("\r\n{\r\n");
     if (Model.IsActivatable) { 
            this.Write("    _Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventArgsFrameworkDefaultConstructor));
            this.Write("(_In_ CEventArgs* pCoreObject, _Out_ IInspectable** ppNewInstance)\r\n    {\r\n      " +
                    "  HRESULT hr = S_OK;\r\n        ctl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.AbiImplementationFullName)));
            this.Write("> spInstance;\r\n        *ppNewInstance = nullptr;\r\n        IFC(ctl::make(pCoreObje" +
                    "ct, &spInstance));\r\n        *ppNewInstance = ctl::iinspectable_cast(spInstance.D" +
                    "etach());\r\n    Cleanup:\r\n        RRETURN(hr);\r\n    }\r\n");
     }
       if (Model.IdlClassInfo.HasRuntimeClass) { 
            this.Write("    _Check_return_ IActivationFactory* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FactoryConstructor));
            this.Write("()\r\n    {\r\n        RRETURN(ctl::ActivationFactoryCreator<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFactoryFullName(Model)));
            this.Write(">::CreateActivationFactory());\r\n    }\r\n");
     } 
            this.Write("}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
