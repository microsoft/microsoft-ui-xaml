// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EventArgsClass : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\n");
 foreach (var dependency in Model.Dependencies.OfType<ClassDefinition>().Where(d => d.GenerateFrameworkHFile)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(dependency.CppFrameworkGeneratedHeaderFileName));
            this.Write("\"\r\n");
 } 
            this.Write("\r\n");
 if (Model.ClassGuidExplicitlySet) { 
            this.Write("#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GuidMacroName));
            this.Write(" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.RuntimeClassGuid));
            this.Write("\"\r\n");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<VelocityFeatureMacros>(Model)));
            this.Write("\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write("\r\n{\r\n    class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.Name)));
            this.Write(";\r\n\r\n    class __declspec(novtable) ");
 if (!Model.GeneratePartialClass) { 
            this.Write("__declspec(uuid(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GuidMacroName));
            this.Write(")) ");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(" :\r\n");
     if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
     } 
 foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
       if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
     }
       if (version.IdlClassInfo.HasPrimaryInterface) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write(",\r\n");
     }
       if (version.IdlClassInfo.HasProtectedMembers) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write(",\r\n");
     }
       if (version.IdlClassInfo.HasVirtualMembers) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(",\r\n");
     }
       foreach (var implementedInterface in version.ExplicitlyImplementedInterfaces) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write(",\r\n");
     }
       if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#endif\r\n");
     }
   }        if (Model.VelocityVersion != 0) { 
            this.Write("#endif\r\n");
     } 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseClassName(Model)));
            this.Write("\r\n    {\r\n");
 if (Model.GeneratePartialClass) { 
            this.Write("        friend class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.AbiImplementationFullName)));
            this.Write(";\r\n");
 } 
            this.Write("\r\n");
 if (Model.IdlClassInfo.HasRuntimeClass) { 
            this.Write("        INSPECTABLE_CLASS(L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlClassInfo.FullName));
            this.Write("\");\r\n");
 } 
            this.Write("\r\n");
 if (Model.IdlClassInfo.HasAnyInstanceInterfaces) { 
            this.Write("        BEGIN_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseClassName(Model))));
            this.Write(")\r\n");
         if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
         }
     foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
           if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
         }
           if (version.IdlClassInfo.HasPrimaryInterface) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullInterfaceName))));
            this.Write(")\r\n");
         }
           if (version.IdlClassInfo.HasProtectedMembers) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName))));
            this.Write(")\r\n");
         }
           if (version.IdlClassInfo.HasVirtualMembers) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName))));
            this.Write(")\r\n");
         }
           if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#endif\r\n");
         }
           foreach (var implementedInterface in version.ImplementedInterfaces) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(implementedInterface.AbiFullName))));
            this.Write(")\r\n");
         }
       }
           if (Model.VelocityVersion != 0) { 
            this.Write("#else\r\n            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)\r\n#endif\r\n");
         }
            this.Write("        END_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseClassName(Model))));
            this.Write(")\r\n");
 } 
            this.Write("\r\n    public:\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("();\r\n        ~");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("() override;\r\n\r\n        // Properties.\r\n");
 foreach (var property in Model.InstanceProperties) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(property)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Methods.\r\n");
     foreach (var method in Model.InstanceMethods) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(method)));
            this.Write("\r\n");
     } 
            this.Write("\r\n    protected:\r\n        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ vo" +
                    "id** ppObject) override;\r\n");
 if (Model.IdlClassInfo.IsActivatable && Model.IsEventArgsWithCorePeer) { 
            this.Write("        CEventArgs* CreateCorePeer() override;\r\n");
 } 
            this.Write("\r\n    private:\r\n");
 // The type may have some customized properties or methods, but we only need to emit anything here if the class is not partial.
   // For a partial type, simply define the FooImpl function in the Foo_Partial.h/.cpp files and it will build.
   if (!Model.GeneratePartialClass) { 
            this.Write("        // Customized properties.\r\n");
     foreach (var property in Model.InstanceProperties.Where(m => m.HasImplMethod)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertyImpl>(property)));
            this.Write("\r\n");
     } 
            this.Write("\r\n        // Customized methods.\r\n");
     foreach (var method in Model.InstanceMethods.Where(m => m.HasImplMethod)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<MethodImpl>(method)));
            this.Write("\r\n");
     }
   } 
            this.Write("\r\n        // Fields.\r\n");
 foreach (var field in Model.InstanceFields) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(field.FrameworkFieldTypeName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FrameworkFieldName));
            this.Write(";\r\n");
 } 
            this.Write("    };\r\n}\r\n\r\n");
 if (Model.GeneratePartialClass) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CppFrameworkHeaderFileName));
            this.Write("\"\r\n");
 } 
            this.Write("\r\n");
 if (Model.HasCustomFactory) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ClassFactory>(Model)));
            this.Write("\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
