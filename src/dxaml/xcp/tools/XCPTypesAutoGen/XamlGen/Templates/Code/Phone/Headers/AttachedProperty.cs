// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class AttachedProperty : CppCodeGenerator<AttachedPropertyDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (!Model.IdlDPInfo.IsExcluded) {
       if (Model.IsHandlePublic) { 
            this.Write("IFACEMETHOD(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.HandleGetterName));
            this.Write(")(_Outptr_ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("** ppValue);\r\n");
     } 
            this.Write("IFACEMETHOD(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlAPInfo.GetterName));
            this.Write(")(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.TargetType.AnnotatedAbiParameterName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiReturnParameterName)));
            this.Write(");\r\n");
     if (!Model.IsReadOnly) { 
            this.Write("IFACEMETHOD(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlAPInfo.SetterName));
            this.Write(")(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.TargetType.AnnotatedAbiParameterName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(");\r\n");
     }
   } 
            this.Write("_Check_return_ static HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.TargetType.AnnotatedAbiParameterName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiReturnParameterName)));
            this.Write(");\r\n");
 if (!Model.IsReadOnly) { 
            this.Write("_Check_return_ static HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.TargetType.AnnotatedAbiParameterName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(");\r\n");
 }
            return this.GenerationEnvironment.ToString();
        }
    }
}
