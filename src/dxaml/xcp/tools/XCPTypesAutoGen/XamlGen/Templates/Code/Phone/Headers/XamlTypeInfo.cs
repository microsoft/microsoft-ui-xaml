// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class XamlTypeInfo : PhoneCppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\n");
 foreach (var entry in QueryHelper.GetPhoneXamlStrings(Model))
   { 
            this.Write("#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsResourceKey(entry.Key)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Value));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 foreach (var t in QueryHelper.GetPhoneXamlTypes(Model))
   { 
            this.Write("#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsResourceIndex(t.MetadataName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.PhoneTypeTableIndex));
            this.Write("\r\n");
 } 
            this.Write("\r\n#define XamlTypeNameTableSize ");
            this.Write(this.ToStringHelper.ToStringWithCulture(QueryHelper.GetPhoneXamlTypes(Model).Count()));
            this.Write("\r\n\r\n");
 int counter = 1;
   foreach (var t in QueryHelper.GetPhoneXamlUserTypes(Model).Where(t => !t.IsValueType && (t as ClassDefinition)?.IsCreateableFromXAML == true)) { 
            this.Write("#define activate_");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(counter++));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 int getCount = 1;
   int setCount = 1;
   foreach (var p in QueryHelper.GetPhoneXamlUserProperties(Model)) {
        if (p is AttachedPropertyDefinition) { 
            this.Write("#define put_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.DeclaringType.TypeTableName));
            this.Write("_Attached");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(setCount++));
            this.Write("\r\n#define get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.DeclaringType.TypeTableName));
            this.Write("_Attached");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(getCount++));
            this.Write("\r\n");
      } else { 
            this.Write("\r\n");
          if (p != null && p.SetterModifier == Modifier.Public) { 
            this.Write("#define put_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.DeclaringType.TypeTableName));
            this.Write("_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(setCount++));
            this.Write("\r\n\r\n");
          } 
            this.Write("#define get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.DeclaringType.TypeTableName));
            this.Write("_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(getCount++));
            this.Write("\r\n");
      }
   } 
            this.Write("\r\n");
 foreach (var m in QueryHelper.GetPhoneXamlUserProperties(Model)) { 
            this.Write("#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsResourcePropertyIndex(m)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(m.PhoneMemberTableIndex));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 counter = 100;
   foreach (var e in Model.GetAllEnums()) { 
            this.Write("#define User");
            this.Write(this.ToStringHelper.ToStringWithCulture(e.Name));
            this.Write("EnumValues ");
            this.Write(this.ToStringHelper.ToStringWithCulture(counter++));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 counter = 1;
   foreach (var e in Model.GetAllEnums()) { 
            this.Write("#define EnumBoxer_");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppDefine(e.MetadataFullName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(counter++));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 counter = 1;
   foreach (var e in QueryHelper.GetPhoneXamlUserTypes(Model).Where(t => (t as ClassDefinition)?.IsVector == true) ) { 
            this.Write("#define AddToVector_");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppDefine(e.MetadataFullName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(counter++));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 counter = 1;
   foreach (var e in QueryHelper.GetPhoneXamlUserTypes(Model).Where(t => (t as ClassDefinition)?.IsMap == true) ) { 
            this.Write("#define AddToMap_");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppDefine(e.MetadataFullName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(counter++));
            this.Write("\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
