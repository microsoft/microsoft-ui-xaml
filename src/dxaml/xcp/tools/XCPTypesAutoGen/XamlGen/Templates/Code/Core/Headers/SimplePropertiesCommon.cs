// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SimplePropertiesCommon : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write(@"

#pragma once

#include <windows.foundation.numerics.h>

// Type converters for types used by simple properties.
// If a new type converter is required, add it to the source T4 file,
// and then add an exception for the type to ObjectWriter::Logic_CreatePropertyValueFromText()
namespace SimplePropertiesCommon {
    HRESULT ConvertToVector2(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::Numerics::Vector2")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToVector3(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::Numerics::Vector3")));
            this.Write("& convertedValue);\r\n    \r\n    HRESULT ConvertToQuaternion(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::Numerics::Quaternion")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToMatrix3x2(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::Numerics::Matrix3x2")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToMatrix4x4(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::Numerics::Matrix4x4")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToTimeSpan(const CValue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PrefixAbi("Windows::Foundation::TimeSpan")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToVector3TransitionComponents(const CVal" +
                    "ue& value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::Vector3TransitionComponents")));
            this.Write("& convertedValue);\r\n\r\n    HRESULT ConvertToDouble(const CValue& value, double& co" +
                    "nvertedValue);\r\n\r\n    HRESULT ConvertToInt32(const CValue& value, int32_t& conve" +
                    "rtedValue);\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
