<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<OMContextView>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#pragma once

#include <windows.foundation.numerics.h>

// Type converters for types used by simple properties.
// If a new type converter is required, add it to the source T4 file,
// and then add an exception for the type to ObjectWriter::Logic_CreatePropertyValueFromText()
namespace SimplePropertiesCommon {
    HRESULT ConvertToVector2(const CValue& value, <#= PrefixAbi("Windows::Foundation::Numerics::Vector2") #>& convertedValue);

    HRESULT ConvertToVector3(const CValue& value, <#= PrefixAbi("Windows::Foundation::Numerics::Vector3") #>& convertedValue);
    
    HRESULT ConvertToQuaternion(const CValue& value, <#= PrefixAbi("Windows::Foundation::Numerics::Quaternion") #>& convertedValue);

    HRESULT ConvertToMatrix3x2(const CValue& value, <#= PrefixAbi("Windows::Foundation::Numerics::Matrix3x2") #>& convertedValue);

    HRESULT ConvertToMatrix4x4(const CValue& value, <#= PrefixAbi("Windows::Foundation::Numerics::Matrix4x4") #>& convertedValue);

    HRESULT ConvertToTimeSpan(const CValue& value, <#= PrefixAbi("Windows::Foundation::TimeSpan") #>& convertedValue);

    HRESULT ConvertToVector3TransitionComponents(const CValue& value, <#= Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::Vector3TransitionComponents") #>& convertedValue);

    HRESULT ConvertToDouble(const CValue& value, double& convertedValue);

    HRESULT ConvertToInt32(const CValue& value, int32_t& convertedValue);
}