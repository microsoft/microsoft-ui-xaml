// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Synonyms : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\nnamespace DirectUISynonyms\r\n{\r\n");
  foreach (var ns in Model.Namespaces.OrderBy(ns => ns.Name))
    {
        foreach (var type in ns.NonGenericReferenceClasses.OrderBy(t => t.Name))
        {
            foreach (var version in type.Versions.OrderBy(v => v.Version))
            {
                var versionedType = version.GetProjection();
                if (versionedType.IdlClassInfo.HasPrimaryInterface)
                { 
            this.Write("    typedef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsCppType(versionedType.IdlClassInfo.FullInterfaceName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(versionedType.IdlClassInfo.InterfaceName));
            this.Write(";\r\n");
              }
                if (versionedType.IdlClassInfo.HasVirtualMembers)
                { 
            this.Write("    typedef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsCppType(versionedType.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(versionedType.IdlClassInfo.VirtualMembersInterfaceName));
            this.Write(";\r\n");
              }
                if (versionedType.IdlClassInfo.HasProtectedMembers)
                { 
            this.Write("    typedef ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.AsCppType(versionedType.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(versionedType.IdlClassInfo.ProtectedMembersInterfaceName));
            this.Write(";\r\n");
              }
            }
        }
   }
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
