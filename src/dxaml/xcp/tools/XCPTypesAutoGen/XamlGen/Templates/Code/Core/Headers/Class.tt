<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<ClassDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#pragma once

#include "<#= Model.BaseClass.CppHeaderFileName #>"
#include <DeclareMacros.h>
#include <Indexes.g.h>
#include <minxcptypes.h>

class <#= Model.CoreName #> : public <#= Model.BaseClass.CoreName #>
{
protected:
<# if (Model.IsAnAutomationPeer) { #>
    <#= Model.CoreName #>(_In_ CCoreServices *pCore, _In_ CValue &value)
        : <#= Model.BaseClass.CoreName #>(pCore, value)
<# } else if (Model.IsCollectionImplementationClass) { #>
    <#= Model.CoreName #>(_In_ int nItemSize)
        : <#= Model.BaseClass.CoreName #>(nItemSize)
<# } else { #>
    <#= Model.CoreName #>(_In_ CCoreServices *pCore)
        : <#= Model.BaseClass.CoreName #>(pCore)<#= GetCoreFieldInitializerString(Model, isContinuationOfInitializationList: true) #>
<# } #>
    {
<# if (Model.GenerateCoreFieldInitializer) { #>
        InitializeDefaults();
<# } #>
        SetIsCustomType();
    }

    ~<#= Model.CoreName #>() override = default;

public:
<# if (Model.IsActivatableInCore) {
       if (Model.IsAnAutomationPeer) { #>
    DECLARE_CREATE_AP(<#= Model.CoreName #>);
<#     } else { #>
    DECLARE_CREATE(<#= Model.CoreName #>);
<#     }
   } #>

<# if (Model.ContainsChildrenInLogicalTree) { #>
    bool AreChildrenInLogicalTree() final { return true; }

<# } #>
    <#= IndexGenerator.KnownTypeIndexEnumName #> GetTypeIndex() const override
    {
        return <#= Model.IndexName #>;
    }

    XUINT32 ParticipatesInManagedTreeInternal() override
    {
        return PARTICIPATES_IN_MANAGED_TREE;
    }
<# foreach (var field in Model.CoreInstanceFields) { #>
    <#= AsCppType(field.CoreFieldTypeName) #> <#= field.FieldName #>;
<# }
   if (Model.GenerateCoreFieldInitializer) { #>
private:
    void InitializeDefaults();
<# } #>
};
