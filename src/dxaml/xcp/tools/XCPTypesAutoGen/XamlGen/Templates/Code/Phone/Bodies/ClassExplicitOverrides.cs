// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ClassExplicitOverrides : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("_Success_(return) _Check_return_ bool\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("::QueryInterfaceOverride(_In_ REFIID riid, _COM_Outptr_ void** ppInterface)\r\n{\r\n");
    bool once = false;
    foreach (var virtualMemberInterface in Model.BaseClassesVirtualMemberInterfaces) {
        if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(virtualMemberInterface.Version)));
            this.Write(")\r\n");
        }
            this.Write("    ");
if (once) {
            this.Write("else ");
}
            this.Write("if (InlineIsEqualGUID(riid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(virtualMemberInterface.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(")))\r\n    {\r\n        *ppInterface = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(virtualMemberInterface.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write("*>(this);\r\n        static_cast<IUnknown*>(*ppInterface)->AddRef();\r\n    }\r\n");
      once = true;
        if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version)) { 
            this.Write("#endif\r\n");
        }
    }
            this.Write("    else \r\n    {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nSTDMETHODI" +
                    "MP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(@"::GetIids(_Out_ ULONG *iidCount,
    _When_(*iidCount == 0, _At_(*iids, _Post_null_))
    _When_(*iidCount > 0, _At_(*iids, _Post_notnull_))
    _Outptr_result_buffer_maybenull_(*iidCount) _Result_nullonfailure_ IID **iids)
{
    IID* pBaseIids;
    ULONG cBaseIids;
    *iidCount = 0;
    *iids = nullptr;
    IFC_RETURN(ReferenceTrackerRuntimeClass::GetIids(&cBaseIids, &pBaseIids));
 
    static const IID localIids[] =
        {
");
    foreach (var virtualMemberInterface in Model.BaseClassesVirtualMemberInterfaces) { 
        if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(virtualMemberInterface.Version)));
            this.Write(")\r\n");
        }
            this.Write("            __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(virtualMemberInterface.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write("),\r\n");
        if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version)) { 
            this.Write("#endif\r\n");
        }
    }
            this.Write(@"        };
    ULONG cLocalIids = _countof(localIids);

    IID* pIids = (IID*)::CoTaskMemAlloc((cBaseIids + cLocalIids) * sizeof(IID));
    if (pIids != nullptr)
    {
        for (ULONG i = 0; i < cBaseIids; i++)
        {
            pIids[i] = pBaseIids[i];
        }
        ::CoTaskMemFree(pBaseIids);

        for (ULONG i = 0; i < cLocalIids; i++)
        {
            pIids[cBaseIids + i] = localIids[i];
        }

        *iids = pIids;
        *iidCount = cBaseIids + cLocalIids;
    }
    else
    {
        RRETURN(E_OUTOFMEMORY);
    }
    RRETURN(S_OK);
}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
