// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class PropertySetter : CppCodeGenerator<PropertyDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (Model.IsStatic) {
       if (Model.IsInterfaceImplementation && !Model.IdlPropertyInfo.IsReadOnly) { 
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedFactoryFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n");
     } else { 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedFactoryFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n");
     } 
            this.Write("{\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertySetterBody>(Model)));
            this.Write("\r\n}\r\n\r\n");
 } else if (Model.IsInterfaceImplementation && !Model.IdlPropertyInfo.IsReadOnly) {
       if (!Model.IsPureVirtual) { 
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n{\r\n");
         if (Model.IsVirtual && Model.Modifier == Modifier.Public) { 
            this.Write("// TODO: IncludeTemplate<VirtualDispatchMethodBody>(Model.GetSetMethod())\r\n");
         } else { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertySetterBody>(Model)));
            this.Write("\r\n");
         } 
            this.Write("}\r\n\r\n");
     }
       if (Model.IsVirtual) {
           if (Model.Modifier == Modifier.Protected) { 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlPropertyInfo.ProtectedSetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n{\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Empty /*TODO: IncludeTemplate<VirtualDispatchMethodBody>(Model)*/));
            this.Write("\r\n}\r\n\r\n");
         } else if (Model.Modifier == Modifier.Public && !Model.IsPureVirtual) { 
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlPropertyInfo.VirtualSetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n{\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertySetterBody>(Model)));
            this.Write("\r\n}\r\n\r\n");
         }
       }
   } else { 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SetterName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.PropertyType.AnnotatedAbiParameterName)));
            this.Write(")\r\n{\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertySetterBody>(Model)));
            this.Write("\r\n}\r\n\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
