<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<OMContextView>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#pragma once

namespace <#= OMContext.DefaultImplementationNamespace #>
{
<# foreach (var type in Model.GetAllEnums().Where(t => t.GenerateInCore && !t.XamlEnumFlags.IsExcludedFromNative).OrderBy(t => t.Name)) { #>
    enum class <#= type.Name #> <#= type.GetNativeTypeSpecification() #>
    {
<#     foreach (var value in type.Values) { #>
        <#= value.Name #> = <#= (type.XamlEnumFlags.AreValuesFlags ? string.Format("0x{0:X}", value.Value) : value.Value.ToString()) #>,
<#     } #>
    };
    DEFINE_ENUM_FLAG_OPERATORS(<#= type.Name #>);

<# if (type.XamlEnumFlags.GenerateConsecutiveEnum) { #>
    enum class <#= type.Name #>Consecutive : uint32_t
    {
<#     for (int i = 0; i < type.Values.Count; i++) { #>
        <#= type.Values[i].Name #> = <#= (type.XamlEnumFlags.AreValuesFlags ? string.Format("0x{0:X}", i) : i.ToString()) #>,
<#  } #>
        InvalidValue = <#= type.Values.Count #>
    };

    <#= type.Name #>Consecutive Convert(<#= type.Name #> value);

<# } #>
<# } #>
}
