<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<ClassDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#pragma once

<# if (Model.BaseClass.GenerateInCore) { #>
#include "<#= Model.BaseClass.CppCoreGeneratedHeaderFileName #>"
<# } #>

class <#= Model.CoreName #>: public <#= Model.BaseClass.CoreName #>
{
public:
    <#= Model.CoreName #>()<#= GetCoreFieldInitializerString(Model) #>
    {
    }

    ~<#= Model.CoreName #>() override = default;

    <#= IndexGenerator.KnownTypeIndexEnumName #> GetEventArgsTypeIndex() const override
    {
        return <#= Model.IndexName #>;
    }

    // Returns a framework peer that wraps this object. Eventually this should move into QueryInterface.
    _Check_return_ HRESULT GetPeer(_Outptr_ IInspectable** ppPeer) override;

<# foreach (var property in Model.InstanceProperties.Where(p => p.GenerateDefaultBody)) { #>
    <#= IncludeTemplate<EventArgsProperty>(property) #>
<# } #>

<# foreach (var field in Model.InstanceFields) { #>
    <#= AsCppType(field.CoreFieldTypeName) #> <#= field.FrameworkFieldName #>;
<# } #>
};
