// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class SimplePropertiesMetadata : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n// Do not include directly, but rather via SimpleProperties.h, which takes ca" +
                    "re of ordering dependencies.\r\n\r\n#pragma once\r\n\r\n// Forward declare host types.\r\n" +
                    "class CDependencyObject;\r\n");
 foreach (var type in Model.GetAllTypeTableClassesWithSimpleProperties().Where((c) => c.SimpleProperties.Any((p) => p.SimpleStorage.Value == SimplePropertyStorage.Sparse || p.SimpleStorage.Value == SimplePropertyStorage.SparseGroup))) { 
            this.Write("class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreName));
            this.Write(";\r\n");
 } 
            this.Write("\r\nnamespace SimpleProperty\r\n{\r\n    // Type specializations.\r\n");
 foreach (var type in Model.GetAllTypeTableSimpleTypes()) { 
            this.Write("\r\n    template <>\r\n    struct type_traits<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexName));
            this.Write(">\r\n    {\r\n        static constexpr TID tid = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexName));
            this.Write(";\r\n        static constexpr Kind kind = Kind::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.SimpleTypeKind.Value.ToString()));
            this.Write(";\r\n        using type = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(type.SimpleTypeName)));
            this.Write(";\r\n    };\r\n");
 } 
            this.Write("\r\n    // Property specializations.\r\n");
 foreach (var property in Model.GetAllTypeTableSimpleProperties()) { 
            this.Write("\r\n    template <>\r\n    struct prop_traits<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write(">\r\n    {\r\n        static constexpr TID tid = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.PropertyType.Type.IndexName));
            this.Write(";\r\n        using declaring_type = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.SimpleDeclaringClass));
            this.Write(";\r\n        static constexpr StorageType storage = StorageType::");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.SimpleStorage.Value.ToString()));
            this.Write(";\r\n");
   if (property.SimpleStorage.Value == SimplePropertyStorage.Field || property.SimpleStorage.Value == SimplePropertyStorage.SparseGroup) { 
     if (property.SimpleStorage.Value == SimplePropertyStorage.Field) { 
            this.Write("        using accessor_target_t = declaring_type;\r\n");
     } else { 
            this.Write("        using group_storage_type = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.SimpleGroupStorageClass));
            this.Write(";\r\n        using accessor_target_t = group_storage_type;\r\n");
     } 
            this.Write("        static constexpr member_getter_t<tid, accessor_target_t> getter = &access" +
                    "or_target_t::Get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(";\r\n        static constexpr member_setter_t<tid, accessor_target_t> setter = &acc" +
                    "essor_target_t::Set_");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(";\r\n");
   } 
            this.Write("    };\r\n");
 } 
            this.Write("\r\n    // Type default values.\r\n");
 foreach (var type in Model.GetAllTypeTableSimpleTypes().Where((t) => t.SimpleDefaultValue != null)) { 
            this.Write("\r\n    template <>\r\n    inline typename interface_types_from_tid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexName));
            this.Write(">::get_return Type::Default<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexName));
            this.Write(">()\r\n    {\r\n        static ");
 if (type.IsConstexprConstructible) { 
            this.Write("constexpr ");
 } 
            this.Write("type_from_tid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexName));
            this.Write("> s_default = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.SimpleDefaultValue));
            this.Write(";\r\n        return s_default;\r\n    };\r\n");
 } 
            this.Write("\r\n    // Property default values.\r\n");
 foreach (var property in Model.GetAllTypeTableSimpleProperties().Where((p) => p.SimpleDefaultValue != null)) { 
            this.Write("\r\n    template <>\r\n    inline typename interface_types_from_pid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write(">::get_return Property::Default<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write(">()\r\n    {\r\n        static ");
 if (property.PropertyType.Type.IsConstexprConstructible) { 
            this.Write("constexpr ");
 } 
            this.Write("type_from_pid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write("> s_default = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.SimpleDefaultValue));
            this.Write(";\r\n        return s_default;\r\n    };\r\n");
 } 
            this.Write("\r\n    // Tables.\r\n\r\n    struct sparsetables\r\n    {\r\n");
 foreach (var property in Model.GetAllTypeTableSimpleProperties().Where((p) => p.SimpleStorage.Value == SimplePropertyStorage.Sparse)) { 
            this.Write("        sparsetable_from_pid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write("> m_");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(";\r\n");
 } 
 foreach (var groupName in Model.GetAllTypeTableSimpleProperties().Where((p) => p.SimpleStorage.Value == SimplePropertyStorage.SparseGroup).Select((p) => p.SimpleGroupStorageClass).Distinct()) { 
            this.Write("        sparsetable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(groupName));
            this.Write("> m_");
            this.Write(this.ToStringHelper.ToStringWithCulture(groupName));
            this.Write(";\r\n");
 } 
            this.Write("    };\r\n\r\n    struct changehandlerstables\r\n    {\r\n");
 foreach (var property in Model.GetAllTypeTableSimpleProperties()) { 
            this.Write("        property_changed_handlers_from_pid<");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexName));
            this.Write("> m_");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(";\r\n");
 } 
            this.Write("    };\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
