// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class XamlTypeInfo : PhoneCppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write(@"

#include ""precomp.h""
#include ""XamlTypeInfo.h""
#include ""XamlTypeInfo.g.h""

#ifndef E_NOT_FOUND
#define E_NOT_FOUND HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
#endif

namespace Private {

//--------------------------------------------------------------------------
//
//  User type activation
//
//--------------------------------------------------------------------------
_Check_return_ HRESULT
XamlRuntimeType::ActivateInstance(
    _In_ UINT16 typeLabel,
    _Outptr_ IInspectable** instance) const
{
    switch(typeLabel)
    {
");
 foreach (var t in QueryHelper.GetPhoneXamlUserTypes(Model).Where(t => !t.IsValueType && (t as ClassDefinition)?.IsCreateableFromXAML == true)) { 
            this.Write("        case activate_");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write(":\r\n            return wrl::MakeAndInitialize<\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(t.DeclaringNamespace.Name)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write(">(instance);\r\n");
 } 
            this.Write(@"        default:
            *instance = nullptr;
            return E_NOT_FOUND;
    }
}

//--------------------------------------------------------------------------
//
//  User type member getters and setters
//
//--------------------------------------------------------------------------
_Check_return_ HRESULT
XamlRuntimeType::SetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* instance,
    _In_ IInspectable* value) const
{
    HRESULT hr = S_OK;

    switch(typeLabel)
    {
");
 foreach (var p in QueryHelper.GetPhoneXamlUserProperties(Model)) {
        if (p is AttachedPropertyDefinition) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<AttachedPropertySetValue>(p as AttachedPropertyDefinition)));
            this.Write("\r\n");
      } else { 
          if (p.SetterModifier == Modifier.Public) { 
                if (p.PropertyType.Type is EnumDefinition || p.IsCustomValueTypedProperty) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<EnumSetValue>(p)));
            this.Write("\r\n");
              } else if (p.PropertyType.Type.IsStringType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<StringSetValue>(p)));
            this.Write("\r\n");
              } else if (p.PropertyType.Type.IsObjectType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ObjectSetValue>(p)));
            this.Write("\r\n");
              } else if (p.PropertyType.IdlInfo.Type.IsValueType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ValueTypeSetValue>(p)));
            this.Write("\r\n");
              } else { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ReferenceTypeSetValue>(p)));
            this.Write("\r\n");
              } 
          } 
      } 
 } 
            this.Write(@"        default:
            IFC(E_NOT_FOUND);
    }
Cleanup:
    return hr;
}

_Check_return_ HRESULT
XamlRuntimeType::GetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* instance,
    _Outptr_result_maybenull_ IInspectable** value) const
{
    HRESULT hr = S_OK;
    wrl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyObject")));
            this.Write("> dependencyObj;\r\n    wrl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("> dependencyProp;\r\n    switch(typeLabel)\r\n    {\r\n\r\n");
 foreach (var p in QueryHelper.GetPhoneXamlUserProperties(Model)) { 
        if (p is AttachedPropertyDefinition) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<AttachedPropertyGetValue>(p as AttachedPropertyDefinition)));
            this.Write("\r\n");
      } else { 
          if (p.PropertyType.Type is EnumDefinition || p.IsCustomValueTypedProperty) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<EnumGetValue>(p)));
            this.Write("\r\n");
          } else if (p.PropertyType.Type.IsStringType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<StringGetValue>(p)));
            this.Write("\r\n");
          } else if (p.PropertyType.Type.IsObjectType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ObjectGetValue>(p)));
            this.Write("\r\n");
          } else if (p.PropertyType.IdlInfo.Type.IsValueType) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ValueTypeGetValue>(p)));
            this.Write("\r\n");
          } else { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ReferenceTypeGetValue>(p)));
            this.Write("\r\n");
          } 
      } 
 } 
            this.Write(@"        default:
            IFC(E_NOT_FOUND);
    }
Cleanup:
    return hr;
}

_Check_return_ HRESULT
XamlRuntimeType::BoxEnum(
    _In_ UINT16 typeLabel,
    _In_ UINT32 enumValue,
    _Outptr_ IInspectable **ppBoxedEnum) const
{
    switch(typeLabel)
    {
");
 foreach (var e in Model.GetAllEnums()) { 
            this.Write("        case EnumBoxer_");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppDefine(e.MetadataFullName)));
            this.Write(":\r\n            return ValueBoxer::EnumBoxer<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(e.TypeTableFullName)));
            this.Write(">(enumValue, ppBoxedEnum);\r\n");
 } 
            this.Write(@"        default:
            return E_NOT_FOUND;
    }
}

_Check_return_ HRESULT
XamlRuntimeType::AddToVector(
    _In_ UINT16 /*addToVectorId*/,
    _In_ IInspectable* /*instance*/,
    _In_ IInspectable* /*value*/) const
{
    return E_NOTIMPL;
}

_Check_return_ HRESULT
XamlRuntimeType::AddToMap(
    _In_ UINT16 /*addToMapId*/,
    _In_ IInspectable* /*instance*/,
    _In_ IInspectable* /*key*/,
    _In_ IInspectable* /*value*/) const
{
    return E_NOTIMPL;
}

// Call into each property and null it out, we initialize all our properties on-demand if needed. This should only be
// called during MetadataAPI::Reset.
void
XamlRuntimeType::ResetDependencyProperties() const
{
");
 foreach (var t in Model.GetAllClassesAndEnums().OrderBy(t => t.Name).OfType<ClassDefinition>().Where(t => !t.IsValueType && (t.IdlClassInfo.HasAnyFactoryInterfaces || t.HasStaticMembers))) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(t.DeclaringNamespace.Name)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write("Factory::ClearProperties();\r\n");
 } 
            this.Write("}\r\n\r\n// Called from XamlType::RunInitializer rather than relying on the factories" +
                    " RuntimeClassInitialize to do the registration\r\nHRESULT\r\nXamlRuntimeType::Ensure" +
                    "DependencyProperties(_In_ UINT16 typeLabel) const\r\n{\r\n  switch(typeLabel)\r\n    {" +
                    "\r\n");
 foreach (var t in QueryHelper.GetPhoneXamlUserTypes(Model).OfType<ClassDefinition>().Where(t => !t.IsValueType && t.IdlClassInfo.HasAnyFactoryInterfaces )) { 
            this.Write("        case activate_");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write(":\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(t.DeclaringNamespace.Name)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(t.TypeTableName));
            this.Write("Factory::EnsureProperties();\r\n");
 } 
            this.Write("        default:\r\n            return S_OK;\r\n    }\r\n}\r\n\r\n} /* namespace Private */" +
                    "\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
