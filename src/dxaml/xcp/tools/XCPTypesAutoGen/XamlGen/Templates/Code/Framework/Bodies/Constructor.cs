// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Constructor : CppCodeGenerator<ConstructorDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (Model.IsParameterless) { 
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedFactoryFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlConstructorInfo.FactoryMethodName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetConstructorParameterListAsString(Model)));
            this.Write(")\r\n{\r\n");
    if (Model.DeclaringClass.VelocityVersion != 0 && !VelocityFeatures.ShouldSkipRuntimeChecks(Model.DeclaringClass.VelocityVersion)) { 
            this.Write("    if (!");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.DeclaringClass.VelocityVersion)));
            this.Write("::IsEnabled()) IFC_RETURN(E_NOTIMPL);\r\n");
    } 
            this.Write("\r\n");
 if (!IsBaseFactoryTypeGeneric(Model.DeclaringClass)) { 
            this.Write(@"#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringTypeReference.AbiFullName)));
            this.Write(");\r\n    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeInde" +
                    "x())->GetGuid();\r\n    const KnownTypeIndex typeIndex = GetTypeIndex();\r\n\r\n    if" +
                    "(uuidofGUID != metadataAPIGUID)\r\n    {\r\n        XAML_FAIL_FAST();\r\n    }\r\n#endif" +
                    "\r\n");
 } 
            this.Write(@"
    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "","" in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWith");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseFactoryTypeNameForValidateFactoryCreateInstance(Model.DeclaringClass)));
            this.Write("(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.XamlClassFlags.IsFreeThreaded.ToString().ToLower()));
            this.Write(" /*isFreeThreaded*/);\r\n    IFC_RETURN(hr);\r\n    return S_OK;\r\n}\r\n\r\n");
 } else { 
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedFactoryFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlConstructorInfo.FactoryMethodName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetConstructorParameterListAsString(Model)));
            this.Write(")\r\n{\r\n    HRESULT hr = S_OK;\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ParameterValidation>(ParameterValidationModel.Create(Model))));
            this.Write("\r\n    ARG_VALIDRETURNPOINTER(ppInstance);\r\n    IFC(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FactoryMethodImplName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetArgumentListAsString(Model)));
            this.Write("));\r\nCleanup:\r\n    return hr;\r\n}\r\n\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
