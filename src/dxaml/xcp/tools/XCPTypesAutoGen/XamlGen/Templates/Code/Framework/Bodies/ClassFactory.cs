// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ClassFactory : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (Model.IdlClassInfo.HasAnyFactoryInterfaces) { 
            this.Write("HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedFactoryFullName)));
            this.Write("::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)\r\n{\r\n");
     bool hasObj = false;
       bool hasVelocityObj = false;
       using (var headerGenerator = new HeaderGenerator())
       {
           if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
         }
           foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
              if (VelocityFeatures.IsVelocityVersion(version.Version) &&
                 (version.IdlClassInfo.HasFactoryMethods || version.IdlClassInfo.HasStaticMembers || version.FactoryExplicitlyImplementedInterfaces.GetEnumerator().Current != null)) { 
                 if (headerGenerator.IsFirst) { 
            this.Write("    if (false) {} // dummy clause to let velocity conditions work \r\n");
                  } 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
     }
               if (version.IdlClassInfo.HasFactoryMethods) { 
            this.Write("    ");
 if (!headerGenerator.IsFirst) { 
            this.Write("else ");
 } 
            this.Write("if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullFactoryInterfaceName)));
            this.Write(")))\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullFactoryInterfaceName)));
            this.Write("*>(this);\r\n");
 if (Model.VelocityVersion != 0) { hasVelocityObj = true; } else { hasObj = true; } 
            this.Write("    }\r\n");
             }
               if (version.IdlClassInfo.HasStaticMembers) { 
            this.Write("    ");
 if (!headerGenerator.IsFirst) { 
            this.Write("else ");
 } 
            this.Write("if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullStaticMembersInterfaceName)));
            this.Write(")))\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullStaticMembersInterfaceName)));
            this.Write("*>(this);\r\n");
 if (Model.VelocityVersion != 0) { hasVelocityObj = true; } else { hasObj = true; } 
            this.Write("    }\r\n");
             }
               foreach (var implementedInterface in version.FactoryExplicitlyImplementedInterfaces) { 
            this.Write("    ");
 if (!headerGenerator.IsFirst) { 
            this.Write("else ");
 } 
            this.Write("if (InlineIsEqualGUID(iid, __uuidof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write(")))\r\n    {\r\n        *ppObject = static_cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write("*>(this);\r\n");
 if (Model.VelocityVersion != 0) { hasVelocityObj = true; } else { hasObj = true; } 
            this.Write("    }\r\n");
             }
       if (VelocityFeatures.IsVelocityVersion(version.Version) &&
           (version.IdlClassInfo.HasFactoryMethods || version.IdlClassInfo.HasStaticMembers || version.FactoryExplicitlyImplementedInterfaces.GetEnumerator().Current != null)) { 
            this.Write("#endif\r\n");
            }
           } 
            this.Write("    else\r\n");
         if (Model.VelocityVersion != 0) { 
            this.Write("#endif\r\n");
         }
            this.Write("    {\r\n        RRETURN(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseFactoryFullName(Model)));
            this.Write("::QueryInterfaceImpl(iid, ppObject));\r\n    }\r\n\r\n");
 if (hasObj) { 
            this.Write("    AddRefOuter();\r\n    RRETURN(S_OK);\r\n");
 } else if (hasVelocityObj) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n    AddRefOuter();\r\n    RRETURN(S_OK);\r\n#endif\r\n");
 } } 
            this.Write("}\r\n");
 } 
            this.Write("\r\n");
 if (Model.XamlClassFlags.IsFreeThreaded) { 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedFactoryFullName)));
            this.Write("::CheckActivationAllowed()\r\n{\r\n    RRETURN(S_OK);\r\n}\r\n");
 } 
            this.Write("\r\n// Factory methods.\r\n");
 foreach (var ctor in Model.IdlClassInfo.CustomConstructors.Where(c => c.GenerateStub)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Constructor>(ctor)));
            this.Write("\r\n");
 } 
            this.Write("\r\n// Dependency properties.\r\n");
 foreach (var dp in Model.DependencyProperties) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<DependencyProperty>(dp)));
            this.Write("\r\n");
 } 
            this.Write("\r\n// Attached properties.\r\n");
 foreach (var dp in Model.DeclaredAttachedProperties) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<AttachedProperty>(dp)));
            this.Write("\r\n");
 } 
            this.Write("\r\n// Static properties.\r\n");
 foreach (var m in Model.StaticProperties) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(m)));
            this.Write("\r\n");
 } 
            this.Write("\r\n// Static methods.\r\n");
 foreach (var m in Model.StaticMethods) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(m)));
            this.Write("\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
