// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Class : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\n");
 if (Model.BaseClass.GenerateFrameworkHFile) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.BaseClass.CppFrameworkGeneratedHeaderFileName));
            this.Write("\"\r\n");
 }
   foreach (var dependency in Model.Dependencies.OfType<ClassDefinition>().Where(d => d.GenerateFrameworkHFile && (d.IsValueType || d.IsInterface)).OrderBy(d => d.CppFrameworkGeneratedHeaderFileName)) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(dependency.CppFrameworkGeneratedHeaderFileName));
            this.Write("\"\r\n");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<VelocityFeatureMacros>(Model)));
            this.Write("\r\n");
 if (!Model.IsStatic) { 
 if (Model.ClassGuidExplicitlySet) { 
            this.Write("#define ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GuidMacroName));
            this.Write(" \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.RuntimeClassGuid));
            this.Write("\"\r\n");
 } 

  bool foundForwarder = false;
  foreach (var version in Model.VersionProjections) {
      if (version.IsVersionInterfaceForwarded()) {
        if (!foundForwarder) {
            foundForwarder = true; 
            this.Write("\r\n#pragma region forwarders\r\n");
           if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
          }
            this.Write("namespace ctl\r\n{\r\n");
      }
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<InterfaceForwarder>(version)));
            this.Write("\r\n");
     }
  }
  if (foundForwarder) { 
            this.Write("}\r\n");
     if (Model.VelocityVersion != 0) { 
            this.Write("#endif\r\n");
     }
            this.Write("#pragma endregion\r\n");
 } 
            this.Write("\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write("\r\n{\r\n    class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.Name)));
            this.Write(";\r\n");
 foreach (var dependency in Model.Dependencies.OfType<ClassDefinition>().Where(d => d.GenerateFrameworkHFile && !d.IsValueType && !d.IsInterface && d != Model.BaseClass).OrderBy(d => d.Name)) { 
            this.Write("    class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(dependency.Name)));
            this.Write(";\r\n");
 } 
            this.Write("\r\n    class __declspec(novtable) ");
 if (!Model.GeneratePartialClass) { 
            this.Write("__declspec(uuid(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GuidMacroName));
            this.Write(")) ");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(":\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseClassName(Model)));
            this.Write("\r\n");
           if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
          }
     foreach (var version in Model.VersionProjections) { 
          if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
         } 
          if (version.IdlClassInfo.HasPrimaryInterface) { 
             if (version.IsVersionInterfaceForwarded()) { 
            this.Write("        , public ctl::forwarder_holder< ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(" >\r\n");
             } 
              else { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write("\r\n");
             } 
         } 
         if (version.IdlClassInfo.HasProtectedMembers) { 
             if (version.IsVersionInterfaceForwarded()) { 
            this.Write("        , public ctl::forwarder_holder< ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(" >\r\n");
             } 
             else { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write("\r\n");
             } 
         } 
          if (version.IdlClassInfo.HasVirtualMembers) { 
             if (version.IsVersionInterfaceForwarded()) { 
            this.Write("        , public ctl::forwarder_holder< ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(" >\r\n");
             } 
               else { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write("\r\n");
             } 
          } 
         foreach (var implementedInterface in version.ExplicitlyImplementedInterfaces.OrderBy(implementedInterface => implementedInterface.AbiFullName)) { 
            this.Write("        , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write("\r\n");
         } 
         if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#endif\r\n");
       } 
    } 
           if (Model.VelocityVersion != 0) { 
            this.Write("#endif\r\n");
          }
            this.Write("    {\r\n");
     if (Model.GeneratePartialClass) { 
            this.Write("        friend class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.AbiImplementationFullName)));
            this.Write(";\r\n");
     } 
            this.Write("\r\n");
     if (Model.IdlClassInfo.HasRuntimeClass) { 
            this.Write("        INSPECTABLE_CLASS(L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlClassInfo.FullName));
            this.Write("\");\r\n");
     } 
            this.Write("\r\n");
     if (Model.IdlClassInfo.HasAnyInstanceInterfaces) { 
            this.Write("        BEGIN_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseClassName(Model))));
            this.Write(")\r\n");
         if (Model.VelocityVersion != 0) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(Model.VelocityVersion)));
            this.Write(")\r\n");
         }
 bool hasNonVelocityInterfaces = false; 
         foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
               if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(version.Version)));
            this.Write(")\r\n");
             } else {
                 hasNonVelocityInterfaces = true; 
              } 
             if (version.IdlClassInfo.HasPrimaryInterface) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullInterfaceName))));
            this.Write(")\r\n");
             }
               if (version.IdlClassInfo.HasProtectedMembers) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName))));
            this.Write(")\r\n");
             }
               if (version.IdlClassInfo.HasVirtualMembers) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName))));
            this.Write(")\r\n");
             }
               foreach (var implementedInterface in version.ImplementedInterfaces.OrderBy(implementedInterface => implementedInterface.AbiFullName)) { 
            this.Write("            INTERFACE_ENTRY(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(AsCppType(implementedInterface.AbiFullName))));
            this.Write(")\r\n");
             }
               if (VelocityFeatures.IsVelocityVersion(version.Version)) { 
                  if (!hasNonVelocityInterfaces) {
            this.Write("#else\r\n            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)\r\n");
                  } 
            this.Write("#endif\r\n");
             }
           } 
         if (Model.VelocityVersion != 0) { 
            this.Write("#else\r\n            INTERFACE_ENTRY(DUMMYINTERFACE, IUnknown)\r\n#endif\r\n");
         } 
            this.Write("        END_INTERFACE_MAP(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodeMacroParameter(GetBaseClassName(Model))));
            this.Write(")\r\n");
     } 
            this.Write("\r\n    public:\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("();\r\n        ~");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write("() override;\r\n\r\n        // Event source typedefs.\r\n");
     foreach (var ev in Model.Events.Where(ev => ev.GenerateStub && !ev.XamlEventFlags.IsHidden)) { 
        if (VelocityFeatures.IsVelocityVersion(ev.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.VelocityFeatureName));
            this.Write(")\r\n");
        }
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<EventSourceType>(ev)));
            this.Write("\r\n");
        if (VelocityFeatures.IsVelocityVersion(ev.Version)) { 
            this.Write("#endif\r\n");
        }
     } 
            this.Write("\r\n");
     if (!Model.IsExcludedFromTypeTable && !Model.IsAEventArgs) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName));
            this.Write(" GetTypeIndex() const override\r\n        {\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(";\r\n        }\r\n\r\n        static XCP_FORCEINLINE ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName));
            this.Write(" GetTypeIndexStatic()\r\n        {\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(";\r\n        }\r\n");
     } 
            this.Write("\r\n        // Properties.\r\n");
     foreach (var property in Model.InstanceProperties.Where(p => p.GenerateStub).OrderBy(property => property.Name)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(property)));
            this.Write("\r\n");
     } 
            this.Write("\r\n        // Events.\r\n");
     foreach (var ev in Model.InstanceEvents.Where(ev => !ev.XamlEventFlags.IsHidden).OrderBy(ev => ev.Name)) { 
        if (VelocityFeatures.IsVelocityVersion(ev.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.VelocityFeatureName));
            this.Write(")\r\n");
        }
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Event>(ev)));
            this.Write("\r\n");
        if (VelocityFeatures.IsVelocityVersion(ev.Version)) { 
            this.Write("#endif\r\n");
        }
     } 
            this.Write("\r\n        // Methods.\r\n");
     foreach (var method in Model.InstanceMethods.OrderBy(method => method.Name)) { 
        if (VelocityFeatures.IsVelocityVersion(method.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(method.VelocityFeatureName));
            this.Write(")\r\n");
        }
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(method)));
            this.Write("\r\n");
        if (VelocityFeatures.IsVelocityVersion(method.Version)) { 
            this.Write("#endif\r\n");
        }
     } 
            this.Write("\r\n");
     if (Model.TemplateParts.Any()) { 
            this.Write("        IFACEMETHOD(OnApplyTemplate)() override;\r\n");
     } 
            this.Write("\r\n    protected:\r\n        HRESULT QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ vo" +
                    "id** ppObject) override;\r\n");
 // Only supports events on UIElements and their descendents
    if (Model.IsAUIElement && Model.Events.Where(m => m.IdlEventInfo.ForwardDeclareIReference).Count() > 0) { 
            this.Write("        ");
 if (Model.Name == "UIElement") { 
            this.Write("virtual ");
 } 
            this.Write("_Check_return_ HRESULT EventAddHandlerByIndex(_In_ KnownEventIndex nEventIndex, _" +
                    "In_ IInspectable* pHandler, _In_ BOOLEAN handledEventsToo)");
 if (Model.Name != "UIElement") { 
            this.Write(" override");
 } 
            this.Write(";\r\n        ");
 if (Model.Name == "UIElement") { 
            this.Write("virtual ");
 } 
            this.Write("_Check_return_ HRESULT EventRemoveHandlerByIndex(_In_ KnownEventIndex nEventIndex" +
                    ", _In_ IInspectable* pHandler)");
 if (Model.Name != "UIElement") { 
            this.Write(" override");
 } 
            this.Write(";\r\n");
 } 
            this.Write("\r\n    private:\r\n");
 // If this type does not derive from DependencyObject, and it declares an event, then it needs to declare its own copy of
   // EventAddPreValidation for now, since this simplifies codegen significantly and currently only affects ItemContainerGenerator.
   if(Model.BaseClass.IsObjectType && Model.InstanceEvents.Where(ev => !ev.XamlEventFlags.IsHidden).Count() > 0) { 
            this.Write("       _Check_return_ HRESULT EventAddPreValidation(_In_ void* const pValue, Even" +
                    "tRegistrationToken* const ptToken) const;\r\n");
 } 
 // The type may have some customized properties or methods, but we only need to emit anything here if the class is not partial.
   // For a partial type, simply define the FooImpl function in the Foo_Partial.h/.cpp files and it will build.
   if (!Model.GeneratePartialClass) { 
            this.Write("        // Customized properties.\r\n");
     foreach (var property in Model.InstanceProperties.Where(m => m.HasImplMethod)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertyImpl>(property)));
            this.Write("\r\n");
     } 
            this.Write("\r\n        // Customized methods.\r\n");
     foreach (var method in Model.InstanceMethods.Where(m => m.HasImplMethod)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<MethodImpl>(method)));
            this.Write("\r\n");
     }
   } 
            this.Write("\r\n        // Fields.\r\n");
     foreach (var templatePart in Model.TemplateParts.OrderBy(templatePart => templatePart.FieldName)) { 
            this.Write("        TrackerPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(templatePart.Type.AbiFullName)));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(templatePart.FieldName));
            this.Write(";\r\n");
     }
       foreach (var field in Model.InstanceFields.OrderBy(field => field.Name)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(field.FrameworkFieldTypeName)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FrameworkFieldName));
            this.Write(";\r\n");
     } 
     if (Model.InstanceEvents.Where(ev => ev.IsSimplePropertyChangedEvent).Any()) { 
            this.Write("        // Simple property changed handlers.\r\n");
         foreach (var ev in Model.InstanceEvents.Where(ev => ev.IsSimplePropertyChangedEvent).OrderBy(ev => ev.SimplePropertyChangedHandlerName)) { 
            this.Write("        static void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.SimplePropertyChangedHandlerName));
            this.Write("(SimpleProperty::objid_t obj);\r\n");
         } 
     } 
            this.Write("    };\r\n}\r\n");
 } 
            this.Write("\r\n");
 if (Model.GeneratePartialClass) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.CppFrameworkHeaderFileName));
            this.Write("\"\r\n");
 } 
            this.Write("\r\n");
 if (Model.HasCustomFactory) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ClassFactory>(Model)));
            this.Write("\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
