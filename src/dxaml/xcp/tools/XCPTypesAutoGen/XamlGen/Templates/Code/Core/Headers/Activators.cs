// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Activators : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\nclass CREATEPARAMETERS;\r\nclass CDependencyObject;\r\nclass CEve" +
                    "ntArgs;\r\n\r\n");
 foreach (var type in Model.GetAllClasses().Where(c => c.IsActivatableInCore)) { 
            this.Write("HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreDefaultConstructor));
            this.Write("(_Outptr_ CDependencyObject **ppObject, _In_ CREATEPARAMETERS *pCreate);\r\n");
 }
   foreach (var type in Model.GetTypeTableEnums()) { 
            this.Write("HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreDefaultConstructor));
            this.Write("(_Outptr_ CDependencyObject **ppObject, _In_ CREATEPARAMETERS *pCreate);\r\n");
 } 
            this.Write("\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OMContext.DefaultImplementationNamespace));
            this.Write("\r\n{\r\n");
 foreach (var type in Model.GetAllClasses().Where(c => c.IsAEventArgs && c.IsActivatable)) { 
            this.Write("    HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.EventArgsFrameworkDefaultConstructor));
            this.Write("(_In_ CEventArgs* pCoreArgs, _Out_ IInspectable** ppNewInstance);\r\n");
 } 
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
