// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class InitializeProperty : CppCodeGenerator<PropertyDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 var isAttached = Model is AttachedPropertyDefinition; 
            this.Write("_Check_return_ HRESULT\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.GeneratedFactoryName));
            this.Write("::Initialize");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Property()\r\n{\r\n    HRESULT hr = S_OK;\r\n\r\n    if (!s_");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Property)\r\n    {\r\n");
 if (Model.HasCallbackRetrievedValue) { 
            this.Write("        wrl::ComPtr<IInspectable> sp");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Value;\r\n        IFC(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.Name));
            this.Write("::GetDefault");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("(&sp");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Value));\r\n\r\n");
 } 
            this.Write("        IFC(Private::InitializeDependencyProperty(\r\n            L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("\",\r\n            L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.PropertyType.Type.DeclaringNamespace.Name + "." + Model.PropertyType.Type.MetadataName));
            this.Write("\",\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.IdlClassInfo.RuntimeClassString));
            this.Write(",\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(isAttached ? "true" : "false"));
            this.Write(", /* isAttached */\r\n            ");
 if (Model.HasCallbackRetrievedValue) { 
            this.Write("sp");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Value.Get()");
 } else { 
            this.Write("nullptr");
 } 
            this.Write(",  /* defaultValue */\r\n");
 if (Model.DeclaringClass.HasPropertyChangeCallback && Model.HasPropertyChangeCallback) { 
            this.Write("            wrl::Callback<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IPropertyChangedCallback")));
            this.Write(">(&");
            this.Write(this.ToStringHelper.ToStringWithCulture(isAttached ? Model.DeclaringClass.Name : Model.DeclaringClass.GeneratedFactoryName));
            this.Write("::On");
 if (isAttached) { 
            this.Write("Attached");
 } 
            this.Write("PropertyChanged).Get(),  /* property changed callback */\r\n");
 } else { 
            this.Write("            nullptr,  /* property changed callback */\r\n");
 } 
            this.Write("            &");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.GeneratedFactoryName));
            this.Write("::s_");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("Property));\r\n    }\r\n\r\nCleanup:\r\n    RRETURN(hr);\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
