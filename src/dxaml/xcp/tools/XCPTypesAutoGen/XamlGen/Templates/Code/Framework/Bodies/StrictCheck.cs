// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class StrictCheck : CppCodeGenerator<StrictCheckModel>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (Model.MemberDefinition.DeclaringType.IsADependencyObject && !Model.MemberDefinition.DeclaringType.IsExcludedFromTypeTable &&
       !Model.MemberDefinition.IsStatic &&
       (Model.MemberDefinition.Modifier == Modifier.Public || Model.MemberDefinition.Modifier == Modifier.Protected)) { 
     if (Model.ForceIndent) { PushIndent("    "); } 
     if (!Model.MemberDefinition.DeclaringClass.IsStrict) { 
         if (Model.MemberDefinition.Strictness == null) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UseIfcReturn ? "IFC_RETURN" : "IFC"));
            this.Write("(DefaultStrictApiCheck(this));\r\n");
         } else if (Model.MemberDefinition.Strictness.Value == Strictness.StrictOnly) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UseIfcReturn ? "IFC_RETURN" : "IFC"));
            this.Write("(StrictOnlyApiCheck(this, L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MemberDefinition.Name));
            this.Write("\"));\r\n");
         } else if (Model.MemberDefinition.Strictness.Value == Strictness.NonStrictOnly) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UseIfcReturn ? "IFC_RETURN" : "IFC"));
            this.Write("(NonStrictOnlyApiCheck(this, L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MemberDefinition.Name));
            this.Write("\"));\r\n");
         } 
     } 
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
