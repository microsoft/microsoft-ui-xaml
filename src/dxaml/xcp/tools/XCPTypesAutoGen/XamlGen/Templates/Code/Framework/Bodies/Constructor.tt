<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<ConstructorDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<# if (Model.IsParameterless) { #>
IFACEMETHODIMP <#= AsCppType(Model.DeclaringClass.GeneratedFactoryFullName) #>::<#= Model.IdlConstructorInfo.FactoryMethodName #>(<#= GetConstructorParameterListAsString(Model) #>)
{
<#    if (Model.DeclaringClass.VelocityVersion != 0 && !VelocityFeatures.ShouldSkipRuntimeChecks(Model.DeclaringClass.VelocityVersion)) { #>
    if (!<#= VelocityFeatures.GetFeatureName(Model.DeclaringClass.VelocityVersion) #>::IsEnabled()) IFC_RETURN(E_NOTIMPL);
<#    } #>

<# if (!IsBaseFactoryTypeGeneric(Model.DeclaringClass)) { #>
#if DBG
    // We play some games with reinterpret_cast and assuming that the GUID type table is accurate - which is somewhat sketchy, but
    // really good for binary size.  This code is a sanity check that the games we play are ok.
    const GUID uuidofGUID = __uuidof(<#= AsCppType(Model.DeclaringTypeReference.AbiFullName) #>);
    const GUID metadataAPIGUID = MetadataAPI::GetClassInfoByIndex(GetTypeIndex())->GetGuid();
    const KnownTypeIndex typeIndex = GetTypeIndex();

    if(uuidofGUID != metadataAPIGUID)
    {
        XAML_FAIL_FAST();
    }
#endif
<# } #>

    // Can't just IFC(_RETURN) this because for some validate calls (those with multiple template parameters), the
    // preprocessor gets confused at the "," in the template type-list before the function's opening parenthesis.
    // So we'll use IFC_RETURN syntax with a local hr variable, kind of weirdly.
    const HRESULT hr = ctl::ValidateFactoryCreateInstanceWith<#= GetBaseFactoryTypeNameForValidateFactoryCreateInstance(Model.DeclaringClass) #>(pOuter, ppInner, reinterpret_cast<IUnknown**>(ppInstance), GetTypeIndex(), <#= Model.DeclaringClass.XamlClassFlags.IsFreeThreaded.ToString().ToLower() #> /*isFreeThreaded*/);
    IFC_RETURN(hr);
    return S_OK;
}

<# } else { #>
IFACEMETHODIMP <#= AsCppType(Model.DeclaringClass.GeneratedFactoryFullName) #>::<#= Model.IdlConstructorInfo.FactoryMethodName #>(<#= GetConstructorParameterListAsString(Model) #>)
{
    HRESULT hr = S_OK;
    <#= IncludeTemplate<ParameterValidation>(ParameterValidationModel.Create(Model)) #>
    ARG_VALIDRETURNPOINTER(ppInstance);
    IFC(<#= Model.FactoryMethodImplName #>(<#= GetArgumentListAsString(Model) #>));
Cleanup:
    return hr;
}

<# } #>