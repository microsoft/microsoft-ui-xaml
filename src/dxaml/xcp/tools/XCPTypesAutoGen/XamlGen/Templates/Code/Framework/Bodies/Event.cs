// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Event : CppCodeGenerator<EventDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (VelocityFeatures.IsVelocityVersion(Model.Version)) { 
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.VelocityFeatureName));
            this.Write(")\r\n");
 }
 if (Model.IsSimplePropertyChangedEvent) { 
            this.Write("void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SimplePropertyChangedHandlerName));
            this.Write("(SimpleProperty::objid_t obj)\r\n{\r\n    IFCFAILFAST((DependencyObject::RaiseSimpleP" +
                    "ropertyChangedNotification<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DeclaringClass.Name));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventSourceTypeName));
            this.Write(">(\r\n        obj,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(",\r\n        nullptr)));\r\n}\r\n\r\n");
 } 
 if (Model.GenerateDefaultBody) { 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetEventSourceName));
            this.Write("(_Outptr_ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventSourceTypeName));
            this.Write("** ppEventSource)\r\n{\r\n    HRESULT hr = S_OK;\r\n\r\n    IFC(GetEventSourceNoRefWithAr" +
                    "gumentValidation(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(", reinterpret_cast<IUntypedEventSource**>(ppEventSource)));\r\n\r\n    if (*ppEventSo" +
                    "urce == nullptr)\r\n    {\r\n        IFC(ctl::ComObject<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventSourceTypeName));
            this.Write(">::CreateInstance(ppEventSource, TRUE /* fDisableLeakChecks */));\r\n        (*ppEv" +
                    "entSource)->Initialize(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(", this, /* bUseEventManager */ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppBoolean(Model.UseEventManager)));
            this.Write(");\r\n        IFC(StoreEventSource(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write(", *ppEventSource));\r\n");
 if (Model.IsSimplePropertyChangedEvent) { 
            this.Write("        SimpleProperty::Property::RegisterHandler(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SimplePropertyEventSourceMember.IndexName));
            this.Write(", &");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SimplePropertyChangedHandlerName));
            this.Write(");\r\n");
 } 
            this.Write("\r\n        // The caller doesn\'t expect a ref, this function ends in \"NoRef\".  The" +
                    " ref is now owned by the map (inside StoreEventSource)\r\n        ReleaseInterface" +
                    "NoNULL(ctl::iunknown_cast(*ppEventSource));\r\n    }\r\n\r\nCleanup:\r\n    return hr;\r\n" +
                    "}\r\n");
 } 
            this.Write("\r\n");
 if (Model.IsInterfaceImplementation) {
       if (Model.DeclaringVersion.IsVersionInterfaceForwarded()) { 
            this.Write("_Check_return_ HRESULT STDMETHODCALLTYPE ");

       } else { 
            this.Write("IFACEMETHODIMP ");

       }
   } else { 
            this.Write("_Check_return_ HRESULT ");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AddName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.EventHandlerType.AnnotatedAbiParameterName)));
            this.Write(", _Out_ EventRegistrationToken* ptToken)\r\n{\r\n    HRESULT hr = S_OK;\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventSourceTypeName));
            this.Write("* pEventSource = nullptr;\r\n\r\n    IFC(EventAddPreValidation(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventHandlerType.AbiParameterName));
            this.Write(", ptToken));\r\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<StrictCheck>(StrictCheckModel.Create(Model, true /*forceIndent*/))));
            this.Write("\r\n    IFC(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetEventSourceName));
            this.Write("(&pEventSource));\r\n    IFC(pEventSource->AddHandler(pValue));\r\n\r\n    ptToken->val" +
                    "ue = (INT64)pValue;\r\n\r\nCleanup:\r\n    return hr;\r\n}\r\n\r\n");
 if (Model.IsInterfaceImplementation) {
       if (Model.DeclaringVersion.IsVersionInterfaceForwarded()) { 
            this.Write("_Check_return_ HRESULT STDMETHODCALLTYPE ");

       } else { 
            this.Write("IFACEMETHODIMP ");

       }
   } else { 
            this.Write("_Check_return_ HRESULT ");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.DeclaringClass.GeneratedClassFullName)));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.RemoveName));
            this.Write("(_In_ EventRegistrationToken tToken)\r\n{\r\n    HRESULT hr = S_OK;\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.EventSourceTypeName));
            this.Write("* pEventSource = nullptr;\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.EventHandlerType.AbiFullName)));
            this.Write("* pValue = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.EventHandlerType.AbiFullName)));
            this.Write("*)tToken.value;\r\n\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<CheckAPICall>(Model)));
            this.Write("\r\n    IFC(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetEventSourceName));
            this.Write("(&pEventSource));\r\n    IFC(pEventSource->RemoveHandler(pValue));\r\n\r\n");
     if (Model.DeclaringClass.IsADependencyObject) {
            this.Write("    if (!pEventSource->HasHandlers())\r\n    {\r\n");
 if (Model.IsSimplePropertyChangedEvent) { 
            this.Write("        SimpleProperty::Property::UnregisterHandler(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SimplePropertyEventSourceMember.IndexName));
            this.Write(", &");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.SimplePropertyChangedHandlerName));
            this.Write(");\r\n");
 } 
            this.Write("        IFC(RemoveEventSource(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IndexName));
            this.Write("));\r\n    }\r\n");
     } 
            this.Write("\r\nCleanup:\r\n    RRETURN(hr);\r\n}\r\n");
 if (VelocityFeatures.IsVelocityVersion(Model.Version)) { 
            this.Write("#endif\r\n");
 }
            return this.GenerationEnvironment.ToString();
        }
    }
}
