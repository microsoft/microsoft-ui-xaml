// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Factory : PhoneCppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("    class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.FactoryTypeName));
            this.Write("\r\n        :\r\n        public wrl::AgileActivationFactory<");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPhoneActivationFactoryTemplateParameters(Model)));
            this.Write(">\r\n    {\r\n\r\n    friend class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratedClassName));
            this.Write(";\r\n    friend class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write(";\r\n\r\n    public:\r\n         _Check_return_ HRESULT RuntimeClassInitialize();\r\n    " +
                    "     static _Check_return_ HRESULT EnsureProperties();\r\n         static void Cle" +
                    "arProperties();\r\n");
 foreach (var ctor in Model.IdlClassInfo.CustomConstructors) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Constructor>(ctor)));
            this.Write("\r\n");
 } 
   if (Model.NeedsActivateInstance) { 
            this.Write("        IFACEMETHOD(ActivateInstance)(\r\n            _Outptr_ IInspectable** ppIns" +
                    "pectable);\r\n");
 } 
            this.Write("\r\n        // Properties.\r\n\r\n        // Dependency properties.\r\n");
 foreach (var p in Model.IdlClassInfo.DependencyProperties) { 
            this.Write("        IFACEMETHOD(get_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write("Property)(_Outptr_ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("** ppValue);\r\n");
 } 
            this.Write("\r\n        // Attached properties.\r\n");
 foreach (var p in Model.DeclaredAttachedProperties) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<AttachedProperty>(p)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Static methods.\r\n");
 foreach (var m in Model.StaticMethods) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(m)));
            this.Write("\r\n");
 } 
            this.Write("\r\n    private:\r\n");
 foreach (var ctor in Model.CustomConstructors) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ConstructorImpl>(ctor)));
            this.Write("\r\n");
 }
 foreach (var m in Model.StaticMethods.Where(m => m.HasImplMethod)) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<MethodImpl>(m)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // Properties\' statics.\r\n");
 foreach (var p in Model.DependencyProperties) { 
            this.Write("        static wrl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("> s_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write("Property;\r\n");
 }
   foreach (var p in Model.DeclaredAttachedProperties) { 
            this.Write("        static wrl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("> s_");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write("Property;\r\n");
 } 
            this.Write("\r\n        // Properties\' initializers.\r\n");
 foreach (var p in Model.DependencyProperties) { 
            this.Write("        _Check_return_ static HRESULT Initialize");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write("Property();\r\n");
 } 
   foreach (var p in Model.DeclaredAttachedProperties) { 
            this.Write("        _Check_return_ static HRESULT Initialize");
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            this.Write("Property();\r\n");
 } 
            this.Write("\r\n");
 if (Model.HasPropertyChangeCallback && (Model.DependencyProperties.Any() || Model.DeclaredAttachedProperties.Any())) { 
            this.Write("        // Property changed event handler.\r\n        _Check_return_ static HRESULT" +
                    " OnPropertyChanged(_In_ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyObject")));
            this.Write("* pSender, _In_ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyProperty")));
            this.Write("ChangedEventArgs* pArgs);\r\n");
 } 
            this.Write("    };");
            return this.GenerationEnvironment.ToString();
        }
    }
}
