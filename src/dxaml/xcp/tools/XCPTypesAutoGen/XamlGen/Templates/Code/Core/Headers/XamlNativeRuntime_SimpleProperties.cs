// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class XamlNativeRuntime_SimpleProperties : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write(@"

#pragma once

#include <SimpleProperty.h>
#include <SimplePropertiesCommon.g.h>

// Helper method that allows XamlNativeRuntime to set values of simple properties
// on DependencyObjects
namespace Parser {
    HRESULT XamlNativeRuntime_SetValueSimpleProperty(const CPropertyBase* property, CDependencyObject* pDO, const CValue& value)
    {
        auto propertyIndex = property->GetIndex();

        switch (propertyIndex)
        {
");
 foreach (var simpleProperty in Model.GetAllTypeTableSimpleProperties().Where((def) => def.Modifier != Modifier.Internal)) { 
            this.Write("            case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.IndexName));
            this.Write(":\r\n            {\r\n");
 if (simpleProperty.PropertyType.Type.IsPrimitive) { // Difference between float <-> double at the API and storage layer require us to use PropertyType.Type.AbiReferenceFullName instead 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(simpleProperty.PropertyType.Type.AbiReferenceFullName).ToLower()));
            this.Write(" typeConvertedValue;\r\n");
 } else { 
            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(simpleProperty.PropertyType.AbiFullName)));
            this.Write(" typeConvertedValue;\r\n");
 } 
            this.Write("                IFC_RETURN(SimplePropertiesCommon::ConvertTo");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.PropertyType.Type.IndexNameWithoutPrefix));
            this.Write("(value, typeConvertedValue));\r\n                SimpleProperty::Property::id<");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.IndexName));
            this.Write(">::Set(pDO, typeConvertedValue);\r\n            }\r\n            break;\r\n\r\n");
 } 
            this.Write("            default:\r\n                MICROSOFT_TELEMETRY_ASSERT_DISABLED(false);" +
                    "  // investigate unknown simple property\r\n                return E_FAIL;\r\n      " +
                    "  }\r\n\r\n        return S_OK;\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
