// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class UIElementSimplePropertiesCallbacks : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write(@"

#include ""precomp.h""
#include <UIElement.h>

// This auto-generated file registers callbacks for simple properties implemented on CUIElement, to ensure any simple property update also affects the element visually.
// If you've added a new simple property to CUIElement, you will need to add a Set<property name>Impl method as well, which runs after the property has been set
// and should do any additional work to reflect the updated value.  See SetRotationImpl or any of the other methods below for an example.

");
 var simpleProperties = Model.GetAllTypeTableSimpleProperties().Where((def) => def.Modifier == Modifier.Public && def.SimpleDeclaringClass == "CUIElement"); 
            this.Write("\r\n");
 foreach (var simpleProperty in simpleProperties) { 
 // Handle the float/double discrepancy between the API and storage layer 
 string propertyTypeName = simpleProperty.PropertyType.Type.IsPrimitive ? AsCppType(simpleProperty.PropertyType.Type.AbiReferenceFullName) : AsCppType(simpleProperty.PropertyType.AbiFullName); 
            this.Write("static void Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Callback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyTypeName));
            this.Write("* old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write(")\r\n{\r\n    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(o" +
                    "bj);\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyTypeName));
            this.Write(" old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Value;\r\n    if (old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write(" != nullptr)\r\n    {\r\n        old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Value = *old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write(";\r\n    }\r\n    else\r\n    {\r\n        old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Value = SimpleProperty::Property::Default<");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.IndexName));
            this.Write(">();\r\n    }\r\n    pElement->Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Impl(old");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Value);\r\n}\r\n\r\n");
 } 
            this.Write("\r\nvoid CUIElement::RegisterSimplePropertyCallbacks()\r\n{\r\n");
 foreach (var simpleProperty in simpleProperties) { 
            this.Write("    SimpleProperty::Property::id<");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.IndexName));
            this.Write(">::RegisterHandler(&Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Callback, true);\r\n");
 } 
            this.Write("}\r\n\r\nvoid CUIElement::UnregisterSimplePropertyCallbacks()\r\n{\r\n");
 foreach (var simpleProperty in simpleProperties) { 
            this.Write("    SimpleProperty::Property::id<");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.IndexName));
            this.Write(">::UnregisterHandler(&Set");
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleProperty.Name));
            this.Write("Callback);\r\n");
 } 
            this.Write("}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
