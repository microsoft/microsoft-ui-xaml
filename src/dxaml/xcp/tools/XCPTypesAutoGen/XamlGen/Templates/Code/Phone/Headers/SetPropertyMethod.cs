// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SetPropertyMethod : CppCodeGenerator<MethodDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (Model.IsInterfaceImplementation) { 
            this.Write("IFACEMETHOD(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlMethodInfo.Name));
            this.Write(")(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParameterListAsString(Model.Parameters, Model.ReturnType)));
            this.Write(") ");
 if (Model.IsPureVirtual) { 
            this.Write(" = 0");
 } 
            this.Write(";\r\n");
     if (Model.IsVirtual) {
           if (Model.Modifier == Modifier.Protected) { 
            this.Write("virtual _Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlMemberInfo.ProtectedName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParameterListAsString(Model.Parameters, Model.ReturnType)));
            this.Write(");\r\n");
         } else if (Model.Modifier == Modifier.Public) { 
            this.Write("IFACEMETHOD(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlMethodInfo.VirtualName));
            this.Write(")(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParameterListAsString(Model.Parameters, Model.ReturnType)));
            this.Write(") ");
 if (Model.IsPureVirtual) { 
            this.Write(" = 0");
 } 
            this.Write(";\r\n");
         }
       }
   } else { 
 if (!Model.IsStatic) { 
            this.Write("virtual ");
 } 
            this.Write("_Check_return_ HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IdlMethodInfo.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParameterListAsString(Model.Parameters, Model.ReturnType)));
            this.Write(")");
 if (Model.IsPureVirtual) { 
            this.Write(" = 0");
 } 
            this.Write(";\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
