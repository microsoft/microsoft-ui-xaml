// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Framework.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ApplyTemplateMethod : CppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("IFACEMETHODIMP ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.GeneratedClassFullName)));
            this.Write("::OnApplyTemplate()\r\n{\r\n    HRESULT hr = S_OK;\r\n");
 foreach (var part in Model.TemplateParts.OrderBy(part => part.VarName)) { 
            this.Write("    ctl::ComPtr<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Helper.PrefixAbiIfNeeded($"{Helper.GetRootNamespaceCpp()}::IDependencyObject")));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(part.VarName));
            this.Write(";\r\n");
 } 
            this.Write("\r\n    IFC(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetBaseClassName(Model)));
            this.Write("::OnApplyTemplate());\r\n\r\n    // First try to resolve all parts.\r\n");
 foreach (var part in Model.TemplateParts.OrderBy(part => part.VarName)) { 
            this.Write("    IFC(GetTemplateChild(Microsoft::WRL::Wrappers::HStringReference(L\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(part.Name));
            this.Write("\").Get(), &");
            this.Write(this.ToStringHelper.ToStringWithCulture(part.VarName));
            this.Write("));\r\n");
 } 
            this.Write("\r\n    // If everything succeeded, store the references.\r\n");
 foreach (var part in Model.TemplateParts.OrderBy(part => part.VarName)) { 
            this.Write("    SetPtrValueWithQIOrNull(");
            this.Write(this.ToStringHelper.ToStringWithCulture(part.FieldName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(part.VarName));
            this.Write(".Get());\r\n");
 } 
            this.Write("\r\nCleanup:\r\n    RRETURN(hr);\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
