// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Class : PhoneCppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if (!Model.IsAbstract) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<RuntimeClassInitialize>(Model)));
            this.Write("\r\n\r\n");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<InitializeImpl>(Model)));
            this.Write("\r\n\r\n");
 if (Model.ImplementOverridesExplicitly) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ClassExplicitOverrides>(Model)));
            this.Write("\r\n\r\n");
 } 
            this.Write("// Properties.\r\n");
 foreach (var p in Model.Properties.Where(p => p.GenerateStub)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Property>(p)));
            this.Write("\r\n\r\n");
 } 
            this.Write("\r\n// Events.\r\n");
 foreach (var e in Model.Events.Where(e => e.GenerateStub)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Event>(e)));
            this.Write("\r\n\r\n");
 } 
            this.Write("\r\n// Methods\r\n");
 foreach (var m in Model.Methods.Where(m => m.GenerateStub && !m.IsStatic)) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Method>(m)));
            this.Write("\r\n\r\n");
 } 
            this.Write("\r\n// Overrides\r\n");
 foreach (var overrideInterface in Model.OverrideInterfaces) {
        foreach (var property in overrideInterface.InstanceProperties.Where(p => p.GenerateStub && (p.IsVirtual))) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<InterfaceMethodImpl>(property.GetGetMethod(), Model)));
            this.Write("\r\n");
      }
        foreach (var method in overrideInterface.InstanceMethods.Where(m => m.GenerateStub && (m.IsVirtual))) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<InterfaceMethodImpl>(method, Model)));
            this.Write("\r\n\r\n");
      }
   }
            return this.GenerationEnvironment.ToString();
        }
    }
}
