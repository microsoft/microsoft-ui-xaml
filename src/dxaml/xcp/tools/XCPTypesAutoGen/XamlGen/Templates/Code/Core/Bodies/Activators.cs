// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Core.Bodies
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Activators : CppCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#include \"precomp.h\"\r\n#include \"StableXbfIndexes.g.h\"\r\n#include <RuntimeProfi" +
                    "ler.h>\r\n\r\n");
 foreach (var type in Model.GetAllClasses().Where(c => c.IsActivatableInCore && !c.GenerateInCore)) { 
            this.Write("HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreDefaultConstructor));
            this.Write("(_Outptr_ CDependencyObject **ppObject, _In_ CREATEPARAMETERS *pCreate)\r\n{\r\n");
 if (type.InstanceCountTelemetry) { 
            this.Write("    __RP_Marker_ClassById(Parser::StableXbfTypeIndex::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write(");\r\n");
 } 
            this.Write("    RRETURN(");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreName));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreCreationMethodName));
            this.Write("(ppObject, pCreate));\r\n}\r\n");
 }
   foreach (var type in Model.GetTypeTableEnums()) { 
            this.Write("HRESULT ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreDefaultConstructor));
            this.Write("(_Outptr_ CDependencyObject **ppObject, _In_ CREATEPARAMETERS *pCreate)\r\n{\r\n    R" +
                    "RETURN(");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreName));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.CoreCreationMethodName));
            this.Write("(ppObject, pCreate));\r\n}\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
