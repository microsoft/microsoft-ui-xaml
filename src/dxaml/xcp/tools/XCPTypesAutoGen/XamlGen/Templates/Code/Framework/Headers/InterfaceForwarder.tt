<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<ClassDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>

<# if (Model.IdlClassInfo.HasPrimaryInterface) { #>
template<typename impl_type>
class interface_forwarder< <#= AsCppType(Model.IdlClassInfo.FullInterfaceName) #>, impl_type> final
    : public ctl::iinspectable_forwarder_base< <#= AsCppType(Model.IdlClassInfo.FullInterfaceName) #>, impl_type>
{
    impl_type* This() { return this->This_helper<impl_type>(); }
<#     foreach (PropertyDefinition prop in Model.IdlClassInfo.PublicInstanceProperties.OrderBy(prop => prop.Name)) {
            if(!prop.VersionedAccessors || prop.GetterVersion == Model.Version){
                MethodDefinition getter = prop.GetGetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Public(getter)) #>
<#          } #>
<#          if (!prop.IsReadOnly && prop.SetterModifier != Modifier.Internal && prop.SetterModifier != Modifier.Private && (!prop.VersionedAccessors || prop.SetterVersion == Model.Version)) {
                MethodDefinition setter = prop.GetSetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Public(setter)) #>
<#          }
       }
       foreach (MethodDefinition method in Model.IdlClassInfo.PublicInstanceMethods.OrderBy(method => method.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Public(method)) #>
<#     }
       foreach (EventDefinition evt in Model.IdlClassInfo.PublicInstanceEvents.OrderBy(evt => evt.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Public(evt.GetAddMethod())) #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Public(evt.GetRemoveMethod())) #>
<#     } #>
};
<# }
   if (Model.IdlClassInfo.HasProtectedMembers) { #>
template<typename impl_type>
class interface_forwarder< <#= AsCppType(Model.IdlClassInfo.FullProtectedMembersInterfaceName) #>, impl_type> final
    : public ctl::iinspectable_forwarder_base< <#= AsCppType(Model.IdlClassInfo.FullProtectedMembersInterfaceName) #>, impl_type>
{
    impl_type* This() { return this->This_helper<impl_type>(); }
<#     foreach (PropertyDefinition prop in Model.IdlClassInfo.ProtectedProperties.OrderBy(prop => prop.Name)) {
           MethodDefinition getter = prop.GetGetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Protected(getter)) #>
<#         if (!prop.IsReadOnly) {
               MethodDefinition setter = prop.GetSetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Protected(setter)) #>
<#         }
       }
       foreach (MethodDefinition method in Model.IdlClassInfo.ProtectedMethods.OrderBy(method => method.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Protected(method)) #>
<#     }
       foreach (EventDefinition evt in Model.IdlClassInfo.ProtectedEvents.OrderBy(evt => evt.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Protected(evt.GetAddMethod())) #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Protected(evt.GetRemoveMethod())) #>
<#     } #>
};
<# }
   if (Model.IdlClassInfo.HasVirtualMembers) { #>
template<typename impl_type>
class interface_forwarder< <#= AsCppType(Model.IdlClassInfo.FullVirtualMembersInterfaceName) #>, impl_type> final
    : public ctl::iinspectable_forwarder_base< <#= AsCppType(Model.IdlClassInfo.FullVirtualMembersInterfaceName) #>, impl_type>
{
    impl_type* This() { return this->This_helper<impl_type>(); }
<#     foreach (PropertyDefinition prop in Model.IdlClassInfo.VirtualProperties.OrderBy(prop => prop.Name)) {
           MethodDefinition getter = prop.GetGetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Virtual(getter)) #>
<#         if (!prop.IsReadOnly) {
               MethodDefinition setter = prop.GetSetMethod(); #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Virtual(setter)) #>
<#         }
       }
       foreach (MethodDefinition method in Model.IdlClassInfo.VirtualMethods.OrderBy(method => method.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Virtual(method)) #>
<#     }
       foreach (EventDefinition evt in Model.IdlClassInfo.VirtualEvents.OrderBy(evt => evt.Name)) { #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Virtual(evt.GetAddMethod())) #>
    <#= IncludeTemplate<MethodForwarder>(ForwarderMethodModel.Virtual(evt.GetRemoveMethod())) #>
<#     } #>
};
<# } #>
