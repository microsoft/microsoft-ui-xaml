// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Code.Phone.Headers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class RuntimeClass : PhoneCppCodeGenerator<ClassDefinition>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
 if(Model.IsADependencyObject) { 
            this.Write("typedef Private::ReferenceTrackerRuntimeClass<\r\n");
 } else { 
            this.Write("typedef wrl::RuntimeClass<\r\n");
 }
   foreach (var version in Model.Versions.OrderBy(v => v.Version).Select(v => v.GetProjection())) {
        if (version.IdlClassInfo.HasPrimaryInterface) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullInterfaceName)));
            this.Write(",\r\n");
      }
        if (version.IdlClassInfo.HasVirtualMembers) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(",\r\n");
      }
        if (version.IdlClassInfo.HasProtectedMembers) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(version.IdlClassInfo.FullProtectedMembersInterfaceName)));
            this.Write(",\r\n");
      }
        foreach (var implementedInterface in version.ExplicitlyImplementedInterfaces.OrderBy(i => i.AbiFullName)) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(implementedInterface.AbiFullName)));
            this.Write(",\r\n");
      }
   }
    if (!Model.ImplementOverridesExplicitly) {
        foreach (var virtualMemberInterface in Model.BaseClassesVirtualMemberInterfaces)
        {
            if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version)) 
            {
            this.Write("#if WI_IS_FEATURE_PRESENT(");
            this.Write(this.ToStringHelper.ToStringWithCulture(VelocityFeatures.GetFeatureName(virtualMemberInterface.Version)));
            this.Write(")\r\n");
            }
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(virtualMemberInterface.IdlClassInfo.FullVirtualMembersInterfaceName)));
            this.Write(",\r\n");
            if (VelocityFeatures.IsVelocityVersion(virtualMemberInterface.Version))
            { 
            this.Write("#endif\r\n");
            }
        } 
    }
            this.Write("    wrl::ComposableBase<");
            this.Write(this.ToStringHelper.ToStringWithCulture(AsCppType(Model.BaseClass.IdlClassInfo.FullInterfaceName)));
            this.Write("Factory>>\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            this.Write("RuntimeClass;\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
