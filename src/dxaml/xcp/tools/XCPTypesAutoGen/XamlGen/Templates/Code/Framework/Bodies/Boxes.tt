<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<OMContextView>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#include "precomp.h"

<# foreach (var type in Model.GetTypeTableEnums()) {
       if (type.IdlTypeInfo.IsExcluded) { #>
REFERENCE_ELEMENT_NAME_IMPL(<#= AsCppType(type.AbiReferenceFullName) #>, L"");
<#     } else { #>
REFERENCE_ELEMENT_NAME_IMPL(<#= AsCppType(type.AbiReferenceFullName) #>, L"<#= type.AbiReferenceFullNameNoABIPrefix #>");
<#     }
   } #>

// This pattern (GetValueFor_<typename>) may look weird at first, and weirder still because we're specifically
// asking for __declspec(noinline).  But there's a reason!  The microsoft toolchain is very clever about folding
// together functions with identical bodies (COMDAT folding), but it can't do the same for blocks within functions
// yet.  Thus, by factoring this out into functions that'll end up being identical in their optimized, compiled
// form, we save a noticeable amount of binary size.

<# foreach (var type in Model.GetTypeTableEnums()) { #>

__declspec(noinline) HRESULT GetValueFor_<#=type.IndexName.Replace("::", "_") #>(_In_ IInspectable* pBox, REFIID guid, _Out_ UINT* pnValue)
{
    HRESULT hr = S_OK;
    <#= PrefixAbi("Windows::Foundation::IReference") #><<#= AsCppType(type.AbiReferenceFullName) #>>* ptr = nullptr;
    IFC(pBox->QueryInterface(guid, reinterpret_cast<void**>(&ptr)));
    <#= AsCppType(type.AbiReferenceFullName) #> value;
    IFC(ptr->get_Value(&value));
    *pnValue = static_cast<uint32_t>(value);
Cleanup:
    ReleaseInterfaceNoNULL(ptr);
    return hr;
}
<# } #>

_Check_return_ HRESULT GetEnumValueFromKnownWinRTBox(_In_ IInspectable* pBox, _In_ const CClassInfo* pType, _Out_ UINT* pnValue)
{
    REFIID typeGuid = pType->GetGuid();

    *pnValue = 0;
    switch (pType->GetIndex())
    {
<# foreach (var type in Model.GetTypeTableEnums()) { #>
        case <#= type.IndexName #>:
            return GetValueFor_<#=type.IndexName.Replace("::", "_")#>(pBox, typeGuid, pnValue);
<# } #>
        default:
            // Unsupported enum type.
            IFC_RETURN(E_NOTIMPL);
    }

    return S_OK;
}

_Check_return_ HRESULT GetKnownWinRTBoxFromEnumValue(_In_ UINT nValue, _In_ const CClassInfo* pType, _Outptr_ IInspectable** ppBox)
{
    *ppBox = nullptr;
    switch (pType->GetIndex())
    {
<# foreach (var type in Model.GetTypeTableEnums()) { #>
        case <#= type.IndexName #>:
            return DirectUI::PropertyValue::CreateEnumReference<<#= AsCppType(type.AbiReferenceFullName) #>>(static_cast<<#= AsCppType(type.AbiReferenceFullName) #>>(nValue), ppBox);
<# } #>
        default:
            // Unsupported enum type.
            IFC_RETURN(E_NOTIMPL);
    }

    return S_OK;
}
