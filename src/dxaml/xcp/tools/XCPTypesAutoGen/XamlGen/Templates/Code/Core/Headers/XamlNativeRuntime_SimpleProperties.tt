<#@ template language="C#" linePragmas="false" inherits="CppCodeGenerator<OMContextView>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OM" #>
<#= IncludeTemplate<Copyright>() #>

#pragma once

#include <SimpleProperty.h>
#include <SimplePropertiesCommon.g.h>

// Helper method that allows XamlNativeRuntime to set values of simple properties
// on DependencyObjects
namespace Parser {
    HRESULT XamlNativeRuntime_SetValueSimpleProperty(const CPropertyBase* property, CDependencyObject* pDO, const CValue& value)
    {
        auto propertyIndex = property->GetIndex();

        switch (propertyIndex)
        {
<# foreach (var simpleProperty in Model.GetAllTypeTableSimpleProperties().Where((def) => def.Modifier != Modifier.Internal)) { #>
            case <#= simpleProperty.IndexName #>:
            {
<# if (simpleProperty.PropertyType.Type.IsPrimitive) { // Difference between float <-> double at the API and storage layer require us to use PropertyType.Type.AbiReferenceFullName instead #>
                <#= AsCppType(simpleProperty.PropertyType.Type.AbiReferenceFullName).ToLower() #> typeConvertedValue;
<# } else { #>
                <#= AsCppType(simpleProperty.PropertyType.AbiFullName) #> typeConvertedValue;
<# } #>
                IFC_RETURN(SimplePropertiesCommon::ConvertTo<#= simpleProperty.PropertyType.Type.IndexNameWithoutPrefix #>(value, typeConvertedValue));
                SimpleProperty::Property::id<<#= simpleProperty.IndexName #>>::Set(pDO, typeConvertedValue);
            }
            break;

<# } #>
            default:
                MICROSOFT_TELEMETRY_ASSERT_DISABLED(false);  // investigate unknown simple property
                return E_FAIL;
        }

        return S_OK;
    }
}