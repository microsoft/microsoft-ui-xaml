// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Metadata
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Indexes : MetadataCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\nusing UINT8 = unsigned char;\r\nusing UINT16 = unsigned short;\r" +
                    "\n\r\nenum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownNamespaceIndexEnumName));
            this.Write(": UINT16\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NamespaceDefinition.UnknownNamespace.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var ns in Model.GetTypeTableNamespaces()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\nenum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName));
            this.Write(": UINT16\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassDefinition.UnknownType.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var type in Model.GetAllTypeTableTypes()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\nenum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownPropertyIndexEnumName));
            this.Write(": UINT16\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyDefinition.UnknownProperty.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var property in Model.GetAllTypeTableDependencyProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 } 
 foreach (var property in Model.GetAllTypeTableSimpleProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\nenum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownMethodIndexEnumName));
            this.Write(": UINT16\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(MethodDefinition.UnknownMethod.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 var methodQuery = Model.GetAllMethodIndexNamesNoPrefix(); 
 foreach (var methodNameWithoutPrefix in methodQuery) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameWithoutPrefix));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\nenum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownEventIndexEnumName));
            this.Write(": UINT16\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EventDefinition.UnknownEvent.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var ev in Model.GetAllControlEvents()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 }
   foreach (var ev in Model.GetAllNonControlEvents()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\nconstexpr UINT16 KnownNamespaceCount            = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetTypeTableNamespaces().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr UINT16 KnownTypeCount                 = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllTypeTableTypes().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr UINT16 KnownPropertyCount             = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllTypeTableProperties().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr UINT16 KnownDependencyPropertyCount   = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllTypeTableDependencyProperties().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr UINT16 KnownSimplePropertyCount       = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllTypeTableSimpleProperties().Count()));
            this.Write("; // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllTypeTableSimpleProperties().Last().IndexName));
            this.Write("\r\nconstexpr UINT16 KnownMethodCount               = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllMethods().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr UINT16 KnownEventCount                = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllEvents().Last().IndexName));
            this.Write(") + 1;\r\nconstexpr ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownEventIndexEnumName));
            this.Write(" LastControlEvent = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetAllControlEvents().Last().IndexName));
            this.Write(";\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
