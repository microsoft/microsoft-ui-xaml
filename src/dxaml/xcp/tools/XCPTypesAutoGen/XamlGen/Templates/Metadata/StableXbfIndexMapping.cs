// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Metadata
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class StableXbfIndexMapping : XbfMetadataCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#include \"precomp.h\"\r\n#include \"StableXbfIndexes.g.h\"\r\n#include \"Indexes.g.h\"" +
                    "\r\n\r\nnamespace Parser\r\n{\r\n    // Map stable Xbf type indexes to known type indexes" +
                    "\r\n    extern const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName));
            this.Write(" c_aStableXbfTypeToKnownType[StableXbfTypeCount] =\r\n    {\r\n");
 foreach (var type in StableIndexes.GetStableTypeIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownTypeIndexEnumName + "::" + type.knownIndexName));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    // Map known type indexes to stable Xbf type indexes\r\n    extern co" +
                    "nst ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfTypeIndexEnumName));
            this.Write(" c_aKnownTypeToStableXbfType[KnownTypeCount] =\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfTypeIndexEnumName + "::" + ClassDefinition.UnknownType.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var type in Model.GetAllTypeTableTypes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfTypeIndexEnumName + "::" + StableIndexes.GetStableTypeIndexNameFromKnownTypeIndexName(type.IndexNameWithoutPrefix)));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    // Map stable Xbf property indexes to known property indexes\r\n    e" +
                    "xtern const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownPropertyIndexEnumName));
            this.Write(" c_aStableXbfPropertyToKnownProperty[StableXbfPropertyCount] =\r\n    {\r\n");
 foreach (var prop in StableIndexes.GetStablePropertyIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownPropertyIndexEnumName + "::" + prop.knownIndexName));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    // Map known property indexes to stable Xbf property indexes\r\n    e" +
                    "xtern const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfPropertyIndexEnumName));
            this.Write(" c_aKnownPropertyToStableXbfProperty[KnownPropertyCount] =\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfPropertyIndexEnumName + "::" + PropertyDefinition.UnknownProperty.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var prop in Model.GetAllTypeTableProperties()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfPropertyIndexEnumName + "::" + StableIndexes.GetStablePropertyIndexNameFromKnownPropertyIndexName(prop.IndexNameWithoutPrefix)));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    // Map stable event indexes to known event indexes\r\n    extern const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownEventIndexEnumName));
            this.Write(" c_aStableEventToKnownEvent[StableEventCount] =\r\n    {\r\n");
 foreach (var evt in StableIndexes.GetStableEventIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IndexGenerator.KnownEventIndexEnumName + "::" + evt.knownIndexName));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    // Map known event indexes to stable event indexes\r\n    extern cons" +
                    "t ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableEventIndexEnumName));
            this.Write(" c_aKnownEventToStableEvent[KnownEventCount] =\r\n    {\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableEventIndexEnumName + "::" + EventDefinition.UnknownEvent.IndexNameWithoutPrefix));
            this.Write(",\r\n");
 foreach (var evt in Model.GetAllEvents()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableEventIndexEnumName + "::" + StableIndexes.GetStableEventIndexNameFromKnownEventIndexName(evt.IndexNameWithoutPrefix)));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
