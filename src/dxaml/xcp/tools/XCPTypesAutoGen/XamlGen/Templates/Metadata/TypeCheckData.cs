// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Metadata
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class TypeCheckData : MetadataCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\n#include \"Indexes.g.h\"\r\n#include <TypeTableStructs.h>\r\n\r\nexte" +
                    "rn __declspec(selectany) constexpr TypeCheckData c_aTypeCheckData[KnownTypeCount" +
                    "] =\r\n{\r\n    // UnknownType\r\n    { 0, 0 },\r\n");
 foreach (var type in Model.GetAllTypeTableTypes()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTypeCheckEntry(type)));
            this.Write(",\r\n");
 } 
            this.Write("};");
            return this.GenerationEnvironment.ToString();
        }
    }
}
