// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Metadata
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class StableXbfIndexes : XbfMetadataCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#pragma once\r\n\r\nnamespace Parser\r\n{\r\n    enum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfTypeIndexEnumName));
            this.Write(": UINT16\r\n    {\r\n");
 foreach (var type in StableIndexes.GetStableTypeIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.stableIndexName));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.stableIndex));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    enum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfPropertyIndexEnumName));
            this.Write(": UINT16\r\n    {\r\n");
 foreach (var prop in StableIndexes.GetStablePropertyIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.stableIndexName));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.stableIndex));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    enum class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableEventIndexEnumName));
            this.Write(": UINT16\r\n    {\r\n");
 foreach (var evt in StableIndexes.GetStableEventIndexes()) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(evt.stableIndexName));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(evt.stableIndex));
            this.Write(",\r\n");
 } 
            this.Write("    };\r\n\r\n    static const UINT16 StableXbfTypeCount = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfTypeIndexEnumName));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableIndexes.GetStableTypeIndexes().Last().stableIndexName));
            this.Write(") + 1;\r\n    static const UINT16 StableXbfPropertyCount = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableXbfPropertyIndexEnumName));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableIndexes.GetStablePropertyIndexes().Last().stableIndexName));
            this.Write(") + 1;\r\n    static const UINT16 StableEventCount = static_cast<UINT16>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableXbfIndexGenerator.StableEventIndexEnumName));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(StableIndexes.GetStableEventIndexes().Last().stableIndexName));
            this.Write(") + 1;\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
