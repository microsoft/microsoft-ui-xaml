// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.Metadata
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DynamicMetadataBody : MetadataCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n// Contains method pointers, offsets and other machine-dependent metadata.\r\n\r" +
                    "\n#include \"precomp.h\"\r\n#include \"Indexes.g.h\"\r\n#include \"Activators.g.h\"\r\n#inclu" +
                    "de \"TypeTable.g.h\"\r\n#include \"EnumValueTable.h\"\r\n\r\nusing namespace DirectUI;\r\n\r\n" +
                    "");
 foreach (var property in Model.GetAllTypeTableObjectFieldBackedProperties()) { 
            this.Write("static_assert(sizeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetFieldBackedPropertyMemberName(property)));
            this.Write(") == sizeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetFieldBackedPropertyMemberType(property)));
            this.Write("), \"Incorrect size for ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetFieldBackedPropertyMemberName(property)));
            this.Write("\");\r\n");
 } 
            this.Write("\r\n");
 foreach (var type in Model.GetAllTypeTableTypes()) { 
     if (type is ClassDefinition && (type as ClassDefinition).GenerateFrameworkHFile) {
       ClassDefinition classDef = type as ClassDefinition;
       if (classDef.GeneratePartialClass) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(classDef.CppFrameworkHeaderFileName));
            this.Write("\"\r\n");
     } else {
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(classDef.CppFrameworkGeneratedHeaderFileName));
            this.Write("\"\r\n");
     }
     } 
   } 
            this.Write("\r\n// Type activation information.\r\nextern const MetaDataTypeActivation c_aTypeAct" +
                    "ivations[KnownTypeCount] =\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeActivationEntry(ClassDefinition.UnknownType)));
            this.Write(",\r\n");
 foreach (var type in Model.GetAllTypeTableTypes()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeActivationEntry(type)));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\n// All properties.\r\nextern const MetaDataDependencyPropertyRuntimeData c_aD" +
                    "ependencyPropertyRuntimeData[KnownDependencyPropertyCount] =\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertyRuntimeDataEntry>(PropertyDefinition.UnknownProperty)));
            this.Write(",\r\n");
 foreach (var property in Model.GetAllTypeTableDependencyProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<PropertyRuntimeDataEntry>(property)));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\n// Object properties.\r\nextern const MetaDataObjectProperty c_aObjectPropert" +
                    "ies[");
            this.Write(this.ToStringHelper.ToStringWithCulture(1 + Model.GetAllTypeTableObjectProperties().Count()));
            this.Write("] =\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ObjectPropertyEntry>(PropertyDefinition.UnknownProperty)));
            this.Write(",\r\n");
 foreach (var property in Model.GetAllTypeTableObjectProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<ObjectPropertyEntry>(property)));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\n// Render properties.\r\nextern const MetaDataObjectProperty c_aRenderPropert" +
                    "ies[");
            this.Write(this.ToStringHelper.ToStringWithCulture(1 + Model.GetAllTypeTableRenderProperties().Count()));
            this.Write("] =\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<RenderPropertyEntry>(PropertyDefinition.UnknownProperty)));
            this.Write(",\r\n");
 foreach (var property in Model.GetAllTypeTableRenderProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<RenderPropertyEntry>(property)));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\n// Enter/Leave properties.\r\nextern const MetaDataEnterProperty c_aEnterProp" +
                    "erties[");
            this.Write(this.ToStringHelper.ToStringWithCulture(1 + Model.GetAllTypeTableEnterProperties().Count()));
            this.Write("] =\r\n{\r\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<EnterPropertyEntry>(PropertyDefinition.UnknownProperty)));
            this.Write(",\r\n");
 foreach (var property in Model.GetAllTypeTableEnterProperties()) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<EnterPropertyEntry>(property)));
            this.Write(",\r\n");
 } 
            this.Write("};\r\n\r\n// Conversion methods for enums that don\'t have consecutive values\r\n");
 foreach (var type in Model.GetAllEnums().Where(t => t.GenerateInCore && !t.XamlEnumFlags.IsExcludedFromNative && t.XamlEnumFlags.GenerateConsecutiveEnum).OrderBy(t => t.Name)) { 
            this.Write("DirectUI::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write("Consecutive DirectUI::Convert(DirectUI::");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write(" value)\r\n{\r\n    switch (value)\r\n    {\r\n");
 foreach (var value in type.Values) { 
            this.Write("        case ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write("::");
            this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));
            this.Write(":    return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write("Consecutive::");
            this.Write(this.ToStringHelper.ToStringWithCulture(value.Name));
            this.Write(";\r\n");
 } 
            this.Write("        default:\r\n            XAML_FAIL_FAST();\r\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            this.Write("Consecutive::InvalidValue;\r\n    }\r\n}\r\n\r\n");
 } 
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
