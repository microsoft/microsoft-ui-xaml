// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XamlGen.Templates.ModernIDL
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using OM;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Group : ModernIdlCodeGenerator<OMContextView>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Copyright>()));
            this.Write("\r\n\r\n#include \"sdkddkver.h\"\r\n");
if (VelocityFeatures.ContextHasVelocityFeature(Model)) { 
            this.Write("#include <FeatureFlags.h>\r\n");
 } 
            this.Write("\r\nimport \"oaidl.idl\";\r\nimport \"eventtoken.idl\";\r\n");
 foreach (var import in Model.GetIdlFileNameImports()) { 
            this.Write("import \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(import));
            this.Write("\";\r\n");
 } 
 //TODO 22728412 - use the Imported attribute on the type model to import the public version of IDLs instead of the private IDLs, so we don't need to hardcode them below 
            this.Write("\r\nimport \"windows.applicationModel.datatransfer.dragdrop.idl\";\r\nimport \"windows.a" +
                    "pplicationModel.datatransfer.dragdrop.core.idl\";\r\nimport \"windows.foundation.cus" +
                    "tomattributes.idl\";\r\nimport \"windows.ui.xaml.interop.idl\";\r\n\r\n");
 if (UndefGetCurrentTime) { 
            this.Write("cpp_quote(\"#pragma push_macro(\\\"GetCurrentTime\\\")\")\r\ncpp_quote(\"#undef GetCurrent" +
                    "Time\")\r\n");
 } 
            this.Write("\r\n");
 foreach (var ns in Model.Namespaces) { 
   if (ns.Contracts.Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.Name));
            this.Write("\r\n{\r\n");
     foreach (var contract in ns.Contracts) { 
            this.Write("    ");
    IncludeTemplate<Contract>(contract); 
            this.Write("\r\n");
     } 
            this.Write("}\r\n");
   } 
 } 
            this.Write("\r\n");
 foreach (var ns in Model.Namespaces) { 
   if (ns.Enums.Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.Name));
            this.Write("\r\n{\r\n");
     foreach (var e in ns.Enums) { 
 this.EnsureEnumValues(e); 
            this.Write("\r\n");
         if (!e.IdlTypeInfo.ExcludeFromLiftedCodegen) { 
            this.Write("    ");
  IncludeTemplate<Enum>(e); 
       } 
            this.Write("\r\n");
     } 
            this.Write("}\r\n");
   } 
 } 
            this.Write("\r\n");
 foreach (var ns in Model.Namespaces) { 
   if (ns.ValueTypes.Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.Name));
            this.Write("\r\n{\r\n");
     foreach (var type in ns.ValueTypes) { 
            this.Write("\r\n");
         if (!type.IdlTypeInfo.ExcludeFromLiftedCodegen) { 
            this.Write("    ");
   IncludeTemplate<Struct>(type); 
       } 
            this.Write("\r\n");
     } 
            this.Write("}\r\n");
   } 
 } 
            this.Write("\r\n");
 if (Model.GetAllEnums().Any() || (null == Model.IdlGroupName && Model.GetAllForwarDeclaredEventHandlers().Any()) || Model.GetDeclares().Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DefaultIdlNamespace));
            this.Write("\r\n{\r\n    declare\r\n    {\r\n");
     foreach (var type in Model.GetAllEnums().OrderBy(e => e.DeclaringNamespace.Name)) { 
            this.Write("        interface Windows.Foundation.IReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IdlTypeInfo.FullName));
            this.Write(">;\r\n");
     } 
     if (null == Model.IdlGroupName) {
           foreach (var type in Model.GetAllForwarDeclaredEventHandlers().OrderBy(e => e.AbiImplementationFullName))
           {
               if (OMContextView.IdlForwardDeclaredTypes.Add(type.Type)) {
                   if (type.Type.IsGenericType) { 
            this.Write("        interface Windows.Foundation.IReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.AbiImplementationFullName.Replace(">", "*>*").Replace(", ", "*, ")));
            this.Write(">;\r\n");
                 } else { 
            this.Write("        interface Windows.Foundation.IReference<");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.AbiImplementationFullName));
            this.Write(">;\r\n");
                 }
               }
           }
       } 
     foreach (var type in Model.GetDeclares()) { 
            this.Write("        interface ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.IdlInfo.GenericFullName));
            this.Write(";\r\n");
     } 
            this.Write("    }\r\n}\r\n");
 } 
            this.Write("\r\n");
 foreach (var ns in Model.Namespaces) { 
   if (ns.Attributes.Any() || ns.Delegates.Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.Name));
            this.Write("\r\n{\r\n");
     foreach (var type in ns.Attributes.Where(a => !a.IdlTypeInfo.IsExcluded)) { 
         if (!type.IdlTypeInfo.ExcludeFromLiftedCodegen) { 
            this.Write("    ");
   IncludeTemplate<Attribute>(type); 
            this.Write("\r\n");
         } 
        } 
            this.Write("\r\n");
     foreach (var type in ns.Delegates.Where(d => !d.IdlTypeInfo.IsExcluded)) { 
         if (!type.IdlTypeInfo.ExcludeFromLiftedCodegen) { 
            this.Write("    ");
   IncludeTemplate<Delegate>(type); 
       } 
            this.Write("\r\n\r\n");
     } 
            this.Write("}\r\n");
   } 
 } 
            this.Write("\r\n");
 foreach (var ns in Model.Namespaces) { 
   if (ns.NonGenericReferenceClasses.Any()) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns.Name));
            this.Write("\r\n{\r\n");
     foreach (var type in ns.NonGenericReferenceClasses.OrderByIdlHierarchy()) { 
         if (!type.IdlTypeInfo.ExcludeFromLiftedCodegen) { 
            if (type.IsInterface) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Interface>(type)));
            this.Write("\r\n\r\n");
            } else { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeTemplate<Class>(type)));
            this.Write("\r\n\r\n");
            } 
       } 
     } 
            this.Write("}\r\n");
  } 
 } 
            this.Write("\r\n");
 if (UndefGetCurrentTime) { 
            this.Write("cpp_quote(\"#pragma pop_macro(\\\"GetCurrentTime\\\")\")\r\n");
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
}
