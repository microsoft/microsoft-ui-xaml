// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "precomp.h"
#include <UIElement.h>

// This auto-generated file registers callbacks for simple properties implemented on CUIElement, to ensure any simple property update also affects the element visually.
// If you've added a new simple property to CUIElement, you will need to add a Set<property name>Impl method as well, which runs after the property has been set
// and should do any additional work to reflect the updated value.  See SetRotationImpl or any of the other methods below for an example.


static void SetCenterPointCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ABI::Windows::Foundation::Numerics::Vector3* oldCenterPoint)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    ABI::Windows::Foundation::Numerics::Vector3 oldCenterPointValue;
    if (oldCenterPoint != nullptr)
    {
        oldCenterPointValue = *oldCenterPoint;
    }
    else
    {
        oldCenterPointValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_CenterPoint>();
    }
    pElement->SetCenterPointImpl(oldCenterPointValue);
}

static void SetRasterizationScaleCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const DOUBLE* oldRasterizationScale)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    DOUBLE oldRasterizationScaleValue;
    if (oldRasterizationScale != nullptr)
    {
        oldRasterizationScaleValue = *oldRasterizationScale;
    }
    else
    {
        oldRasterizationScaleValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_RasterizationScale>();
    }
    pElement->SetRasterizationScaleImpl(oldRasterizationScaleValue);
}

static void SetRotationCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const DOUBLE* oldRotation)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    DOUBLE oldRotationValue;
    if (oldRotation != nullptr)
    {
        oldRotationValue = *oldRotation;
    }
    else
    {
        oldRotationValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_Rotation>();
    }
    pElement->SetRotationImpl(oldRotationValue);
}

static void SetRotationAxisCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ABI::Windows::Foundation::Numerics::Vector3* oldRotationAxis)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    ABI::Windows::Foundation::Numerics::Vector3 oldRotationAxisValue;
    if (oldRotationAxis != nullptr)
    {
        oldRotationAxisValue = *oldRotationAxis;
    }
    else
    {
        oldRotationAxisValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_RotationAxis>();
    }
    pElement->SetRotationAxisImpl(oldRotationAxisValue);
}

static void SetScaleCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ABI::Windows::Foundation::Numerics::Vector3* oldScale)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    ABI::Windows::Foundation::Numerics::Vector3 oldScaleValue;
    if (oldScale != nullptr)
    {
        oldScaleValue = *oldScale;
    }
    else
    {
        oldScaleValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_Scale>();
    }
    pElement->SetScaleImpl(oldScaleValue);
}

static void SetTransformMatrixCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ABI::Windows::Foundation::Numerics::Matrix4x4* oldTransformMatrix)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    ABI::Windows::Foundation::Numerics::Matrix4x4 oldTransformMatrixValue;
    if (oldTransformMatrix != nullptr)
    {
        oldTransformMatrixValue = *oldTransformMatrix;
    }
    else
    {
        oldTransformMatrixValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_TransformMatrix>();
    }
    pElement->SetTransformMatrixImpl(oldTransformMatrixValue);
}

static void SetTranslationCallback(_In_ SimpleProperty::objid_t obj, _In_opt_ const ABI::Windows::Foundation::Numerics::Vector3* oldTranslation)
{
    CUIElement* pElement = SimpleProperty::MapObjIdToInstance<CUIElement>(obj);
    ABI::Windows::Foundation::Numerics::Vector3 oldTranslationValue;
    if (oldTranslation != nullptr)
    {
        oldTranslationValue = *oldTranslation;
    }
    else
    {
        oldTranslationValue = SimpleProperty::Property::Default<KnownPropertyIndex::UIElement_Translation>();
    }
    pElement->SetTranslationImpl(oldTranslationValue);
}


void CUIElement::RegisterSimplePropertyCallbacks()
{
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_CenterPoint>::RegisterHandler(&SetCenterPointCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_RasterizationScale>::RegisterHandler(&SetRasterizationScaleCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Rotation>::RegisterHandler(&SetRotationCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_RotationAxis>::RegisterHandler(&SetRotationAxisCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Scale>::RegisterHandler(&SetScaleCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_TransformMatrix>::RegisterHandler(&SetTransformMatrixCallback, true);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Translation>::RegisterHandler(&SetTranslationCallback, true);
}

void CUIElement::UnregisterSimplePropertyCallbacks()
{
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_CenterPoint>::UnregisterHandler(&SetCenterPointCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_RasterizationScale>::UnregisterHandler(&SetRasterizationScaleCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Rotation>::UnregisterHandler(&SetRotationCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_RotationAxis>::UnregisterHandler(&SetRotationAxisCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Scale>::UnregisterHandler(&SetScaleCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_TransformMatrix>::UnregisterHandler(&SetTransformMatrixCallback);
    SimpleProperty::Property::id<KnownPropertyIndex::UIElement_Translation>::UnregisterHandler(&SetTranslationCallback);
}