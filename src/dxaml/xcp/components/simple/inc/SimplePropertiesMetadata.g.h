// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

// Do not include directly, but rather via SimpleProperties.h, which takes care of ordering dependencies.

#pragma once

// Forward declare host types.
class CDependencyObject;
class CBrushTransition;
class CScalarTransition;
class CUIElement;
class CVector3Transition;
class CLinearGradientBrush;

namespace SimpleProperty
{
    // Type specializations.

    template <>
    struct type_traits<KnownTypeIndex::Matrix3x2>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix3x2;
        static constexpr Kind kind = Kind::ValueByRef;
        using type = ABI::Windows::Foundation::Numerics::Matrix3x2;
    };

    template <>
    struct type_traits<KnownTypeIndex::Matrix4x4>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix4x4;
        static constexpr Kind kind = Kind::ValueByRef;
        using type = ABI::Windows::Foundation::Numerics::Matrix4x4;
    };

    template <>
    struct type_traits<KnownTypeIndex::Quaternion>
    {
        static constexpr TID tid = KnownTypeIndex::Quaternion;
        static constexpr Kind kind = Kind::ValueByRef;
        using type = ABI::Windows::Foundation::Numerics::Quaternion;
    };

    template <>
    struct type_traits<KnownTypeIndex::Float>
    {
        static constexpr TID tid = KnownTypeIndex::Float;
        static constexpr Kind kind = Kind::Value;
        using type = FLOAT;
    };

    template <>
    struct type_traits<KnownTypeIndex::Vector2>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        static constexpr Kind kind = Kind::ValueByRef;
        using type = ABI::Windows::Foundation::Numerics::Vector2;
    };

    template <>
    struct type_traits<KnownTypeIndex::Vector3>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        static constexpr Kind kind = Kind::ValueByRef;
        using type = ABI::Windows::Foundation::Numerics::Vector3;
    };

    template <>
    struct type_traits<KnownTypeIndex::Double>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        static constexpr Kind kind = Kind::Value;
        using type = DOUBLE;
    };

    template <>
    struct type_traits<KnownTypeIndex::Int32>
    {
        static constexpr TID tid = KnownTypeIndex::Int32;
        static constexpr Kind kind = Kind::Value;
        using type = INT;
    };

    template <>
    struct type_traits<KnownTypeIndex::TimeSpan>
    {
        static constexpr TID tid = KnownTypeIndex::TimeSpan;
        static constexpr Kind kind = Kind::Value;
        using type = ABI::Windows::Foundation::TimeSpan;
    };

    template <>
    struct type_traits<KnownTypeIndex::Vector3TransitionComponents>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3TransitionComponents;
        static constexpr Kind kind = Kind::Value;
        using type = ABI::Microsoft::UI::Xaml::Vector3TransitionComponents;
    };

    // Property specializations.

    template <>
    struct prop_traits<KnownPropertyIndex::BrushTransition_Duration>
    {
        static constexpr TID tid = KnownTypeIndex::TimeSpan;
        using declaring_type = CBrushTransition;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::ScalarTransition_Duration>
    {
        static constexpr TID tid = KnownTypeIndex::TimeSpan;
        using declaring_type = CScalarTransition;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedCenterPoint>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedRotation>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedRotationAxis>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedScale>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedTransformMatrix>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix4x4;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_AnimatedTranslation>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_CenterPoint>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_KeepAliveCount>
    {
        static constexpr TID tid = KnownTypeIndex::Int32;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_RasterizationScale>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_Rotation>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_RotationAxis>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_Scale>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount>
    {
        static constexpr TID tid = KnownTypeIndex::Int32;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_TransformMatrix>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix4x4;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::UIElement_Translation>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3;
        using declaring_type = CUIElement;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::Vector3Transition_Components>
    {
        static constexpr TID tid = KnownTypeIndex::Vector3TransitionComponents;
        using declaring_type = CVector3Transition;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::Vector3Transition_Duration>
    {
        static constexpr TID tid = KnownTypeIndex::TimeSpan;
        using declaring_type = CVector3Transition;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_AnimatedCenterPoint>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_AnimatedRotation>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_AnimatedScale>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_AnimatedTransformMatrix>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix3x2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_AnimatedTranslation>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_CenterPoint>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_Rotation>
    {
        static constexpr TID tid = KnownTypeIndex::Double;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_Scale>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_TransformMatrix>
    {
        static constexpr TID tid = KnownTypeIndex::Matrix3x2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    template <>
    struct prop_traits<KnownPropertyIndex::LinearGradientBrush_Translation>
    {
        static constexpr TID tid = KnownTypeIndex::Vector2;
        using declaring_type = CLinearGradientBrush;
        static constexpr StorageType storage = StorageType::Sparse;
    };

    // Type default values.

    template <>
    inline typename interface_types_from_tid<KnownTypeIndex::Matrix3x2>::get_return Type::Default<KnownTypeIndex::Matrix3x2>()
    {
        static constexpr type_from_tid<KnownTypeIndex::Matrix3x2> s_default = { 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f};
        return s_default;
    };

    template <>
    inline typename interface_types_from_tid<KnownTypeIndex::Matrix4x4>::get_return Type::Default<KnownTypeIndex::Matrix4x4>()
    {
        static constexpr type_from_tid<KnownTypeIndex::Matrix4x4> s_default = { 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f };
        return s_default;
    };

    // Property default values.

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::BrushTransition_Duration>::get_return Property::Default<KnownPropertyIndex::BrushTransition_Duration>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::BrushTransition_Duration> s_default = { 1500000L };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::ScalarTransition_Duration>::get_return Property::Default<KnownPropertyIndex::ScalarTransition_Duration>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::ScalarTransition_Duration> s_default = { 3000000L };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_AnimatedRotationAxis>::get_return Property::Default<KnownPropertyIndex::UIElement_AnimatedRotationAxis>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_AnimatedRotationAxis> s_default = { 0.0f, 0.0f, 1.0f };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_AnimatedScale>::get_return Property::Default<KnownPropertyIndex::UIElement_AnimatedScale>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_AnimatedScale> s_default = { 1.0f, 1.0f, 1.0f };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_RasterizationScale>::get_return Property::Default<KnownPropertyIndex::UIElement_RasterizationScale>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_RasterizationScale> s_default = 1.0;
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_RotationAxis>::get_return Property::Default<KnownPropertyIndex::UIElement_RotationAxis>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_RotationAxis> s_default = { 0.0f, 0.0f, 1.0f };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_Scale>::get_return Property::Default<KnownPropertyIndex::UIElement_Scale>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_Scale> s_default = { 1.0f, 1.0f, 1.0f };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount>::get_return Property::Default<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount> s_default = 0;
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::Vector3Transition_Components>::get_return Property::Default<KnownPropertyIndex::Vector3Transition_Components>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::Vector3Transition_Components> s_default = ABI::Microsoft::UI::Xaml::Vector3TransitionComponents::Vector3TransitionComponents_X | ABI::Microsoft::UI::Xaml::Vector3TransitionComponents::Vector3TransitionComponents_Y | ABI::Microsoft::UI::Xaml::Vector3TransitionComponents::Vector3TransitionComponents_Z;
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::Vector3Transition_Duration>::get_return Property::Default<KnownPropertyIndex::Vector3Transition_Duration>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::Vector3Transition_Duration> s_default = { 3000000L };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedScale>::get_return Property::Default<KnownPropertyIndex::LinearGradientBrush_AnimatedScale>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedScale> s_default = { 1.0f, 1.0f };
        return s_default;
    };

    template <>
    inline typename interface_types_from_pid<KnownPropertyIndex::LinearGradientBrush_Scale>::get_return Property::Default<KnownPropertyIndex::LinearGradientBrush_Scale>()
    {
        static constexpr type_from_pid<KnownPropertyIndex::LinearGradientBrush_Scale> s_default = { 1.0f, 1.0f };
        return s_default;
    };

    // Tables.

    struct sparsetables
    {
        sparsetable_from_pid<KnownPropertyIndex::BrushTransition_Duration> m_BrushTransition_Duration;
        sparsetable_from_pid<KnownPropertyIndex::ScalarTransition_Duration> m_ScalarTransition_Duration;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedCenterPoint> m_UIElement_AnimatedCenterPoint;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedRotation> m_UIElement_AnimatedRotation;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedRotationAxis> m_UIElement_AnimatedRotationAxis;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedScale> m_UIElement_AnimatedScale;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedTransformMatrix> m_UIElement_AnimatedTransformMatrix;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_AnimatedTranslation> m_UIElement_AnimatedTranslation;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_CenterPoint> m_UIElement_CenterPoint;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_KeepAliveCount> m_UIElement_KeepAliveCount;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_RasterizationScale> m_UIElement_RasterizationScale;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_Rotation> m_UIElement_Rotation;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_RotationAxis> m_UIElement_RotationAxis;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_Scale> m_UIElement_Scale;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount> m_UIElement_ThemeShadowReceiverCount;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_TransformMatrix> m_UIElement_TransformMatrix;
        sparsetable_from_pid<KnownPropertyIndex::UIElement_Translation> m_UIElement_Translation;
        sparsetable_from_pid<KnownPropertyIndex::Vector3Transition_Components> m_Vector3Transition_Components;
        sparsetable_from_pid<KnownPropertyIndex::Vector3Transition_Duration> m_Vector3Transition_Duration;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedCenterPoint> m_LinearGradientBrush_AnimatedCenterPoint;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedRotation> m_LinearGradientBrush_AnimatedRotation;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedScale> m_LinearGradientBrush_AnimatedScale;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedTransformMatrix> m_LinearGradientBrush_AnimatedTransformMatrix;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedTranslation> m_LinearGradientBrush_AnimatedTranslation;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_CenterPoint> m_LinearGradientBrush_CenterPoint;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_Rotation> m_LinearGradientBrush_Rotation;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_Scale> m_LinearGradientBrush_Scale;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_TransformMatrix> m_LinearGradientBrush_TransformMatrix;
        sparsetable_from_pid<KnownPropertyIndex::LinearGradientBrush_Translation> m_LinearGradientBrush_Translation;
    };

    struct changehandlerstables
    {
        property_changed_handlers_from_pid<KnownPropertyIndex::BrushTransition_Duration> m_BrushTransition_Duration;
        property_changed_handlers_from_pid<KnownPropertyIndex::ScalarTransition_Duration> m_ScalarTransition_Duration;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedCenterPoint> m_UIElement_AnimatedCenterPoint;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedRotation> m_UIElement_AnimatedRotation;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedRotationAxis> m_UIElement_AnimatedRotationAxis;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedScale> m_UIElement_AnimatedScale;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedTransformMatrix> m_UIElement_AnimatedTransformMatrix;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_AnimatedTranslation> m_UIElement_AnimatedTranslation;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_CenterPoint> m_UIElement_CenterPoint;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_KeepAliveCount> m_UIElement_KeepAliveCount;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_RasterizationScale> m_UIElement_RasterizationScale;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_Rotation> m_UIElement_Rotation;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_RotationAxis> m_UIElement_RotationAxis;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_Scale> m_UIElement_Scale;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_ThemeShadowReceiverCount> m_UIElement_ThemeShadowReceiverCount;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_TransformMatrix> m_UIElement_TransformMatrix;
        property_changed_handlers_from_pid<KnownPropertyIndex::UIElement_Translation> m_UIElement_Translation;
        property_changed_handlers_from_pid<KnownPropertyIndex::Vector3Transition_Components> m_Vector3Transition_Components;
        property_changed_handlers_from_pid<KnownPropertyIndex::Vector3Transition_Duration> m_Vector3Transition_Duration;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedCenterPoint> m_LinearGradientBrush_AnimatedCenterPoint;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedRotation> m_LinearGradientBrush_AnimatedRotation;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedScale> m_LinearGradientBrush_AnimatedScale;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedTransformMatrix> m_LinearGradientBrush_AnimatedTransformMatrix;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_AnimatedTranslation> m_LinearGradientBrush_AnimatedTranslation;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_CenterPoint> m_LinearGradientBrush_CenterPoint;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_Rotation> m_LinearGradientBrush_Rotation;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_Scale> m_LinearGradientBrush_Scale;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_TransformMatrix> m_LinearGradientBrush_TransformMatrix;
        property_changed_handlers_from_pid<KnownPropertyIndex::LinearGradientBrush_Translation> m_LinearGradientBrush_Translation;
    };
}
