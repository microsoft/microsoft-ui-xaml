<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <LinkIncremental Condition="'$(Configuration)' == 'Release'">false</LinkIncremental>
  </PropertyGroup>

  <!-- If we have MIDL sources, but didn't include the custom midl target file.  default to OLE -->
  <Import Condition="'$(XamlMidlOptions)'==''" Project="msbuild\BuildSettings\MIDLOle.props"/>

  <!-- Handle our special version of precompiled headers -->
  <!-- For experimental Clang compilation, work to get precompiled headers is not done. -->
  <Import Condition="'$(ExperimentalClang)' != 'true'" Project="msbuild\BuildSettings\PrecompHeader.targets" />

  <!-- Windows Prformance Trace preprocessing -->
  <Import Project="msbuild\BuildSettings\TraceWPP.targets" />
  <Import  Condition="'$(ConfigurationType)'=='ETW_ALT'" Project="msbuild\BuildSettings\EtwManifestAlt.targets" />

  <!-- Fix up some stuff that MSBuild turns on for us -->
  <PropertyGroup>
    <!-- We can remove this when we get off the private sdk -->
    <DelayImpLib>$(WindowsUmLibPath)\dloadhelper.lib</DelayImpLib>
  </PropertyGroup>

  <!-- Determine the proper DLL entry point to use -->
  <PropertyGroup>
    <DllEntry Condition="'$(DllEntry)' == ''">_DllMainCRTStartup</DllEntry>
    <DllEntry Condition="'$(Platform)' == 'Win32'">$(DllEntry)@12</DllEntry>
  </PropertyGroup>

  <!-- Windows App SDK supports downlevel to Windows 10 1809 "Redstone 5" NTDDI_WIN10_RS5 (0x0A000006), UAP v7.0 -->
  <PropertyGroup>
    <TargetPlatformDefinitions>
      WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION=0x70000;
      NTDDI_VERSION=NTDDI_WIN10_RS5;
      WINVER=_WIN32_WINNT_WIN10;
      _WIN32_WINNT=_WIN32_WINNT_WIN10;
      _WIN32_IE=_WIN32_IE_IE100;
    </TargetPlatformDefinitions>
  </PropertyGroup>

  <!-- Since we aren't using the standard include mechanism for the sdks (INCLUDE environment variable) -->
  <!-- We need to add our sdk to the end of the AdditionalIncludes-->
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalIncludeDirectories>
        $(WinUIDetailsIncludePath)\abi;
        $(XamlPublicHeadersPath);
        $(XamlPrivateComHeadersPath);
        .;
        %(AdditionalIncludeDirectories);
        $(ProjectIncludeDirectories);
        $(OutDir.TrimEnd('\\'));  <!-- Bit of a hack to remove the trailing slash from OutDir.  It really doesn't affect anything except our validation code -->
        $(XamlPlatformSdkPaths);
        $(XamlCrtPaths);
        $(IntDir.TrimEnd('\\'));
      </AdditionalIncludeDirectories>

      <!-- There are some directories that define GUARD_CHECKESP to get this, but it is the default so we may not need that.  The caveat is whether this -->
      <!-- and the d2guardcheckesp2 really need to be seperate options (it isn't set by default).                                                       -->
      <ControlFlowGuard>Guard</ControlFlowGuard>
      <AdditionalOptions Condition="'$(GuardCheckesp)'=='1'">%(AdditionalOptions) /d2guardcheckesp2 </AdditionalOptions>

      <TreatWChar_tAsBuiltInType Condition="'$(XamlConsumesWinRT)'!='true'">false</TreatWChar_tAsBuiltInType>
      <AdditionalOptions Condition="'$(ExperimentalClang)' != 'true'">%(AdditionalOptions) /Wv:19.28.30000.0</AdditionalOptions>
      <AdditionalOptions Condition="'$(XamlConsumesWinRT)'=='true'">%(AdditionalOptions) $(XamlCppOptionsForWinRt)</AdditionalOptions>
      <AdditionalOptions Condition="'$(XamlConsumesWinRT)'!='true'">%(AdditionalOptions) $(XamlCppOptionsForNonWinRt)</AdditionalOptions>
      <!-- C++/CX and C++20 are incompatible.  If we are building as CX then force the language standard back to C++17. -->
      <LanguageStandard Condition="'$(XamlConsumesWinRT)'=='true'">stdcpp17</LanguageStandard>
      <ForcedUsingFiles Condition="'$(XamlConsumesWinRT)'=='true'">%(ForcedUsingFiles) $(XamlForcedUsingFilesForWinRt) $(VCToolsInstallDir)lib\x86\store\references\platform.winmd;</ForcedUsingFiles>
      <ForcedUsingFiles Condition="'$(XamlConsumesWinRT)'!='true'">%(ForcedUsingFiles) $(XamlForcedUsingFilesForNonWinRt)</ForcedUsingFiles>

      <DisableSpecificWarnings Condition="'$(DisableExperimentalWarnings)' == 'true' and '$(ShowExperimentalWarningsOverride)' != 'true'">%(DisableSpecificWarnings);4698</DisableSpecificWarnings>
      <PreprocessorDefinitions Condition="'$(TestCode)'=='true'">%(PreprocessorDefinitions) TEST_CODE;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(XamlConsumesWinRT)'=='true'">%(PreprocessorDefinitions) $(XamlPreprocessorDefinitionsForWinRt) $(ProjectPreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(XamlConsumesWinRT)'!='true'">%(PreprocessorDefinitions) $(XamlPreprocessorDefinitionsForNonWinRt) $(ProjectPreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(Platform)'=='Win32'">%(PreprocessorDefinitions) _USE_32BIT_TIME_T;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(_MSDeployUserAgent)'!=''">%(PreprocessorDefinitions) IS_LAB_BUILD;</PreprocessorDefinitions>
      <PreprocessorDefinitions>
        %(PreprocessorDefinitions)
        $(TargetPlatformDefinitions)
        _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE;
        _CONST_RETURN=;
        _ENFORCE_MATCHING_ALLOCATORS=0;
        _HAS_FUNCTION_ALLOCATOR_SUPPORT=1;
        _HAS_STD_BYTE=0;
        _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS;
        _SILENCE_IDENTITY_STRUCT_DEPRECATION_WARNING;
        _SILENCE_STDEXT_ALLOCATORS_DEPRECATION_WARNING;
        _SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS;
        _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING;
        _SILENCE_TR2_SYS_NAMESPACE_DEPRECATION_WARNING;
        _STL_EXTRA_DISABLED_WARNINGS=4239;
      </PreprocessorDefinitions>
      <SuppressStartupBanner>true</SuppressStartupBanner>
      <!-- Remove some stuff that was put in during default options-->
      <ProgramDataBaseFileName>$(OutDir)</ProgramDataBaseFileName>
      <!-- EditAndContinue (the default when UseDebugLibraries == true) is incompatible with /guard:cf -->
      <DebugInformationFormat>OldStyle</DebugInformationFormat>
      <DebugInformationFormatDefined>true</DebugInformationFormatDefined>
    </ClCompile>
    <Midl>
      <MinimumTargetSystem Condition="'%(MinimumTargetSystem)'==''">NT100</MinimumTargetSystem>
      <AdditionalIncludeDirectories>
        %(XamlClIncludeDirectories)
        %(AdditionalIncludeDirectories);
        $(ProjectIncludeDirectories);
        $(OutDir.TrimEnd('\\'));  <!-- Bit of a hack to remove the trailing slash from OutDir.  It really doesn't affect anything except our validation code -->
        $(XamlPlatformSdkPaths);
        $(XamlCrtPaths);
        <!-- It is unclear why the TEMP directory needs to be added here.  Some files are found in it, but others aren't unless it is in the  -->
        <!-- include path.  I suspect that %temp% is picked up with the other environment variables that have been disabled so that we can    -->
        <!-- reach into the razzle directories -->
        $(TempDir);
        <!-- Similarly, it appears we need to add the project directory itself here.  I think this is needed when we are compiling multiple idl -->
        <!-- files in the same directory that reference each other.                                                                             -->
        .;
        $(IntDir.TrimEnd('\\'));
        $(XamlSourcePath)\xcp\dxaml\idl\winrt\controls;
        $(XamlSourcePath)\xcp\dxaml\idl\winrt\core;
        $(XamlSourcePath)\xcp\dxaml\idl\winrt\main;
        $(WinUIDetailsIncludePath)\abi;
        $(WindowsSdxUmIncludePath);
        $(WindowsSdxSharedIncludePath);
        $(WindowsSdxWinrtIncludePath);
        %(AdditionalIncludeDirectories);
      </AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) $(XamlMidlOptions) $(MidlFlags)</AdditionalOptions>
      <AdditionalOptions Condition="'$(DisableMidlVersionChecks)'!='1'">%(AdditionalOptions) /enforce_version</AdditionalOptions>
      <PreprocessorDefinitions Condition="'$(TestCode)'=='true'">%(PreprocessorDefinitions) TEST_CODE;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(UsePublicSdk)'=='' or '$(UsePublicSdk)'=='0'">%(PreprocessorDefinitions) BUILD_WINDOWS;__WRL_CONFIGURATION_LEGACY__;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(XamlConsumesWinRT)'!='true'">%(PreprocessorDefinitions);_USE_DEV11_CRT;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(_MSDeployUserAgent)'!=''">%(PreprocessorDefinitions) IS_LAB_BUILD;</PreprocessorDefinitions>
      <PreprocessorDefinitions>
        %(PreprocessorDefinitions) 
        $(TargetPlatformDefinitions)
        $(XamlCommonPreprocessorDefinitions)
        $(XamlMidlPreprocessorDefinitions) 
        $(ProjectPreprocessorDefinitions) 
        _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE;
      </PreprocessorDefinitions>
    </Midl>
    <ResourceCompile>
      <IgnoreStandardIncludePath>true</IgnoreStandardIncludePath>
      <MinimumTargetSystem Condition="'%(MinimumTargetSystem)'==''">NT100</MinimumTargetSystem>
      <AdditionalIncludeDirectories>
        $(WindowsSdxUmIncludePath);
        $(WindowsSdxSharedIncludePath);
        $(WindowsSdxWinrtIncludePath);
        %(XamlClIncludeDirectories)
        %(AdditionalIncludeDirectories);
        $(ProjectIncludeDirectories);
        $(OutDir.TrimEnd('\\'));  <!-- Bit of a hack to remove the trailing slash from OutDir.  It really doesn't affect anything except our validation code -->
        $(XamlPlatformSdkPaths);
        $(XamlCrtPaths);
        <!-- It is unclear why the TEMP directory needs to be added here.  Some files are found in it, but others aren't unless it is in the  -->
        <!-- include path.  I suspect that %temp% is picked up with the other environment variables that have been disabled so that we can    -->
        <!-- reach into the razzle directories -->
        $(TempDir);
        <!-- Similarly, it appears we need to add the project directory itself here.  I think this is needed when we are compiling multiple idl -->
        <!-- files in the same directory that reference each other.                                                                             -->
        .;
        $(IntDir.TrimEnd('\\'));
      </AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) -z "MS Sans Serif,Helv/MS Shell Dlg"</AdditionalOptions>
      <PreprocessorDefinitions Condition="'$(TestCode)'=='true'">%(PreprocessorDefinitions) TEST_CODE;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(UsePublicSdk)'=='' or '$(UsePublicSdk)'=='0'">%(PreprocessorDefinitions) BUILD_WINDOWS;__WRL_CONFIGURATION_LEGACY__;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(XamlConsumesWinRT)'!='true'">%(PreprocessorDefinitions);_USE_DEV11_CRT;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(Configuration)'!='Debug'">%(PreprocessorDefinitions);NDEBUG;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(Configuration)'=='Debug'">%(PreprocessorDefinitions);DBG=1;</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(_MSDeployUserAgent)'!=''">%(PreprocessorDefinitions) IS_LAB_BUILD;</PreprocessorDefinitions>

      <!--
            Adding this preprocessor definition causes incremental builds to break since the command line changes with each build
            __BUILDDATE__=$([System.DateTime]::Now.ToString('yyMMdd-hhmm'));
            -->
      <PreprocessorDefinitions>
        %(PreprocessorDefinitions)
        $(TargetPlatformDefinitions)
        _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE; 
        __BUILDMACHINE__=DCPP($(COMPUTERNAME))($(USERNAME));
        _NT1X_=100;
        _USE_DECLSPECS_FOR_SAL=1;
        BUILD_UMS_ENABLED=0;
        BUILD_WOW64_ENABLED=0;
        CONDITION_HANDLING=1;
        DEVL=1;
        FPO=0;
        LSYSTEM_COMPATIBLE_ASSEMBLY_NAME=L"""Microsoft.Windows.SystemCompatible""";
        NT_INST=0;
        NT_UP=1;
        STD_CALL;
        SXS_ASSEMBLY_VERSION="""""";
        SXS_PROCESSOR_ARCHITECTURE=""$(arch)"";
        SXS_TARGET="""$(MSBuildProjectName).dll""";
        SYSTEM_COMPATIBLE_ASSEMBLY_NAME="""Microsoft.Windows.SystemCompatible""";
        WIN32=100;
        WINNT=1;
        ___TARGETNAME="""$(ProjectName)""";
        WIN32_LEAN_AND_MEAN=1;
        WINRT_LEAN_AND_MEAN;
      </PreprocessorDefinitions>
    </ResourceCompile>
    <ResourceCompile Condition="'$(Mui)'=='true'">
      <RCConfigFile>$(ExternalDependenciesPath)\min\mui.rcconfig</RCConfigFile>
      <AdditionalOptions> %(AdditionalOptions) -fm $(OutputPath)\%(Filename).muires -q %(RCConfigFile) -r </AdditionalOptions>
    </ResourceCompile>

    <Link Condition="'$(ResourceOnlyDll)'!='true'">
      <AdditionalDependencies>%(AdditionalDependencies) $(XamlDynamicLibraryDependencies)</AdditionalDependencies>
      <AdditionalOptions>%(AdditionalOptions) $(XamlDynamicLibraryOptions)</AdditionalOptions>

      <!-- These have to do with the control flow guard with appears we alway have on.  Also, are these just removing them from -->
      <!-- having been added for the compile.  If so we can probably get rid of them all together.                              -->
      <AdditionalOptions>%(AdditionalOptions) /d2:-guard4 /guard:cf /d2:-nocfgrngchk /d2:-guardcfgfuncptr</AdditionalOptions>
      <AdditionalOptions Condition="'$(GuardCheckesp)'=='1'">%(AdditionalOptions) /d2:-guardcheckesp2 </AdditionalOptions>

      <LinkTimeCodeGeneration Condition="'$(Configuration)' == 'Release'">UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>

      <AdditionalOptions>
        %(AdditionalOptions)
        /debugtype:cv,fixup,pdata
        /guard:export
        /guard:exportsuppress
        /guard:longjmp
        /guard:mixed
        /merge:.gfids=.rdata
      </AdditionalOptions>
      <AdditionalOptions Condition="'$(ConfigurationType)'!='Application'">
        %(AdditionalOptions)
        -entry:$(DllEntry)
      </AdditionalOptions>
      
      <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
    </Link>
    <Link Condition="'$(ResourceOnlyDll)'=='true'">
      <AdditionalOptions> %(AdditionalOptions) $(XamlDynamicLibraryOptions) $(XamlDynamicLibraryOptionsNoEntry)</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <SetChecksum>false</SetChecksum>
      <NoEntryPoint>true</NoEntryPoint>
    </Link>
  </ItemDefinitionGroup>

  <Target Name="Preprocess" DependsOnTargets="SetBuildDefaultEnvironmentVariables">
    <Message Condition="'$(Source)'!=''" Text="Preprocessing: $(Source)"/>
    <Error Condition="'$(Source)'==''" Text="To generate a pre-processed file, please specify a source file with msbuild /p:Source=nameOfTheSource.cpp"/>
    <CL PreprocessToFile="true" Sources="$(Source)"
        AdditionalIncludeDirectories="%(ClCompile.AdditionalIncludeDirectories)"
        PreprocessorDefinitions="%(ClCompile.PreprocessorDefinitions)"
        AdditionalOptions="%(ClCompile.AdditionalOptions) /d1PP"
        PreprocessKeepComments="true"
        PreprocessOutputPath="$(Source.Replace('.cpp', '.pp'))"
            />
  </Target>

  <PropertyGroup>
    <MachineType>Undefined</MachineType>
    <MachineType Condition="'$(arch)'=='x86'">MachineX86</MachineType>
    <MachineType Condition="'$(arch)'=='amd64'">MachineX64</MachineType>
    <MachineType Condition="'$(arch)'=='ARM64'">MachineARM64</MachineType>
  </PropertyGroup>
  <Target Name="GenerateMUI" BeforeTargets="Link" AfterTargets="ResourceCompile" Inputs="$(OutputPath)%(ResourceCompile.Filename).muires" Outputs="$(OutputPath)\$(MSBuildProjectName).dll.mui" Condition="'$(Mui)'=='true'">
    <Link OutputFile="$(OutputPath)$(MSBuildProjectName).dll.mui" TargetMachine="$(MachineType)" TreatLinkerWarningAsErrors="true"
    NoEntryPoint="true" DataExecutionPrevention="true" RandomizedBaseAddress="true" LinkDLL="true" IgnoreAllDefaultLibraries="true"
    Version="10.0"  Sources="$(OutputPath)%(ResourceCompile.Filename).muires" SuppressStartupBanner="true" AdditionalOptions="/osversion:10.0 /Brepro"/>
  </Target>

  <ItemDefinitionGroup>
    <Link>
      <AdditionalDependencies>%(AdditionalDependencies);%(CrtLibsExternal)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup Condition="'$(ConfigurationType)'=='DynamicLibrary' or '$(ConfigurationType)'=='Application'">
    <ProjectReference Include="@(Crtlibs)" />
  </ItemGroup>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />

  <!-- We have some issues with duplicate symbols because, well, we implement stuff in multiple places and then try    -->
  <!-- to link them all together.  One of these cases is the PalDebugProject which must be linked after the allocation -->
  <!-- project.  So before we resolve the references, we will take it out of ProjectRefrences and add it to the end    -->
  <!-- Note: This is still fragile and we should clean up our implementations.  We can't do anything about the new/    -->
  <!--       delete that we override from the crt, but a bunch of the other stuff can just be fixed by better          -->
  <!--       organizing/selecting where stuff is located and what we link with                                         -->
  <Target Name="BeforeResolveReferences" BeforeTargets="AssignProjectConfiguration" Condition="'$(ConfigurationType)'=='DynamicLibrary'">
    <FindInList CaseSensitive="false" MatchFileNameOnly="true" List="@(ProjectReference)" ItemSpecToFind="PALDebug.vcxproj">
      <Output TaskParameter="ItemFound" ItemName="PalDebugProject"/>
    </FindInList>
    <ItemGroup>
      <ProjectReference Remove="@(PalDebugProject)"/>
    </ItemGroup>
    <ItemGroup>
      <ProjectReference Include="@(PalDebugProject)"/>
    </ItemGroup>
  </Target>

  <!-- If we were requested to produce both a static and dynamic library then import the dual library targets.  Note: This must occur after   -->
  <!-- Microsoft.Cpp.Targets because we need to override a warning message task that says we are producing a lib in a DynamicLibrary          -->
  <!-- project and we need to do it via an import so that we don't override this task except in this special case.                            -->
  <Import Project="msbuild\buildsettings\DualLibrary.targets" Condition="'$(ConfigurationType)'=='DynamicLibrary' and '$(ProduceStaticLibrary)'=='true'"/>

  <ItemGroup Condition="'$(XamlConsumesWinRT)' == 'true' and '$(XamlForcedUsingFilesForWinRtIncludesMUXWinMd)' == 'true'">
    <ProjectReference Include="$(ProjectRoot)MergedWinMD\private\MergedWinMD.vcxproj" />
  </ItemGroup>

  <PropertyGroup>
    <SdkCppArchitectureNeutralTargetsFile>$(NugetPackageDirectory)\$(WindowsSdkNugetPackageName).cpp.$(MicrosoftWindowsSDKCppNugetPackageVersion)\build\native\$(WindowsSdkNugetPackageName).cpp.targets</SdkCppArchitectureNeutralTargetsFile>
  </PropertyGroup>

  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SdkCppArchitectureNeutralTargetsFile)')" Text="$([System.String]::Format('$(ErrorText)', '$(SdkCppArchitectureNeutralTargetsFile)'))" />
  </Target>
  <Import Project="$(SdkCppArchitectureNeutralTargetsFile)" Condition="Exists('$(SdkCppArchitectureNeutralTargetsFile)')" />
</Project>
