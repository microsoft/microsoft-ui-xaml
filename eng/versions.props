<!-- Copyright (c) Microsoft Corporation. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project>
  <PropertyGroup>
    <!-- Package names -->
    <WindowsSdkNugetPackageName>Microsoft.Windows.SDK</WindowsSdkNugetPackageName>
    <WinUIDetailsPackageName>Microsoft.Internal.WinUIDetails</WinUIDetailsPackageName>
    <LiftedIXPTransportPackageName>Microsoft.ProjectReunion.InteractiveExperiences.TransportPackage</LiftedIXPTransportPackageName>
    <LiftedIXPInternalPackageName>Microsoft.Internal.InteractiveExperiences</LiftedIXPInternalPackageName>
    <ProjectReunionFoundationTransportPackageName>Microsoft.WindowsAppSDK.Foundation.TransportPackage</ProjectReunionFoundationTransportPackageName>
    <WebView2PackageName>Microsoft.Web.WebView2</WebView2PackageName>
    <WilPackageName>Microsoft.Windows.ImplementationLibrary</WilPackageName>
    <MicrosoftCsWinRtPackageName>Microsoft.Windows.CsWinRT</MicrosoftCsWinRtPackageName>
    <LocalizedMUIFilesPackageName>Microsoft.Internal.WinUILocalizationResources</LocalizedMUIFilesPackageName>
    <PrivateDependencyPackageName>Microsoft.UI.DCPP.Dependencies.Minimal</PrivateDependencyPackageName>
    <!-- Determine the configured versions based upon the architecture specific nuget packages -->
    <PackagesPlatformConfigFile>$(MSBuildThisFileDirectory)..\packages.$(Platform).config</PackagesPlatformConfigFile>
    <PackagesPlatformConfigFile Condition="!Exists('$(PackagesPlatformConfigFile)')">$(MSBuildThisFileDirectory)..\packages.x86.config</PackagesPlatformConfigFile>
    <PackagesPlatformConfigContents>$([System.IO.File]::ReadAllText("$(PackagesPlatformConfigFile)"))</PackagesPlatformConfigContents>
    <MicrosoftWindowsSDKCppNugetPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesPlatformConfigContents), 'Microsoft.Windows.SDK.cpp.*?version="(.*?)"').Groups[1].Value)</MicrosoftWindowsSDKCppNugetPackageVersion>
    <!-- Determine the configured versions based upon the architecture neutral nuget packages -->
    <PackagesConfigFile>$(MSBuildThisFileDirectory)..\packages.config</PackagesConfigFile>
    <PackagesConfigContents>$([System.IO.File]::ReadAllText("$(PackagesConfigFile)"))</PackagesConfigContents>
    <LocalizedMUIFilesPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Internal.WinUILocalizationResources.*?version="(.*?)"').Groups[1].Value)</LocalizedMUIFilesPackageVersion>
    <MicrosoftWindowsSDKUWPManagedVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Windows.SDK.UWP.Managed.*?version="(.*?)"').Groups[1].Value)</MicrosoftWindowsSDKUWPManagedVersion>
    <MicrosoftWindowsSDKContractsVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Windows.SDK.Contracts.*?version="(.*?)"').Groups[1].Value)</MicrosoftWindowsSDKContractsVersion>
    <TaefNugetPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Taef.*?version="(.*?)"').Groups[1].Value)</TaefNugetPackageVersion>
    <MicrosoftNETCoreUniversalWindowsPlatformVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.NETCore.UniversalWindowsPlatform.*?version="(.*?)"').Groups[1].Value)</MicrosoftNETCoreUniversalWindowsPlatformVersion>
    <CurrentWilPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Windows.ImplementationLibrary.*?version="(.*?)"').Groups[1].Value)</CurrentWilPackageVersion>
    <MuxCustomBuildTasksPackageVersion>1.0.125-winui3</MuxCustomBuildTasksPackageVersion>
    <MicrosoftSourceLinkAzureReposVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.SourceLink.AzureRepos.Git.*?version="(.*?)"').Groups[1].Value)</MicrosoftSourceLinkAzureReposVersion>
    <MicrosoftWindowsSDKBuildToolsNugetPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Windows.SDK.BuildTools.*?version="(.*?)"').Groups[1].Value)</MicrosoftWindowsSDKBuildToolsNugetPackageVersion>
    <CurrentPrivateDependencyPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.UI.DCPP.Dependencies.Minimal.*?version="(.*?)"').Groups[1].Value)</CurrentPrivateDependencyPackageVersion>
    <TestInProductionPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.Windows.TestInProduction.*?version="(.*?)"').Groups[1].Value)</TestInProductionPackageVersion>
    <MemoBuildPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'MemoBuild.*?version="(.*?)"').Groups[1].Value)</MemoBuildPackageVersion>
    <!-- Determine the configured versions based upon the Vesion.Details.xml file. -->
    <VersionDetailsFile>$(MSBuildThisFileDirectory)Version.Details.xml</VersionDetailsFile>
    <VersionDetailsFileContents>$([System.IO.File]::ReadAllText("$(VersionDetailsFile)"))</VersionDetailsFileContents>
    <FoundationTransportPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(VersionDetailsFileContents), 'Microsoft.WindowsAppSDK.Foundation.TransportPackage.*?Version="(.*?)"').Groups[1].Value)</FoundationTransportPackageVersion>
    <IxpTransportPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(VersionDetailsFileContents), 'Microsoft.ProjectReunion.InteractiveExperiences.TransportPackage.*?Version="(.*?)"').Groups[1].Value)</IxpTransportPackageVersion>
    <IxpInternalPackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(VersionDetailsFileContents), 'Microsoft.Internal.InteractiveExperiences.*?Version="(.*?)"').Groups[1].Value)</IxpInternalPackageVersion>
    <WinUIDetailsNugetVersion>$([System.Text.RegularExpressions.Regex]::Match($(VersionDetailsFileContents), 'Microsoft.Internal.WinUIDetails.*?Version="(.*?)"').Groups[1].Value)</WinUIDetailsNugetVersion>
    <MicrosoftBuildMsixVersion>$([System.Text.RegularExpressions.Regex]::Match($(VersionDetailsFileContents), 'Microsoft.Build.Msix.*?Version="(.*?)"').Groups[1].Value)</MicrosoftBuildMsixVersion>
    <!-- It is at this point that we might want our non-product code to be able to use a package version different than the primary configuration -->
    <!-- If so, this would probably be the point at which we would override the above version with what is configured for the app                 -->
    <!-- The package version identifies the targeted package version based on the configured packages. -->
    <PackageTargetPlatformVersion>$(MicrosoftWindowsSDKCppNugetPackageVersion.Substring(0,$(MicrosoftWindowsSDKCppNugetPackageVersion.LastIndexOf('.')))).0</PackageTargetPlatformVersion>
    <!-- Force our build version to match the package version -->
    <WindowsTargetPlatformVersion>$(PackageTargetPlatformVersion)</WindowsTargetPlatformVersion>
    <SamplesTargetFrameworkMoniker>net6.0-windows10.0.19041.0</SamplesTargetFrameworkMoniker>
    <WinUIVersion Condition="'$(WinUIVersion)'==''">3.0.0-dev</WinUIVersion>
    <WindowsAppSdkPackageConfig Condition="'$(WindowsAppSdkPackageConfig)'==''">$(Configuration)</WindowsAppSdkPackageConfig>
    <WindowsAppSdkPackageVersion Condition="'$(WindowsAppSdkPackageVersion)'==''">999.0.0-mock-$(WinUIVersion)-$(BuildPlatform)-$(WindowsAppSdkPackageConfig)</WindowsAppSdkPackageVersion>
    <CurrentLiftedIXPTargetPlatformVersion>10.0.18362.0</CurrentLiftedIXPTargetPlatformVersion>
    <CurrentLiftedIXPPackageVersion>0.9.0-CI-22495.1000.211103-1000.2</CurrentLiftedIXPPackageVersion>
    <MicrosoftVisualStudioProjectSystemVersion>15.0.737</MicrosoftVisualStudioProjectSystemVersion>
    <WindowsTargetPlatformMinVersion>10.0.17763.0</WindowsTargetPlatformMinVersion>
    <DotNetCoreTargetFrameworkMoniker>$(_DotNetMoniker)-windows$(WindowsTargetPlatformVersion)</DotNetCoreTargetFrameworkMoniker>
    <!-- For compat reasons, this should always be .NET 6, as it controls the .NET version the Microsoft.WinUI.dll CSWinRT projection assembly targets. -->
    <DotNetCoreTargetFrameworkMonikerForPackaging>net6.0-windows$(WindowsTargetPlatformMinVersion)</DotNetCoreTargetFrameworkMonikerForPackaging>
    <!-- XeWin10TargetVersion is needed by the Microsoft.Windows.SDK.cpp.targets -->
    <XeWin10TargetVersion>$(WindowsTargetPlatformVersion)</XeWin10TargetVersion>
    <!--
         Keep this CsWinRT version in sync with both \Samples\WinUIGallery\WinUIGallery\standalone.props as well
         as what is included in the .NET version specified below
    -->
    <MicrosoftCsWinRTPackageVersion>2.0.3</MicrosoftCsWinRTPackageVersion>
    <MicrosoftWindowsSDKNetRefPackVersionSuffixOverride>29</MicrosoftWindowsSDKNetRefPackVersionSuffixOverride>
    <dotNetSdkChannel>7.0.1xx</dotNetSdkChannel>
    <dotNetSdkVNextChannel>8.0.1xx</dotNetSdkVNextChannel>
    <CppWinRTVersion>2.0.230706.1</CppWinRTVersion>
    <WebView2Version>1.0.2210.55</WebView2Version>
    <Win2DWinUIVersion>0.1.0.3</Win2DWinUIVersion>
    <Win2DUWPVersion>1.25.0</Win2DUWPVersion>
    <ColorCodeVersion>2.0.13</ColorCodeVersion>
    <CommunityToolkitWinUIVersion>8.0.230907</CommunityToolkitWinUIVersion>
    <GraphicsWin2DVersion>1.0.4</GraphicsWin2DVersion>
    <NewtonsoftJsonVersion>13.0.2</NewtonsoftJsonVersion>
    <MicrosoftTestNetSdkVersion>17.4.0</MicrosoftTestNetSdkVersion>
    <AbiWinRtVersion>2.0.210330.2</AbiWinRtVersion>
  </PropertyGroup>
  <Target Name="ValidatePackageVersionRetrieval" BeforeTargets="Build;CoreCompile;Midl;ResolveAssemblyReferences">
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="Build Versions returned from package configurations" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Build.Msix=$(MicrosoftBuildMsixVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Internal.WinUILocalizationResources=$(LocalizedMUIFilesPackageVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Windows.SDK.UWP.Managed=$(MicrosoftWindowsSDKUWPManagedVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Windows.SDK.Contracts=$(MicrosoftWindowsSDKContractsVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Taef=$(TaefNugetPackageVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Internal.WinUIDetails=$(WinUIDetailsNugetVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.NETCore.UniversalWindowsPlatform=$(MicrosoftNETCoreUniversalWindowsPlatformVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Windows.ImplementationLibrary=$(CurrentWilPackageVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     MUXCustomBuildTasks=$(MuxCustomBuildTasksPackageVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.SourceLink.AzureRepos.Git=$(MicrosoftSourceLinkAzureReposVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Windows.SDK.BuildTools=$(MicrosoftWindowsSDKBuildToolsNugetPackageVersion)" />
    <Message Condition="'$(DEBUG_BUILD)'!=''" Text="     Microsoft.Windows.SDK.cpp=$(MicrosoftWindowsSDKCppNugetPackageVersion)" />
    <!-- Verify that we were able to retrieve all the versions from the configuration files. -->
    <Error Condition="'$(FoundationTransportPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.WindowsAppSDK.Foundation.TransportPackage" />
    <Error Condition="'$(IxpTransportPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.ProjectReunion.InteractiveExperiences.TransportPackage" />
    <Error Condition="'$(IxpInternalPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Internal.InteractiveExperiences" />
    <Error Condition="'$(MicrosoftBuildMsixVersion)' == ''" Text="Unable to determine version for package Microsoft.Build.Msix" />
    <Error Condition="'$(LocalizedMUIFilesPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Internal.WinUILocalizationResources" />
    <Error Condition="'$(MicrosoftWindowsSDKUWPManagedVersion)' == ''" Text="Unable to determine version for package Microsoft.Windows.SDK.UWP.Managed" />
    <Error Condition="'$(MicrosoftWindowsSDKContractsVersion)' == ''" Text="Unable to determine version for package Microsoft.Windows.SDK.Contracts" />
    <Error Condition="'$(TaefNugetPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Taef" />
    <Error Condition="'$(WinUIDetailsNugetVersion)' == ''" Text="Unable to determine version for package Microsoft.Internal.WinUIDetails" />
    <Error Condition="'$(MicrosoftNETCoreUniversalWindowsPlatformVersion)' == ''" Text="Unable to determine version for package Microsoft.NETCore.UniversalWindowsPlatform" />
    <Error Condition="'$(CurrentWilPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Windows.ImplementationLibrary" />
    <Error Condition="'$(MuxCustomBuildTasksPackageVersion)' == ''" Text="Unable to determine version for package MUXCustomBuildTasks" />
    <Error Condition="'$(MicrosoftSourceLinkAzureReposVersion)' == ''" Text="Unable to determine version for package Microsoft.SourceLink.AzureRepos.Git" />
    <Error Condition="'$(MicrosoftWindowsSDKBuildToolsNugetPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Windows.SDK.BuildTools" />
    <Error Condition="'$(MicrosoftWindowsSDKCppNugetPackageVersion)' == ''" Text="Unable to determine version for package Microsoft.Windows.SDK.cpp" />
  </Target>
</Project>