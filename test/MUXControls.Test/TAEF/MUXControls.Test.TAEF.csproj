<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <ProjectGuid>{4D8C5D1B-F982-44A1-B744-DD0E51651BF2}</ProjectGuid>
    <DefineConstants>$(DefineConstants);USING_TAEF</DefineConstants>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
  </PropertyGroup>
  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v2.1</TargetFrameworkVersion>
    <RuntimeIdentifiers>win-x86;win-x64;win-arm;win-arm64</RuntimeIdentifiers>
    <!-- The binaries we're building against are managed, so which platform's folder they come out of is immaterial.
         For simplicity's sake, we'll always get them from the x86 folder, but the CoreClr binaries are the same everywhere. -->
    <TaefRootDirectory>$(NuGetPackageRoot)taef.redist.wlk\10.31.180822002\build\Binaries\x86\CoreClr\</TaefRootDirectory>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.1018-prerelease" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="TE.Managed">
      <HintPath>$(TaefRootDirectory)TE.Managed.dll</HintPath>
    </Reference>
    <Reference Include="TE.ManagedTestMode">
      <HintPath>$(TaefRootDirectory)TE.ManagedTestMode.dll</HintPath>
    </Reference>
    <Reference Include="Wex.Common.Managed">
      <HintPath>$(TaefRootDirectory)Wex.Common.Managed.dll</HintPath>
    </Reference>
    <Reference Include="Wex.Logger.Interop">
      <HintPath>$(TaefRootDirectory)Wex.Logger.Interop.dll</HintPath>
    </Reference>
  </ItemGroup>
  <!-- If we include the razzle includes in the csproj, VS raises warnings about referenced components not being found even if
       it's gated with the condition that we're building with build.exe.  To avoid that, we'll add the razzle includes
       in a props file that is only included when we're building with build.exe, which makes VS never see them.
       Similarly, the non-razzle includes confuse the razzle MSBuild, even though it's marked with a condition that should
       cause it to be excluded. -->
  <Import Project="RazzleIncludes.props" Condition="$(BuildingWithBuildExe) == 'true'" />
  <Import Project="NonRazzleIncludes.props" Condition="$(BuildingWithBuildExe) != 'true'" />
  <Import Project="..\MUXControls.Test.Shared.projitems" />
  <ItemGroup>
    <ProjectReference Include="..\..\testinfra\MUXTestInfra\TAEF\MUXTestInfra.TAEF.csproj" />
  </ItemGroup>
  <Import Project="..\MUXControls.Test.Shared.targets" />
  <!-- Sdk="Microsoft.NET.Sdk" doesn't do anything in Razzle, so we need to manually include the C# targets file there. -->
  <Import Project="$(CSharpTargetsFilePath)" Condition="$(BuildingWithBuildExe) == 'true'" />
  <Import Project="$(NTMAKEENV)\UniversalTest\Microsoft.TestInfrastructure.UniversalTest.props" Condition="$(BuildingWithBuildExe) == 'true'" />
</Project>