<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)\..\..\MUXControlsReleaseTest.props" />
  <PropertyGroup Condition="'$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '15.0'">
    <VisualStudioVersion>15.0</VisualStudioVersion>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x86">
      <Configuration>Debug</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x86">
      <Configuration>Release</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup>
    <WapProjPath Condition="'$(WapProjPath)'==''">$(MSBuildExtensionsPath)\Microsoft\DesktopBridge</WapProjPath>
    <SDKIdentifier>Windows</SDKIdentifier>
    <SDKVersion>10.0</SDKVersion>
  </PropertyGroup>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.props" />
  <PropertyGroup>
    <ProjectGuid>4454b583-39a0-4a91-881c-2078fa26c447</ProjectGuid>
    <TargetPlatformVersion>$(MuxSdkVersion)</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.18362.0</TargetPlatformMinVersion>
    <DefaultLanguage>en-US</DefaultLanguage>
    <AppxPackageSigningEnabled>true</AppxPackageSigningEnabled>
    <EntryPointProjectUniqueName>WpfApp.csproj</EntryPointProjectUniqueName>
    <AppxPackageName>WpfApp</AppxPackageName>
    <AppxBundleNameForOutput>WpfApp</AppxBundleNameForOutput>
    <PackageCertificateKeyFile>..\..\..\..\build\WinUITest.pfx</PackageCertificateKeyFile>
    <AppxValidateAppxManifest>false</AppxValidateAppxManifest>
  </PropertyGroup>
  <ItemGroup>
    <AppxManifest Include="Package.appxmanifest">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <SDKReference Include="Microsoft.VCLibs.Desktop, Version=14.0" />
    <!-- Needed for ucrtbased.dll when running a debug build. -->
    <SDKReference Include="Microsoft.UniversalCRT.Debug, Version=$(TargetPlatformVersion)" Condition="'$(Configuration)' == 'Debug'" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Images\SplashScreen.scale-200.png" />
    <Content Include="Images\LockScreenLogo.scale-200.png" />
    <Content Include="Images\Square150x150Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Images\StoreLogo.png" />
    <Content Include="Images\Wide310x150Logo.scale-200.png" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="WpfApp.csproj">
      <SkipGetTargetFrameworkProperties>True</SkipGetTargetFrameworkProperties>
      <PublishProfile>Properties\PublishProfiles\win10-$(Platform).pubxml</PublishProfile>
      <!-- A recent update to MSBuild targets caused this property not to get set on all instances of MSBuild calls to WpfApp.csproj,
           making us pick up the wrong value for $(OutDir) and causing a build error.  Let's make sure we set it. -->
      <SetTargetFramework>IsBeingPackaged=true</SetTargetFramework>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.targets" />
  <ItemGroup>
    <PackageReference Include="MUXCustomBuildTasks">
      <Version>1.0.67</Version>
    </PackageReference>
    <PackageReference Include="Microsoft.UI.Xaml">
      <Version>2.6.1</Version>
    </PackageReference>
  </ItemGroup>
  <!-- For reasons that are unclear, MSBuild generates an AppX manifest that has two duplicate entries for Microsoft.UI.Xaml.dll
       and does not point the other DLLs at the version in the WpfApp subfolder.  We want them all to point at the WpfApp subfolder,
       so we'll remove the one entry that already points there and point the rest there. -->
  <UsingTask TaskName="RepathRootWinMDEntries" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <PathToAppxManifest ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
        <Reference Include="System.Xml" />
        <Using Namespace="System" />
        <Using Namespace="System.Xml" />
        <Using Namespace="System.Collections.Generic" />
        <Using Namespace="System.IO" />
        <Code Type="Fragment" Language="cs"><![CDATA[
            if (File.Exists(PathToAppxManifest))
            {
                Log.LogMessage(File.ReadAllText(PathToAppxManifest));
                
                // Load AppxManifest.xml
                XmlDocument appxManifest = new XmlDocument();
                appxManifest.Load(PathToAppxManifest);

                XmlNamespaceManager namespaceManager = new XmlNamespaceManager(appxManifest.NameTable);
                namespaceManager.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");

                // For each extension node, if it doesn't have a "WpfApp\" subfolder prefix in its path, add one.
                // If we've already seen the path, then we'll remove it to avoid duplication.
                XmlNode extensionsNode = null;

                foreach (XmlNode node in appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions", namespaceManager))
                {
                    extensionsNode = node;
                    break;
                }

                if (extensionsNode != null)
                {
                    List<string> pathsSeen = new List<string>();
                    XmlNodeList xmlNodeList = appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions/w:Extension", namespaceManager);

                    foreach (XmlNode node in xmlNodeList)
                    {
                        XmlNode pathNode = node.SelectSingleNode("w:InProcessServer/w:Path", namespaceManager);
                        string path = pathNode.InnerText.Replace(@"WpfApp\", "");
                        
                        if (pathsSeen.Contains(path))
                        {
                            extensionsNode.RemoveChild(node);
                        }
                        else
                        {
                            pathNode.InnerText = @"WpfApp\" + path;
                            pathsSeen.Add(path);
                        }
                    }
                }

                // Save the updated AppxManifest.xml file
                appxManifest.Save(PathToAppxManifest);
                Log.LogMessage(File.ReadAllText(PathToAppxManifest));
            }
        ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="RepathRootWinMDEntries" AfterTargets="_ValidateAppxPackage" BeforeTargets="_GenerateAppxPackageFile" Inputs="$(FinalAppxManifestName)" Outputs="$(FinalAppxManifestName).incremental">
    <RepathRootWinMDEntries PathToAppxManifest="$(FinalAppxManifestName)" />
    <Touch Files="$(FinalAppxManifestName).incremental" AlwaysCreate="True" />
  </Target>
  <!-- For reasons that are unclear, _RemoveExtraPriFiles fails to remove an instance of AppTestAutomationHelpers.pri,
       which causes an duplicate item issue during MakePri.exe.  We'll remove it explicitly to avoid that. -->
  <Target Name="RemoveAnotherExtraPriFile" AfterTargets="_RemoveExtraPriFiles" BeforeTargets="_GenerateProjectPriConfigurationFiles">
    <PropertyGroup>
      <WpfAppOutDir>$([System.IO.Path]::GetFullPath('$(OutDir)..\WpfApp\Packaged'))\</WpfAppOutDir>
    </PropertyGroup>
    <ItemGroup>
      <_PriFile Remove="@(_PriFile)" Condition="'%(Identity)' == '$(WpfAppOutDir)AppTestAutomationHelpers.pri'" />
    </ItemGroup>
  </Target>
  <!-- The packaging step also "helpfully" puts DLLs and WinMDs with the same name in the root directory,
       instead of the app directory. We need to fix that. -->
  <Target Name="PlaceEverythingInAppDirectory" AfterTargets="_ValidateAppxPackage" BeforeTargets="_GenerateAppxPackageFile">
    <ItemGroup>
      <AppxPackagePayloadToCopy Include="@(AppxPackagePayload)" Condition="'%(TargetPath)' == '%(Filename)%(Extension)' and ('%(Extension)' == '.dll' or '%(Extension)' == '.winmd')" />
      <AppxPackagePayload Remove="@(AppxPackagePayloadToCopy)" />
      <AppxPackagePayload Include="@(AppxPackagePayloadToCopy)">
        <TargetPath>$(AppxPackageName)\%(Filename)%(Extension)</TargetPath>
      </AppxPackagePayload>
      <AppxUploadPackagePayloadToCopy Include="@(AppxUploadPackagePayload)" Condition="'%(TargetPath)' == '%(Filename)%(Extension)' and ('%(Extension)' == '.dll' or '%(Extension)' == '.winmd')" />
      <AppxUploadPackagePayload Remove="@(AppxUploadPackagePayloadToCopy)" />
      <AppxUploadPackagePayload Include="@(AppxUploadPackagePayloadToCopy)">
        <TargetPath>$(AppxPackageName)\%(Filename)%(Extension)</TargetPath>
      </AppxUploadPackagePayload>
    </ItemGroup>
  </Target>
  <!-- We also need to remove the UWP app payload that conflicts with the desktop DLLs.
       This comes from the UWP app, and we have no use for it in WPF. -->
  <Target Name="RemoveUWPAppPayload" AfterTargets="_ValidateAppxPackage" BeforeTargets="_GenerateAppxPackageFile">
    <PropertyGroup>
      <UWPNugetRepo>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\NuGet\Repository', 'UWPNugetPackages', null, RegistryView.Registry32, RegistryView.Default))</UWPNugetRepo>
      <UWPAppOutDir>$([System.IO.Path]::GetFullPath('$(OutDir)..\UwpApp'))\</UWPAppOutDir>
    </PropertyGroup>
    <ItemGroup>
      <UWPAppPayload Include="$(UWPNugetRepo)\runtime.win10-$(Platform).microsoft.netcore.universalwindowsplatform\**\System.Runtime.dll" />
      <UWPAppPayload Include="$(NuGetPackageRoot)runtime.win10-$(Platform).microsoft.netcore.universalwindowsplatform\**\System.Runtime.dll" />
      <UWPAppPayload Include="$(UWPAppOutDir)ilc\clrcompression.dll" />
      <AppxPackagePayload Remove="@(UWPAppPayload)" />
    </ItemGroup>
  </Target>
  <Target Name="AfterBuild" Condition="'$(BuildingInsideVisualStudio)' != 'true'">
    <RunPowershellScript Path="$(MSBuildProjectDirectory)\..\..\tools\ExtractPackageDependencies_ReleaseTest.ps1" Parameters="-sourceFile $(OutDir)\WpfApp.Package.build.appxrecipe -platform $(PlatformName) -outputFile $(AppxPackageTestDir)\$(AppxPackageName).dependencies.txt" FilesWritten="$(AppxPackageTestDir)\$(AppxPackageName).dependencies.txt" />
  </Target>
</Project>