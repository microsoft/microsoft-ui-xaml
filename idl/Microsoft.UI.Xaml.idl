#define MU_XC_NAMESPACE Microsoft.UI.Xaml.Controls
#define MU_XCP_NAMESPACE Microsoft.UI.Xaml.Controls.Primitives
#define MU_XCAV_NAMESPACE Microsoft.UI.Xaml.Controls.AnimatedVisuals
#define MU_XM_NAMESPACE Microsoft.UI.Xaml.Media
#define MU_XAP_NAMESPACE Microsoft.UI.Xaml.Automation.Peers
#define MU_PRIVATE_CONTROLS_NAMESPACE Microsoft.UI.Private.Controls
#define MU_PRIVATE_MEDIA_NAMESPACE Microsoft.UI.Private.Media
#define MU_X_XTI_NAMESPACE Microsoft.UI.Xaml.XamlTypeInfo

namespace features
{
#ifdef MUX_PRERELEASE
    // In prerelease, the feature is disabled by default (giving it the [experimental] tag)
    feature_name Feature_Experimental = { DisabledByDefault, FALSE };
#else
    // In release, the experimental feature is disabled, removing it from the final WinMD
    feature_name Feature_Experimental = { AlwaysDisabled, FALSE };
#endif
}

namespace Microsoft.UI.Xaml.CustomAttributes
{
    [attributeusage(target_runtimeclass)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXHasCustomActivationFactoryAttribute
    {
    }

    [attributeusage(target_runtimeclass, target_enum, target_struct, target_interface, target_delegate, target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyNeedsDependencyPropertyFieldAttribute
    {
    }

    [attributeusage(target_runtimeclass, target_enum, target_struct, target_interface, target_delegate, target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyChangedCallbackAttribute
    {
        boolean enable;
    }

    [attributeusage(target_runtimeclass, target_enum, target_struct, target_interface, target_delegate, target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyChangedCallbackMethodNameAttribute
    {
        String value;
    }

    [attributeusage(target_runtimeclass, target_enum, target_struct, target_interface, target_delegate, target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyValidationCallbackAttribute
    {
        String value;
    }

    [attributeusage(target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyDefaultValueAttribute
    {
        String value;
    }

    [attributeusage(target_property, target_method)]
    [version(0x00000001)]
    [webhosthidden]
    attribute MUXPropertyTypeAttribute
    {
        String value;
    }
}

#include "DPCodeGenAttributes.idl"

namespace Microsoft.UI.Xaml
{
    [contractversion(2)]
    apicontract XamlContract
    {
    }
}

// These attributes are used to indicate the state of an API from a consumer's perspective:
// * Public (MUX_PUBLIC): Stable and ready to use, API will never change shape
// * Preview (MUX_PREVIEW): Ready for experimentation and feedback, API may change
// * Internal (MUX_INTERNAL): Only for internal testing purposes (like test hooks)
//
// Under the umbrella of Public we have versions as well. These versions are similar to
// what you find for the versions of an API in the Windows SDK. Once we've shipped a version
// of the library then the ABI (Application Binary Interface) of the things that were previously
// public can never change. This includes the low-level WinRT interfaces that you don't see while
// you're authoring or consuming the APIs but are under the covers. These interfaces are generated
// by MIDL and have UUIDs calculated based on the names and layout of members of the interface.
// This means that if we were to even add members to a MUX_PUBLIC class that has already shipped,
// then its interface UUID would change and help signal that as an ABI breaking change.
//
// To maintain ABI compatibility what we do is: once we've shipped a version of the library and
// go to add new members to a class that has already shipped as MUX_PUBLIC, the new members must
// be tagged with a higher version (e.g. MUX_PUBLIC_V2 for now and then MUX_PUBLIC_V3 after that, etc).
// For example:
//
//     [MUX_PUBLIC]
//     runtimeclass Example
//     {
//         int SomeProp;
//        
//         [MUX_PUBLIC_V2]
//         {
//             double SomethingAddedLater;
//         }
//
//         [MUX_PREVIEW]
//         string SomethingInPreview;
//     }
//
// New APIs that are being developed can still be MUX_PREVIEW (with no explicit version) for
// as long as we want.
//

#define MUX_PUBLIC contract(Microsoft.UI.Xaml.XamlContract, 1)

#define MUX_PUBLIC_V2 contract(Microsoft.UI.Xaml.XamlContract, 2)

// Note: It's expected that these are the same version because we require internal be in a different namespace,
// and we split out the public vs internal metadata by namespace as well as feature attributes.
#define MUX_PREVIEW contract(Microsoft.UI.Xaml.XamlContract, 1), feature(Feature_Experimental)
#define MUX_INTERNAL contract(Microsoft.UI.Xaml.XamlContract, 1), feature(Feature_Experimental)

namespace MU_X_XTI_NAMESPACE
{
    [MUX_PUBLIC]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlControlsXamlMetaDataProvider
    // IXMP needs to be implemented by a public type in our assembly, but it doesn't need to be
    // named anything special. Let's leverage the fact that we have this existing runtimeclass
    // so we don't pollute our namespace with unnecessary public types.
    : [default] Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        XamlControlsXamlMetaDataProvider();

        static void Initialize();
    }
}

namespace MU_XC_NAMESPACE
{
    [MUX_PUBLIC_V2]
    [webhosthidden]
    enum ControlsResourcesVersion
    {
        Version1 = 1,
        Version2 = 2,
    };

    // To be removed
    [MUX_PREVIEW]
    [webhosthidden]
    enum StylesVersion
    {
        Latest = 0,
        WinUI_2dot5 = 1,
    };

    [MUX_PUBLIC]
    [webhosthidden]
    [default_interface]
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
    runtimeclass XamlControlsResources : Windows.UI.Xaml.ResourceDictionary
    {
        XamlControlsResources();
        static void EnsureRevealLights(Windows.UI.Xaml.UIElement element);

        [MUX_PREVIEW]
        {
            [MUX_DEFAULT_VALUE("false")]
            Boolean UseCompactResources{ get; set; };

            static Windows.UI.Xaml.DependencyProperty UseCompactResourcesProperty{ get; };
        }

        [MUX_PUBLIC_V2]
        {
            [MUX_DEFAULT_VALUE("winrt::ControlsResourcesVersion::Version2")]
            ControlsResourcesVersion ControlsResourcesVersion{ get; set; };

            static Windows.UI.Xaml.DependencyProperty ControlsResourcesVersionProperty{ get; };
        }

        // To be removed
        [MUX_PREVIEW]
        {
            [MUX_DEFAULT_VALUE("winrt::StylesVersion::Latest")]
            StylesVersion Version{ get; set; };

            static Windows.UI.Xaml.DependencyProperty VersionProperty{ get; };
        }
    }
}
